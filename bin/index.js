"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve2, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve2.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length2(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer2, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer2[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer2, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer2[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer2[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer2[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf83 = exports2;
    utf83.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf83.read = function utf8_read(buffer2, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer2[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer2[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer2[start++] & 63) << 12 | (buffer2[start++] & 63) << 6 | buffer2[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer2[start++] & 63) << 6 | buffer2[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf83.write = function utf8_write(string, buffer2, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer2[offset++] = c1;
        } else if (c1 < 2048) {
          buffer2[offset++] = c1 >> 6 | 192;
          buffer2[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer2[offset++] = c1 >> 18 | 240;
          buffer2[offset++] = c1 >> 12 & 63 | 128;
          buffer2[offset++] = c1 >> 6 & 63 | 128;
          buffer2[offset++] = c1 & 63 | 128;
        } else {
          buffer2[offset++] = c1 >> 12 | 224;
          buffer2[offset++] = c1 >> 6 & 63 | 128;
          buffer2[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber2(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber2(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length2() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || false || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject3(value) {
      return value && typeof value === "object";
    };
    util.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet3(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = /* istanbul ignore next */
    util.global.dcodeIO && /* istanbul ignore next */
    util.global.dcodeIO.Long || /* istanbul ignore next */
    util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: CustomError,
          writable: true,
          enumerable: false,
          configurable: true
        },
        name: {
          get: function get() {
            return name;
          },
          set: void 0,
          enumerable: false,
          // configurable: false would accurately preserve the behavior of
          // the original, but I'm guessing that was not intentional.
          // For an actual error subclass, this property would
          // be configurable.
          configurable: true
        },
        toString: {
          value: function value() {
            return this.name + ": " + this.message;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf83 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf83.length(value);
      return len ? this.uint32(len)._push(utf83.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf83 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer2) {
      this.buf = buffer2;
      this.pos = 0;
      this.len = buffer2.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer2) {
      if (buffer2 instanceof Uint8Array || Array.isArray(buffer2))
        return new Reader(buffer2);
      throw Error("illegal buffer");
    } : function create_array2(buffer2) {
      if (Array.isArray(buffer2))
        return new Reader(buffer2);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer2) {
        return (Reader.create = function create_buffer(buffer3) {
          return util.Buffer.isBuffer(buffer3) ? new BufferReader(buffer3) : create_array(buffer3);
        })(buffer2);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
    util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length2 = this.uint32(), start = this.pos, end = this.pos + length2;
      if (end > this.len)
        throw indexOutOfRange(this, length2);
      this.pos += length2;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      if (start === end) {
        var nativeBuffer = util.Buffer;
        return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);
      }
      return this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf83.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length2) {
      if (typeof length2 === "number") {
        if (this.pos + length2 > this.len)
          throw indexOutOfRange(this, length2);
        this.pos += length2;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer2) {
      Reader.call(this, buffer2);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal();
  }
});

// src/index.ts.entry-point.ts
var index_ts_entry_point_exports = {};
__export(index_ts_entry_point_exports, {
  main: () => main,
  onStart: () => onStart,
  onUpdate: () => onUpdate,
  rendererTransport: () => rendererTransport
});
module.exports = __toCommonJS(index_ts_entry_point_exports);

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/animator.gen.js
var import_minimal = __toESM(require_minimal2());
function createBasePBAnimator() {
  return { states: [] };
}
var PBAnimator;
(function(PBAnimator2) {
  function encode(message, writer = import_minimal.default.Writer.create()) {
    for (const v of message.states) {
      PBAnimationState.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }
  PBAnimator2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAnimator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.states.push(PBAnimationState.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAnimator2.decode = decode;
})(PBAnimator || (PBAnimator = {}));
function createBasePBAnimationState() {
  return { clip: "", playing: void 0, weight: void 0, speed: void 0, loop: void 0, shouldReset: void 0 };
}
var PBAnimationState;
(function(PBAnimationState2) {
  function encode(message, writer = import_minimal.default.Writer.create()) {
    if (message.clip !== "") {
      writer.uint32(18).string(message.clip);
    }
    if (message.playing !== void 0) {
      writer.uint32(24).bool(message.playing);
    }
    if (message.weight !== void 0) {
      writer.uint32(37).float(message.weight);
    }
    if (message.speed !== void 0) {
      writer.uint32(45).float(message.speed);
    }
    if (message.loop !== void 0) {
      writer.uint32(48).bool(message.loop);
    }
    if (message.shouldReset !== void 0) {
      writer.uint32(56).bool(message.shouldReset);
    }
    return writer;
  }
  PBAnimationState2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAnimationState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.clip = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.playing = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.weight = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }
          message.speed = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.loop = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.shouldReset = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAnimationState2.decode = decode;
})(PBAnimationState || (PBAnimationState = {}));

// node_modules/@dcl/ecs/dist/components/generated/Animator.gen.js
var AnimatorSchema = {
  COMPONENT_ID: 1042,
  serialize(value, builder) {
    const writer = PBAnimator.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAnimator.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAnimator.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAnimator"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/audio_event.gen.js
var import_minimal2 = __toESM(require_minimal2());
function createBasePBAudioEvent() {
  return { state: 0, timestamp: 0 };
}
var PBAudioEvent;
(function(PBAudioEvent2) {
  function encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).uint32(message.timestamp);
    }
    return writer;
  }
  PBAudioEvent2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAudioEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.state = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAudioEvent2.decode = decode;
})(PBAudioEvent || (PBAudioEvent = {}));

// node_modules/@dcl/ecs/dist/components/generated/AudioEvent.gen.js
var AudioEventSchema = {
  COMPONENT_ID: 1105,
  serialize(value, builder) {
    const writer = PBAudioEvent.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAudioEvent.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAudioEvent.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAudioEvent"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/audio_source.gen.js
var import_minimal3 = __toESM(require_minimal2());
function createBasePBAudioSource() {
  return {
    playing: void 0,
    volume: void 0,
    loop: void 0,
    pitch: void 0,
    audioClipUrl: "",
    currentTime: void 0,
    global: void 0
  };
}
var PBAudioSource;
(function(PBAudioSource2) {
  function encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.playing !== void 0) {
      writer.uint32(8).bool(message.playing);
    }
    if (message.volume !== void 0) {
      writer.uint32(21).float(message.volume);
    }
    if (message.loop !== void 0) {
      writer.uint32(24).bool(message.loop);
    }
    if (message.pitch !== void 0) {
      writer.uint32(37).float(message.pitch);
    }
    if (message.audioClipUrl !== "") {
      writer.uint32(42).string(message.audioClipUrl);
    }
    if (message.currentTime !== void 0) {
      writer.uint32(53).float(message.currentTime);
    }
    if (message.global !== void 0) {
      writer.uint32(56).bool(message.global);
    }
    return writer;
  }
  PBAudioSource2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAudioSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.playing = reader.bool();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.volume = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.loop = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.pitch = reader.float();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.audioClipUrl = reader.string();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }
          message.currentTime = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.global = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAudioSource2.decode = decode;
})(PBAudioSource || (PBAudioSource = {}));

// node_modules/@dcl/ecs/dist/components/generated/AudioSource.gen.js
var AudioSourceSchema = {
  COMPONENT_ID: 1020,
  serialize(value, builder) {
    const writer = PBAudioSource.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAudioSource.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAudioSource.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAudioSource"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/audio_stream.gen.js
var import_minimal4 = __toESM(require_minimal2());
function createBasePBAudioStream() {
  return { playing: void 0, volume: void 0, url: "" };
}
var PBAudioStream;
(function(PBAudioStream2) {
  function encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.playing !== void 0) {
      writer.uint32(8).bool(message.playing);
    }
    if (message.volume !== void 0) {
      writer.uint32(21).float(message.volume);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    return writer;
  }
  PBAudioStream2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAudioStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.playing = reader.bool();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.volume = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAudioStream2.decode = decode;
})(PBAudioStream || (PBAudioStream = {}));

// node_modules/@dcl/ecs/dist/components/generated/AudioStream.gen.js
var AudioStreamSchema = {
  COMPONENT_ID: 1021,
  serialize(value, builder) {
    const writer = PBAudioStream.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAudioStream.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAudioStream.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAudioStream"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_attach.gen.js
var import_minimal5 = __toESM(require_minimal2());
var AvatarAnchorPointType;
(function(AvatarAnchorPointType2) {
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_POSITION"] = 0] = "AAPT_POSITION";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_NAME_TAG"] = 1] = "AAPT_NAME_TAG";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_HEAD"] = 4] = "AAPT_HEAD";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_NECK"] = 5] = "AAPT_NECK";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_SPINE"] = 6] = "AAPT_SPINE";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_SPINE1"] = 7] = "AAPT_SPINE1";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_SPINE2"] = 8] = "AAPT_SPINE2";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_HIP"] = 9] = "AAPT_HIP";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_SHOULDER"] = 10] = "AAPT_LEFT_SHOULDER";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_ARM"] = 11] = "AAPT_LEFT_ARM";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_FOREARM"] = 12] = "AAPT_LEFT_FOREARM";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_HAND"] = 2] = "AAPT_LEFT_HAND";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_HAND_INDEX"] = 13] = "AAPT_LEFT_HAND_INDEX";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_SHOULDER"] = 14] = "AAPT_RIGHT_SHOULDER";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_ARM"] = 15] = "AAPT_RIGHT_ARM";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_FOREARM"] = 16] = "AAPT_RIGHT_FOREARM";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_HAND"] = 3] = "AAPT_RIGHT_HAND";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_HAND_INDEX"] = 17] = "AAPT_RIGHT_HAND_INDEX";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_UP_LEG"] = 18] = "AAPT_LEFT_UP_LEG";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_LEG"] = 19] = "AAPT_LEFT_LEG";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_FOOT"] = 20] = "AAPT_LEFT_FOOT";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_LEFT_TOE_BASE"] = 21] = "AAPT_LEFT_TOE_BASE";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_UP_LEG"] = 22] = "AAPT_RIGHT_UP_LEG";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_LEG"] = 23] = "AAPT_RIGHT_LEG";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_FOOT"] = 24] = "AAPT_RIGHT_FOOT";
  AvatarAnchorPointType2[AvatarAnchorPointType2["AAPT_RIGHT_TOE_BASE"] = 25] = "AAPT_RIGHT_TOE_BASE";
})(AvatarAnchorPointType || (AvatarAnchorPointType = {}));
function createBasePBAvatarAttach() {
  return { avatarId: void 0, anchorPointId: 0 };
}
var PBAvatarAttach;
(function(PBAvatarAttach2) {
  function encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.avatarId !== void 0) {
      writer.uint32(10).string(message.avatarId);
    }
    if (message.anchorPointId !== 0) {
      writer.uint32(16).int32(message.anchorPointId);
    }
    return writer;
  }
  PBAvatarAttach2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAvatarAttach();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.avatarId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.anchorPointId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAvatarAttach2.decode = decode;
})(PBAvatarAttach || (PBAvatarAttach = {}));

// node_modules/@dcl/ecs/dist/components/generated/AvatarAttach.gen.js
var AvatarAttachSchema = {
  COMPONENT_ID: 1073,
  serialize(value, builder) {
    const writer = PBAvatarAttach.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAvatarAttach.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAvatarAttach.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAvatarAttach"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_base.gen.js
var import_minimal7 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/common/colors.gen.js
var import_minimal6 = __toESM(require_minimal2());
function createBaseColor3() {
  return { r: 0, g: 0, b: 0 };
}
var Color3;
(function(Color33) {
  function encode(message, writer = import_minimal6.default.Writer.create()) {
    if (message.r !== 0) {
      writer.uint32(13).float(message.r);
    }
    if (message.g !== 0) {
      writer.uint32(21).float(message.g);
    }
    if (message.b !== 0) {
      writer.uint32(29).float(message.b);
    }
    return writer;
  }
  Color33.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseColor3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.r = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.g = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.b = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Color33.decode = decode;
})(Color3 || (Color3 = {}));
function createBaseColor4() {
  return { r: 0, g: 0, b: 0, a: 0 };
}
var Color4;
(function(Color43) {
  function encode(message, writer = import_minimal6.default.Writer.create()) {
    if (message.r !== 0) {
      writer.uint32(13).float(message.r);
    }
    if (message.g !== 0) {
      writer.uint32(21).float(message.g);
    }
    if (message.b !== 0) {
      writer.uint32(29).float(message.b);
    }
    if (message.a !== 0) {
      writer.uint32(37).float(message.a);
    }
    return writer;
  }
  Color43.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseColor4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.r = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.g = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.b = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.a = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Color43.decode = decode;
})(Color4 || (Color4 = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_base.gen.js
function createBasePBAvatarBase() {
  return { skinColor: void 0, eyesColor: void 0, hairColor: void 0, bodyShapeUrn: "", name: "" };
}
var PBAvatarBase;
(function(PBAvatarBase2) {
  function encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.skinColor !== void 0) {
      Color3.encode(message.skinColor, writer.uint32(10).fork()).ldelim();
    }
    if (message.eyesColor !== void 0) {
      Color3.encode(message.eyesColor, writer.uint32(18).fork()).ldelim();
    }
    if (message.hairColor !== void 0) {
      Color3.encode(message.hairColor, writer.uint32(26).fork()).ldelim();
    }
    if (message.bodyShapeUrn !== "") {
      writer.uint32(34).string(message.bodyShapeUrn);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    return writer;
  }
  PBAvatarBase2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAvatarBase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.skinColor = Color3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.eyesColor = Color3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.hairColor = Color3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.bodyShapeUrn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAvatarBase2.decode = decode;
})(PBAvatarBase || (PBAvatarBase = {}));

// node_modules/@dcl/ecs/dist/components/generated/AvatarBase.gen.js
var AvatarBaseSchema = {
  COMPONENT_ID: 1087,
  serialize(value, builder) {
    const writer = PBAvatarBase.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAvatarBase.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAvatarBase.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAvatarBase"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_emote_command.gen.js
var import_minimal8 = __toESM(require_minimal2());
function createBasePBAvatarEmoteCommand() {
  return { emoteUrn: "", loop: false, timestamp: 0 };
}
var PBAvatarEmoteCommand;
(function(PBAvatarEmoteCommand2) {
  function encode(message, writer = import_minimal8.default.Writer.create()) {
    if (message.emoteUrn !== "") {
      writer.uint32(10).string(message.emoteUrn);
    }
    if (message.loop === true) {
      writer.uint32(16).bool(message.loop);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint32(message.timestamp);
    }
    return writer;
  }
  PBAvatarEmoteCommand2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAvatarEmoteCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.emoteUrn = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.loop = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAvatarEmoteCommand2.decode = decode;
})(PBAvatarEmoteCommand || (PBAvatarEmoteCommand = {}));

// node_modules/@dcl/ecs/dist/components/generated/AvatarEmoteCommand.gen.js
var AvatarEmoteCommandSchema = {
  COMPONENT_ID: 1088,
  serialize(value, builder) {
    const writer = PBAvatarEmoteCommand.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAvatarEmoteCommand.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAvatarEmoteCommand.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAvatarEmoteCommand"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_equipped_data.gen.js
var import_minimal9 = __toESM(require_minimal2());
function createBasePBAvatarEquippedData() {
  return { wearableUrns: [], emoteUrns: [] };
}
var PBAvatarEquippedData;
(function(PBAvatarEquippedData2) {
  function encode(message, writer = import_minimal9.default.Writer.create()) {
    for (const v of message.wearableUrns) {
      writer.uint32(10).string(v);
    }
    for (const v of message.emoteUrns) {
      writer.uint32(18).string(v);
    }
    return writer;
  }
  PBAvatarEquippedData2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAvatarEquippedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.wearableUrns.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.emoteUrns.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAvatarEquippedData2.decode = decode;
})(PBAvatarEquippedData || (PBAvatarEquippedData = {}));

// node_modules/@dcl/ecs/dist/components/generated/AvatarEquippedData.gen.js
var AvatarEquippedDataSchema = {
  COMPONENT_ID: 1091,
  serialize(value, builder) {
    const writer = PBAvatarEquippedData.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAvatarEquippedData.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAvatarEquippedData.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAvatarEquippedData"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_modifier_area.gen.js
var import_minimal11 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/common/vectors.gen.js
var import_minimal10 = __toESM(require_minimal2());
function createBasePosition() {
  return { x: 0, y: 0, z: 0 };
}
var Position;
(function(Position2) {
  function encode(message, writer = import_minimal10.default.Writer.create()) {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(29).float(message.z);
    }
    return writer;
  }
  Position2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal10.default.Reader ? input : import_minimal10.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.y = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.z = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Position2.decode = decode;
})(Position || (Position = {}));
function createBaseVector3() {
  return { x: 0, y: 0, z: 0 };
}
var Vector3;
(function(Vector33) {
  function encode(message, writer = import_minimal10.default.Writer.create()) {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(29).float(message.z);
    }
    return writer;
  }
  Vector33.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal10.default.Reader ? input : import_minimal10.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseVector3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.y = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.z = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Vector33.decode = decode;
})(Vector3 || (Vector3 = {}));
function createBaseVector2() {
  return { x: 0, y: 0 };
}
var Vector2;
(function(Vector23) {
  function encode(message, writer = import_minimal10.default.Writer.create()) {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  }
  Vector23.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal10.default.Reader ? input : import_minimal10.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseVector2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.y = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Vector23.decode = decode;
})(Vector2 || (Vector2 = {}));
function createBaseQuaternion() {
  return { x: 0, y: 0, z: 0, w: 0 };
}
var Quaternion;
(function(Quaternion3) {
  function encode(message, writer = import_minimal10.default.Writer.create()) {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(29).float(message.z);
    }
    if (message.w !== 0) {
      writer.uint32(37).float(message.w);
    }
    return writer;
  }
  Quaternion3.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal10.default.Reader ? input : import_minimal10.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseQuaternion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.y = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.z = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.w = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Quaternion3.decode = decode;
})(Quaternion || (Quaternion = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_modifier_area.gen.js
var AvatarModifierType;
(function(AvatarModifierType2) {
  AvatarModifierType2[AvatarModifierType2["AMT_HIDE_AVATARS"] = 0] = "AMT_HIDE_AVATARS";
  AvatarModifierType2[AvatarModifierType2["AMT_DISABLE_PASSPORTS"] = 1] = "AMT_DISABLE_PASSPORTS";
})(AvatarModifierType || (AvatarModifierType = {}));
function createBasePBAvatarModifierArea() {
  return { area: void 0, excludeIds: [], modifiers: [] };
}
var PBAvatarModifierArea;
(function(PBAvatarModifierArea2) {
  function encode(message, writer = import_minimal11.default.Writer.create()) {
    if (message.area !== void 0) {
      Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.excludeIds) {
      writer.uint32(18).string(v);
    }
    writer.uint32(26).fork();
    for (const v of message.modifiers) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  }
  PBAvatarModifierArea2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal11.default.Reader ? input : import_minimal11.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAvatarModifierArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.area = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.excludeIds.push(reader.string());
          continue;
        case 3:
          if (tag === 24) {
            message.modifiers.push(reader.int32());
            continue;
          }
          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.modifiers.push(reader.int32());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAvatarModifierArea2.decode = decode;
})(PBAvatarModifierArea || (PBAvatarModifierArea = {}));

// node_modules/@dcl/ecs/dist/components/generated/AvatarModifierArea.gen.js
var AvatarModifierAreaSchema = {
  COMPONENT_ID: 1070,
  serialize(value, builder) {
    const writer = PBAvatarModifierArea.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAvatarModifierArea.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAvatarModifierArea.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAvatarModifierArea"
  }
};

// node_modules/long/index.js
var wasm = null;
try {
  wasm = new WebAssembly.Instance(
    new WebAssembly.Module(
      new Uint8Array([
        // \0asm
        0,
        97,
        115,
        109,
        // version 1
        1,
        0,
        0,
        0,
        // section "type"
        1,
        13,
        2,
        // 0, () => i32
        96,
        0,
        1,
        127,
        // 1, (i32, i32, i32, i32) => i32
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        // section "function"
        3,
        7,
        6,
        // 0, type 0
        0,
        // 1, type 1
        1,
        // 2, type 1
        1,
        // 3, type 1
        1,
        // 4, type 1
        1,
        // 5, type 1
        1,
        // section "global"
        6,
        6,
        1,
        // 0, "high", mutable i32
        127,
        1,
        65,
        0,
        11,
        // section "export"
        7,
        50,
        6,
        // 0, "mul"
        3,
        109,
        117,
        108,
        0,
        1,
        // 1, "div_s"
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        // 2, "div_u"
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        // 3, "rem_s"
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        // 4, "rem_u"
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        // 5, "get_high"
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        // section "code"
        10,
        191,
        1,
        6,
        // 0, "get_high"
        4,
        0,
        35,
        0,
        11,
        // 1, "mul"
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        // 2, "div_s"
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        // 3, "div_u"
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        // 4, "rem_s"
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        // 5, "rem_u"
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
      ])
    ),
    {}
  ).exports;
} catch {
}
function Long(low, high, unsigned) {
  this.low = low | 0;
  this.high = high | 0;
  this.unsigned = !!unsigned;
}
Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", { value: true });
function isLong(obj) {
  return (obj && obj["__isLong__"]) === true;
}
function ctz32(value) {
  var c = Math.clz32(value & -value);
  return value ? 31 - c : c;
}
Long.isLong = isLong;
var INT_CACHE = {};
var UINT_CACHE = {};
function fromInt(value, unsigned) {
  var obj, cachedObj, cache;
  if (unsigned) {
    value >>>= 0;
    if (cache = 0 <= value && value < 256) {
      cachedObj = UINT_CACHE[value];
      if (cachedObj)
        return cachedObj;
    }
    obj = fromBits(value, 0, true);
    if (cache)
      UINT_CACHE[value] = obj;
    return obj;
  } else {
    value |= 0;
    if (cache = -128 <= value && value < 128) {
      cachedObj = INT_CACHE[value];
      if (cachedObj)
        return cachedObj;
    }
    obj = fromBits(value, value < 0 ? -1 : 0, false);
    if (cache)
      INT_CACHE[value] = obj;
    return obj;
  }
}
Long.fromInt = fromInt;
function fromNumber(value, unsigned) {
  if (isNaN(value))
    return unsigned ? UZERO : ZERO;
  if (unsigned) {
    if (value < 0)
      return UZERO;
    if (value >= TWO_PWR_64_DBL)
      return MAX_UNSIGNED_VALUE;
  } else {
    if (value <= -TWO_PWR_63_DBL)
      return MIN_VALUE;
    if (value + 1 >= TWO_PWR_63_DBL)
      return MAX_VALUE;
  }
  if (value < 0)
    return fromNumber(-value, unsigned).neg();
  return fromBits(
    value % TWO_PWR_32_DBL | 0,
    value / TWO_PWR_32_DBL | 0,
    unsigned
  );
}
Long.fromNumber = fromNumber;
function fromBits(lowBits, highBits, unsigned) {
  return new Long(lowBits, highBits, unsigned);
}
Long.fromBits = fromBits;
var pow_dbl = Math.pow;
function fromString(str, unsigned, radix) {
  if (str.length === 0)
    throw Error("empty string");
  if (typeof unsigned === "number") {
    radix = unsigned;
    unsigned = false;
  } else {
    unsigned = !!unsigned;
  }
  if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
    return unsigned ? UZERO : ZERO;
  radix = radix || 10;
  if (radix < 2 || 36 < radix)
    throw RangeError("radix");
  var p;
  if ((p = str.indexOf("-")) > 0)
    throw Error("interior hyphen");
  else if (p === 0) {
    return fromString(str.substring(1), unsigned, radix).neg();
  }
  var radixToPower = fromNumber(pow_dbl(radix, 8));
  var result = ZERO;
  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = fromNumber(pow_dbl(radix, size));
      result = result.mul(power).add(fromNumber(value));
    } else {
      result = result.mul(radixToPower);
      result = result.add(fromNumber(value));
    }
  }
  result.unsigned = unsigned;
  return result;
}
Long.fromString = fromString;
function fromValue(val, unsigned) {
  if (typeof val === "number")
    return fromNumber(val, unsigned);
  if (typeof val === "string")
    return fromString(val, unsigned);
  return fromBits(
    val.low,
    val.high,
    typeof unsigned === "boolean" ? unsigned : val.unsigned
  );
}
Long.fromValue = fromValue;
var TWO_PWR_16_DBL = 1 << 16;
var TWO_PWR_24_DBL = 1 << 24;
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
var ZERO = fromInt(0);
Long.ZERO = ZERO;
var UZERO = fromInt(0, true);
Long.UZERO = UZERO;
var ONE = fromInt(1);
Long.ONE = ONE;
var UONE = fromInt(1, true);
Long.UONE = UONE;
var NEG_ONE = fromInt(-1);
Long.NEG_ONE = NEG_ONE;
var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
Long.MAX_VALUE = MAX_VALUE;
var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
Long.MIN_VALUE = MIN_VALUE;
var LongPrototype = Long.prototype;
LongPrototype.toInt = function toInt() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
LongPrototype.toNumber = function toNumber() {
  if (this.unsigned)
    return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};
LongPrototype.toString = function toString(radix) {
  radix = radix || 10;
  if (radix < 2 || 36 < radix)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative()) {
    if (this.eq(MIN_VALUE)) {
      var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
      return div.toString(radix) + rem1.toInt().toString(radix);
    } else
      return "-" + this.neg().toString(radix);
  }
  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero())
      return digits + result;
    else {
      while (digits.length < 6)
        digits = "0" + digits;
      result = "" + digits + result;
    }
  }
};
LongPrototype.getHighBits = function getHighBits() {
  return this.high;
};
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
  return this.high >>> 0;
};
LongPrototype.getLowBits = function getLowBits() {
  return this.low;
};
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
  return this.low >>> 0;
};
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
  if (this.isNegative())
    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
  var val = this.high != 0 ? this.high : this.low;
  for (var bit = 31; bit > 0; bit--)
    if ((val & 1 << bit) != 0)
      break;
  return this.high != 0 ? bit + 33 : bit + 1;
};
LongPrototype.isSafeInteger = function isSafeInteger() {
  var top11Bits = this.high >> 21;
  if (!top11Bits)
    return true;
  if (this.unsigned)
    return false;
  return top11Bits === -1 && !(this.low === 0 && this.high === -2097152);
};
LongPrototype.isZero = function isZero() {
  return this.high === 0 && this.low === 0;
};
LongPrototype.eqz = LongPrototype.isZero;
LongPrototype.isNegative = function isNegative() {
  return !this.unsigned && this.high < 0;
};
LongPrototype.isPositive = function isPositive() {
  return this.unsigned || this.high >= 0;
};
LongPrototype.isOdd = function isOdd() {
  return (this.low & 1) === 1;
};
LongPrototype.isEven = function isEven() {
  return (this.low & 1) === 0;
};
LongPrototype.equals = function equals(other) {
  if (!isLong(other))
    other = fromValue(other);
  if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
    return false;
  return this.high === other.high && this.low === other.low;
};
LongPrototype.eq = LongPrototype.equals;
LongPrototype.notEquals = function notEquals(other) {
  return !this.eq(
    /* validates */
    other
  );
};
LongPrototype.neq = LongPrototype.notEquals;
LongPrototype.ne = LongPrototype.notEquals;
LongPrototype.lessThan = function lessThan(other) {
  return this.comp(
    /* validates */
    other
  ) < 0;
};
LongPrototype.lt = LongPrototype.lessThan;
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
  return this.comp(
    /* validates */
    other
  ) <= 0;
};
LongPrototype.lte = LongPrototype.lessThanOrEqual;
LongPrototype.le = LongPrototype.lessThanOrEqual;
LongPrototype.greaterThan = function greaterThan(other) {
  return this.comp(
    /* validates */
    other
  ) > 0;
};
LongPrototype.gt = LongPrototype.greaterThan;
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
  return this.comp(
    /* validates */
    other
  ) >= 0;
};
LongPrototype.gte = LongPrototype.greaterThanOrEqual;
LongPrototype.ge = LongPrototype.greaterThanOrEqual;
LongPrototype.compare = function compare(other) {
  if (!isLong(other))
    other = fromValue(other);
  if (this.eq(other))
    return 0;
  var thisNeg = this.isNegative(), otherNeg = other.isNegative();
  if (thisNeg && !otherNeg)
    return -1;
  if (!thisNeg && otherNeg)
    return 1;
  if (!this.unsigned)
    return this.sub(other).isNegative() ? -1 : 1;
  return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
};
LongPrototype.comp = LongPrototype.compare;
LongPrototype.negate = function negate() {
  if (!this.unsigned && this.eq(MIN_VALUE))
    return MIN_VALUE;
  return this.not().add(ONE);
};
LongPrototype.neg = LongPrototype.negate;
LongPrototype.add = function add(addend) {
  if (!isLong(addend))
    addend = fromValue(addend);
  var a48 = this.high >>> 16;
  var a32 = this.high & 65535;
  var a16 = this.low >>> 16;
  var a00 = this.low & 65535;
  var b48 = addend.high >>> 16;
  var b32 = addend.high & 65535;
  var b16 = addend.low >>> 16;
  var b00 = addend.low & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
LongPrototype.subtract = function subtract(subtrahend) {
  if (!isLong(subtrahend))
    subtrahend = fromValue(subtrahend);
  return this.add(subtrahend.neg());
};
LongPrototype.sub = LongPrototype.subtract;
LongPrototype.multiply = function multiply(multiplier) {
  if (this.isZero())
    return this;
  if (!isLong(multiplier))
    multiplier = fromValue(multiplier);
  if (wasm) {
    var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }
  if (multiplier.isZero())
    return this.unsigned ? UZERO : ZERO;
  if (this.eq(MIN_VALUE))
    return multiplier.isOdd() ? MIN_VALUE : ZERO;
  if (multiplier.eq(MIN_VALUE))
    return this.isOdd() ? MIN_VALUE : ZERO;
  if (this.isNegative()) {
    if (multiplier.isNegative())
      return this.neg().mul(multiplier.neg());
    else
      return this.neg().mul(multiplier).neg();
  } else if (multiplier.isNegative())
    return this.mul(multiplier.neg()).neg();
  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
  var a48 = this.high >>> 16;
  var a32 = this.high & 65535;
  var a16 = this.low >>> 16;
  var a00 = this.low & 65535;
  var b48 = multiplier.high >>> 16;
  var b32 = multiplier.high & 65535;
  var b16 = multiplier.low >>> 16;
  var b00 = multiplier.low & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
LongPrototype.mul = LongPrototype.multiply;
LongPrototype.divide = function divide(divisor) {
  if (!isLong(divisor))
    divisor = fromValue(divisor);
  if (divisor.isZero())
    throw Error("division by zero");
  if (wasm) {
    if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
      return this;
    }
    var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(
      this.low,
      this.high,
      divisor.low,
      divisor.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? UZERO : ZERO;
  var approx, rem, res;
  if (!this.unsigned) {
    if (this.eq(MIN_VALUE)) {
      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
        return MIN_VALUE;
      else if (divisor.eq(MIN_VALUE))
        return ONE;
      else {
        var halfThis = this.shr(1);
        approx = halfThis.div(divisor).shl(1);
        if (approx.eq(ZERO)) {
          return divisor.isNegative() ? ONE : NEG_ONE;
        } else {
          rem = this.sub(divisor.mul(approx));
          res = approx.add(rem.div(divisor));
          return res;
        }
      }
    } else if (divisor.eq(MIN_VALUE))
      return this.unsigned ? UZERO : ZERO;
    if (this.isNegative()) {
      if (divisor.isNegative())
        return this.neg().div(divisor.neg());
      return this.neg().div(divisor).neg();
    } else if (divisor.isNegative())
      return this.div(divisor.neg()).neg();
    res = ZERO;
  } else {
    if (!divisor.unsigned)
      divisor = divisor.toUnsigned();
    if (divisor.gt(this))
      return UZERO;
    if (divisor.gt(this.shru(1)))
      return UONE;
    res = UZERO;
  }
  rem = this;
  while (rem.gte(divisor)) {
    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
    while (approxRem.isNegative() || approxRem.gt(rem)) {
      approx -= delta;
      approxRes = fromNumber(approx, this.unsigned);
      approxRem = approxRes.mul(divisor);
    }
    if (approxRes.isZero())
      approxRes = ONE;
    res = res.add(approxRes);
    rem = rem.sub(approxRem);
  }
  return res;
};
LongPrototype.div = LongPrototype.divide;
LongPrototype.modulo = function modulo(divisor) {
  if (!isLong(divisor))
    divisor = fromValue(divisor);
  if (wasm) {
    var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(
      this.low,
      this.high,
      divisor.low,
      divisor.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }
  return this.sub(this.div(divisor).mul(divisor));
};
LongPrototype.mod = LongPrototype.modulo;
LongPrototype.rem = LongPrototype.modulo;
LongPrototype.not = function not() {
  return fromBits(~this.low, ~this.high, this.unsigned);
};
LongPrototype.countLeadingZeros = function countLeadingZeros() {
  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
};
LongPrototype.clz = LongPrototype.countLeadingZeros;
LongPrototype.countTrailingZeros = function countTrailingZeros() {
  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
};
LongPrototype.ctz = LongPrototype.countTrailingZeros;
LongPrototype.and = function and(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};
LongPrototype.or = function or(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};
LongPrototype.xor = function xor(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};
LongPrototype.shiftLeft = function shiftLeft(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  else if (numBits < 32)
    return fromBits(
      this.low << numBits,
      this.high << numBits | this.low >>> 32 - numBits,
      this.unsigned
    );
  else
    return fromBits(0, this.low << numBits - 32, this.unsigned);
};
LongPrototype.shl = LongPrototype.shiftLeft;
LongPrototype.shiftRight = function shiftRight(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  else if (numBits < 32)
    return fromBits(
      this.low >>> numBits | this.high << 32 - numBits,
      this.high >> numBits,
      this.unsigned
    );
  else
    return fromBits(
      this.high >> numBits - 32,
      this.high >= 0 ? 0 : -1,
      this.unsigned
    );
};
LongPrototype.shr = LongPrototype.shiftRight;
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  if (numBits < 32)
    return fromBits(
      this.low >>> numBits | this.high << 32 - numBits,
      this.high >>> numBits,
      this.unsigned
    );
  if (numBits === 32)
    return fromBits(this.high, 0, this.unsigned);
  return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
};
LongPrototype.shru = LongPrototype.shiftRightUnsigned;
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
LongPrototype.rotateLeft = function rotateLeft(numBits) {
  var b;
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  if (numBits === 32)
    return fromBits(this.high, this.low, this.unsigned);
  if (numBits < 32) {
    b = 32 - numBits;
    return fromBits(
      this.low << numBits | this.high >>> b,
      this.high << numBits | this.low >>> b,
      this.unsigned
    );
  }
  numBits -= 32;
  b = 32 - numBits;
  return fromBits(
    this.high << numBits | this.low >>> b,
    this.low << numBits | this.high >>> b,
    this.unsigned
  );
};
LongPrototype.rotl = LongPrototype.rotateLeft;
LongPrototype.rotateRight = function rotateRight(numBits) {
  var b;
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  if (numBits === 32)
    return fromBits(this.high, this.low, this.unsigned);
  if (numBits < 32) {
    b = 32 - numBits;
    return fromBits(
      this.high << b | this.low >>> numBits,
      this.low << b | this.high >>> numBits,
      this.unsigned
    );
  }
  numBits -= 32;
  b = 32 - numBits;
  return fromBits(
    this.low << b | this.high >>> numBits,
    this.high << b | this.low >>> numBits,
    this.unsigned
  );
};
LongPrototype.rotr = LongPrototype.rotateRight;
LongPrototype.toSigned = function toSigned() {
  if (!this.unsigned)
    return this;
  return fromBits(this.low, this.high, false);
};
LongPrototype.toUnsigned = function toUnsigned() {
  if (this.unsigned)
    return this;
  return fromBits(this.low, this.high, true);
};
LongPrototype.toBytes = function toBytes(le) {
  return le ? this.toBytesLE() : this.toBytesBE();
};
LongPrototype.toBytesLE = function toBytesLE() {
  var hi = this.high, lo = this.low;
  return [
    lo & 255,
    lo >>> 8 & 255,
    lo >>> 16 & 255,
    lo >>> 24,
    hi & 255,
    hi >>> 8 & 255,
    hi >>> 16 & 255,
    hi >>> 24
  ];
};
LongPrototype.toBytesBE = function toBytesBE() {
  var hi = this.high, lo = this.low;
  return [
    hi >>> 24,
    hi >>> 16 & 255,
    hi >>> 8 & 255,
    hi & 255,
    lo >>> 24,
    lo >>> 16 & 255,
    lo >>> 8 & 255,
    lo & 255
  ];
};
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
  return new Long(
    bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24,
    bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24,
    unsigned
  );
};
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
  return new Long(
    bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7],
    bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3],
    unsigned
  );
};
if (typeof BigInt === "function") {
  Long.fromBigInt = function fromBigInt(value, unsigned) {
    var lowBits = Number(BigInt.asIntN(32, value));
    var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));
    return fromBits(lowBits, highBits, unsigned);
  };
  Long.fromValue = function fromValueWithBigInt(value, unsigned) {
    if (typeof value === "bigint")
      return Long.fromBigInt(value, unsigned);
    return fromValue(value, unsigned);
  };
  LongPrototype.toBigInt = function toBigInt() {
    var lowBigInt = BigInt(this.low >>> 0);
    var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);
    return highBigInt << BigInt(32) | lowBigInt;
  };
}
var long_default = Long;

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/avatar_shape.gen.js
var import_minimal12 = __toESM(require_minimal2());
function createBasePBAvatarShape() {
  return {
    id: "",
    name: void 0,
    bodyShape: void 0,
    skinColor: void 0,
    hairColor: void 0,
    eyeColor: void 0,
    expressionTriggerId: void 0,
    expressionTriggerTimestamp: void 0,
    talking: void 0,
    wearables: [],
    emotes: []
  };
}
var PBAvatarShape;
(function(PBAvatarShape2) {
  function encode(message, writer = import_minimal12.default.Writer.create()) {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== void 0) {
      writer.uint32(18).string(message.name);
    }
    if (message.bodyShape !== void 0) {
      writer.uint32(26).string(message.bodyShape);
    }
    if (message.skinColor !== void 0) {
      Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();
    }
    if (message.hairColor !== void 0) {
      Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();
    }
    if (message.eyeColor !== void 0) {
      Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();
    }
    if (message.expressionTriggerId !== void 0) {
      writer.uint32(58).string(message.expressionTriggerId);
    }
    if (message.expressionTriggerTimestamp !== void 0) {
      writer.uint32(64).int64(message.expressionTriggerTimestamp);
    }
    if (message.talking !== void 0) {
      writer.uint32(72).bool(message.talking);
    }
    for (const v of message.wearables) {
      writer.uint32(82).string(v);
    }
    for (const v of message.emotes) {
      writer.uint32(90).string(v);
    }
    return writer;
  }
  PBAvatarShape2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal12.default.Reader ? input : import_minimal12.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBAvatarShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.bodyShape = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.skinColor = Color3.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.hairColor = Color3.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.eyeColor = Color3.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.expressionTriggerId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.expressionTriggerTimestamp = longToNumber(reader.int64());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.talking = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.wearables.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.emotes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBAvatarShape2.decode = decode;
})(PBAvatarShape || (PBAvatarShape = {}));
var tsProtoGlobalThis = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (false) {
    return void 0;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function longToNumber(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal12.default.util.Long !== long_default) {
  import_minimal12.default.util.Long = long_default;
  import_minimal12.default.configure();
}

// node_modules/@dcl/ecs/dist/components/generated/AvatarShape.gen.js
var AvatarShapeSchema = {
  COMPONENT_ID: 1080,
  serialize(value, builder) {
    const writer = PBAvatarShape.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBAvatarShape.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBAvatarShape.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBAvatarShape"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/billboard.gen.js
var import_minimal13 = __toESM(require_minimal2());
var BillboardMode;
(function(BillboardMode2) {
  BillboardMode2[BillboardMode2["BM_NONE"] = 0] = "BM_NONE";
  BillboardMode2[BillboardMode2["BM_X"] = 1] = "BM_X";
  BillboardMode2[BillboardMode2["BM_Y"] = 2] = "BM_Y";
  BillboardMode2[BillboardMode2["BM_Z"] = 4] = "BM_Z";
  BillboardMode2[BillboardMode2["BM_ALL"] = 7] = "BM_ALL";
})(BillboardMode || (BillboardMode = {}));
function createBasePBBillboard() {
  return { billboardMode: void 0 };
}
var PBBillboard;
(function(PBBillboard2) {
  function encode(message, writer = import_minimal13.default.Writer.create()) {
    if (message.billboardMode !== void 0) {
      writer.uint32(8).int32(message.billboardMode);
    }
    return writer;
  }
  PBBillboard2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal13.default.Reader ? input : import_minimal13.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBBillboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.billboardMode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBBillboard2.decode = decode;
})(PBBillboard || (PBBillboard = {}));

// node_modules/@dcl/ecs/dist/components/generated/Billboard.gen.js
var BillboardSchema = {
  COMPONENT_ID: 1090,
  serialize(value, builder) {
    const writer = PBBillboard.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBBillboard.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBBillboard.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBBillboard"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode.gen.js
var import_minimal14 = __toESM(require_minimal2());
function createBasePBCameraMode() {
  return { mode: 0 };
}
var PBCameraMode;
(function(PBCameraMode2) {
  function encode(message, writer = import_minimal14.default.Writer.create()) {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    return writer;
  }
  PBCameraMode2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal14.default.Reader ? input : import_minimal14.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBCameraMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.mode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBCameraMode2.decode = decode;
})(PBCameraMode || (PBCameraMode = {}));

// node_modules/@dcl/ecs/dist/components/generated/CameraMode.gen.js
var CameraModeSchema = {
  COMPONENT_ID: 1072,
  serialize(value, builder) {
    const writer = PBCameraMode.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBCameraMode.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBCameraMode.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBCameraMode"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/camera_mode_area.gen.js
var import_minimal15 = __toESM(require_minimal2());
function createBasePBCameraModeArea() {
  return { area: void 0, mode: 0 };
}
var PBCameraModeArea;
(function(PBCameraModeArea2) {
  function encode(message, writer = import_minimal15.default.Writer.create()) {
    if (message.area !== void 0) {
      Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();
    }
    if (message.mode !== 0) {
      writer.uint32(16).int32(message.mode);
    }
    return writer;
  }
  PBCameraModeArea2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal15.default.Reader ? input : import_minimal15.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBCameraModeArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.area = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.mode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBCameraModeArea2.decode = decode;
})(PBCameraModeArea || (PBCameraModeArea = {}));

// node_modules/@dcl/ecs/dist/components/generated/CameraModeArea.gen.js
var CameraModeAreaSchema = {
  COMPONENT_ID: 1071,
  serialize(value, builder) {
    const writer = PBCameraModeArea.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBCameraModeArea.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBCameraModeArea.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBCameraModeArea"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/engine_info.gen.js
var import_minimal16 = __toESM(require_minimal2());
function createBasePBEngineInfo() {
  return { frameNumber: 0, totalRuntime: 0, tickNumber: 0 };
}
var PBEngineInfo;
(function(PBEngineInfo2) {
  function encode(message, writer = import_minimal16.default.Writer.create()) {
    if (message.frameNumber !== 0) {
      writer.uint32(8).uint32(message.frameNumber);
    }
    if (message.totalRuntime !== 0) {
      writer.uint32(21).float(message.totalRuntime);
    }
    if (message.tickNumber !== 0) {
      writer.uint32(24).uint32(message.tickNumber);
    }
    return writer;
  }
  PBEngineInfo2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal16.default.Reader ? input : import_minimal16.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBEngineInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.frameNumber = reader.uint32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.totalRuntime = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.tickNumber = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBEngineInfo2.decode = decode;
})(PBEngineInfo || (PBEngineInfo = {}));

// node_modules/@dcl/ecs/dist/components/generated/EngineInfo.gen.js
var EngineInfoSchema = {
  COMPONENT_ID: 1048,
  serialize(value, builder) {
    const writer = PBEngineInfo.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBEngineInfo.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBEngineInfo.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBEngineInfo"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/gltf_container.gen.js
var import_minimal17 = __toESM(require_minimal2());
function createBasePBGltfContainer() {
  return { src: "", visibleMeshesCollisionMask: void 0, invisibleMeshesCollisionMask: void 0 };
}
var PBGltfContainer;
(function(PBGltfContainer2) {
  function encode(message, writer = import_minimal17.default.Writer.create()) {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.visibleMeshesCollisionMask !== void 0) {
      writer.uint32(32).uint32(message.visibleMeshesCollisionMask);
    }
    if (message.invisibleMeshesCollisionMask !== void 0) {
      writer.uint32(40).uint32(message.invisibleMeshesCollisionMask);
    }
    return writer;
  }
  PBGltfContainer2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal17.default.Reader ? input : import_minimal17.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBGltfContainer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.src = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.visibleMeshesCollisionMask = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.invisibleMeshesCollisionMask = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBGltfContainer2.decode = decode;
})(PBGltfContainer || (PBGltfContainer = {}));

// node_modules/@dcl/ecs/dist/components/generated/GltfContainer.gen.js
var GltfContainerSchema = {
  COMPONENT_ID: 1041,
  serialize(value, builder) {
    const writer = PBGltfContainer.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBGltfContainer.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBGltfContainer.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBGltfContainer"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/gltf_container_loading_state.gen.js
var import_minimal18 = __toESM(require_minimal2());
function createBasePBGltfContainerLoadingState() {
  return { currentState: 0 };
}
var PBGltfContainerLoadingState;
(function(PBGltfContainerLoadingState2) {
  function encode(message, writer = import_minimal18.default.Writer.create()) {
    if (message.currentState !== 0) {
      writer.uint32(8).int32(message.currentState);
    }
    return writer;
  }
  PBGltfContainerLoadingState2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal18.default.Reader ? input : import_minimal18.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBGltfContainerLoadingState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.currentState = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBGltfContainerLoadingState2.decode = decode;
})(PBGltfContainerLoadingState || (PBGltfContainerLoadingState = {}));

// node_modules/@dcl/ecs/dist/components/generated/GltfContainerLoadingState.gen.js
var GltfContainerLoadingStateSchema = {
  COMPONENT_ID: 1049,
  serialize(value, builder) {
    const writer = PBGltfContainerLoadingState.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBGltfContainerLoadingState.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBGltfContainerLoadingState.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBGltfContainerLoadingState"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/input_modifier.gen.js
var import_minimal19 = __toESM(require_minimal2());
function createBasePBInputModifier() {
  return { mode: void 0 };
}
var PBInputModifier;
(function(PBInputModifier2) {
  function encode(message, writer = import_minimal19.default.Writer.create()) {
    switch (message.mode?.$case) {
      case "standard":
        PBInputModifier_StandardInput.encode(message.mode.standard, writer.uint32(10).fork()).ldelim();
        break;
    }
    return writer;
  }
  PBInputModifier2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal19.default.Reader ? input : import_minimal19.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBInputModifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mode = { $case: "standard", standard: PBInputModifier_StandardInput.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBInputModifier2.decode = decode;
})(PBInputModifier || (PBInputModifier = {}));
function createBasePBInputModifier_StandardInput() {
  return {
    disableAll: void 0,
    disableWalk: void 0,
    disableJog: void 0,
    disableRun: void 0,
    disableJump: void 0,
    disableEmote: void 0
  };
}
var PBInputModifier_StandardInput;
(function(PBInputModifier_StandardInput2) {
  function encode(message, writer = import_minimal19.default.Writer.create()) {
    if (message.disableAll !== void 0) {
      writer.uint32(8).bool(message.disableAll);
    }
    if (message.disableWalk !== void 0) {
      writer.uint32(16).bool(message.disableWalk);
    }
    if (message.disableJog !== void 0) {
      writer.uint32(24).bool(message.disableJog);
    }
    if (message.disableRun !== void 0) {
      writer.uint32(32).bool(message.disableRun);
    }
    if (message.disableJump !== void 0) {
      writer.uint32(40).bool(message.disableJump);
    }
    if (message.disableEmote !== void 0) {
      writer.uint32(48).bool(message.disableEmote);
    }
    return writer;
  }
  PBInputModifier_StandardInput2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal19.default.Reader ? input : import_minimal19.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBInputModifier_StandardInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.disableAll = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.disableWalk = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.disableJog = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.disableRun = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.disableJump = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.disableEmote = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBInputModifier_StandardInput2.decode = decode;
})(PBInputModifier_StandardInput || (PBInputModifier_StandardInput = {}));

// node_modules/@dcl/ecs/dist/components/generated/InputModifier.gen.js
var InputModifierSchema = {
  COMPONENT_ID: 1078,
  serialize(value, builder) {
    const writer = PBInputModifier.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBInputModifier.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBInputModifier.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBInputModifier"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/main_camera.gen.js
var import_minimal20 = __toESM(require_minimal2());
function createBasePBMainCamera() {
  return { virtualCameraEntity: void 0 };
}
var PBMainCamera;
(function(PBMainCamera2) {
  function encode(message, writer = import_minimal20.default.Writer.create()) {
    if (message.virtualCameraEntity !== void 0) {
      writer.uint32(8).uint32(message.virtualCameraEntity);
    }
    return writer;
  }
  PBMainCamera2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal20.default.Reader ? input : import_minimal20.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMainCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.virtualCameraEntity = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMainCamera2.decode = decode;
})(PBMainCamera || (PBMainCamera = {}));

// node_modules/@dcl/ecs/dist/components/generated/MainCamera.gen.js
var MainCameraSchema = {
  COMPONENT_ID: 1075,
  serialize(value, builder) {
    const writer = PBMainCamera.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBMainCamera.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBMainCamera.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBMainCamera"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.js
var import_minimal22 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/common/texture.gen.js
var import_minimal21 = __toESM(require_minimal2());
var TextureWrapMode;
(function(TextureWrapMode2) {
  TextureWrapMode2[TextureWrapMode2["TWM_REPEAT"] = 0] = "TWM_REPEAT";
  TextureWrapMode2[TextureWrapMode2["TWM_CLAMP"] = 1] = "TWM_CLAMP";
  TextureWrapMode2[TextureWrapMode2["TWM_MIRROR"] = 2] = "TWM_MIRROR";
})(TextureWrapMode || (TextureWrapMode = {}));
var TextureFilterMode;
(function(TextureFilterMode2) {
  TextureFilterMode2[TextureFilterMode2["TFM_POINT"] = 0] = "TFM_POINT";
  TextureFilterMode2[TextureFilterMode2["TFM_BILINEAR"] = 1] = "TFM_BILINEAR";
  TextureFilterMode2[TextureFilterMode2["TFM_TRILINEAR"] = 2] = "TFM_TRILINEAR";
})(TextureFilterMode || (TextureFilterMode = {}));
function createBaseTexture() {
  return { src: "", wrapMode: void 0, filterMode: void 0, offset: void 0, tiling: void 0 };
}
var Texture;
(function(Texture2) {
  function encode(message, writer = import_minimal21.default.Writer.create()) {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.wrapMode !== void 0) {
      writer.uint32(16).int32(message.wrapMode);
    }
    if (message.filterMode !== void 0) {
      writer.uint32(24).int32(message.filterMode);
    }
    if (message.offset !== void 0) {
      Vector2.encode(message.offset, writer.uint32(34).fork()).ldelim();
    }
    if (message.tiling !== void 0) {
      Vector2.encode(message.tiling, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  }
  Texture2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal21.default.Reader ? input : import_minimal21.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.src = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.wrapMode = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.filterMode = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.offset = Vector2.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.tiling = Vector2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Texture2.decode = decode;
})(Texture || (Texture = {}));
function createBaseAvatarTexture() {
  return { userId: "", wrapMode: void 0, filterMode: void 0 };
}
var AvatarTexture;
(function(AvatarTexture2) {
  function encode(message, writer = import_minimal21.default.Writer.create()) {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.wrapMode !== void 0) {
      writer.uint32(16).int32(message.wrapMode);
    }
    if (message.filterMode !== void 0) {
      writer.uint32(24).int32(message.filterMode);
    }
    return writer;
  }
  AvatarTexture2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal21.default.Reader ? input : import_minimal21.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseAvatarTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.wrapMode = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.filterMode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  AvatarTexture2.decode = decode;
})(AvatarTexture || (AvatarTexture = {}));
function createBaseVideoTexture() {
  return { videoPlayerEntity: 0, wrapMode: void 0, filterMode: void 0 };
}
var VideoTexture;
(function(VideoTexture2) {
  function encode(message, writer = import_minimal21.default.Writer.create()) {
    if (message.videoPlayerEntity !== 0) {
      writer.uint32(8).uint32(message.videoPlayerEntity);
    }
    if (message.wrapMode !== void 0) {
      writer.uint32(16).int32(message.wrapMode);
    }
    if (message.filterMode !== void 0) {
      writer.uint32(24).int32(message.filterMode);
    }
    return writer;
  }
  VideoTexture2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal21.default.Reader ? input : import_minimal21.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseVideoTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.videoPlayerEntity = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.wrapMode = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.filterMode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  VideoTexture2.decode = decode;
})(VideoTexture || (VideoTexture = {}));
function createBaseTextureUnion() {
  return { tex: void 0 };
}
var TextureUnion;
(function(TextureUnion2) {
  function encode(message, writer = import_minimal21.default.Writer.create()) {
    switch (message.tex?.$case) {
      case "texture":
        Texture.encode(message.tex.texture, writer.uint32(10).fork()).ldelim();
        break;
      case "avatarTexture":
        AvatarTexture.encode(message.tex.avatarTexture, writer.uint32(18).fork()).ldelim();
        break;
      case "videoTexture":
        VideoTexture.encode(message.tex.videoTexture, writer.uint32(26).fork()).ldelim();
        break;
    }
    return writer;
  }
  TextureUnion2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal21.default.Reader ? input : import_minimal21.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseTextureUnion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tex = { $case: "texture", texture: Texture.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tex = { $case: "avatarTexture", avatarTexture: AvatarTexture.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tex = { $case: "videoTexture", videoTexture: VideoTexture.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  TextureUnion2.decode = decode;
})(TextureUnion || (TextureUnion = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/material.gen.js
var MaterialTransparencyMode;
(function(MaterialTransparencyMode2) {
  MaterialTransparencyMode2[MaterialTransparencyMode2["MTM_OPAQUE"] = 0] = "MTM_OPAQUE";
  MaterialTransparencyMode2[MaterialTransparencyMode2["MTM_ALPHA_TEST"] = 1] = "MTM_ALPHA_TEST";
  MaterialTransparencyMode2[MaterialTransparencyMode2["MTM_ALPHA_BLEND"] = 2] = "MTM_ALPHA_BLEND";
  MaterialTransparencyMode2[MaterialTransparencyMode2["MTM_ALPHA_TEST_AND_ALPHA_BLEND"] = 3] = "MTM_ALPHA_TEST_AND_ALPHA_BLEND";
  MaterialTransparencyMode2[MaterialTransparencyMode2["MTM_AUTO"] = 4] = "MTM_AUTO";
})(MaterialTransparencyMode || (MaterialTransparencyMode = {}));
function createBasePBMaterial() {
  return { material: void 0 };
}
var PBMaterial;
(function(PBMaterial2) {
  function encode(message, writer = import_minimal22.default.Writer.create()) {
    switch (message.material?.$case) {
      case "unlit":
        PBMaterial_UnlitMaterial.encode(message.material.unlit, writer.uint32(10).fork()).ldelim();
        break;
      case "pbr":
        PBMaterial_PbrMaterial.encode(message.material.pbr, writer.uint32(18).fork()).ldelim();
        break;
    }
    return writer;
  }
  PBMaterial2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal22.default.Reader ? input : import_minimal22.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.material = { $case: "unlit", unlit: PBMaterial_UnlitMaterial.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.material = { $case: "pbr", pbr: PBMaterial_PbrMaterial.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMaterial2.decode = decode;
})(PBMaterial || (PBMaterial = {}));
function createBasePBMaterial_UnlitMaterial() {
  return {
    texture: void 0,
    alphaTest: void 0,
    castShadows: void 0,
    diffuseColor: void 0,
    alphaTexture: void 0
  };
}
var PBMaterial_UnlitMaterial;
(function(PBMaterial_UnlitMaterial2) {
  function encode(message, writer = import_minimal22.default.Writer.create()) {
    if (message.texture !== void 0) {
      TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();
    }
    if (message.alphaTest !== void 0) {
      writer.uint32(21).float(message.alphaTest);
    }
    if (message.castShadows !== void 0) {
      writer.uint32(24).bool(message.castShadows);
    }
    if (message.diffuseColor !== void 0) {
      Color4.encode(message.diffuseColor, writer.uint32(34).fork()).ldelim();
    }
    if (message.alphaTexture !== void 0) {
      TextureUnion.encode(message.alphaTexture, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  }
  PBMaterial_UnlitMaterial2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal22.default.Reader ? input : import_minimal22.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMaterial_UnlitMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.texture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.alphaTest = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.castShadows = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.diffuseColor = Color4.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.alphaTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMaterial_UnlitMaterial2.decode = decode;
})(PBMaterial_UnlitMaterial || (PBMaterial_UnlitMaterial = {}));
function createBasePBMaterial_PbrMaterial() {
  return {
    texture: void 0,
    alphaTest: void 0,
    castShadows: void 0,
    alphaTexture: void 0,
    emissiveTexture: void 0,
    bumpTexture: void 0,
    albedoColor: void 0,
    emissiveColor: void 0,
    reflectivityColor: void 0,
    transparencyMode: void 0,
    metallic: void 0,
    roughness: void 0,
    specularIntensity: void 0,
    emissiveIntensity: void 0,
    directIntensity: void 0
  };
}
var PBMaterial_PbrMaterial;
(function(PBMaterial_PbrMaterial2) {
  function encode(message, writer = import_minimal22.default.Writer.create()) {
    if (message.texture !== void 0) {
      TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();
    }
    if (message.alphaTest !== void 0) {
      writer.uint32(21).float(message.alphaTest);
    }
    if (message.castShadows !== void 0) {
      writer.uint32(24).bool(message.castShadows);
    }
    if (message.alphaTexture !== void 0) {
      TextureUnion.encode(message.alphaTexture, writer.uint32(34).fork()).ldelim();
    }
    if (message.emissiveTexture !== void 0) {
      TextureUnion.encode(message.emissiveTexture, writer.uint32(42).fork()).ldelim();
    }
    if (message.bumpTexture !== void 0) {
      TextureUnion.encode(message.bumpTexture, writer.uint32(50).fork()).ldelim();
    }
    if (message.albedoColor !== void 0) {
      Color4.encode(message.albedoColor, writer.uint32(58).fork()).ldelim();
    }
    if (message.emissiveColor !== void 0) {
      Color3.encode(message.emissiveColor, writer.uint32(66).fork()).ldelim();
    }
    if (message.reflectivityColor !== void 0) {
      Color3.encode(message.reflectivityColor, writer.uint32(74).fork()).ldelim();
    }
    if (message.transparencyMode !== void 0) {
      writer.uint32(80).int32(message.transparencyMode);
    }
    if (message.metallic !== void 0) {
      writer.uint32(93).float(message.metallic);
    }
    if (message.roughness !== void 0) {
      writer.uint32(101).float(message.roughness);
    }
    if (message.specularIntensity !== void 0) {
      writer.uint32(117).float(message.specularIntensity);
    }
    if (message.emissiveIntensity !== void 0) {
      writer.uint32(125).float(message.emissiveIntensity);
    }
    if (message.directIntensity !== void 0) {
      writer.uint32(133).float(message.directIntensity);
    }
    return writer;
  }
  PBMaterial_PbrMaterial2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal22.default.Reader ? input : import_minimal22.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMaterial_PbrMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.texture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.alphaTest = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.castShadows = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.alphaTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.emissiveTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.bumpTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.albedoColor = Color4.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.emissiveColor = Color3.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.reflectivityColor = Color3.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.transparencyMode = reader.int32();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }
          message.metallic = reader.float();
          continue;
        case 12:
          if (tag !== 101) {
            break;
          }
          message.roughness = reader.float();
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }
          message.specularIntensity = reader.float();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }
          message.emissiveIntensity = reader.float();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }
          message.directIntensity = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMaterial_PbrMaterial2.decode = decode;
})(PBMaterial_PbrMaterial || (PBMaterial_PbrMaterial = {}));

// node_modules/@dcl/ecs/dist/components/generated/Material.gen.js
var MaterialSchema = {
  COMPONENT_ID: 1017,
  serialize(value, builder) {
    const writer = PBMaterial.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBMaterial.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBMaterial.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBMaterial"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_collider.gen.js
var import_minimal23 = __toESM(require_minimal2());
var ColliderLayer;
(function(ColliderLayer2) {
  ColliderLayer2[ColliderLayer2["CL_NONE"] = 0] = "CL_NONE";
  ColliderLayer2[ColliderLayer2["CL_POINTER"] = 1] = "CL_POINTER";
  ColliderLayer2[ColliderLayer2["CL_PHYSICS"] = 2] = "CL_PHYSICS";
  ColliderLayer2[ColliderLayer2["CL_RESERVED1"] = 4] = "CL_RESERVED1";
  ColliderLayer2[ColliderLayer2["CL_RESERVED2"] = 8] = "CL_RESERVED2";
  ColliderLayer2[ColliderLayer2["CL_RESERVED3"] = 16] = "CL_RESERVED3";
  ColliderLayer2[ColliderLayer2["CL_RESERVED4"] = 32] = "CL_RESERVED4";
  ColliderLayer2[ColliderLayer2["CL_RESERVED5"] = 64] = "CL_RESERVED5";
  ColliderLayer2[ColliderLayer2["CL_RESERVED6"] = 128] = "CL_RESERVED6";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM1"] = 256] = "CL_CUSTOM1";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM2"] = 512] = "CL_CUSTOM2";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM3"] = 1024] = "CL_CUSTOM3";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM4"] = 2048] = "CL_CUSTOM4";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM5"] = 4096] = "CL_CUSTOM5";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM6"] = 8192] = "CL_CUSTOM6";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM7"] = 16384] = "CL_CUSTOM7";
  ColliderLayer2[ColliderLayer2["CL_CUSTOM8"] = 32768] = "CL_CUSTOM8";
})(ColliderLayer || (ColliderLayer = {}));
function createBasePBMeshCollider() {
  return { collisionMask: void 0, mesh: void 0 };
}
var PBMeshCollider;
(function(PBMeshCollider2) {
  function encode(message, writer = import_minimal23.default.Writer.create()) {
    if (message.collisionMask !== void 0) {
      writer.uint32(8).uint32(message.collisionMask);
    }
    switch (message.mesh?.$case) {
      case "box":
        PBMeshCollider_BoxMesh.encode(message.mesh.box, writer.uint32(18).fork()).ldelim();
        break;
      case "sphere":
        PBMeshCollider_SphereMesh.encode(message.mesh.sphere, writer.uint32(26).fork()).ldelim();
        break;
      case "cylinder":
        PBMeshCollider_CylinderMesh.encode(message.mesh.cylinder, writer.uint32(34).fork()).ldelim();
        break;
      case "plane":
        PBMeshCollider_PlaneMesh.encode(message.mesh.plane, writer.uint32(42).fork()).ldelim();
        break;
    }
    return writer;
  }
  PBMeshCollider2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal23.default.Reader ? input : import_minimal23.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshCollider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.collisionMask = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mesh = { $case: "box", box: PBMeshCollider_BoxMesh.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.mesh = { $case: "sphere", sphere: PBMeshCollider_SphereMesh.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.mesh = { $case: "cylinder", cylinder: PBMeshCollider_CylinderMesh.decode(reader, reader.uint32()) };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.mesh = { $case: "plane", plane: PBMeshCollider_PlaneMesh.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshCollider2.decode = decode;
})(PBMeshCollider || (PBMeshCollider = {}));
function createBasePBMeshCollider_BoxMesh() {
  return {};
}
var PBMeshCollider_BoxMesh;
(function(PBMeshCollider_BoxMesh2) {
  function encode(_, writer = import_minimal23.default.Writer.create()) {
    return writer;
  }
  PBMeshCollider_BoxMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal23.default.Reader ? input : import_minimal23.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshCollider_BoxMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshCollider_BoxMesh2.decode = decode;
})(PBMeshCollider_BoxMesh || (PBMeshCollider_BoxMesh = {}));
function createBasePBMeshCollider_CylinderMesh() {
  return { radiusTop: void 0, radiusBottom: void 0 };
}
var PBMeshCollider_CylinderMesh;
(function(PBMeshCollider_CylinderMesh2) {
  function encode(message, writer = import_minimal23.default.Writer.create()) {
    if (message.radiusTop !== void 0) {
      writer.uint32(13).float(message.radiusTop);
    }
    if (message.radiusBottom !== void 0) {
      writer.uint32(21).float(message.radiusBottom);
    }
    return writer;
  }
  PBMeshCollider_CylinderMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal23.default.Reader ? input : import_minimal23.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshCollider_CylinderMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.radiusTop = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.radiusBottom = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshCollider_CylinderMesh2.decode = decode;
})(PBMeshCollider_CylinderMesh || (PBMeshCollider_CylinderMesh = {}));
function createBasePBMeshCollider_PlaneMesh() {
  return {};
}
var PBMeshCollider_PlaneMesh;
(function(PBMeshCollider_PlaneMesh2) {
  function encode(_, writer = import_minimal23.default.Writer.create()) {
    return writer;
  }
  PBMeshCollider_PlaneMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal23.default.Reader ? input : import_minimal23.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshCollider_PlaneMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshCollider_PlaneMesh2.decode = decode;
})(PBMeshCollider_PlaneMesh || (PBMeshCollider_PlaneMesh = {}));
function createBasePBMeshCollider_SphereMesh() {
  return {};
}
var PBMeshCollider_SphereMesh;
(function(PBMeshCollider_SphereMesh2) {
  function encode(_, writer = import_minimal23.default.Writer.create()) {
    return writer;
  }
  PBMeshCollider_SphereMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal23.default.Reader ? input : import_minimal23.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshCollider_SphereMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshCollider_SphereMesh2.decode = decode;
})(PBMeshCollider_SphereMesh || (PBMeshCollider_SphereMesh = {}));

// node_modules/@dcl/ecs/dist/components/generated/MeshCollider.gen.js
var MeshColliderSchema = {
  COMPONENT_ID: 1019,
  serialize(value, builder) {
    const writer = PBMeshCollider.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBMeshCollider.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBMeshCollider.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBMeshCollider"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/mesh_renderer.gen.js
var import_minimal24 = __toESM(require_minimal2());
function createBasePBMeshRenderer() {
  return { mesh: void 0 };
}
var PBMeshRenderer;
(function(PBMeshRenderer2) {
  function encode(message, writer = import_minimal24.default.Writer.create()) {
    switch (message.mesh?.$case) {
      case "box":
        PBMeshRenderer_BoxMesh.encode(message.mesh.box, writer.uint32(10).fork()).ldelim();
        break;
      case "sphere":
        PBMeshRenderer_SphereMesh.encode(message.mesh.sphere, writer.uint32(18).fork()).ldelim();
        break;
      case "cylinder":
        PBMeshRenderer_CylinderMesh.encode(message.mesh.cylinder, writer.uint32(26).fork()).ldelim();
        break;
      case "plane":
        PBMeshRenderer_PlaneMesh.encode(message.mesh.plane, writer.uint32(34).fork()).ldelim();
        break;
    }
    return writer;
  }
  PBMeshRenderer2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal24.default.Reader ? input : import_minimal24.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshRenderer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mesh = { $case: "box", box: PBMeshRenderer_BoxMesh.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mesh = { $case: "sphere", sphere: PBMeshRenderer_SphereMesh.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.mesh = { $case: "cylinder", cylinder: PBMeshRenderer_CylinderMesh.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.mesh = { $case: "plane", plane: PBMeshRenderer_PlaneMesh.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshRenderer2.decode = decode;
})(PBMeshRenderer || (PBMeshRenderer = {}));
function createBasePBMeshRenderer_BoxMesh() {
  return { uvs: [] };
}
var PBMeshRenderer_BoxMesh;
(function(PBMeshRenderer_BoxMesh2) {
  function encode(message, writer = import_minimal24.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.uvs) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  }
  PBMeshRenderer_BoxMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal24.default.Reader ? input : import_minimal24.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshRenderer_BoxMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.uvs.push(reader.float());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uvs.push(reader.float());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshRenderer_BoxMesh2.decode = decode;
})(PBMeshRenderer_BoxMesh || (PBMeshRenderer_BoxMesh = {}));
function createBasePBMeshRenderer_CylinderMesh() {
  return { radiusTop: void 0, radiusBottom: void 0 };
}
var PBMeshRenderer_CylinderMesh;
(function(PBMeshRenderer_CylinderMesh2) {
  function encode(message, writer = import_minimal24.default.Writer.create()) {
    if (message.radiusTop !== void 0) {
      writer.uint32(13).float(message.radiusTop);
    }
    if (message.radiusBottom !== void 0) {
      writer.uint32(21).float(message.radiusBottom);
    }
    return writer;
  }
  PBMeshRenderer_CylinderMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal24.default.Reader ? input : import_minimal24.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshRenderer_CylinderMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.radiusTop = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.radiusBottom = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshRenderer_CylinderMesh2.decode = decode;
})(PBMeshRenderer_CylinderMesh || (PBMeshRenderer_CylinderMesh = {}));
function createBasePBMeshRenderer_PlaneMesh() {
  return { uvs: [] };
}
var PBMeshRenderer_PlaneMesh;
(function(PBMeshRenderer_PlaneMesh2) {
  function encode(message, writer = import_minimal24.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.uvs) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  }
  PBMeshRenderer_PlaneMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal24.default.Reader ? input : import_minimal24.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshRenderer_PlaneMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.uvs.push(reader.float());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uvs.push(reader.float());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshRenderer_PlaneMesh2.decode = decode;
})(PBMeshRenderer_PlaneMesh || (PBMeshRenderer_PlaneMesh = {}));
function createBasePBMeshRenderer_SphereMesh() {
  return {};
}
var PBMeshRenderer_SphereMesh;
(function(PBMeshRenderer_SphereMesh2) {
  function encode(_, writer = import_minimal24.default.Writer.create()) {
    return writer;
  }
  PBMeshRenderer_SphereMesh2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal24.default.Reader ? input : import_minimal24.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBMeshRenderer_SphereMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBMeshRenderer_SphereMesh2.decode = decode;
})(PBMeshRenderer_SphereMesh || (PBMeshRenderer_SphereMesh = {}));

// node_modules/@dcl/ecs/dist/components/generated/MeshRenderer.gen.js
var MeshRendererSchema = {
  COMPONENT_ID: 1018,
  serialize(value, builder) {
    const writer = PBMeshRenderer.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBMeshRenderer.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBMeshRenderer.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBMeshRenderer"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/nft_shape.gen.js
var import_minimal25 = __toESM(require_minimal2());
var NftFrameType;
(function(NftFrameType2) {
  NftFrameType2[NftFrameType2["NFT_CLASSIC"] = 0] = "NFT_CLASSIC";
  NftFrameType2[NftFrameType2["NFT_BAROQUE_ORNAMENT"] = 1] = "NFT_BAROQUE_ORNAMENT";
  NftFrameType2[NftFrameType2["NFT_DIAMOND_ORNAMENT"] = 2] = "NFT_DIAMOND_ORNAMENT";
  NftFrameType2[NftFrameType2["NFT_MINIMAL_WIDE"] = 3] = "NFT_MINIMAL_WIDE";
  NftFrameType2[NftFrameType2["NFT_MINIMAL_GREY"] = 4] = "NFT_MINIMAL_GREY";
  NftFrameType2[NftFrameType2["NFT_BLOCKY"] = 5] = "NFT_BLOCKY";
  NftFrameType2[NftFrameType2["NFT_GOLD_EDGES"] = 6] = "NFT_GOLD_EDGES";
  NftFrameType2[NftFrameType2["NFT_GOLD_CARVED"] = 7] = "NFT_GOLD_CARVED";
  NftFrameType2[NftFrameType2["NFT_GOLD_WIDE"] = 8] = "NFT_GOLD_WIDE";
  NftFrameType2[NftFrameType2["NFT_GOLD_ROUNDED"] = 9] = "NFT_GOLD_ROUNDED";
  NftFrameType2[NftFrameType2["NFT_METAL_MEDIUM"] = 10] = "NFT_METAL_MEDIUM";
  NftFrameType2[NftFrameType2["NFT_METAL_WIDE"] = 11] = "NFT_METAL_WIDE";
  NftFrameType2[NftFrameType2["NFT_METAL_SLIM"] = 12] = "NFT_METAL_SLIM";
  NftFrameType2[NftFrameType2["NFT_METAL_ROUNDED"] = 13] = "NFT_METAL_ROUNDED";
  NftFrameType2[NftFrameType2["NFT_PINS"] = 14] = "NFT_PINS";
  NftFrameType2[NftFrameType2["NFT_MINIMAL_BLACK"] = 15] = "NFT_MINIMAL_BLACK";
  NftFrameType2[NftFrameType2["NFT_MINIMAL_WHITE"] = 16] = "NFT_MINIMAL_WHITE";
  NftFrameType2[NftFrameType2["NFT_TAPE"] = 17] = "NFT_TAPE";
  NftFrameType2[NftFrameType2["NFT_WOOD_SLIM"] = 18] = "NFT_WOOD_SLIM";
  NftFrameType2[NftFrameType2["NFT_WOOD_WIDE"] = 19] = "NFT_WOOD_WIDE";
  NftFrameType2[NftFrameType2["NFT_WOOD_TWIGS"] = 20] = "NFT_WOOD_TWIGS";
  NftFrameType2[NftFrameType2["NFT_CANVAS"] = 21] = "NFT_CANVAS";
  NftFrameType2[NftFrameType2["NFT_NONE"] = 22] = "NFT_NONE";
})(NftFrameType || (NftFrameType = {}));
function createBasePBNftShape() {
  return { urn: "", style: void 0, color: void 0 };
}
var PBNftShape;
(function(PBNftShape2) {
  function encode(message, writer = import_minimal25.default.Writer.create()) {
    if (message.urn !== "") {
      writer.uint32(10).string(message.urn);
    }
    if (message.style !== void 0) {
      writer.uint32(16).int32(message.style);
    }
    if (message.color !== void 0) {
      Color3.encode(message.color, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  }
  PBNftShape2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal25.default.Reader ? input : import_minimal25.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBNftShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.urn = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.style = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.color = Color3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBNftShape2.decode = decode;
})(PBNftShape || (PBNftShape = {}));

// node_modules/@dcl/ecs/dist/components/generated/NftShape.gen.js
var NftShapeSchema = {
  COMPONENT_ID: 1040,
  serialize(value, builder) {
    const writer = PBNftShape.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBNftShape.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBNftShape.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBNftShape"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/player_identity_data.gen.js
var import_minimal26 = __toESM(require_minimal2());
function createBasePBPlayerIdentityData() {
  return { address: "", isGuest: false };
}
var PBPlayerIdentityData;
(function(PBPlayerIdentityData2) {
  function encode(message, writer = import_minimal26.default.Writer.create()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.isGuest === true) {
      writer.uint32(24).bool(message.isGuest);
    }
    return writer;
  }
  PBPlayerIdentityData2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal26.default.Reader ? input : import_minimal26.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBPlayerIdentityData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.isGuest = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBPlayerIdentityData2.decode = decode;
})(PBPlayerIdentityData || (PBPlayerIdentityData = {}));

// node_modules/@dcl/ecs/dist/components/generated/PlayerIdentityData.gen.js
var PlayerIdentityDataSchema = {
  COMPONENT_ID: 1089,
  serialize(value, builder) {
    const writer = PBPlayerIdentityData.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBPlayerIdentityData.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBPlayerIdentityData.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBPlayerIdentityData"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events.gen.js
var import_minimal27 = __toESM(require_minimal2());
function createBasePBPointerEvents() {
  return { pointerEvents: [] };
}
var PBPointerEvents;
(function(PBPointerEvents2) {
  function encode(message, writer = import_minimal27.default.Writer.create()) {
    for (const v of message.pointerEvents) {
      PBPointerEvents_Entry.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }
  PBPointerEvents2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal27.default.Reader ? input : import_minimal27.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBPointerEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pointerEvents.push(PBPointerEvents_Entry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBPointerEvents2.decode = decode;
})(PBPointerEvents || (PBPointerEvents = {}));
function createBasePBPointerEvents_Info() {
  return {
    button: void 0,
    hoverText: void 0,
    maxDistance: void 0,
    showFeedback: void 0,
    showHighlight: void 0
  };
}
var PBPointerEvents_Info;
(function(PBPointerEvents_Info2) {
  function encode(message, writer = import_minimal27.default.Writer.create()) {
    if (message.button !== void 0) {
      writer.uint32(8).int32(message.button);
    }
    if (message.hoverText !== void 0) {
      writer.uint32(18).string(message.hoverText);
    }
    if (message.maxDistance !== void 0) {
      writer.uint32(29).float(message.maxDistance);
    }
    if (message.showFeedback !== void 0) {
      writer.uint32(32).bool(message.showFeedback);
    }
    if (message.showHighlight !== void 0) {
      writer.uint32(40).bool(message.showHighlight);
    }
    return writer;
  }
  PBPointerEvents_Info2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal27.default.Reader ? input : import_minimal27.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBPointerEvents_Info();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.button = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.hoverText = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.maxDistance = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.showFeedback = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.showHighlight = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBPointerEvents_Info2.decode = decode;
})(PBPointerEvents_Info || (PBPointerEvents_Info = {}));
function createBasePBPointerEvents_Entry() {
  return { eventType: 0, eventInfo: void 0 };
}
var PBPointerEvents_Entry;
(function(PBPointerEvents_Entry2) {
  function encode(message, writer = import_minimal27.default.Writer.create()) {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.eventInfo !== void 0) {
      PBPointerEvents_Info.encode(message.eventInfo, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }
  PBPointerEvents_Entry2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal27.default.Reader ? input : import_minimal27.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBPointerEvents_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.eventInfo = PBPointerEvents_Info.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBPointerEvents_Entry2.decode = decode;
})(PBPointerEvents_Entry || (PBPointerEvents_Entry = {}));

// node_modules/@dcl/ecs/dist/components/generated/PointerEvents.gen.js
var PointerEventsSchema = {
  COMPONENT_ID: 1062,
  serialize(value, builder) {
    const writer = PBPointerEvents.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBPointerEvents.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBPointerEvents.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBPointerEvents"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.js
var import_minimal29 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/raycast_hit.gen.js
var import_minimal28 = __toESM(require_minimal2());
function createBaseRaycastHit() {
  return {
    position: void 0,
    globalOrigin: void 0,
    direction: void 0,
    normalHit: void 0,
    length: 0,
    meshName: void 0,
    entityId: void 0
  };
}
var RaycastHit;
(function(RaycastHit2) {
  function encode(message, writer = import_minimal28.default.Writer.create()) {
    if (message.position !== void 0) {
      Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();
    }
    if (message.globalOrigin !== void 0) {
      Vector3.encode(message.globalOrigin, writer.uint32(18).fork()).ldelim();
    }
    if (message.direction !== void 0) {
      Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();
    }
    if (message.normalHit !== void 0) {
      Vector3.encode(message.normalHit, writer.uint32(34).fork()).ldelim();
    }
    if (message.length !== 0) {
      writer.uint32(45).float(message.length);
    }
    if (message.meshName !== void 0) {
      writer.uint32(50).string(message.meshName);
    }
    if (message.entityId !== void 0) {
      writer.uint32(56).uint32(message.entityId);
    }
    return writer;
  }
  RaycastHit2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal28.default.Reader ? input : import_minimal28.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseRaycastHit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.position = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.globalOrigin = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.direction = Vector3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.normalHit = Vector3.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }
          message.length = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.meshName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.entityId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  RaycastHit2.decode = decode;
})(RaycastHit || (RaycastHit = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_events_result.gen.js
function createBasePBPointerEventsResult() {
  return { button: 0, hit: void 0, state: 0, timestamp: 0, analog: void 0, tickNumber: 0 };
}
var PBPointerEventsResult;
(function(PBPointerEventsResult2) {
  function encode(message, writer = import_minimal29.default.Writer.create()) {
    if (message.button !== 0) {
      writer.uint32(8).int32(message.button);
    }
    if (message.hit !== void 0) {
      RaycastHit.encode(message.hit, writer.uint32(18).fork()).ldelim();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.timestamp !== 0) {
      writer.uint32(40).uint32(message.timestamp);
    }
    if (message.analog !== void 0) {
      writer.uint32(53).float(message.analog);
    }
    if (message.tickNumber !== 0) {
      writer.uint32(56).uint32(message.tickNumber);
    }
    return writer;
  }
  PBPointerEventsResult2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal29.default.Reader ? input : import_minimal29.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBPointerEventsResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.button = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.hit = RaycastHit.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.state = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }
          message.analog = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.tickNumber = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBPointerEventsResult2.decode = decode;
})(PBPointerEventsResult || (PBPointerEventsResult = {}));

// node_modules/@dcl/ecs/dist/components/generated/PointerEventsResult.gen.js
var PointerEventsResultSchema = {
  COMPONENT_ID: 1063,
  serialize(value, builder) {
    const writer = PBPointerEventsResult.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBPointerEventsResult.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBPointerEventsResult.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBPointerEventsResult"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/pointer_lock.gen.js
var import_minimal30 = __toESM(require_minimal2());
function createBasePBPointerLock() {
  return { isPointerLocked: false };
}
var PBPointerLock;
(function(PBPointerLock2) {
  function encode(message, writer = import_minimal30.default.Writer.create()) {
    if (message.isPointerLocked === true) {
      writer.uint32(8).bool(message.isPointerLocked);
    }
    return writer;
  }
  PBPointerLock2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal30.default.Reader ? input : import_minimal30.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBPointerLock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.isPointerLocked = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBPointerLock2.decode = decode;
})(PBPointerLock || (PBPointerLock = {}));

// node_modules/@dcl/ecs/dist/components/generated/PointerLock.gen.js
var PointerLockSchema = {
  COMPONENT_ID: 1074,
  serialize(value, builder) {
    const writer = PBPointerLock.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBPointerLock.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBPointerLock.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBPointerLock"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/raycast.gen.js
var import_minimal31 = __toESM(require_minimal2());
var RaycastQueryType;
(function(RaycastQueryType2) {
  RaycastQueryType2[RaycastQueryType2["RQT_HIT_FIRST"] = 0] = "RQT_HIT_FIRST";
  RaycastQueryType2[RaycastQueryType2["RQT_QUERY_ALL"] = 1] = "RQT_QUERY_ALL";
  RaycastQueryType2[RaycastQueryType2["RQT_NONE"] = 2] = "RQT_NONE";
})(RaycastQueryType || (RaycastQueryType = {}));
function createBasePBRaycast() {
  return {
    timestamp: void 0,
    originOffset: void 0,
    direction: void 0,
    maxDistance: 0,
    queryType: 0,
    continuous: void 0,
    collisionMask: void 0
  };
}
var PBRaycast;
(function(PBRaycast2) {
  function encode(message, writer = import_minimal31.default.Writer.create()) {
    if (message.timestamp !== void 0) {
      writer.uint32(8).uint32(message.timestamp);
    }
    if (message.originOffset !== void 0) {
      Vector3.encode(message.originOffset, writer.uint32(18).fork()).ldelim();
    }
    switch (message.direction?.$case) {
      case "localDirection":
        Vector3.encode(message.direction.localDirection, writer.uint32(50).fork()).ldelim();
        break;
      case "globalDirection":
        Vector3.encode(message.direction.globalDirection, writer.uint32(26).fork()).ldelim();
        break;
      case "globalTarget":
        Vector3.encode(message.direction.globalTarget, writer.uint32(58).fork()).ldelim();
        break;
      case "targetEntity":
        writer.uint32(80).uint32(message.direction.targetEntity);
        break;
    }
    if (message.maxDistance !== 0) {
      writer.uint32(37).float(message.maxDistance);
    }
    if (message.queryType !== 0) {
      writer.uint32(40).int32(message.queryType);
    }
    if (message.continuous !== void 0) {
      writer.uint32(64).bool(message.continuous);
    }
    if (message.collisionMask !== void 0) {
      writer.uint32(72).uint32(message.collisionMask);
    }
    return writer;
  }
  PBRaycast2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal31.default.Reader ? input : import_minimal31.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBRaycast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.originOffset = Vector3.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.direction = { $case: "localDirection", localDirection: Vector3.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.direction = { $case: "globalDirection", globalDirection: Vector3.decode(reader, reader.uint32()) };
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.direction = { $case: "globalTarget", globalTarget: Vector3.decode(reader, reader.uint32()) };
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.direction = { $case: "targetEntity", targetEntity: reader.uint32() };
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.maxDistance = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.queryType = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.continuous = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.collisionMask = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBRaycast2.decode = decode;
})(PBRaycast || (PBRaycast = {}));

// node_modules/@dcl/ecs/dist/components/generated/Raycast.gen.js
var RaycastSchema = {
  COMPONENT_ID: 1067,
  serialize(value, builder) {
    const writer = PBRaycast.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBRaycast.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBRaycast.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBRaycast"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/raycast_result.gen.js
var import_minimal32 = __toESM(require_minimal2());
function createBasePBRaycastResult() {
  return { timestamp: void 0, globalOrigin: void 0, direction: void 0, hits: [], tickNumber: 0 };
}
var PBRaycastResult;
(function(PBRaycastResult2) {
  function encode(message, writer = import_minimal32.default.Writer.create()) {
    if (message.timestamp !== void 0) {
      writer.uint32(8).uint32(message.timestamp);
    }
    if (message.globalOrigin !== void 0) {
      Vector3.encode(message.globalOrigin, writer.uint32(18).fork()).ldelim();
    }
    if (message.direction !== void 0) {
      Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.hits) {
      RaycastHit.encode(v, writer.uint32(34).fork()).ldelim();
    }
    if (message.tickNumber !== 0) {
      writer.uint32(40).uint32(message.tickNumber);
    }
    return writer;
  }
  PBRaycastResult2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal32.default.Reader ? input : import_minimal32.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBRaycastResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.globalOrigin = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.direction = Vector3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hits.push(RaycastHit.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.tickNumber = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBRaycastResult2.decode = decode;
})(PBRaycastResult || (PBRaycastResult = {}));

// node_modules/@dcl/ecs/dist/components/generated/RaycastResult.gen.js
var RaycastResultSchema = {
  COMPONENT_ID: 1068,
  serialize(value, builder) {
    const writer = PBRaycastResult.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBRaycastResult.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBRaycastResult.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBRaycastResult"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/realm_info.gen.js
var import_minimal33 = __toESM(require_minimal2());
function createBasePBRealmInfo() {
  return {
    baseUrl: "",
    realmName: "",
    networkId: 0,
    commsAdapter: "",
    isPreview: false,
    room: void 0,
    isConnectedSceneRoom: void 0
  };
}
var PBRealmInfo;
(function(PBRealmInfo2) {
  function encode(message, writer = import_minimal33.default.Writer.create()) {
    if (message.baseUrl !== "") {
      writer.uint32(10).string(message.baseUrl);
    }
    if (message.realmName !== "") {
      writer.uint32(18).string(message.realmName);
    }
    if (message.networkId !== 0) {
      writer.uint32(24).int32(message.networkId);
    }
    if (message.commsAdapter !== "") {
      writer.uint32(34).string(message.commsAdapter);
    }
    if (message.isPreview === true) {
      writer.uint32(40).bool(message.isPreview);
    }
    if (message.room !== void 0) {
      writer.uint32(50).string(message.room);
    }
    if (message.isConnectedSceneRoom !== void 0) {
      writer.uint32(56).bool(message.isConnectedSceneRoom);
    }
    return writer;
  }
  PBRealmInfo2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal33.default.Reader ? input : import_minimal33.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBRealmInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.baseUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.realmName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.networkId = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.commsAdapter = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.isPreview = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.room = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.isConnectedSceneRoom = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBRealmInfo2.decode = decode;
})(PBRealmInfo || (PBRealmInfo = {}));

// node_modules/@dcl/ecs/dist/components/generated/RealmInfo.gen.js
var RealmInfoSchema = {
  COMPONENT_ID: 1106,
  serialize(value, builder) {
    const writer = PBRealmInfo.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBRealmInfo.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBRealmInfo.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBRealmInfo"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/text_shape.gen.js
var import_minimal34 = __toESM(require_minimal2());
function createBasePBTextShape() {
  return {
    text: "",
    font: void 0,
    fontSize: void 0,
    fontAutoSize: void 0,
    textAlign: void 0,
    width: void 0,
    height: void 0,
    paddingTop: void 0,
    paddingRight: void 0,
    paddingBottom: void 0,
    paddingLeft: void 0,
    lineSpacing: void 0,
    lineCount: void 0,
    textWrapping: void 0,
    shadowBlur: void 0,
    shadowOffsetX: void 0,
    shadowOffsetY: void 0,
    outlineWidth: void 0,
    shadowColor: void 0,
    outlineColor: void 0,
    textColor: void 0
  };
}
var PBTextShape;
(function(PBTextShape2) {
  function encode(message, writer = import_minimal34.default.Writer.create()) {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.font !== void 0) {
      writer.uint32(16).int32(message.font);
    }
    if (message.fontSize !== void 0) {
      writer.uint32(29).float(message.fontSize);
    }
    if (message.fontAutoSize !== void 0) {
      writer.uint32(32).bool(message.fontAutoSize);
    }
    if (message.textAlign !== void 0) {
      writer.uint32(40).int32(message.textAlign);
    }
    if (message.width !== void 0) {
      writer.uint32(53).float(message.width);
    }
    if (message.height !== void 0) {
      writer.uint32(61).float(message.height);
    }
    if (message.paddingTop !== void 0) {
      writer.uint32(69).float(message.paddingTop);
    }
    if (message.paddingRight !== void 0) {
      writer.uint32(77).float(message.paddingRight);
    }
    if (message.paddingBottom !== void 0) {
      writer.uint32(85).float(message.paddingBottom);
    }
    if (message.paddingLeft !== void 0) {
      writer.uint32(93).float(message.paddingLeft);
    }
    if (message.lineSpacing !== void 0) {
      writer.uint32(101).float(message.lineSpacing);
    }
    if (message.lineCount !== void 0) {
      writer.uint32(104).int32(message.lineCount);
    }
    if (message.textWrapping !== void 0) {
      writer.uint32(112).bool(message.textWrapping);
    }
    if (message.shadowBlur !== void 0) {
      writer.uint32(125).float(message.shadowBlur);
    }
    if (message.shadowOffsetX !== void 0) {
      writer.uint32(133).float(message.shadowOffsetX);
    }
    if (message.shadowOffsetY !== void 0) {
      writer.uint32(141).float(message.shadowOffsetY);
    }
    if (message.outlineWidth !== void 0) {
      writer.uint32(149).float(message.outlineWidth);
    }
    if (message.shadowColor !== void 0) {
      Color3.encode(message.shadowColor, writer.uint32(154).fork()).ldelim();
    }
    if (message.outlineColor !== void 0) {
      Color3.encode(message.outlineColor, writer.uint32(162).fork()).ldelim();
    }
    if (message.textColor !== void 0) {
      Color4.encode(message.textColor, writer.uint32(170).fork()).ldelim();
    }
    return writer;
  }
  PBTextShape2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal34.default.Reader ? input : import_minimal34.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBTextShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.font = reader.int32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.fontSize = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.fontAutoSize = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.textAlign = reader.int32();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }
          message.width = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }
          message.height = reader.float();
          continue;
        case 8:
          if (tag !== 69) {
            break;
          }
          message.paddingTop = reader.float();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }
          message.paddingRight = reader.float();
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }
          message.paddingBottom = reader.float();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }
          message.paddingLeft = reader.float();
          continue;
        case 12:
          if (tag !== 101) {
            break;
          }
          message.lineSpacing = reader.float();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }
          message.lineCount = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }
          message.textWrapping = reader.bool();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }
          message.shadowBlur = reader.float();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }
          message.shadowOffsetX = reader.float();
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }
          message.shadowOffsetY = reader.float();
          continue;
        case 18:
          if (tag !== 149) {
            break;
          }
          message.outlineWidth = reader.float();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }
          message.shadowColor = Color3.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }
          message.outlineColor = Color3.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }
          message.textColor = Color4.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBTextShape2.decode = decode;
})(PBTextShape || (PBTextShape = {}));

// node_modules/@dcl/ecs/dist/components/generated/TextShape.gen.js
var TextShapeSchema = {
  COMPONENT_ID: 1030,
  serialize(value, builder) {
    const writer = PBTextShape.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBTextShape.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBTextShape.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBTextShape"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/tween.gen.js
var import_minimal35 = __toESM(require_minimal2());
var TextureMovementType;
(function(TextureMovementType2) {
  TextureMovementType2[TextureMovementType2["TMT_OFFSET"] = 0] = "TMT_OFFSET";
  TextureMovementType2[TextureMovementType2["TMT_TILING"] = 1] = "TMT_TILING";
})(TextureMovementType || (TextureMovementType = {}));
var EasingFunction;
(function(EasingFunction2) {
  EasingFunction2[EasingFunction2["EF_LINEAR"] = 0] = "EF_LINEAR";
  EasingFunction2[EasingFunction2["EF_EASEINQUAD"] = 1] = "EF_EASEINQUAD";
  EasingFunction2[EasingFunction2["EF_EASEOUTQUAD"] = 2] = "EF_EASEOUTQUAD";
  EasingFunction2[EasingFunction2["EF_EASEQUAD"] = 3] = "EF_EASEQUAD";
  EasingFunction2[EasingFunction2["EF_EASEINSINE"] = 4] = "EF_EASEINSINE";
  EasingFunction2[EasingFunction2["EF_EASEOUTSINE"] = 5] = "EF_EASEOUTSINE";
  EasingFunction2[EasingFunction2["EF_EASESINE"] = 6] = "EF_EASESINE";
  EasingFunction2[EasingFunction2["EF_EASEINEXPO"] = 7] = "EF_EASEINEXPO";
  EasingFunction2[EasingFunction2["EF_EASEOUTEXPO"] = 8] = "EF_EASEOUTEXPO";
  EasingFunction2[EasingFunction2["EF_EASEEXPO"] = 9] = "EF_EASEEXPO";
  EasingFunction2[EasingFunction2["EF_EASEINELASTIC"] = 10] = "EF_EASEINELASTIC";
  EasingFunction2[EasingFunction2["EF_EASEOUTELASTIC"] = 11] = "EF_EASEOUTELASTIC";
  EasingFunction2[EasingFunction2["EF_EASEELASTIC"] = 12] = "EF_EASEELASTIC";
  EasingFunction2[EasingFunction2["EF_EASEINBOUNCE"] = 13] = "EF_EASEINBOUNCE";
  EasingFunction2[EasingFunction2["EF_EASEOUTBOUNCE"] = 14] = "EF_EASEOUTBOUNCE";
  EasingFunction2[EasingFunction2["EF_EASEBOUNCE"] = 15] = "EF_EASEBOUNCE";
  EasingFunction2[EasingFunction2["EF_EASEINCUBIC"] = 16] = "EF_EASEINCUBIC";
  EasingFunction2[EasingFunction2["EF_EASEOUTCUBIC"] = 17] = "EF_EASEOUTCUBIC";
  EasingFunction2[EasingFunction2["EF_EASECUBIC"] = 18] = "EF_EASECUBIC";
  EasingFunction2[EasingFunction2["EF_EASEINQUART"] = 19] = "EF_EASEINQUART";
  EasingFunction2[EasingFunction2["EF_EASEOUTQUART"] = 20] = "EF_EASEOUTQUART";
  EasingFunction2[EasingFunction2["EF_EASEQUART"] = 21] = "EF_EASEQUART";
  EasingFunction2[EasingFunction2["EF_EASEINQUINT"] = 22] = "EF_EASEINQUINT";
  EasingFunction2[EasingFunction2["EF_EASEOUTQUINT"] = 23] = "EF_EASEOUTQUINT";
  EasingFunction2[EasingFunction2["EF_EASEQUINT"] = 24] = "EF_EASEQUINT";
  EasingFunction2[EasingFunction2["EF_EASEINCIRC"] = 25] = "EF_EASEINCIRC";
  EasingFunction2[EasingFunction2["EF_EASEOUTCIRC"] = 26] = "EF_EASEOUTCIRC";
  EasingFunction2[EasingFunction2["EF_EASECIRC"] = 27] = "EF_EASECIRC";
  EasingFunction2[EasingFunction2["EF_EASEINBACK"] = 28] = "EF_EASEINBACK";
  EasingFunction2[EasingFunction2["EF_EASEOUTBACK"] = 29] = "EF_EASEOUTBACK";
  EasingFunction2[EasingFunction2["EF_EASEBACK"] = 30] = "EF_EASEBACK";
})(EasingFunction || (EasingFunction = {}));
function createBasePBTween() {
  return { duration: 0, easingFunction: 0, mode: void 0, playing: void 0, currentTime: void 0 };
}
var PBTween;
(function(PBTween2) {
  function encode(message, writer = import_minimal35.default.Writer.create()) {
    if (message.duration !== 0) {
      writer.uint32(13).float(message.duration);
    }
    if (message.easingFunction !== 0) {
      writer.uint32(16).int32(message.easingFunction);
    }
    switch (message.mode?.$case) {
      case "move":
        Move.encode(message.mode.move, writer.uint32(26).fork()).ldelim();
        break;
      case "rotate":
        Rotate.encode(message.mode.rotate, writer.uint32(34).fork()).ldelim();
        break;
      case "scale":
        Scale.encode(message.mode.scale, writer.uint32(42).fork()).ldelim();
        break;
      case "textureMove":
        TextureMove.encode(message.mode.textureMove, writer.uint32(66).fork()).ldelim();
        break;
    }
    if (message.playing !== void 0) {
      writer.uint32(48).bool(message.playing);
    }
    if (message.currentTime !== void 0) {
      writer.uint32(61).float(message.currentTime);
    }
    return writer;
  }
  PBTween2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal35.default.Reader ? input : import_minimal35.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBTween();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.duration = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.easingFunction = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.mode = { $case: "move", move: Move.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.mode = { $case: "rotate", rotate: Rotate.decode(reader, reader.uint32()) };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.mode = { $case: "scale", scale: Scale.decode(reader, reader.uint32()) };
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.mode = { $case: "textureMove", textureMove: TextureMove.decode(reader, reader.uint32()) };
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.playing = reader.bool();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }
          message.currentTime = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBTween2.decode = decode;
})(PBTween || (PBTween = {}));
function createBaseMove() {
  return { start: void 0, end: void 0, faceDirection: void 0 };
}
var Move;
(function(Move2) {
  function encode(message, writer = import_minimal35.default.Writer.create()) {
    if (message.start !== void 0) {
      Vector3.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.end !== void 0) {
      Vector3.encode(message.end, writer.uint32(18).fork()).ldelim();
    }
    if (message.faceDirection !== void 0) {
      writer.uint32(24).bool(message.faceDirection);
    }
    return writer;
  }
  Move2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal35.default.Reader ? input : import_minimal35.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.faceDirection = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Move2.decode = decode;
})(Move || (Move = {}));
function createBaseRotate() {
  return { start: void 0, end: void 0 };
}
var Rotate;
(function(Rotate2) {
  function encode(message, writer = import_minimal35.default.Writer.create()) {
    if (message.start !== void 0) {
      Quaternion.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.end !== void 0) {
      Quaternion.encode(message.end, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }
  Rotate2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal35.default.Reader ? input : import_minimal35.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseRotate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start = Quaternion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end = Quaternion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Rotate2.decode = decode;
})(Rotate || (Rotate = {}));
function createBaseScale() {
  return { start: void 0, end: void 0 };
}
var Scale;
(function(Scale2) {
  function encode(message, writer = import_minimal35.default.Writer.create()) {
    if (message.start !== void 0) {
      Vector3.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.end !== void 0) {
      Vector3.encode(message.end, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }
  Scale2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal35.default.Reader ? input : import_minimal35.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseScale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end = Vector3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Scale2.decode = decode;
})(Scale || (Scale = {}));
function createBaseTextureMove() {
  return { start: void 0, end: void 0, movementType: void 0 };
}
var TextureMove;
(function(TextureMove2) {
  function encode(message, writer = import_minimal35.default.Writer.create()) {
    if (message.start !== void 0) {
      Vector2.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.end !== void 0) {
      Vector2.encode(message.end, writer.uint32(18).fork()).ldelim();
    }
    if (message.movementType !== void 0) {
      writer.uint32(24).int32(message.movementType);
    }
    return writer;
  }
  TextureMove2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal35.default.Reader ? input : import_minimal35.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseTextureMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start = Vector2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end = Vector2.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.movementType = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  TextureMove2.decode = decode;
})(TextureMove || (TextureMove = {}));

// node_modules/@dcl/ecs/dist/components/generated/Tween.gen.js
var TweenSchema = {
  COMPONENT_ID: 1102,
  serialize(value, builder) {
    const writer = PBTween.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBTween.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBTween.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBTween"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/tween_sequence.gen.js
var import_minimal36 = __toESM(require_minimal2());
var TweenLoop;
(function(TweenLoop2) {
  TweenLoop2[TweenLoop2["TL_RESTART"] = 0] = "TL_RESTART";
  TweenLoop2[TweenLoop2["TL_YOYO"] = 1] = "TL_YOYO";
})(TweenLoop || (TweenLoop = {}));
function createBasePBTweenSequence() {
  return { sequence: [], loop: void 0 };
}
var PBTweenSequence;
(function(PBTweenSequence2) {
  function encode(message, writer = import_minimal36.default.Writer.create()) {
    for (const v of message.sequence) {
      PBTween.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.loop !== void 0) {
      writer.uint32(16).int32(message.loop);
    }
    return writer;
  }
  PBTweenSequence2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal36.default.Reader ? input : import_minimal36.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBTweenSequence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sequence.push(PBTween.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.loop = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBTweenSequence2.decode = decode;
})(PBTweenSequence || (PBTweenSequence = {}));

// node_modules/@dcl/ecs/dist/components/generated/TweenSequence.gen.js
var TweenSequenceSchema = {
  COMPONENT_ID: 1104,
  serialize(value, builder) {
    const writer = PBTweenSequence.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBTweenSequence.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBTweenSequence.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBTweenSequence"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/tween_state.gen.js
var import_minimal37 = __toESM(require_minimal2());
var TweenStateStatus;
(function(TweenStateStatus2) {
  TweenStateStatus2[TweenStateStatus2["TS_ACTIVE"] = 0] = "TS_ACTIVE";
  TweenStateStatus2[TweenStateStatus2["TS_COMPLETED"] = 1] = "TS_COMPLETED";
  TweenStateStatus2[TweenStateStatus2["TS_PAUSED"] = 2] = "TS_PAUSED";
})(TweenStateStatus || (TweenStateStatus = {}));
function createBasePBTweenState() {
  return { state: 0, currentTime: 0 };
}
var PBTweenState;
(function(PBTweenState2) {
  function encode(message, writer = import_minimal37.default.Writer.create()) {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.currentTime !== 0) {
      writer.uint32(21).float(message.currentTime);
    }
    return writer;
  }
  PBTweenState2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal37.default.Reader ? input : import_minimal37.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBTweenState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.state = reader.int32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.currentTime = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBTweenState2.decode = decode;
})(PBTweenState || (PBTweenState = {}));

// node_modules/@dcl/ecs/dist/components/generated/TweenState.gen.js
var TweenStateSchema = {
  COMPONENT_ID: 1103,
  serialize(value, builder) {
    const writer = PBTweenState.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBTweenState.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBTweenState.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBTweenState"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_background.gen.js
var import_minimal39 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/common/border_rect.gen.js
var import_minimal38 = __toESM(require_minimal2());
function createBaseBorderRect() {
  return { top: 0, left: 0, right: 0, bottom: 0 };
}
var BorderRect;
(function(BorderRect2) {
  function encode(message, writer = import_minimal38.default.Writer.create()) {
    if (message.top !== 0) {
      writer.uint32(13).float(message.top);
    }
    if (message.left !== 0) {
      writer.uint32(21).float(message.left);
    }
    if (message.right !== 0) {
      writer.uint32(29).float(message.right);
    }
    if (message.bottom !== 0) {
      writer.uint32(37).float(message.bottom);
    }
    return writer;
  }
  BorderRect2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal38.default.Reader ? input : import_minimal38.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseBorderRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.top = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.left = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.right = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.bottom = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  BorderRect2.decode = decode;
})(BorderRect || (BorderRect = {}));
function createBaseRect() {
  return { x: 0, y: 0, width: 0, height: 0 };
}
var Rect;
(function(Rect2) {
  function encode(message, writer = import_minimal38.default.Writer.create()) {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.width !== 0) {
      writer.uint32(29).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(37).float(message.height);
    }
    return writer;
  }
  Rect2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal38.default.Reader ? input : import_minimal38.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.y = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.width = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.height = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Rect2.decode = decode;
})(Rect || (Rect = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_background.gen.js
var BackgroundTextureMode;
(function(BackgroundTextureMode2) {
  BackgroundTextureMode2[BackgroundTextureMode2["NINE_SLICES"] = 0] = "NINE_SLICES";
  BackgroundTextureMode2[BackgroundTextureMode2["CENTER"] = 1] = "CENTER";
  BackgroundTextureMode2[BackgroundTextureMode2["STRETCH"] = 2] = "STRETCH";
})(BackgroundTextureMode || (BackgroundTextureMode = {}));
function createBasePBUiBackground() {
  return { color: void 0, texture: void 0, textureMode: 0, textureSlices: void 0, uvs: [] };
}
var PBUiBackground;
(function(PBUiBackground2) {
  function encode(message, writer = import_minimal39.default.Writer.create()) {
    if (message.color !== void 0) {
      Color4.encode(message.color, writer.uint32(10).fork()).ldelim();
    }
    if (message.texture !== void 0) {
      TextureUnion.encode(message.texture, writer.uint32(18).fork()).ldelim();
    }
    if (message.textureMode !== 0) {
      writer.uint32(24).int32(message.textureMode);
    }
    if (message.textureSlices !== void 0) {
      BorderRect.encode(message.textureSlices, writer.uint32(34).fork()).ldelim();
    }
    writer.uint32(42).fork();
    for (const v of message.uvs) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  }
  PBUiBackground2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal39.default.Reader ? input : import_minimal39.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiBackground();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.color = Color4.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.texture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.textureMode = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.textureSlices = BorderRect.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag === 45) {
            message.uvs.push(reader.float());
            continue;
          }
          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uvs.push(reader.float());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiBackground2.decode = decode;
})(PBUiBackground || (PBUiBackground = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiBackground.gen.js
var UiBackgroundSchema = {
  COMPONENT_ID: 1053,
  serialize(value, builder) {
    const writer = PBUiBackground.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiBackground.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiBackground.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiBackground"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_canvas_information.gen.js
var import_minimal40 = __toESM(require_minimal2());
function createBasePBUiCanvasInformation() {
  return { devicePixelRatio: 0, width: 0, height: 0, interactableArea: void 0 };
}
var PBUiCanvasInformation;
(function(PBUiCanvasInformation2) {
  function encode(message, writer = import_minimal40.default.Writer.create()) {
    if (message.devicePixelRatio !== 0) {
      writer.uint32(13).float(message.devicePixelRatio);
    }
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.interactableArea !== void 0) {
      BorderRect.encode(message.interactableArea, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  }
  PBUiCanvasInformation2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal40.default.Reader ? input : import_minimal40.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiCanvasInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.devicePixelRatio = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.width = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.interactableArea = BorderRect.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiCanvasInformation2.decode = decode;
})(PBUiCanvasInformation || (PBUiCanvasInformation = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiCanvasInformation.gen.js
var UiCanvasInformationSchema = {
  COMPONENT_ID: 1054,
  serialize(value, builder) {
    const writer = PBUiCanvasInformation.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiCanvasInformation.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiCanvasInformation.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiCanvasInformation"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_dropdown.gen.js
var import_minimal41 = __toESM(require_minimal2());
function createBasePBUiDropdown() {
  return {
    acceptEmpty: false,
    emptyLabel: void 0,
    options: [],
    selectedIndex: void 0,
    disabled: false,
    color: void 0,
    textAlign: void 0,
    font: void 0,
    fontSize: void 0
  };
}
var PBUiDropdown;
(function(PBUiDropdown2) {
  function encode(message, writer = import_minimal41.default.Writer.create()) {
    if (message.acceptEmpty === true) {
      writer.uint32(8).bool(message.acceptEmpty);
    }
    if (message.emptyLabel !== void 0) {
      writer.uint32(18).string(message.emptyLabel);
    }
    for (const v of message.options) {
      writer.uint32(26).string(v);
    }
    if (message.selectedIndex !== void 0) {
      writer.uint32(32).int32(message.selectedIndex);
    }
    if (message.disabled === true) {
      writer.uint32(40).bool(message.disabled);
    }
    if (message.color !== void 0) {
      Color4.encode(message.color, writer.uint32(50).fork()).ldelim();
    }
    if (message.textAlign !== void 0) {
      writer.uint32(80).int32(message.textAlign);
    }
    if (message.font !== void 0) {
      writer.uint32(88).int32(message.font);
    }
    if (message.fontSize !== void 0) {
      writer.uint32(96).int32(message.fontSize);
    }
    return writer;
  }
  PBUiDropdown2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal41.default.Reader ? input : import_minimal41.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiDropdown();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.acceptEmpty = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.emptyLabel = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.selectedIndex = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.disabled = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.color = Color4.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.textAlign = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }
          message.font = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }
          message.fontSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiDropdown2.decode = decode;
})(PBUiDropdown || (PBUiDropdown = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiDropdown.gen.js
var UiDropdownSchema = {
  COMPONENT_ID: 1094,
  serialize(value, builder) {
    const writer = PBUiDropdown.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiDropdown.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiDropdown.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiDropdown"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_dropdown_result.gen.js
var import_minimal42 = __toESM(require_minimal2());
function createBasePBUiDropdownResult() {
  return { value: 0 };
}
var PBUiDropdownResult;
(function(PBUiDropdownResult2) {
  function encode(message, writer = import_minimal42.default.Writer.create()) {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  }
  PBUiDropdownResult2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal42.default.Reader ? input : import_minimal42.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiDropdownResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiDropdownResult2.decode = decode;
})(PBUiDropdownResult || (PBUiDropdownResult = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiDropdownResult.gen.js
var UiDropdownResultSchema = {
  COMPONENT_ID: 1096,
  serialize(value, builder) {
    const writer = PBUiDropdownResult.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiDropdownResult.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiDropdownResult.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiDropdownResult"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_input.gen.js
var import_minimal43 = __toESM(require_minimal2());
function createBasePBUiInput() {
  return {
    placeholder: "",
    color: void 0,
    placeholderColor: void 0,
    disabled: false,
    textAlign: void 0,
    font: void 0,
    fontSize: void 0,
    value: void 0
  };
}
var PBUiInput;
(function(PBUiInput2) {
  function encode(message, writer = import_minimal43.default.Writer.create()) {
    if (message.placeholder !== "") {
      writer.uint32(10).string(message.placeholder);
    }
    if (message.color !== void 0) {
      Color4.encode(message.color, writer.uint32(18).fork()).ldelim();
    }
    if (message.placeholderColor !== void 0) {
      Color4.encode(message.placeholderColor, writer.uint32(26).fork()).ldelim();
    }
    if (message.disabled === true) {
      writer.uint32(32).bool(message.disabled);
    }
    if (message.textAlign !== void 0) {
      writer.uint32(80).int32(message.textAlign);
    }
    if (message.font !== void 0) {
      writer.uint32(88).int32(message.font);
    }
    if (message.fontSize !== void 0) {
      writer.uint32(96).int32(message.fontSize);
    }
    if (message.value !== void 0) {
      writer.uint32(106).string(message.value);
    }
    return writer;
  }
  PBUiInput2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal43.default.Reader ? input : import_minimal43.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.placeholder = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.color = Color4.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.placeholderColor = Color4.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.disabled = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.textAlign = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }
          message.font = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }
          message.fontSize = reader.int32();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiInput2.decode = decode;
})(PBUiInput || (PBUiInput = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiInput.gen.js
var UiInputSchema = {
  COMPONENT_ID: 1093,
  serialize(value, builder) {
    const writer = PBUiInput.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiInput.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiInput.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiInput"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_input_result.gen.js
var import_minimal44 = __toESM(require_minimal2());
function createBasePBUiInputResult() {
  return { value: "", isSubmit: void 0 };
}
var PBUiInputResult;
(function(PBUiInputResult2) {
  function encode(message, writer = import_minimal44.default.Writer.create()) {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.isSubmit !== void 0) {
      writer.uint32(16).bool(message.isSubmit);
    }
    return writer;
  }
  PBUiInputResult2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal44.default.Reader ? input : import_minimal44.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiInputResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.isSubmit = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiInputResult2.decode = decode;
})(PBUiInputResult || (PBUiInputResult = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiInputResult.gen.js
var UiInputResultSchema = {
  COMPONENT_ID: 1095,
  serialize(value, builder) {
    const writer = PBUiInputResult.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiInputResult.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiInputResult.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiInputResult"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_text.gen.js
var import_minimal45 = __toESM(require_minimal2());
var TextWrap;
(function(TextWrap2) {
  TextWrap2[TextWrap2["TW_WRAP"] = 0] = "TW_WRAP";
  TextWrap2[TextWrap2["TW_NO_WRAP"] = 1] = "TW_NO_WRAP";
})(TextWrap || (TextWrap = {}));
function createBasePBUiText() {
  return {
    value: "",
    color: void 0,
    textAlign: void 0,
    font: void 0,
    fontSize: void 0,
    textWrap: void 0
  };
}
var PBUiText;
(function(PBUiText2) {
  function encode(message, writer = import_minimal45.default.Writer.create()) {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.color !== void 0) {
      Color4.encode(message.color, writer.uint32(18).fork()).ldelim();
    }
    if (message.textAlign !== void 0) {
      writer.uint32(24).int32(message.textAlign);
    }
    if (message.font !== void 0) {
      writer.uint32(32).int32(message.font);
    }
    if (message.fontSize !== void 0) {
      writer.uint32(40).int32(message.fontSize);
    }
    if (message.textWrap !== void 0) {
      writer.uint32(48).int32(message.textWrap);
    }
    return writer;
  }
  PBUiText2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal45.default.Reader ? input : import_minimal45.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.color = Color4.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.textAlign = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.font = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.fontSize = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.textWrap = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiText2.decode = decode;
})(PBUiText || (PBUiText = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiText.gen.js
var UiTextSchema = {
  COMPONENT_ID: 1052,
  serialize(value, builder) {
    const writer = PBUiText.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiText.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiText.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiText"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/ui_transform.gen.js
var import_minimal46 = __toESM(require_minimal2());
var YGPositionType;
(function(YGPositionType2) {
  YGPositionType2[YGPositionType2["YGPT_RELATIVE"] = 0] = "YGPT_RELATIVE";
  YGPositionType2[YGPositionType2["YGPT_ABSOLUTE"] = 1] = "YGPT_ABSOLUTE";
})(YGPositionType || (YGPositionType = {}));
var YGAlign;
(function(YGAlign2) {
  YGAlign2[YGAlign2["YGA_AUTO"] = 0] = "YGA_AUTO";
  YGAlign2[YGAlign2["YGA_FLEX_START"] = 1] = "YGA_FLEX_START";
  YGAlign2[YGAlign2["YGA_CENTER"] = 2] = "YGA_CENTER";
  YGAlign2[YGAlign2["YGA_FLEX_END"] = 3] = "YGA_FLEX_END";
  YGAlign2[YGAlign2["YGA_STRETCH"] = 4] = "YGA_STRETCH";
  YGAlign2[YGAlign2["YGA_BASELINE"] = 5] = "YGA_BASELINE";
  YGAlign2[YGAlign2["YGA_SPACE_BETWEEN"] = 6] = "YGA_SPACE_BETWEEN";
  YGAlign2[YGAlign2["YGA_SPACE_AROUND"] = 7] = "YGA_SPACE_AROUND";
})(YGAlign || (YGAlign = {}));
var YGUnit;
(function(YGUnit2) {
  YGUnit2[YGUnit2["YGU_UNDEFINED"] = 0] = "YGU_UNDEFINED";
  YGUnit2[YGUnit2["YGU_POINT"] = 1] = "YGU_POINT";
  YGUnit2[YGUnit2["YGU_PERCENT"] = 2] = "YGU_PERCENT";
  YGUnit2[YGUnit2["YGU_AUTO"] = 3] = "YGU_AUTO";
})(YGUnit || (YGUnit = {}));
var YGFlexDirection;
(function(YGFlexDirection2) {
  YGFlexDirection2[YGFlexDirection2["YGFD_ROW"] = 0] = "YGFD_ROW";
  YGFlexDirection2[YGFlexDirection2["YGFD_COLUMN"] = 1] = "YGFD_COLUMN";
  YGFlexDirection2[YGFlexDirection2["YGFD_COLUMN_REVERSE"] = 2] = "YGFD_COLUMN_REVERSE";
  YGFlexDirection2[YGFlexDirection2["YGFD_ROW_REVERSE"] = 3] = "YGFD_ROW_REVERSE";
})(YGFlexDirection || (YGFlexDirection = {}));
var YGWrap;
(function(YGWrap2) {
  YGWrap2[YGWrap2["YGW_NO_WRAP"] = 0] = "YGW_NO_WRAP";
  YGWrap2[YGWrap2["YGW_WRAP"] = 1] = "YGW_WRAP";
  YGWrap2[YGWrap2["YGW_WRAP_REVERSE"] = 2] = "YGW_WRAP_REVERSE";
})(YGWrap || (YGWrap = {}));
var YGJustify;
(function(YGJustify2) {
  YGJustify2[YGJustify2["YGJ_FLEX_START"] = 0] = "YGJ_FLEX_START";
  YGJustify2[YGJustify2["YGJ_CENTER"] = 1] = "YGJ_CENTER";
  YGJustify2[YGJustify2["YGJ_FLEX_END"] = 2] = "YGJ_FLEX_END";
  YGJustify2[YGJustify2["YGJ_SPACE_BETWEEN"] = 3] = "YGJ_SPACE_BETWEEN";
  YGJustify2[YGJustify2["YGJ_SPACE_AROUND"] = 4] = "YGJ_SPACE_AROUND";
  YGJustify2[YGJustify2["YGJ_SPACE_EVENLY"] = 5] = "YGJ_SPACE_EVENLY";
})(YGJustify || (YGJustify = {}));
var YGOverflow;
(function(YGOverflow2) {
  YGOverflow2[YGOverflow2["YGO_VISIBLE"] = 0] = "YGO_VISIBLE";
  YGOverflow2[YGOverflow2["YGO_HIDDEN"] = 1] = "YGO_HIDDEN";
  YGOverflow2[YGOverflow2["YGO_SCROLL"] = 2] = "YGO_SCROLL";
})(YGOverflow || (YGOverflow = {}));
var YGDisplay;
(function(YGDisplay2) {
  YGDisplay2[YGDisplay2["YGD_FLEX"] = 0] = "YGD_FLEX";
  YGDisplay2[YGDisplay2["YGD_NONE"] = 1] = "YGD_NONE";
})(YGDisplay || (YGDisplay = {}));
var YGEdge;
(function(YGEdge2) {
  YGEdge2[YGEdge2["YGE_LEFT"] = 0] = "YGE_LEFT";
  YGEdge2[YGEdge2["YGE_TOP"] = 1] = "YGE_TOP";
  YGEdge2[YGEdge2["YGE_RIGHT"] = 2] = "YGE_RIGHT";
  YGEdge2[YGEdge2["YGE_BOTTOM"] = 3] = "YGE_BOTTOM";
  YGEdge2[YGEdge2["YGE_START"] = 4] = "YGE_START";
  YGEdge2[YGEdge2["YGE_END"] = 5] = "YGE_END";
  YGEdge2[YGEdge2["YGE_HORIZONTAL"] = 6] = "YGE_HORIZONTAL";
  YGEdge2[YGEdge2["YGE_VERTICAL"] = 7] = "YGE_VERTICAL";
  YGEdge2[YGEdge2["YGE_ALL"] = 8] = "YGE_ALL";
})(YGEdge || (YGEdge = {}));
var PointerFilterMode;
(function(PointerFilterMode2) {
  PointerFilterMode2[PointerFilterMode2["PFM_NONE"] = 0] = "PFM_NONE";
  PointerFilterMode2[PointerFilterMode2["PFM_BLOCK"] = 1] = "PFM_BLOCK";
})(PointerFilterMode || (PointerFilterMode = {}));
function createBasePBUiTransform() {
  return {
    parent: 0,
    rightOf: 0,
    alignContent: void 0,
    alignItems: void 0,
    flexWrap: void 0,
    flexShrink: void 0,
    positionType: 0,
    alignSelf: 0,
    flexDirection: 0,
    justifyContent: 0,
    overflow: 0,
    display: 0,
    flexBasisUnit: 0,
    flexBasis: 0,
    flexGrow: 0,
    widthUnit: 0,
    width: 0,
    heightUnit: 0,
    height: 0,
    minWidthUnit: 0,
    minWidth: 0,
    minHeightUnit: 0,
    minHeight: 0,
    maxWidthUnit: 0,
    maxWidth: 0,
    maxHeightUnit: 0,
    maxHeight: 0,
    positionLeftUnit: 0,
    positionLeft: 0,
    positionTopUnit: 0,
    positionTop: 0,
    positionRightUnit: 0,
    positionRight: 0,
    positionBottomUnit: 0,
    positionBottom: 0,
    marginLeftUnit: 0,
    marginLeft: 0,
    marginTopUnit: 0,
    marginTop: 0,
    marginRightUnit: 0,
    marginRight: 0,
    marginBottomUnit: 0,
    marginBottom: 0,
    paddingLeftUnit: 0,
    paddingLeft: 0,
    paddingTopUnit: 0,
    paddingTop: 0,
    paddingRightUnit: 0,
    paddingRight: 0,
    paddingBottomUnit: 0,
    paddingBottom: 0,
    pointerFilter: void 0,
    borderLeftWidthUnit: void 0,
    borderLeftWidth: void 0,
    borderTopWidthUnit: void 0,
    borderTopWidth: void 0,
    borderRightWidthUnit: void 0,
    borderRightWidth: void 0,
    borderBottomWidthUnit: void 0,
    borderBottomWidth: void 0,
    borderTopLeftRadiusUnit: void 0,
    borderTopLeftRadius: void 0,
    borderTopRightRadiusUnit: void 0,
    borderTopRightRadius: void 0,
    borderBottomLeftRadiusUnit: void 0,
    borderBottomLeftRadius: void 0,
    borderBottomRightRadiusUnit: void 0,
    borderBottomRightRadius: void 0,
    borderTopColor: void 0,
    borderBottomColor: void 0,
    borderLeftColor: void 0,
    borderRightColor: void 0
  };
}
var PBUiTransform;
(function(PBUiTransform2) {
  function encode(message, writer = import_minimal46.default.Writer.create()) {
    if (message.parent !== 0) {
      writer.uint32(8).int32(message.parent);
    }
    if (message.rightOf !== 0) {
      writer.uint32(16).int32(message.rightOf);
    }
    if (message.alignContent !== void 0) {
      writer.uint32(24).int32(message.alignContent);
    }
    if (message.alignItems !== void 0) {
      writer.uint32(32).int32(message.alignItems);
    }
    if (message.flexWrap !== void 0) {
      writer.uint32(40).int32(message.flexWrap);
    }
    if (message.flexShrink !== void 0) {
      writer.uint32(53).float(message.flexShrink);
    }
    if (message.positionType !== 0) {
      writer.uint32(56).int32(message.positionType);
    }
    if (message.alignSelf !== 0) {
      writer.uint32(64).int32(message.alignSelf);
    }
    if (message.flexDirection !== 0) {
      writer.uint32(72).int32(message.flexDirection);
    }
    if (message.justifyContent !== 0) {
      writer.uint32(80).int32(message.justifyContent);
    }
    if (message.overflow !== 0) {
      writer.uint32(88).int32(message.overflow);
    }
    if (message.display !== 0) {
      writer.uint32(96).int32(message.display);
    }
    if (message.flexBasisUnit !== 0) {
      writer.uint32(104).int32(message.flexBasisUnit);
    }
    if (message.flexBasis !== 0) {
      writer.uint32(117).float(message.flexBasis);
    }
    if (message.flexGrow !== 0) {
      writer.uint32(125).float(message.flexGrow);
    }
    if (message.widthUnit !== 0) {
      writer.uint32(128).int32(message.widthUnit);
    }
    if (message.width !== 0) {
      writer.uint32(141).float(message.width);
    }
    if (message.heightUnit !== 0) {
      writer.uint32(144).int32(message.heightUnit);
    }
    if (message.height !== 0) {
      writer.uint32(157).float(message.height);
    }
    if (message.minWidthUnit !== 0) {
      writer.uint32(160).int32(message.minWidthUnit);
    }
    if (message.minWidth !== 0) {
      writer.uint32(173).float(message.minWidth);
    }
    if (message.minHeightUnit !== 0) {
      writer.uint32(176).int32(message.minHeightUnit);
    }
    if (message.minHeight !== 0) {
      writer.uint32(189).float(message.minHeight);
    }
    if (message.maxWidthUnit !== 0) {
      writer.uint32(192).int32(message.maxWidthUnit);
    }
    if (message.maxWidth !== 0) {
      writer.uint32(205).float(message.maxWidth);
    }
    if (message.maxHeightUnit !== 0) {
      writer.uint32(208).int32(message.maxHeightUnit);
    }
    if (message.maxHeight !== 0) {
      writer.uint32(221).float(message.maxHeight);
    }
    if (message.positionLeftUnit !== 0) {
      writer.uint32(224).int32(message.positionLeftUnit);
    }
    if (message.positionLeft !== 0) {
      writer.uint32(237).float(message.positionLeft);
    }
    if (message.positionTopUnit !== 0) {
      writer.uint32(240).int32(message.positionTopUnit);
    }
    if (message.positionTop !== 0) {
      writer.uint32(253).float(message.positionTop);
    }
    if (message.positionRightUnit !== 0) {
      writer.uint32(256).int32(message.positionRightUnit);
    }
    if (message.positionRight !== 0) {
      writer.uint32(269).float(message.positionRight);
    }
    if (message.positionBottomUnit !== 0) {
      writer.uint32(272).int32(message.positionBottomUnit);
    }
    if (message.positionBottom !== 0) {
      writer.uint32(285).float(message.positionBottom);
    }
    if (message.marginLeftUnit !== 0) {
      writer.uint32(288).int32(message.marginLeftUnit);
    }
    if (message.marginLeft !== 0) {
      writer.uint32(301).float(message.marginLeft);
    }
    if (message.marginTopUnit !== 0) {
      writer.uint32(304).int32(message.marginTopUnit);
    }
    if (message.marginTop !== 0) {
      writer.uint32(317).float(message.marginTop);
    }
    if (message.marginRightUnit !== 0) {
      writer.uint32(320).int32(message.marginRightUnit);
    }
    if (message.marginRight !== 0) {
      writer.uint32(333).float(message.marginRight);
    }
    if (message.marginBottomUnit !== 0) {
      writer.uint32(336).int32(message.marginBottomUnit);
    }
    if (message.marginBottom !== 0) {
      writer.uint32(349).float(message.marginBottom);
    }
    if (message.paddingLeftUnit !== 0) {
      writer.uint32(352).int32(message.paddingLeftUnit);
    }
    if (message.paddingLeft !== 0) {
      writer.uint32(365).float(message.paddingLeft);
    }
    if (message.paddingTopUnit !== 0) {
      writer.uint32(368).int32(message.paddingTopUnit);
    }
    if (message.paddingTop !== 0) {
      writer.uint32(381).float(message.paddingTop);
    }
    if (message.paddingRightUnit !== 0) {
      writer.uint32(384).int32(message.paddingRightUnit);
    }
    if (message.paddingRight !== 0) {
      writer.uint32(397).float(message.paddingRight);
    }
    if (message.paddingBottomUnit !== 0) {
      writer.uint32(400).int32(message.paddingBottomUnit);
    }
    if (message.paddingBottom !== 0) {
      writer.uint32(413).float(message.paddingBottom);
    }
    if (message.pointerFilter !== void 0) {
      writer.uint32(416).int32(message.pointerFilter);
    }
    if (message.borderLeftWidthUnit !== void 0) {
      writer.uint32(424).int32(message.borderLeftWidthUnit);
    }
    if (message.borderLeftWidth !== void 0) {
      writer.uint32(437).float(message.borderLeftWidth);
    }
    if (message.borderTopWidthUnit !== void 0) {
      writer.uint32(440).int32(message.borderTopWidthUnit);
    }
    if (message.borderTopWidth !== void 0) {
      writer.uint32(453).float(message.borderTopWidth);
    }
    if (message.borderRightWidthUnit !== void 0) {
      writer.uint32(456).int32(message.borderRightWidthUnit);
    }
    if (message.borderRightWidth !== void 0) {
      writer.uint32(469).float(message.borderRightWidth);
    }
    if (message.borderBottomWidthUnit !== void 0) {
      writer.uint32(472).int32(message.borderBottomWidthUnit);
    }
    if (message.borderBottomWidth !== void 0) {
      writer.uint32(485).float(message.borderBottomWidth);
    }
    if (message.borderTopLeftRadiusUnit !== void 0) {
      writer.uint32(488).int32(message.borderTopLeftRadiusUnit);
    }
    if (message.borderTopLeftRadius !== void 0) {
      writer.uint32(501).float(message.borderTopLeftRadius);
    }
    if (message.borderTopRightRadiusUnit !== void 0) {
      writer.uint32(504).int32(message.borderTopRightRadiusUnit);
    }
    if (message.borderTopRightRadius !== void 0) {
      writer.uint32(517).float(message.borderTopRightRadius);
    }
    if (message.borderBottomLeftRadiusUnit !== void 0) {
      writer.uint32(520).int32(message.borderBottomLeftRadiusUnit);
    }
    if (message.borderBottomLeftRadius !== void 0) {
      writer.uint32(533).float(message.borderBottomLeftRadius);
    }
    if (message.borderBottomRightRadiusUnit !== void 0) {
      writer.uint32(536).int32(message.borderBottomRightRadiusUnit);
    }
    if (message.borderBottomRightRadius !== void 0) {
      writer.uint32(549).float(message.borderBottomRightRadius);
    }
    if (message.borderTopColor !== void 0) {
      Color4.encode(message.borderTopColor, writer.uint32(554).fork()).ldelim();
    }
    if (message.borderBottomColor !== void 0) {
      Color4.encode(message.borderBottomColor, writer.uint32(562).fork()).ldelim();
    }
    if (message.borderLeftColor !== void 0) {
      Color4.encode(message.borderLeftColor, writer.uint32(570).fork()).ldelim();
    }
    if (message.borderRightColor !== void 0) {
      Color4.encode(message.borderRightColor, writer.uint32(578).fork()).ldelim();
    }
    return writer;
  }
  PBUiTransform2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal46.default.Reader ? input : import_minimal46.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBUiTransform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.parent = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.rightOf = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.alignContent = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.alignItems = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.flexWrap = reader.int32();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }
          message.flexShrink = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.positionType = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.alignSelf = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.flexDirection = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.justifyContent = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }
          message.overflow = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }
          message.display = reader.int32();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }
          message.flexBasisUnit = reader.int32();
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }
          message.flexBasis = reader.float();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }
          message.flexGrow = reader.float();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }
          message.widthUnit = reader.int32();
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }
          message.width = reader.float();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }
          message.heightUnit = reader.int32();
          continue;
        case 19:
          if (tag !== 157) {
            break;
          }
          message.height = reader.float();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }
          message.minWidthUnit = reader.int32();
          continue;
        case 21:
          if (tag !== 173) {
            break;
          }
          message.minWidth = reader.float();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }
          message.minHeightUnit = reader.int32();
          continue;
        case 23:
          if (tag !== 189) {
            break;
          }
          message.minHeight = reader.float();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }
          message.maxWidthUnit = reader.int32();
          continue;
        case 25:
          if (tag !== 205) {
            break;
          }
          message.maxWidth = reader.float();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }
          message.maxHeightUnit = reader.int32();
          continue;
        case 27:
          if (tag !== 221) {
            break;
          }
          message.maxHeight = reader.float();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }
          message.positionLeftUnit = reader.int32();
          continue;
        case 29:
          if (tag !== 237) {
            break;
          }
          message.positionLeft = reader.float();
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }
          message.positionTopUnit = reader.int32();
          continue;
        case 31:
          if (tag !== 253) {
            break;
          }
          message.positionTop = reader.float();
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }
          message.positionRightUnit = reader.int32();
          continue;
        case 33:
          if (tag !== 269) {
            break;
          }
          message.positionRight = reader.float();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }
          message.positionBottomUnit = reader.int32();
          continue;
        case 35:
          if (tag !== 285) {
            break;
          }
          message.positionBottom = reader.float();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }
          message.marginLeftUnit = reader.int32();
          continue;
        case 37:
          if (tag !== 301) {
            break;
          }
          message.marginLeft = reader.float();
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }
          message.marginTopUnit = reader.int32();
          continue;
        case 39:
          if (tag !== 317) {
            break;
          }
          message.marginTop = reader.float();
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }
          message.marginRightUnit = reader.int32();
          continue;
        case 41:
          if (tag !== 333) {
            break;
          }
          message.marginRight = reader.float();
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }
          message.marginBottomUnit = reader.int32();
          continue;
        case 43:
          if (tag !== 349) {
            break;
          }
          message.marginBottom = reader.float();
          continue;
        case 44:
          if (tag !== 352) {
            break;
          }
          message.paddingLeftUnit = reader.int32();
          continue;
        case 45:
          if (tag !== 365) {
            break;
          }
          message.paddingLeft = reader.float();
          continue;
        case 46:
          if (tag !== 368) {
            break;
          }
          message.paddingTopUnit = reader.int32();
          continue;
        case 47:
          if (tag !== 381) {
            break;
          }
          message.paddingTop = reader.float();
          continue;
        case 48:
          if (tag !== 384) {
            break;
          }
          message.paddingRightUnit = reader.int32();
          continue;
        case 49:
          if (tag !== 397) {
            break;
          }
          message.paddingRight = reader.float();
          continue;
        case 50:
          if (tag !== 400) {
            break;
          }
          message.paddingBottomUnit = reader.int32();
          continue;
        case 51:
          if (tag !== 413) {
            break;
          }
          message.paddingBottom = reader.float();
          continue;
        case 52:
          if (tag !== 416) {
            break;
          }
          message.pointerFilter = reader.int32();
          continue;
        case 53:
          if (tag !== 424) {
            break;
          }
          message.borderLeftWidthUnit = reader.int32();
          continue;
        case 54:
          if (tag !== 437) {
            break;
          }
          message.borderLeftWidth = reader.float();
          continue;
        case 55:
          if (tag !== 440) {
            break;
          }
          message.borderTopWidthUnit = reader.int32();
          continue;
        case 56:
          if (tag !== 453) {
            break;
          }
          message.borderTopWidth = reader.float();
          continue;
        case 57:
          if (tag !== 456) {
            break;
          }
          message.borderRightWidthUnit = reader.int32();
          continue;
        case 58:
          if (tag !== 469) {
            break;
          }
          message.borderRightWidth = reader.float();
          continue;
        case 59:
          if (tag !== 472) {
            break;
          }
          message.borderBottomWidthUnit = reader.int32();
          continue;
        case 60:
          if (tag !== 485) {
            break;
          }
          message.borderBottomWidth = reader.float();
          continue;
        case 61:
          if (tag !== 488) {
            break;
          }
          message.borderTopLeftRadiusUnit = reader.int32();
          continue;
        case 62:
          if (tag !== 501) {
            break;
          }
          message.borderTopLeftRadius = reader.float();
          continue;
        case 63:
          if (tag !== 504) {
            break;
          }
          message.borderTopRightRadiusUnit = reader.int32();
          continue;
        case 64:
          if (tag !== 517) {
            break;
          }
          message.borderTopRightRadius = reader.float();
          continue;
        case 65:
          if (tag !== 520) {
            break;
          }
          message.borderBottomLeftRadiusUnit = reader.int32();
          continue;
        case 66:
          if (tag !== 533) {
            break;
          }
          message.borderBottomLeftRadius = reader.float();
          continue;
        case 67:
          if (tag !== 536) {
            break;
          }
          message.borderBottomRightRadiusUnit = reader.int32();
          continue;
        case 68:
          if (tag !== 549) {
            break;
          }
          message.borderBottomRightRadius = reader.float();
          continue;
        case 69:
          if (tag !== 554) {
            break;
          }
          message.borderTopColor = Color4.decode(reader, reader.uint32());
          continue;
        case 70:
          if (tag !== 562) {
            break;
          }
          message.borderBottomColor = Color4.decode(reader, reader.uint32());
          continue;
        case 71:
          if (tag !== 570) {
            break;
          }
          message.borderLeftColor = Color4.decode(reader, reader.uint32());
          continue;
        case 72:
          if (tag !== 578) {
            break;
          }
          message.borderRightColor = Color4.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBUiTransform2.decode = decode;
})(PBUiTransform || (PBUiTransform = {}));

// node_modules/@dcl/ecs/dist/components/generated/UiTransform.gen.js
var UiTransformSchema = {
  COMPONENT_ID: 1050,
  serialize(value, builder) {
    const writer = PBUiTransform.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBUiTransform.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBUiTransform.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBUiTransform"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/video_event.gen.js
var import_minimal47 = __toESM(require_minimal2());
var VideoState;
(function(VideoState2) {
  VideoState2[VideoState2["VS_NONE"] = 0] = "VS_NONE";
  VideoState2[VideoState2["VS_ERROR"] = 1] = "VS_ERROR";
  VideoState2[VideoState2["VS_LOADING"] = 2] = "VS_LOADING";
  VideoState2[VideoState2["VS_READY"] = 3] = "VS_READY";
  VideoState2[VideoState2["VS_PLAYING"] = 4] = "VS_PLAYING";
  VideoState2[VideoState2["VS_BUFFERING"] = 5] = "VS_BUFFERING";
  VideoState2[VideoState2["VS_SEEKING"] = 6] = "VS_SEEKING";
  VideoState2[VideoState2["VS_PAUSED"] = 7] = "VS_PAUSED";
})(VideoState || (VideoState = {}));
function createBasePBVideoEvent() {
  return { timestamp: 0, tickNumber: 0, currentOffset: 0, videoLength: 0, state: 0 };
}
var PBVideoEvent;
(function(PBVideoEvent2) {
  function encode(message, writer = import_minimal47.default.Writer.create()) {
    if (message.timestamp !== 0) {
      writer.uint32(8).uint32(message.timestamp);
    }
    if (message.tickNumber !== 0) {
      writer.uint32(16).uint32(message.tickNumber);
    }
    if (message.currentOffset !== 0) {
      writer.uint32(29).float(message.currentOffset);
    }
    if (message.videoLength !== 0) {
      writer.uint32(37).float(message.videoLength);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    return writer;
  }
  PBVideoEvent2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal47.default.Reader ? input : import_minimal47.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBVideoEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.tickNumber = reader.uint32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.currentOffset = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.videoLength = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.state = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBVideoEvent2.decode = decode;
})(PBVideoEvent || (PBVideoEvent = {}));

// node_modules/@dcl/ecs/dist/components/generated/VideoEvent.gen.js
var VideoEventSchema = {
  COMPONENT_ID: 1044,
  serialize(value, builder) {
    const writer = PBVideoEvent.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBVideoEvent.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBVideoEvent.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBVideoEvent"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/video_player.gen.js
var import_minimal48 = __toESM(require_minimal2());
function createBasePBVideoPlayer() {
  return {
    src: "",
    playing: void 0,
    position: void 0,
    volume: void 0,
    playbackRate: void 0,
    loop: void 0
  };
}
var PBVideoPlayer;
(function(PBVideoPlayer2) {
  function encode(message, writer = import_minimal48.default.Writer.create()) {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.playing !== void 0) {
      writer.uint32(16).bool(message.playing);
    }
    if (message.position !== void 0) {
      writer.uint32(29).float(message.position);
    }
    if (message.volume !== void 0) {
      writer.uint32(37).float(message.volume);
    }
    if (message.playbackRate !== void 0) {
      writer.uint32(45).float(message.playbackRate);
    }
    if (message.loop !== void 0) {
      writer.uint32(48).bool(message.loop);
    }
    return writer;
  }
  PBVideoPlayer2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal48.default.Reader ? input : import_minimal48.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBVideoPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.src = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.playing = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }
          message.position = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }
          message.volume = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }
          message.playbackRate = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.loop = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBVideoPlayer2.decode = decode;
})(PBVideoPlayer || (PBVideoPlayer = {}));

// node_modules/@dcl/ecs/dist/components/generated/VideoPlayer.gen.js
var VideoPlayerSchema = {
  COMPONENT_ID: 1043,
  serialize(value, builder) {
    const writer = PBVideoPlayer.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBVideoPlayer.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBVideoPlayer.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBVideoPlayer"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/virtual_camera.gen.js
var import_minimal50 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/camera_transition.gen.js
var import_minimal49 = __toESM(require_minimal2());
function createBaseCameraTransition() {
  return { transitionMode: void 0 };
}
var CameraTransition;
(function(CameraTransition2) {
  function encode(message, writer = import_minimal49.default.Writer.create()) {
    switch (message.transitionMode?.$case) {
      case "time":
        writer.uint32(13).float(message.transitionMode.time);
        break;
      case "speed":
        writer.uint32(21).float(message.transitionMode.speed);
        break;
    }
    return writer;
  }
  CameraTransition2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal49.default.Reader ? input : import_minimal49.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseCameraTransition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }
          message.transitionMode = { $case: "time", time: reader.float() };
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }
          message.transitionMode = { $case: "speed", speed: reader.float() };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  CameraTransition2.decode = decode;
})(CameraTransition || (CameraTransition = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/virtual_camera.gen.js
function createBasePBVirtualCamera() {
  return { defaultTransition: void 0, lookAtEntity: void 0 };
}
var PBVirtualCamera;
(function(PBVirtualCamera2) {
  function encode(message, writer = import_minimal50.default.Writer.create()) {
    if (message.defaultTransition !== void 0) {
      CameraTransition.encode(message.defaultTransition, writer.uint32(10).fork()).ldelim();
    }
    if (message.lookAtEntity !== void 0) {
      writer.uint32(16).uint32(message.lookAtEntity);
    }
    return writer;
  }
  PBVirtualCamera2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal50.default.Reader ? input : import_minimal50.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBVirtualCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.defaultTransition = CameraTransition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.lookAtEntity = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBVirtualCamera2.decode = decode;
})(PBVirtualCamera || (PBVirtualCamera = {}));

// node_modules/@dcl/ecs/dist/components/generated/VirtualCamera.gen.js
var VirtualCameraSchema = {
  COMPONENT_ID: 1076,
  serialize(value, builder) {
    const writer = PBVirtualCamera.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBVirtualCamera.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBVirtualCamera.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBVirtualCamera"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/visibility_component.gen.js
var import_minimal51 = __toESM(require_minimal2());
function createBasePBVisibilityComponent() {
  return { visible: void 0 };
}
var PBVisibilityComponent;
(function(PBVisibilityComponent2) {
  function encode(message, writer = import_minimal51.default.Writer.create()) {
    if (message.visible !== void 0) {
      writer.uint32(8).bool(message.visible);
    }
    return writer;
  }
  PBVisibilityComponent2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal51.default.Reader ? input : import_minimal51.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBasePBVisibilityComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.visible = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  PBVisibilityComponent2.decode = decode;
})(PBVisibilityComponent || (PBVisibilityComponent = {}));

// node_modules/@dcl/ecs/dist/components/generated/VisibilityComponent.gen.js
var VisibilityComponentSchema = {
  COMPONENT_ID: 1081,
  serialize(value, builder) {
    const writer = PBVisibilityComponent.encode(value);
    const buffer2 = new Uint8Array(writer.finish(), 0, writer.len);
    builder.writeBuffer(buffer2, false);
  },
  deserialize(reader) {
    return PBVisibilityComponent.decode(reader.buffer(), reader.remainingBytes());
  },
  create() {
    return PBVisibilityComponent.decode(new Uint8Array());
  },
  jsonSchema: {
    type: "object",
    properties: {},
    serializationType: "protocol-buffer",
    protocolBuffer: "PBVisibilityComponent"
  }
};

// node_modules/@dcl/ecs/dist/components/generated/index.gen.js
var Animator = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::Animator", AnimatorSchema);
var AudioEvent = (engine2) => /* @__PURE__ */ engine2.defineValueSetComponentFromSchema("core::AudioEvent", AudioEventSchema, {
  timestampFunction: (t) => t.timestamp,
  maxElements: 100
});
var AudioSource = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AudioSource", AudioSourceSchema);
var AudioStream = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AudioStream", AudioStreamSchema);
var AvatarAttach = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AvatarAttach", AvatarAttachSchema);
var AvatarBase = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AvatarBase", AvatarBaseSchema);
var AvatarEmoteCommand = (engine2) => /* @__PURE__ */ engine2.defineValueSetComponentFromSchema("core::AvatarEmoteCommand", AvatarEmoteCommandSchema, {
  timestampFunction: (t) => t.timestamp,
  maxElements: 100
});
var AvatarEquippedData = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AvatarEquippedData", AvatarEquippedDataSchema);
var AvatarModifierArea = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AvatarModifierArea", AvatarModifierAreaSchema);
var AvatarShape = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::AvatarShape", AvatarShapeSchema);
var Billboard = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::Billboard", BillboardSchema);
var CameraMode = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::CameraMode", CameraModeSchema);
var CameraModeArea = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::CameraModeArea", CameraModeAreaSchema);
var EngineInfo = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::EngineInfo", EngineInfoSchema);
var GltfContainer = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::GltfContainer", GltfContainerSchema);
var GltfContainerLoadingState = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::GltfContainerLoadingState", GltfContainerLoadingStateSchema);
var InputModifier = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::InputModifier", InputModifierSchema);
var MainCamera = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::MainCamera", MainCameraSchema);
var Material = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::Material", MaterialSchema);
var MeshCollider = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::MeshCollider", MeshColliderSchema);
var MeshRenderer = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::MeshRenderer", MeshRendererSchema);
var NftShape = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::NftShape", NftShapeSchema);
var PlayerIdentityData = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::PlayerIdentityData", PlayerIdentityDataSchema);
var PointerEvents = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::PointerEvents", PointerEventsSchema);
var PointerEventsResult = (engine2) => /* @__PURE__ */ engine2.defineValueSetComponentFromSchema("core::PointerEventsResult", PointerEventsResultSchema, {
  timestampFunction: (t) => t.timestamp,
  maxElements: 100
});
var PointerLock = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::PointerLock", PointerLockSchema);
var Raycast = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::Raycast", RaycastSchema);
var RaycastResult = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::RaycastResult", RaycastResultSchema);
var RealmInfo = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::RealmInfo", RealmInfoSchema);
var TextShape = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::TextShape", TextShapeSchema);
var Tween = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::Tween", TweenSchema);
var TweenSequence = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::TweenSequence", TweenSequenceSchema);
var TweenState = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::TweenState", TweenStateSchema);
var UiBackground = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiBackground", UiBackgroundSchema);
var UiCanvasInformation = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiCanvasInformation", UiCanvasInformationSchema);
var UiDropdown = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiDropdown", UiDropdownSchema);
var UiDropdownResult = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiDropdownResult", UiDropdownResultSchema);
var UiInput = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiInput", UiInputSchema);
var UiInputResult = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiInputResult", UiInputResultSchema);
var UiText = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiText", UiTextSchema);
var UiTransform = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::UiTransform", UiTransformSchema);
var VideoEvent = (engine2) => /* @__PURE__ */ engine2.defineValueSetComponentFromSchema("core::VideoEvent", VideoEventSchema, {
  timestampFunction: (t) => t.timestamp,
  maxElements: 100
});
var VideoPlayer = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::VideoPlayer", VideoPlayerSchema);
var VirtualCamera = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::VirtualCamera", VirtualCameraSchema);
var VisibilityComponent = (engine2) => /* @__PURE__ */ engine2.defineComponentFromSchema("core::VisibilityComponent", VisibilityComponentSchema);
var componentDefinitionByName = {
  "core::Animator": Animator,
  "core::AudioEvent": AudioEvent,
  "core::AudioSource": AudioSource,
  "core::AudioStream": AudioStream,
  "core::AvatarAttach": AvatarAttach,
  "core::AvatarBase": AvatarBase,
  "core::AvatarEmoteCommand": AvatarEmoteCommand,
  "core::AvatarEquippedData": AvatarEquippedData,
  "core::AvatarModifierArea": AvatarModifierArea,
  "core::AvatarShape": AvatarShape,
  "core::Billboard": Billboard,
  "core::CameraMode": CameraMode,
  "core::CameraModeArea": CameraModeArea,
  "core::EngineInfo": EngineInfo,
  "core::GltfContainer": GltfContainer,
  "core::GltfContainerLoadingState": GltfContainerLoadingState,
  "core::InputModifier": InputModifier,
  "core::MainCamera": MainCamera,
  "core::Material": Material,
  "core::MeshCollider": MeshCollider,
  "core::MeshRenderer": MeshRenderer,
  "core::NftShape": NftShape,
  "core::PlayerIdentityData": PlayerIdentityData,
  "core::PointerEvents": PointerEvents,
  "core::PointerEventsResult": PointerEventsResult,
  "core::PointerLock": PointerLock,
  "core::Raycast": Raycast,
  "core::RaycastResult": RaycastResult,
  "core::RealmInfo": RealmInfo,
  "core::TextShape": TextShape,
  "core::Tween": Tween,
  "core::TweenSequence": TweenSequence,
  "core::TweenState": TweenState,
  "core::UiBackground": UiBackground,
  "core::UiCanvasInformation": UiCanvasInformation,
  "core::UiDropdown": UiDropdown,
  "core::UiDropdownResult": UiDropdownResult,
  "core::UiInput": UiInput,
  "core::UiInputResult": UiInputResult,
  "core::UiText": UiText,
  "core::UiTransform": UiTransform,
  "core::VideoEvent": VideoEvent,
  "core::VideoPlayer": VideoPlayer,
  "core::VirtualCamera": VirtualCamera,
  "core::VisibilityComponent": VisibilityComponent
};

// node_modules/@dcl/ecs/dist/components/extended/Material.js
var TextureHelper = {
  Common(texture) {
    return {
      tex: {
        $case: "texture",
        texture
      }
    };
  },
  Avatar(avatarTexture) {
    return {
      tex: {
        $case: "avatarTexture",
        avatarTexture
      }
    };
  },
  Video(videoTexture) {
    return {
      tex: {
        $case: "videoTexture",
        videoTexture
      }
    };
  }
};
function defineMaterialComponent(engine2) {
  const theComponent = Material(engine2);
  return {
    ...theComponent,
    Texture: TextureHelper,
    setBasicMaterial(entity, material) {
      theComponent.createOrReplace(entity, {
        material: {
          $case: "unlit",
          unlit: material
        }
      });
    },
    setPbrMaterial(entity, material) {
      theComponent.createOrReplace(entity, {
        material: {
          $case: "pbr",
          pbr: material
        }
      });
    }
  };
}

// node_modules/@dcl/ecs/dist/components/extended/MeshCollider.js
function defineMeshColliderComponent(engine2) {
  const theComponent = MeshCollider(engine2);
  function getCollisionMask(layers) {
    if (Array.isArray(layers)) {
      return layers.map((item) => item).reduce((prev, item) => prev | item, 0);
    } else if (layers) {
      return layers;
    }
  }
  return {
    ...theComponent,
    setBox(entity, colliderLayers) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "box", box: {} },
        collisionMask: getCollisionMask(colliderLayers)
      });
    },
    setPlane(entity, colliderLayers) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "plane", plane: {} },
        collisionMask: getCollisionMask(colliderLayers)
      });
    },
    setCylinder(entity, radiusBottom, radiusTop, colliderLayers) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "cylinder", cylinder: { radiusBottom, radiusTop } },
        collisionMask: getCollisionMask(colliderLayers)
      });
    },
    setSphere(entity, colliderLayers) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "sphere", sphere: {} },
        collisionMask: getCollisionMask(colliderLayers)
      });
    }
  };
}

// node_modules/@dcl/ecs/dist/components/extended/MeshRenderer.js
function defineMeshRendererComponent(engine2) {
  const theComponent = MeshRenderer(engine2);
  return {
    ...theComponent,
    setBox(entity, uvs) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "box", box: { uvs: uvs || [] } }
      });
    },
    setPlane(entity, uvs) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "plane", plane: { uvs: uvs || [] } }
      });
    },
    setCylinder(entity, radiusBottom, radiusTop) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "cylinder", cylinder: { radiusBottom, radiusTop } }
      });
    },
    setSphere(entity) {
      theComponent.createOrReplace(entity, {
        mesh: { $case: "sphere", sphere: {} }
      });
    }
  };
}

// node_modules/@dcl/ecs/dist/components/extended/Tween.js
var TweenHelper = {
  Move(move) {
    return {
      $case: "move",
      move
    };
  },
  Rotate(rotate) {
    return {
      $case: "rotate",
      rotate
    };
  },
  Scale(scale) {
    return {
      $case: "scale",
      scale
    };
  },
  TextureMove(textureMove) {
    return {
      $case: "textureMove",
      textureMove
    };
  }
};
function defineTweenComponent(engine2) {
  const theComponent = Tween(engine2);
  return {
    ...theComponent,
    Mode: TweenHelper
  };
}

// node_modules/@dcl/ecs/dist/schemas/Array.js
var IArray = (type) => {
  return {
    serialize(value, builder) {
      builder.writeUint32(value.length);
      for (const item of value) {
        type.serialize(item, builder);
      }
    },
    deserialize(reader) {
      const newArray = [];
      const length2 = reader.readUint32();
      for (let index = 0; index < length2; index++) {
        newArray.push(type.deserialize(reader));
      }
      return newArray;
    },
    create() {
      return [];
    },
    jsonSchema: {
      type: "array",
      items: type.jsonSchema,
      serializationType: "array"
    }
  };
};

// node_modules/@dcl/ecs/dist/schemas/basic/Boolean.js
var Bool = {
  serialize(value, builder) {
    builder.writeInt8(value ? 1 : 0);
  },
  deserialize(reader) {
    return reader.readInt8() === 1;
  },
  create() {
    return false;
  },
  jsonSchema: {
    type: "boolean",
    serializationType: "boolean"
  }
};

// node_modules/@dcl/ecs/dist/schemas/basic/Integer.js
var Int64 = {
  serialize(value, builder) {
    builder.writeInt64(BigInt(value));
  },
  deserialize(reader) {
    return Number(reader.readInt64());
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "integer",
    serializationType: "int64"
  }
};
var Int32 = {
  serialize(value, builder) {
    builder.writeInt32(value);
  },
  deserialize(reader) {
    return reader.readInt32();
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "integer",
    serializationType: "int32"
  }
};
var Int16 = {
  serialize(value, builder) {
    builder.writeInt16(value);
  },
  deserialize(reader) {
    return reader.readInt16();
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "integer",
    serializationType: "int16"
  }
};
var Int8 = {
  serialize(value, builder) {
    builder.writeInt8(value);
  },
  deserialize(reader) {
    return reader.readInt8();
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "integer",
    serializationType: "int8"
  }
};

// node_modules/@dcl/ecs/dist/schemas/basic/String.js
var FlatString = {
  serialize(value, builder) {
    builder.writeUtf8String(value);
  },
  deserialize(reader) {
    return reader.readUtf8String();
  },
  create() {
    return "";
  },
  jsonSchema: {
    type: "string",
    serializationType: "utf8-string"
  }
};
var EcsString = FlatString;

// node_modules/@dcl/ecs/dist/schemas/basic/Enum.js
function validateMemberValuesAreNumbersAndInRangeInt32(enumValue) {
  const MIN_VALUE2 = -(2 ** 31), MAX_VALUE2 = 2 ** 31 - 1;
  let valueCount = 0, totalCount = 0;
  for (const key in enumValue) {
    if (typeof enumValue[key] === "number") {
      if (enumValue[key] > MAX_VALUE2 || enumValue[key] < MIN_VALUE2) {
        throw new Error(`Enum member values must be numbers within the range of ${MIN_VALUE2} to ${MAX_VALUE2}.`);
      }
      valueCount++;
    }
    totalCount++;
  }
  if (totalCount !== valueCount * 2) {
    throw new Error("All enum member values must be of numeric type.");
  }
}
function validateMemberValuesAreStrings(enumValue) {
  for (const key in enumValue) {
    if (typeof enumValue[key] !== "string") {
      throw new Error("All enum member values must be of string type.");
    }
  }
}
var IntEnumReflectionType = "enum-int";
var IntEnum = (enumObject, defaultValue) => {
  validateMemberValuesAreNumbersAndInRangeInt32(enumObject);
  return {
    serialize(value, builder) {
      Int32.serialize(value, builder);
    },
    deserialize(reader) {
      return Int32.deserialize(reader);
    },
    create() {
      return defaultValue;
    },
    jsonSchema: {
      // JSON-schema
      type: "integer",
      enum: Object.values(enumObject).filter((item) => Number.isInteger(item)),
      default: defaultValue,
      // @dcl/ecs Schema Spec
      serializationType: IntEnumReflectionType,
      enumObject
    }
  };
};
var StringEnumReflectionType = "enum-string";
var StringEnum = (enumObject, defaultValue) => {
  validateMemberValuesAreStrings(enumObject);
  return {
    serialize(value, builder) {
      FlatString.serialize(value, builder);
    },
    deserialize(reader) {
      return FlatString.deserialize(reader);
    },
    create() {
      return defaultValue;
    },
    jsonSchema: {
      // JSON-schema
      type: "string",
      enum: Object.values(enumObject),
      default: defaultValue,
      // @dcl/ecs Schema Spec
      serializationType: StringEnumReflectionType,
      enumObject
    }
  };
};

// node_modules/@dcl/ecs/dist/schemas/basic/Float.js
var Float32 = {
  serialize(value, builder) {
    builder.writeFloat32(value);
  },
  deserialize(reader) {
    return reader.readFloat32();
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "number",
    serializationType: "float32"
  }
};
var Float64 = {
  serialize(value, builder) {
    builder.writeFloat64(value);
  },
  deserialize(reader) {
    return reader.readFloat64();
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "number",
    serializationType: "float64"
  }
};

// node_modules/@dcl/ecs/dist/schemas/custom/Color3.js
var Color3Schema = {
  serialize(value, builder) {
    builder.writeFloat32(value.r);
    builder.writeFloat32(value.g);
    builder.writeFloat32(value.b);
  },
  deserialize(reader) {
    return {
      r: reader.readFloat32(),
      g: reader.readFloat32(),
      b: reader.readFloat32()
    };
  },
  create() {
    return { r: 0, g: 0, b: 0 };
  },
  jsonSchema: {
    type: "object",
    properties: {
      r: { type: "number" },
      g: { type: "number" },
      b: { type: "number" }
    },
    serializationType: "color3"
  }
};

// node_modules/@dcl/ecs/dist/schemas/custom/Color4.js
var Color4Schema = {
  serialize(value, builder) {
    builder.writeFloat32(value.r);
    builder.writeFloat32(value.g);
    builder.writeFloat32(value.b);
    builder.writeFloat32(value.a);
  },
  deserialize(reader) {
    return {
      r: reader.readFloat32(),
      g: reader.readFloat32(),
      b: reader.readFloat32(),
      a: reader.readFloat32()
    };
  },
  create() {
    return { r: 0, g: 0, b: 0, a: 0 };
  },
  jsonSchema: {
    type: "object",
    properties: {
      r: { type: "number" },
      g: { type: "number" },
      b: { type: "number" },
      a: { type: "number" }
    },
    serializationType: "color4"
  }
};

// node_modules/@dcl/ecs/dist/schemas/custom/Entity.js
var EntitySchema = {
  serialize(value, builder) {
    builder.writeInt32(value);
  },
  deserialize(reader) {
    return reader.readInt32();
  },
  create() {
    return 0;
  },
  jsonSchema: {
    type: "integer",
    serializationType: "entity"
  }
};

// node_modules/@dcl/ecs/dist/schemas/custom/Quaternion.js
var QuaternionSchema = {
  serialize(value, builder) {
    builder.writeFloat32(value.x);
    builder.writeFloat32(value.y);
    builder.writeFloat32(value.z);
    builder.writeFloat32(value.w);
  },
  deserialize(reader) {
    return {
      x: reader.readFloat32(),
      y: reader.readFloat32(),
      z: reader.readFloat32(),
      w: reader.readFloat32()
    };
  },
  create() {
    return { x: 0, y: 0, z: 0, w: 0 };
  },
  jsonSchema: {
    type: "object",
    properties: {
      x: { type: "number" },
      y: { type: "number" },
      z: { type: "number" },
      w: { type: "number" }
    },
    serializationType: "quaternion"
  }
};

// node_modules/@dcl/ecs/dist/schemas/custom/Vector3.js
var Vector3Schema = {
  serialize(value, builder) {
    builder.writeFloat32(value.x);
    builder.writeFloat32(value.y);
    builder.writeFloat32(value.z);
  },
  deserialize(reader) {
    return {
      x: reader.readFloat32(),
      y: reader.readFloat32(),
      z: reader.readFloat32()
    };
  },
  create() {
    return { x: 0, y: 0, z: 0 };
  },
  jsonSchema: {
    type: "object",
    properties: {
      x: { type: "number" },
      y: { type: "number" },
      z: { type: "number" },
      w: { type: "number" }
    },
    serializationType: "vector3"
  }
};

// node_modules/@dcl/ecs/dist/schemas/Map.js
var IMap = (spec, defaultValue) => {
  const specReflection = Object.keys(spec).reduce((specReflection2, currentKey) => {
    specReflection2[currentKey] = spec[currentKey].jsonSchema;
    return specReflection2;
  }, {});
  return {
    serialize(value, builder) {
      for (const key in spec) {
        spec[key].serialize(value[key], builder);
      }
    },
    deserialize(reader) {
      const newValue = {};
      for (const key in spec) {
        ;
        newValue[key] = spec[key].deserialize(reader);
      }
      return newValue;
    },
    create() {
      const newValue = {};
      for (const key in spec) {
        ;
        newValue[key] = spec[key].create();
      }
      return { ...newValue, ...defaultValue };
    },
    extend: (base) => {
      const newValue = {};
      for (const key in spec) {
        ;
        newValue[key] = spec[key].create();
      }
      return { ...newValue, ...defaultValue, ...base };
    },
    jsonSchema: {
      type: "object",
      properties: specReflection,
      serializationType: "map"
    }
  };
};

// node_modules/@dcl/ecs/dist/schemas/Optional.js
var IOptional = (spec) => {
  return {
    serialize(value, builder) {
      if (value) {
        builder.writeInt8(1);
        spec.serialize(value, builder);
      } else {
        builder.writeInt8(0);
      }
    },
    deserialize(reader) {
      const exists = reader.readInt8();
      if (exists) {
        return spec.deserialize(reader);
      }
    },
    create() {
      return void 0;
    },
    jsonSchema: {
      type: spec.jsonSchema.type,
      serializationType: "optional",
      optionalJsonSchema: spec.jsonSchema
    }
  };
};

// node_modules/@dcl/ecs/dist/schemas/OneOf.js
var IOneOf = (specs) => {
  const specKeys = Object.keys(specs);
  const keyToIndex = specKeys.reduce((dict, key, index) => {
    dict[key] = index;
    return dict;
  }, {});
  const specReflection = specKeys.reduce((specReflection2, currentKey) => {
    specReflection2[currentKey] = specs[currentKey].jsonSchema;
    return specReflection2;
  }, {});
  return {
    serialize({ $case, value }, builder) {
      const _value = keyToIndex[$case.toString()] + 1;
      builder.writeUint8(_value);
      specs[$case].serialize(value, builder);
    },
    deserialize(reader) {
      const $case = specKeys[reader.readInt8() - 1];
      const value = specs[$case].deserialize(reader);
      return { $case, value };
    },
    create() {
      return {};
    },
    jsonSchema: {
      type: "object",
      properties: specReflection,
      serializationType: "one-of"
    }
  };
};

// node_modules/@dcl/ecs/dist/schemas/buildSchema/utils.js
var isSchemaType = (value, types) => types.includes(value.serializationType);
var isOneOfJsonSchema = (type) => isSchemaType(type, ["one-of"]);
var getUnknownSchema = () => ({
  type: { type: "object", serializationType: "unknown" },
  value: void 0
});
var isCompoundType = (type) => isSchemaType(type, ["array", "map"]);
var getTypeAndValue = (properties, value, key) => {
  const type = properties[key];
  const valueKey = value[key];
  if (isOneOfJsonSchema(type)) {
    const typedMapValue = valueKey;
    if (!typedMapValue.$case)
      return getUnknownSchema();
    const propType = type.properties[typedMapValue.$case];
    if (isCompoundType(propType))
      value[key] = { [typedMapValue.$case]: typedMapValue.value };
    return { type: propType, value: typedMapValue.value };
  }
  return { type, value: valueKey };
};

// node_modules/@dcl/ecs/dist/schemas/buildSchema/index.js
var primitiveSchemas = {
  [Bool.jsonSchema.serializationType]: Bool,
  [EcsString.jsonSchema.serializationType]: EcsString,
  [Float32.jsonSchema.serializationType]: Float32,
  [Float64.jsonSchema.serializationType]: Float64,
  [Int8.jsonSchema.serializationType]: Int8,
  [Int16.jsonSchema.serializationType]: Int16,
  [Int32.jsonSchema.serializationType]: Int32,
  [Int64.jsonSchema.serializationType]: Int64,
  [Vector3Schema.jsonSchema.serializationType]: Vector3Schema,
  [QuaternionSchema.jsonSchema.serializationType]: QuaternionSchema,
  [Color3Schema.jsonSchema.serializationType]: Color3Schema,
  [Color4Schema.jsonSchema.serializationType]: Color4Schema,
  [EntitySchema.jsonSchema.serializationType]: EntitySchema
};
function jsonSchemaToSchema(jsonSchema) {
  if (primitiveSchemas[jsonSchema.serializationType]) {
    return primitiveSchemas[jsonSchema.serializationType];
  }
  if (jsonSchema.serializationType === "map") {
    const mapJsonSchema = jsonSchema;
    const spec = {};
    for (const key in mapJsonSchema.properties) {
      spec[key] = jsonSchemaToSchema(mapJsonSchema.properties[key]);
    }
    return IMap(spec);
  }
  if (jsonSchema.serializationType === "optional") {
    const withItemsJsonSchema = jsonSchema;
    return IOptional(jsonSchemaToSchema(withItemsJsonSchema.optionalJsonSchema));
  }
  if (jsonSchema.serializationType === "array") {
    const withItemsJsonSchema = jsonSchema;
    return IArray(jsonSchemaToSchema(withItemsJsonSchema.items));
  }
  if (jsonSchema.serializationType === "enum-int") {
    const enumJsonSchema = jsonSchema;
    return IntEnum(enumJsonSchema.enumObject, enumJsonSchema.default);
  }
  if (jsonSchema.serializationType === "enum-string") {
    const enumJsonSchema = jsonSchema;
    return StringEnum(enumJsonSchema.enumObject, enumJsonSchema.default);
  }
  if (jsonSchema.serializationType === "one-of") {
    const oneOfJsonSchema = jsonSchema;
    const spec = {};
    for (const key in oneOfJsonSchema.properties) {
      spec[key] = jsonSchemaToSchema(oneOfJsonSchema.properties[key]);
    }
    return IOneOf(spec);
  }
  throw new Error(`${jsonSchema.serializationType} is not supported as reverse schema generation.`);
}
function mutateValues(jsonSchema, value, mutateFn) {
  if (jsonSchema.serializationType === "map") {
    const { properties } = jsonSchema;
    const typedValue = value;
    for (const key in properties) {
      const { type, value: mapValue } = getTypeAndValue(properties, typedValue, key);
      if (type.serializationType === "unknown")
        continue;
      if (isCompoundType(type)) {
        mutateValues(type, mapValue, mutateFn);
      } else {
        const newValue = mutateFn(mapValue, type);
        if (newValue.changed) {
          typedValue[key] = newValue.value;
        }
      }
    }
  } else if (jsonSchema.serializationType === "array") {
    const { items } = jsonSchema;
    const arrayValue = value;
    for (let i = 0, n = arrayValue.length; i < n; i++) {
      const { type, value: value2 } = getTypeAndValue({ items }, { items: arrayValue[i] }, "items");
      if (isCompoundType(type)) {
        mutateValues(type, value2, mutateFn);
      } else {
        const newValue = mutateFn(value2, type);
        if (newValue.changed) {
          arrayValue[i] = newValue.value;
        }
      }
    }
  }
}

// node_modules/@dcl/ecs/dist/schemas/index.js
var Schemas;
(function(Schemas2) {
  Schemas2.Boolean = Bool;
  Schemas2.String = EcsString;
  Schemas2.Float = Float32;
  Schemas2.Double = Float64;
  Schemas2.Byte = Int8;
  Schemas2.Short = Int16;
  Schemas2.Int = Int32;
  Schemas2.Int64 = Int64;
  Schemas2.Number = Float32;
  Schemas2.Vector3 = Vector3Schema;
  Schemas2.Quaternion = QuaternionSchema;
  Schemas2.Color3 = Color3Schema;
  Schemas2.Color4 = Color4Schema;
  Schemas2.Entity = EntitySchema;
  Schemas2.EnumNumber = IntEnum;
  Schemas2.EnumString = StringEnum;
  Schemas2.Array = IArray;
  Schemas2.Map = IMap;
  Schemas2.Optional = IOptional;
  Schemas2.OneOf = IOneOf;
  Schemas2.fromJson = jsonSchemaToSchema;
  Schemas2.mutateNestedValues = mutateValues;
})(Schemas || (Schemas = {}));

// node_modules/@dcl/ecs/dist/components/manual/Name.js
function defineNameComponent(engine2) {
  const Name3 = engine2.defineComponent("core-schema::Name", {
    value: Schemas.String
  });
  return Name3;
}
var Name_default = defineNameComponent;

// node_modules/@dcl/ecs/dist/components/manual/NetworkEntity.js
function defineNetworkEntityComponent(engine2) {
  const EntityNetwork = engine2.defineComponent("core-schema::Network-Entity", {
    networkId: Schemas.Int64,
    entityId: Schemas.Entity
  });
  return EntityNetwork;
}
var NetworkEntity_default = defineNetworkEntityComponent;

// node_modules/@dcl/ecs/dist/components/manual/NetworkParent.js
function defineNetworkParentComponent(engine2) {
  const EntityNetwork = engine2.defineComponent("core-schema::Network-Parent", {
    networkId: Schemas.Int64,
    entityId: Schemas.Entity
  });
  return EntityNetwork;
}
var NetworkParent_default = defineNetworkParentComponent;

// node_modules/@dcl/ecs/dist/components/manual/Transform.js
var TRANSFORM_LENGTH = 44;
var TransformSchema = {
  serialize(value, builder) {
    const ptr = builder.incrementWriteOffset(TRANSFORM_LENGTH);
    builder.setFloat32(ptr, value.position.x);
    builder.setFloat32(ptr + 4, value.position.y);
    builder.setFloat32(ptr + 8, value.position.z);
    builder.setFloat32(ptr + 12, value.rotation.x);
    builder.setFloat32(ptr + 16, value.rotation.y);
    builder.setFloat32(ptr + 20, value.rotation.z);
    builder.setFloat32(ptr + 24, value.rotation.w);
    builder.setFloat32(ptr + 28, value.scale.x);
    builder.setFloat32(ptr + 32, value.scale.y);
    builder.setFloat32(ptr + 36, value.scale.z);
    builder.setUint32(ptr + 40, value.parent || 0);
  },
  deserialize(reader) {
    const ptr = reader.incrementReadOffset(TRANSFORM_LENGTH);
    return {
      position: {
        x: reader.getFloat32(ptr),
        y: reader.getFloat32(ptr + 4),
        z: reader.getFloat32(ptr + 8)
      },
      rotation: {
        x: reader.getFloat32(ptr + 12),
        y: reader.getFloat32(ptr + 16),
        z: reader.getFloat32(ptr + 20),
        w: reader.getFloat32(ptr + 24)
      },
      scale: {
        x: reader.getFloat32(ptr + 28),
        y: reader.getFloat32(ptr + 32),
        z: reader.getFloat32(ptr + 36)
      },
      parent: reader.getUint32(ptr + 40)
    };
  },
  create() {
    return {
      position: { x: 0, y: 0, z: 0 },
      scale: { x: 1, y: 1, z: 1 },
      rotation: { x: 0, y: 0, z: 0, w: 1 },
      parent: 0
    };
  },
  extend(value) {
    return {
      position: { x: 0, y: 0, z: 0 },
      scale: { x: 1, y: 1, z: 1 },
      rotation: { x: 0, y: 0, z: 0, w: 1 },
      parent: 0,
      ...value
    };
  },
  jsonSchema: {
    type: "object",
    properties: {
      position: {
        type: "object",
        properties: {
          x: { type: "number" },
          y: { type: "number" },
          z: { type: "number" }
        }
      },
      scale: {
        type: "object",
        properties: {
          x: { type: "number" },
          y: { type: "number" },
          z: { type: "number" }
        }
      },
      rotation: {
        type: "object",
        properties: {
          x: { type: "number" },
          y: { type: "number" },
          z: { type: "number" },
          w: { type: "number" }
        }
      },
      parent: { type: "integer" }
    },
    serializationType: "transform"
  }
};
function defineTransformComponent(engine2) {
  const transformDef = engine2.defineComponentFromSchema("core::Transform", TransformSchema);
  return {
    ...transformDef,
    create(entity, val) {
      return transformDef.create(entity, TransformSchema.extend(val));
    },
    createOrReplace(entity, val) {
      return transformDef.createOrReplace(entity, TransformSchema.extend(val));
    }
  };
}

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/media_state.gen.js
var MediaState;
(function(MediaState2) {
  MediaState2[MediaState2["MS_NONE"] = 0] = "MS_NONE";
  MediaState2[MediaState2["MS_ERROR"] = 1] = "MS_ERROR";
  MediaState2[MediaState2["MS_LOADING"] = 2] = "MS_LOADING";
  MediaState2[MediaState2["MS_READY"] = 3] = "MS_READY";
  MediaState2[MediaState2["MS_PLAYING"] = 4] = "MS_PLAYING";
  MediaState2[MediaState2["MS_BUFFERING"] = 5] = "MS_BUFFERING";
  MediaState2[MediaState2["MS_SEEKING"] = 6] = "MS_SEEKING";
  MediaState2[MediaState2["MS_PAUSED"] = 7] = "MS_PAUSED";
})(MediaState || (MediaState = {}));

// node_modules/@dcl/ecs/dist/components/index.js
var Transform = (engine2) => defineTransformComponent(engine2);
var Material2 = (engine2) => defineMaterialComponent(engine2);
var MeshRenderer2 = (engine2) => defineMeshRendererComponent(engine2);
var MeshCollider2 = (engine2) => defineMeshColliderComponent(engine2);
var Tween2 = (engine2) => defineTweenComponent(engine2);
var Name = (engine2) => Name_default(engine2);
var NetworkEntity = (engine2) => NetworkEntity_default(engine2);
var NetworkParent = (engine2) => NetworkParent_default(engine2);

// node_modules/@dcl/ecs/dist/components/generated/component-names.gen.js
var coreComponentMappings = {
  "core::Transform": 1,
  "core::Animator": 1042,
  "core::AudioEvent": 1105,
  "core::AudioSource": 1020,
  "core::AudioStream": 1021,
  "core::AvatarAttach": 1073,
  "core::AvatarBase": 1087,
  "core::AvatarEmoteCommand": 1088,
  "core::AvatarEquippedData": 1091,
  "core::AvatarModifierArea": 1070,
  "core::AvatarShape": 1080,
  "core::Billboard": 1090,
  "core::CameraMode": 1072,
  "core::CameraModeArea": 1071,
  "core::EngineInfo": 1048,
  "core::GltfContainer": 1041,
  "core::GltfContainerLoadingState": 1049,
  "core::InputModifier": 1078,
  "core::MainCamera": 1075,
  "core::MapPin": 1097,
  "core::Material": 1017,
  "core::MeshCollider": 1019,
  "core::MeshRenderer": 1018,
  "core::NftShape": 1040,
  "core::PlayerIdentityData": 1089,
  "core::PointerEvents": 1062,
  "core::PointerEventsResult": 1063,
  "core::PointerLock": 1074,
  "core::Raycast": 1067,
  "core::RaycastResult": 1068,
  "core::RealmInfo": 1106,
  "core::TextShape": 1030,
  "core::Tween": 1102,
  "core::TweenSequence": 1104,
  "core::TweenState": 1103,
  "core::UiBackground": 1053,
  "core::UiCanvasInformation": 1054,
  "core::UiDropdown": 1094,
  "core::UiDropdownResult": 1096,
  "core::UiInput": 1093,
  "core::UiInputResult": 1095,
  "core::UiText": 1052,
  "core::UiTransform": 1050,
  "core::VideoEvent": 1044,
  "core::VideoPlayer": 1043,
  "core::VirtualCamera": 1076,
  "core::VisibilityComponent": 1081
};

// node_modules/@dcl/ecs/dist/components/component-number.js
var utf8 = __toESM(require_utf8());

// node_modules/@dcl/ecs/dist/runtime/crc.js
var CRC_TABLE = new Int32Array([
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
]);
function _crc32(buf, previous) {
  let crc = ~~previous ^ -1;
  for (let n = 0; n < buf.length; n++) {
    crc = CRC_TABLE[(crc ^ buf[n]) & 255] ^ crc >>> 8;
  }
  return crc ^ -1;
}
function unsignedCRC32(data, prev = 0) {
  return _crc32(data, prev) >>> 0;
}

// node_modules/@dcl/ecs/dist/components/component-number.js
var MAX_STATIC_COMPONENT = 1 << 11;
function componentNumberFromName(componentName) {
  if (coreComponentMappings[componentName])
    return coreComponentMappings[componentName];
  const bytes = new Uint8Array(128);
  utf8.write(componentName, bytes, 0);
  return (unsignedCRC32(bytes) + MAX_STATIC_COMPONENT & 4294967295) >>> 0;
}

// node_modules/@dcl/ecs/dist/runtime/invariant.js
var __DEV__ = true;
function checkNotThenable(t, error) {
  if (__DEV__) {
    if (t && typeof t === "object" && typeof t.then === "function") {
      throw new Error(error);
    }
  }
  return t;
}

// node_modules/@dcl/ecs/dist/systems/crdt/gset.js
function createVersionGSet() {
  const lastVersion = /* @__PURE__ */ new Map();
  return {
    /**
     *
     * @param number
     * @param version
     * @returns
     */
    addTo(number, version) {
      if (version < 0) {
        return false;
      }
      const currentValue = lastVersion.get(number);
      if (currentValue !== void 0 && currentValue >= version) {
        return true;
      }
      lastVersion.set(number, version);
      return true;
    },
    /**
     * @returns the set with [number, version] of each value
     */
    has(n, v) {
      const currentValue = lastVersion.get(n);
      if (currentValue !== void 0 && currentValue >= v) {
        return true;
      }
      return false;
    },
    /**
     * Warning: this function returns the reference to the internal map,
     *  if you need to mutate some value, make a copy.
     * For optimization purpose the copy isn't made here.
     *
     * @returns the map of number to version
     */
    getMap() {
      return lastVersion;
    }
  };
}

// node_modules/@dcl/ecs/dist/engine/entity.js
var MAX_U16 = 65535;
var MASK_UPPER_16_ON_32 = 4294901760;
var AMOUNT_VERSION_AVAILABLE = MAX_U16 + 1;
var MAX_ENTITY_NUMBER = MAX_U16;
var RESERVED_STATIC_ENTITIES = 512;
var EntityUtils;
(function(EntityUtils2) {
  function fromEntityId(entityId) {
    return [(entityId & MAX_U16) >>> 0, ((entityId & MASK_UPPER_16_ON_32) >> 16 & MAX_U16) >>> 0];
  }
  EntityUtils2.fromEntityId = fromEntityId;
  function toEntityId(entityNumber, entityVersion) {
    return (entityNumber & MAX_U16 | (entityVersion & MAX_U16) << 16) >>> 0;
  }
  EntityUtils2.toEntityId = toEntityId;
})(EntityUtils || (EntityUtils = {}));
var EntityState;
(function(EntityState2) {
  EntityState2[EntityState2["Unknown"] = 0] = "Unknown";
  EntityState2[EntityState2["UsedEntity"] = 1] = "UsedEntity";
  EntityState2[EntityState2["Removed"] = 2] = "Removed";
  EntityState2[EntityState2["Reserved"] = 3] = "Reserved";
})(EntityState || (EntityState = {}));
function createEntityContainer(opts) {
  const reservedStaticEntities = opts?.reservedStaticEntities ?? RESERVED_STATIC_ENTITIES;
  let entityCounter = reservedStaticEntities;
  const usedEntities = /* @__PURE__ */ new Set();
  let toRemoveEntities = [];
  const removedEntities = createVersionGSet();
  function generateNewEntity() {
    if (entityCounter > MAX_ENTITY_NUMBER - 1) {
      throw new Error(`It fails trying to generate an entity out of range ${MAX_ENTITY_NUMBER}.`);
    }
    const entityNumber = entityCounter++;
    const entityVersion = removedEntities.getMap().has(entityNumber) ? removedEntities.getMap().get(entityNumber) + 1 : 0;
    const entity = EntityUtils.toEntityId(entityNumber, entityVersion);
    if (usedEntities.has(entity)) {
      return generateNewEntity();
    }
    usedEntities.add(entity);
    return entity;
  }
  function generateEntity() {
    const usedSize = usedEntities.size;
    if (usedSize + reservedStaticEntities >= entityCounter) {
      return generateNewEntity();
    }
    for (const [number, version] of removedEntities.getMap()) {
      if (version < MAX_U16) {
        const entity = EntityUtils.toEntityId(number, version + 1);
        if (!usedEntities.has(entity) && !toRemoveEntities.includes(entity)) {
          usedEntities.add(entity);
          return entity;
        }
      }
    }
    return generateNewEntity();
  }
  function removeEntity(entity) {
    if (entity < reservedStaticEntities)
      return false;
    if (usedEntities.has(entity)) {
      usedEntities.delete(entity);
      toRemoveEntities.push(entity);
    } else {
      updateRemovedEntity(entity);
    }
    return true;
  }
  function releaseRemovedEntities() {
    const arr = toRemoveEntities;
    if (arr.length) {
      toRemoveEntities = [];
      for (const entity of arr) {
        const [n, v] = EntityUtils.fromEntityId(entity);
        removedEntities.addTo(n, v);
      }
    }
    return arr;
  }
  function updateRemovedEntity(entity) {
    const [n, v] = EntityUtils.fromEntityId(entity);
    removedEntities.addTo(n, v);
    for (let i = 0; i <= v; i++) {
      usedEntities.delete(EntityUtils.toEntityId(n, i));
    }
    return true;
  }
  function updateUsedEntity(entity) {
    const [n, v] = EntityUtils.fromEntityId(entity);
    if (removedEntities.has(n, v))
      return false;
    if (v > 0) {
      for (let i = 0; i <= v - 1; i++) {
        usedEntities.delete(EntityUtils.toEntityId(n, i));
      }
      removedEntities.addTo(n, v - 1);
    }
    usedEntities.add(entity);
    return true;
  }
  function getEntityState(entity) {
    const [n, v] = EntityUtils.fromEntityId(entity);
    if (n < reservedStaticEntities) {
      return EntityState.Reserved;
    }
    if (usedEntities.has(entity)) {
      return EntityState.UsedEntity;
    }
    const removedVersion = removedEntities.getMap().get(n);
    if (removedVersion !== void 0 && removedVersion >= v) {
      return EntityState.Removed;
    }
    return EntityState.Unknown;
  }
  return {
    generateEntity,
    removeEntity,
    getExistingEntities() {
      return new Set(usedEntities);
    },
    getEntityState,
    releaseRemovedEntities,
    updateRemovedEntity,
    updateUsedEntity
  };
}

// node_modules/@dcl/ecs/dist/serialization/ByteBuffer/index.js
var utf82 = __toESM(require_utf8());
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ReadWriteByteBuffer_instances;
var _ReadWriteByteBuffer_woAdd;
var _ReadWriteByteBuffer_roAdd;
function getNextSize(currentSize, intendedSize) {
  const minNewSize = Math.max(currentSize, intendedSize) + 1024;
  return Math.ceil(minNewSize / 1024) * 1024;
}
var defaultInitialCapacity = 10240;
var ReadWriteByteBuffer = class {
  /**
   * @param buffer - The initial buffer, provide a buffer if you need to set "initial capacity"
   * @param readingOffset - Set the cursor where begins to read. Default 0
   * @param writingOffset - Set the cursor to not start writing from the begin of it. Defaults to the buffer size
   */
  constructor(buffer2, readingOffset, writingOffset) {
    _ReadWriteByteBuffer_instances.add(this);
    this._buffer = buffer2 || new Uint8Array(defaultInitialCapacity);
    this.view = new DataView(this._buffer.buffer, this._buffer.byteOffset);
    this.woffset = writingOffset ?? (buffer2 ? this._buffer.length : null) ?? 0;
    this.roffset = readingOffset ?? 0;
  }
  buffer() {
    return this._buffer;
  }
  bufferLength() {
    return this._buffer.length;
  }
  resetBuffer() {
    this.roffset = 0;
    this.woffset = 0;
  }
  currentReadOffset() {
    return this.roffset;
  }
  currentWriteOffset() {
    return this.woffset;
  }
  incrementReadOffset(amount) {
    return __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, amount);
  }
  remainingBytes() {
    return this.woffset - this.roffset;
  }
  readFloat32() {
    return this.view.getFloat32(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 4), true);
  }
  readFloat64() {
    return this.view.getFloat64(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 8), true);
  }
  readInt8() {
    return this.view.getInt8(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 1));
  }
  readInt16() {
    return this.view.getInt16(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 2), true);
  }
  readInt32() {
    return this.view.getInt32(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 4), true);
  }
  readInt64() {
    return this.view.getBigInt64(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 8), true);
  }
  readUint8() {
    return this.view.getUint8(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 1));
  }
  readUint16() {
    return this.view.getUint16(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 2), true);
  }
  readUint32() {
    return this.view.getUint32(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 4), true);
  }
  readUint64() {
    return this.view.getBigUint64(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 8), true);
  }
  readBuffer() {
    const length2 = this.view.getUint32(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 4), true);
    return this._buffer.subarray(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, length2), __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 0));
  }
  readUtf8String() {
    const length2 = this.view.getUint32(__classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 4), true);
    return utf82.read(this._buffer, __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, length2), __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_roAdd).call(this, 0));
  }
  incrementWriteOffset(amount) {
    return __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, amount);
  }
  toBinary() {
    return this._buffer.subarray(0, this.woffset);
  }
  toCopiedBinary() {
    return new Uint8Array(this.toBinary());
  }
  writeBuffer(value, writeLength = true) {
    if (writeLength) {
      this.writeUint32(value.byteLength);
    }
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, value.byteLength);
    this._buffer.set(value, o);
  }
  writeUtf8String(value, writeLength = true) {
    const byteLength = utf82.length(value);
    if (writeLength) {
      this.writeUint32(byteLength);
    }
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, byteLength);
    utf82.write(value, this._buffer, o);
  }
  writeFloat32(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 4);
    this.view.setFloat32(o, value, true);
  }
  writeFloat64(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 8);
    this.view.setFloat64(o, value, true);
  }
  writeInt8(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 1);
    this.view.setInt8(o, value);
  }
  writeInt16(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 2);
    this.view.setInt16(o, value, true);
  }
  writeInt32(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 4);
    this.view.setInt32(o, value, true);
  }
  writeInt64(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 8);
    this.view.setBigInt64(o, value, true);
  }
  writeUint8(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 1);
    this.view.setUint8(o, value);
  }
  writeUint16(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 2);
    this.view.setUint16(o, value, true);
  }
  writeUint32(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 4);
    this.view.setUint32(o, value, true);
  }
  writeUint64(value) {
    const o = __classPrivateFieldGet(this, _ReadWriteByteBuffer_instances, "m", _ReadWriteByteBuffer_woAdd).call(this, 8);
    this.view.setBigUint64(o, value, true);
  }
  // DataView Proxy
  getFloat32(offset) {
    return this.view.getFloat32(offset, true);
  }
  getFloat64(offset) {
    return this.view.getFloat64(offset, true);
  }
  getInt8(offset) {
    return this.view.getInt8(offset);
  }
  getInt16(offset) {
    return this.view.getInt16(offset, true);
  }
  getInt32(offset) {
    return this.view.getInt32(offset, true);
  }
  getInt64(offset) {
    return this.view.getBigInt64(offset, true);
  }
  getUint8(offset) {
    return this.view.getUint8(offset);
  }
  getUint16(offset) {
    return this.view.getUint16(offset, true);
  }
  getUint32(offset) {
    return this.view.getUint32(offset, true);
  }
  getUint64(offset) {
    return this.view.getBigUint64(offset, true);
  }
  setFloat32(offset, value) {
    this.view.setFloat32(offset, value, true);
  }
  setFloat64(offset, value) {
    this.view.setFloat64(offset, value, true);
  }
  setInt8(offset, value) {
    this.view.setInt8(offset, value);
  }
  setInt16(offset, value) {
    this.view.setInt16(offset, value, true);
  }
  setInt32(offset, value) {
    this.view.setInt32(offset, value, true);
  }
  setInt64(offset, value) {
    this.view.setBigInt64(offset, value, true);
  }
  setUint8(offset, value) {
    this.view.setUint8(offset, value);
  }
  setUint16(offset, value) {
    this.view.setUint16(offset, value, true);
  }
  setUint32(offset, value) {
    this.view.setUint32(offset, value, true);
  }
  setUint64(offset, value) {
    this.view.setBigUint64(offset, value, true);
  }
};
_ReadWriteByteBuffer_instances = /* @__PURE__ */ new WeakSet(), _ReadWriteByteBuffer_woAdd = function _ReadWriteByteBuffer_woAdd2(amount) {
  if (this.woffset + amount > this._buffer.byteLength) {
    const newsize = getNextSize(this._buffer.byteLength, this.woffset + amount);
    const newBuffer = new Uint8Array(newsize);
    newBuffer.set(this._buffer);
    const oldOffset = this._buffer.byteOffset;
    this._buffer = newBuffer;
    this.view = new DataView(this._buffer.buffer, oldOffset);
  }
  this.woffset += amount;
  return this.woffset - amount;
}, _ReadWriteByteBuffer_roAdd = function _ReadWriteByteBuffer_roAdd2(amount) {
  if (this.roffset + amount > this.woffset) {
    throw new Error("Outside of the bounds of writen data.");
  }
  this.roffset += amount;
  return this.roffset - amount;
};

// node_modules/@dcl/ecs/dist/serialization/crdt/types.js
var CrdtMessageType;
(function(CrdtMessageType2) {
  CrdtMessageType2[CrdtMessageType2["RESERVED"] = 0] = "RESERVED";
  CrdtMessageType2[CrdtMessageType2["PUT_COMPONENT"] = 1] = "PUT_COMPONENT";
  CrdtMessageType2[CrdtMessageType2["DELETE_COMPONENT"] = 2] = "DELETE_COMPONENT";
  CrdtMessageType2[CrdtMessageType2["DELETE_ENTITY"] = 3] = "DELETE_ENTITY";
  CrdtMessageType2[CrdtMessageType2["APPEND_VALUE"] = 4] = "APPEND_VALUE";
  CrdtMessageType2[CrdtMessageType2["PUT_COMPONENT_NETWORK"] = 5] = "PUT_COMPONENT_NETWORK";
  CrdtMessageType2[CrdtMessageType2["DELETE_COMPONENT_NETWORK"] = 6] = "DELETE_COMPONENT_NETWORK";
  CrdtMessageType2[CrdtMessageType2["DELETE_ENTITY_NETWORK"] = 7] = "DELETE_ENTITY_NETWORK";
  CrdtMessageType2[CrdtMessageType2["MAX_MESSAGE_TYPE"] = 8] = "MAX_MESSAGE_TYPE";
})(CrdtMessageType || (CrdtMessageType = {}));
var CRDT_MESSAGE_HEADER_LENGTH = 8;
var ProcessMessageResultType;
(function(ProcessMessageResultType2) {
  ProcessMessageResultType2[ProcessMessageResultType2["StateUpdatedTimestamp"] = 1] = "StateUpdatedTimestamp";
  ProcessMessageResultType2[ProcessMessageResultType2["StateOutdatedTimestamp"] = 2] = "StateOutdatedTimestamp";
  ProcessMessageResultType2[ProcessMessageResultType2["NoChanges"] = 3] = "NoChanges";
  ProcessMessageResultType2[ProcessMessageResultType2["StateOutdatedData"] = 4] = "StateOutdatedData";
  ProcessMessageResultType2[ProcessMessageResultType2["StateUpdatedData"] = 5] = "StateUpdatedData";
  ProcessMessageResultType2[ProcessMessageResultType2["EntityWasDeleted"] = 6] = "EntityWasDeleted";
  ProcessMessageResultType2[ProcessMessageResultType2["EntityDeleted"] = 7] = "EntityDeleted";
})(ProcessMessageResultType || (ProcessMessageResultType = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/crdtMessageProtocol.js
var CrdtMessageProtocol;
(function(CrdtMessageProtocol2) {
  function validate(buf) {
    const rem = buf.remainingBytes();
    if (rem < CRDT_MESSAGE_HEADER_LENGTH) {
      return false;
    }
    const messageLength = buf.getUint32(buf.currentReadOffset());
    if (rem < messageLength) {
      return false;
    }
    return true;
  }
  CrdtMessageProtocol2.validate = validate;
  function readHeader(buf) {
    if (!validate(buf)) {
      return null;
    }
    return {
      length: buf.readUint32(),
      type: buf.readUint32()
    };
  }
  CrdtMessageProtocol2.readHeader = readHeader;
  function getHeader(buf) {
    if (!validate(buf)) {
      return null;
    }
    const currentOffset = buf.currentReadOffset();
    return {
      length: buf.getUint32(currentOffset),
      type: buf.getUint32(currentOffset + 4)
    };
  }
  CrdtMessageProtocol2.getHeader = getHeader;
  function consumeMessage(buf) {
    const header = getHeader(buf);
    if (!header) {
      return false;
    }
    buf.incrementReadOffset(header.length);
    return true;
  }
  CrdtMessageProtocol2.consumeMessage = consumeMessage;
})(CrdtMessageProtocol || (CrdtMessageProtocol = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/deleteComponent.js
var DeleteComponent;
(function(DeleteComponent2) {
  DeleteComponent2.MESSAGE_HEADER_LENGTH = 12;
  function write3(entity, componentId, timestamp, buf) {
    const messageLength = CRDT_MESSAGE_HEADER_LENGTH + DeleteComponent2.MESSAGE_HEADER_LENGTH;
    const startMessageOffset = buf.incrementWriteOffset(messageLength);
    buf.setUint32(startMessageOffset, messageLength);
    buf.setUint32(startMessageOffset + 4, CrdtMessageType.DELETE_COMPONENT);
    buf.setUint32(startMessageOffset + 8, entity);
    buf.setUint32(startMessageOffset + 12, componentId);
    buf.setUint32(startMessageOffset + 16, timestamp);
  }
  DeleteComponent2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.DELETE_COMPONENT) {
      throw new Error("DeleteComponentOperation tried to read another message type.");
    }
    const msg = {
      ...header,
      entityId: buf.readUint32(),
      componentId: buf.readUint32(),
      timestamp: buf.readUint32()
    };
    return msg;
  }
  DeleteComponent2.read = read2;
})(DeleteComponent || (DeleteComponent = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/appendValue.js
var AppendValueOperation;
(function(AppendValueOperation2) {
  AppendValueOperation2.MESSAGE_HEADER_LENGTH = 16;
  function write3(entity, timestamp, componentId, data, buf) {
    const startMessageOffset = buf.incrementWriteOffset(CRDT_MESSAGE_HEADER_LENGTH + AppendValueOperation2.MESSAGE_HEADER_LENGTH);
    buf.writeBuffer(data, false);
    const messageLength = buf.currentWriteOffset() - startMessageOffset;
    buf.setUint32(startMessageOffset, messageLength);
    buf.setUint32(startMessageOffset + 4, CrdtMessageType.APPEND_VALUE);
    buf.setUint32(startMessageOffset + 8, entity);
    buf.setUint32(startMessageOffset + 12, componentId);
    buf.setUint32(startMessageOffset + 16, timestamp);
    const newLocal = messageLength - AppendValueOperation2.MESSAGE_HEADER_LENGTH - CRDT_MESSAGE_HEADER_LENGTH;
    buf.setUint32(startMessageOffset + 20, newLocal);
  }
  AppendValueOperation2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.APPEND_VALUE) {
      throw new Error("AppendValueOperation tried to read another message type.");
    }
    return {
      ...header,
      entityId: buf.readUint32(),
      componentId: buf.readUint32(),
      timestamp: buf.readUint32(),
      data: buf.readBuffer()
    };
  }
  AppendValueOperation2.read = read2;
})(AppendValueOperation || (AppendValueOperation = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/deleteEntity.js
var DeleteEntity;
(function(DeleteEntity2) {
  DeleteEntity2.MESSAGE_HEADER_LENGTH = 4;
  function write3(entity, buf) {
    buf.writeUint32(CRDT_MESSAGE_HEADER_LENGTH + 4);
    buf.writeUint32(CrdtMessageType.DELETE_ENTITY);
    buf.writeUint32(entity);
  }
  DeleteEntity2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.DELETE_ENTITY) {
      throw new Error("DeleteEntity tried to read another message type.");
    }
    return {
      ...header,
      entityId: buf.readUint32()
    };
  }
  DeleteEntity2.read = read2;
})(DeleteEntity || (DeleteEntity = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/putComponent.js
var PutComponentOperation;
(function(PutComponentOperation2) {
  PutComponentOperation2.MESSAGE_HEADER_LENGTH = 16;
  function write3(entity, timestamp, componentId, data, buf) {
    const startMessageOffset = buf.incrementWriteOffset(CRDT_MESSAGE_HEADER_LENGTH + PutComponentOperation2.MESSAGE_HEADER_LENGTH);
    buf.writeBuffer(data, false);
    const messageLength = buf.currentWriteOffset() - startMessageOffset;
    buf.setUint32(startMessageOffset, messageLength);
    buf.setUint32(startMessageOffset + 4, CrdtMessageType.PUT_COMPONENT);
    buf.setUint32(startMessageOffset + 8, entity);
    buf.setUint32(startMessageOffset + 12, componentId);
    buf.setUint32(startMessageOffset + 16, timestamp);
    const newLocal = messageLength - PutComponentOperation2.MESSAGE_HEADER_LENGTH - CRDT_MESSAGE_HEADER_LENGTH;
    buf.setUint32(startMessageOffset + 20, newLocal);
  }
  PutComponentOperation2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.PUT_COMPONENT) {
      throw new Error("PutComponentOperation tried to read another message type.");
    }
    return {
      ...header,
      entityId: buf.readUint32(),
      componentId: buf.readUint32(),
      timestamp: buf.readUint32(),
      data: buf.readBuffer()
    };
  }
  PutComponentOperation2.read = read2;
})(PutComponentOperation || (PutComponentOperation = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/network/putComponentNetwork.js
var PutNetworkComponentOperation;
(function(PutNetworkComponentOperation2) {
  PutNetworkComponentOperation2.MESSAGE_HEADER_LENGTH = 20;
  function write3(entity, timestamp, componentId, networkId, data, buf) {
    const startMessageOffset = buf.incrementWriteOffset(CRDT_MESSAGE_HEADER_LENGTH + PutNetworkComponentOperation2.MESSAGE_HEADER_LENGTH);
    buf.writeBuffer(data, false);
    const messageLength = buf.currentWriteOffset() - startMessageOffset;
    buf.setUint32(startMessageOffset, messageLength);
    buf.setUint32(startMessageOffset + 4, CrdtMessageType.PUT_COMPONENT_NETWORK);
    buf.setUint32(startMessageOffset + 8, entity);
    buf.setUint32(startMessageOffset + 12, componentId);
    buf.setUint32(startMessageOffset + 16, timestamp);
    buf.setUint32(startMessageOffset + 20, networkId);
    const dataLength = messageLength - PutNetworkComponentOperation2.MESSAGE_HEADER_LENGTH - CRDT_MESSAGE_HEADER_LENGTH;
    buf.setUint32(startMessageOffset + 24, dataLength);
  }
  PutNetworkComponentOperation2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.PUT_COMPONENT_NETWORK) {
      throw new Error("PutComponentNetworkOperation tried to read another message type.");
    }
    return {
      ...header,
      entityId: buf.readUint32(),
      componentId: buf.readUint32(),
      timestamp: buf.readUint32(),
      networkId: buf.readUint32(),
      data: buf.readBuffer()
    };
  }
  PutNetworkComponentOperation2.read = read2;
})(PutNetworkComponentOperation || (PutNetworkComponentOperation = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/network/deleteComponentNetwork.js
var DeleteComponentNetwork;
(function(DeleteComponentNetwork2) {
  DeleteComponentNetwork2.MESSAGE_HEADER_LENGTH = 16;
  function write3(entity, componentId, timestamp, networkId, buf) {
    const messageLength = CRDT_MESSAGE_HEADER_LENGTH + DeleteComponentNetwork2.MESSAGE_HEADER_LENGTH;
    const startMessageOffset = buf.incrementWriteOffset(messageLength);
    buf.setUint32(startMessageOffset, messageLength);
    buf.setUint32(startMessageOffset + 4, CrdtMessageType.DELETE_COMPONENT_NETWORK);
    buf.setUint32(startMessageOffset + 8, entity);
    buf.setUint32(startMessageOffset + 12, componentId);
    buf.setUint32(startMessageOffset + 16, timestamp);
    buf.setUint32(startMessageOffset + 20, networkId);
  }
  DeleteComponentNetwork2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.DELETE_COMPONENT_NETWORK) {
      throw new Error("DeleteComponentOperation tried to read another message type.");
    }
    return {
      ...header,
      entityId: buf.readUint32(),
      componentId: buf.readUint32(),
      timestamp: buf.readUint32(),
      networkId: buf.readUint32()
    };
  }
  DeleteComponentNetwork2.read = read2;
})(DeleteComponentNetwork || (DeleteComponentNetwork = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/network/deleteEntityNetwork.js
var DeleteEntityNetwork;
(function(DeleteEntityNetwork2) {
  DeleteEntityNetwork2.MESSAGE_HEADER_LENGTH = 8;
  function write3(entity, networkId, buf) {
    buf.writeUint32(CRDT_MESSAGE_HEADER_LENGTH + 4);
    buf.writeUint32(CrdtMessageType.DELETE_ENTITY_NETWORK);
    buf.writeUint32(entity);
    buf.writeUint32(networkId);
  }
  DeleteEntityNetwork2.write = write3;
  function read2(buf) {
    const header = CrdtMessageProtocol.readHeader(buf);
    if (!header) {
      return null;
    }
    if (header.type !== CrdtMessageType.DELETE_ENTITY_NETWORK) {
      throw new Error("DeleteEntityNetwork tried to read another message type.");
    }
    return {
      ...header,
      entityId: buf.readUint32(),
      networkId: buf.readUint32()
    };
  }
  DeleteEntityNetwork2.read = read2;
})(DeleteEntityNetwork || (DeleteEntityNetwork = {}));

// node_modules/@dcl/ecs/dist/serialization/crdt/network/utils.js
function isNetworkMessage(message) {
  return [
    CrdtMessageType.DELETE_COMPONENT_NETWORK,
    CrdtMessageType.DELETE_ENTITY_NETWORK,
    CrdtMessageType.PUT_COMPONENT_NETWORK
  ].includes(message.type);
}
function networkMessageToLocal(message, localEntityId, buffer2, destinationBuffer) {
  const offset = buffer2.currentWriteOffset();
  if (message.type === CrdtMessageType.PUT_COMPONENT_NETWORK) {
    PutComponentOperation.write(localEntityId, message.timestamp, message.componentId, message.data, buffer2);
  } else if (message.type === CrdtMessageType.DELETE_COMPONENT_NETWORK) {
    DeleteComponent.write(localEntityId, message.componentId, message.timestamp, buffer2);
  } else if (message.type === CrdtMessageType.DELETE_ENTITY_NETWORK) {
    DeleteEntity.write(localEntityId, buffer2);
  }
  destinationBuffer.writeBuffer(buffer2.buffer().subarray(offset, buffer2.currentWriteOffset()), false);
}
function localMessageToNetwork(message, network, buffer2, destinationBuffer) {
  const offset = buffer2.currentWriteOffset();
  if (message.type === CrdtMessageType.PUT_COMPONENT) {
    PutNetworkComponentOperation.write(network.entityId, message.timestamp, message.componentId, network.networkId, message.data, buffer2);
  } else if (message.type === CrdtMessageType.DELETE_COMPONENT) {
    DeleteComponentNetwork.write(network.entityId, message.componentId, message.timestamp, network.networkId, buffer2);
  } else if (message.type === CrdtMessageType.DELETE_ENTITY) {
    DeleteEntityNetwork.write(network.entityId, network.networkId, buffer2);
  }
  destinationBuffer.writeBuffer(buffer2.buffer().subarray(offset, buffer2.currentWriteOffset()), false);
}
var buffer = new ReadWriteByteBuffer();
function fixTransformParent(message, transformValue, parent) {
  buffer.resetBuffer();
  let transform = transformValue;
  if (!transform && "data" in message) {
    transform = TransformSchema.deserialize(new ReadWriteByteBuffer(message.data));
  }
  if (!transform)
    throw new Error("Invalid parent transform");
  const newTransform = { ...transform, parent };
  TransformSchema.serialize(newTransform, buffer);
  return buffer.toBinary();
}

// node_modules/@dcl/ecs/dist/systems/crdt/index.js
function crdtSceneSystem(engine2, onProcessEntityComponentChange) {
  const transports = [];
  const NetworkEntity3 = NetworkEntity(engine2);
  const NetworkParent2 = NetworkParent(engine2);
  const Transform3 = Transform(engine2);
  const receivedMessages = [];
  const broadcastMessages = [];
  function parseChunkMessage(transportId) {
    return function parseChunkMessage2(chunkMessage) {
      const buffer2 = new ReadWriteByteBuffer(chunkMessage);
      let header;
      while (header = CrdtMessageProtocol.getHeader(buffer2)) {
        const offset = buffer2.currentReadOffset();
        let message = void 0;
        if (header.type === CrdtMessageType.DELETE_COMPONENT) {
          message = DeleteComponent.read(buffer2);
        } else if (header.type === CrdtMessageType.DELETE_COMPONENT_NETWORK) {
          message = DeleteComponentNetwork.read(buffer2);
        } else if (header.type === CrdtMessageType.PUT_COMPONENT) {
          message = PutComponentOperation.read(buffer2);
        } else if (header.type === CrdtMessageType.PUT_COMPONENT_NETWORK) {
          message = PutNetworkComponentOperation.read(buffer2);
        } else if (header.type === CrdtMessageType.DELETE_ENTITY) {
          message = DeleteEntity.read(buffer2);
        } else if (header.type === CrdtMessageType.DELETE_ENTITY_NETWORK) {
          message = DeleteEntityNetwork.read(buffer2);
        } else if (header.type === CrdtMessageType.APPEND_VALUE) {
          message = AppendValueOperation.read(buffer2);
        } else {
          buffer2.incrementReadOffset(header.length);
        }
        if (message) {
          receivedMessages.push({
            ...message,
            transportId,
            messageBuffer: buffer2.buffer().subarray(offset, buffer2.currentReadOffset())
          });
        }
      }
    };
  }
  function getMessages(value) {
    const messagesToProcess = value.splice(0, value.length);
    return messagesToProcess;
  }
  function findNetworkId(msg) {
    const hasNetworkId = "networkId" in msg;
    if (hasNetworkId) {
      for (const [entityId, network] of engine2.getEntitiesWith(NetworkEntity3)) {
        if (network.networkId === msg.networkId && network.entityId === msg.entityId) {
          return { entityId, network };
        }
      }
    }
    return { entityId: msg.entityId };
  }
  async function receiveMessages() {
    const messagesToProcess = getMessages(receivedMessages);
    const entitiesShouldBeCleaned = [];
    for (const msg of messagesToProcess) {
      let { entityId, network } = findNetworkId(msg);
      if (isNetworkMessage(msg) && !network) {
        entityId = engine2.addEntity();
        network = { entityId: msg.entityId, networkId: msg.networkId };
        NetworkEntity3.createOrReplace(entityId, network);
      }
      if (msg.type === CrdtMessageType.DELETE_ENTITY || msg.type === CrdtMessageType.DELETE_ENTITY_NETWORK) {
        entitiesShouldBeCleaned.push(entityId);
        broadcastMessages.push(msg);
      } else {
        const entityState = engine2.entityContainer.getEntityState(entityId);
        if (entityState === EntityState.Removed)
          continue;
        if (entityState === EntityState.Unknown) {
          engine2.entityContainer.updateUsedEntity(entityId);
        }
        const component = engine2.getComponentOrNull(msg.componentId);
        if (component) {
          if (msg.type === CrdtMessageType.PUT_COMPONENT && component.componentId === Transform3.componentId && NetworkEntity3.has(entityId) && NetworkParent2.has(entityId)) {
            msg.data = fixTransformParent(msg);
          }
          const [conflictMessage, value] = component.updateFromCrdt({ ...msg, entityId });
          if (!conflictMessage) {
            broadcastMessages.push(msg);
            onProcessEntityComponentChange && onProcessEntityComponentChange(entityId, msg.type, component, value);
          }
        } else {
          broadcastMessages.push(msg);
        }
      }
    }
    for (const entity of entitiesShouldBeCleaned) {
      for (const definition of engine2.componentsIter()) {
        definition.entityDeleted(entity, true);
      }
      engine2.entityContainer.updateRemovedEntity(entity);
      onProcessEntityComponentChange && onProcessEntityComponentChange(entity, CrdtMessageType.DELETE_ENTITY);
    }
  }
  async function sendMessages(entitiesDeletedThisTick) {
    const crdtMessages = getMessages(broadcastMessages);
    const buffer2 = new ReadWriteByteBuffer();
    for (const component of engine2.componentsIter()) {
      for (const message of component.getCrdtUpdates()) {
        const offset = buffer2.currentWriteOffset();
        if (transports.some((t) => t.filter(message))) {
          if (message.type === CrdtMessageType.PUT_COMPONENT) {
            PutComponentOperation.write(message.entityId, message.timestamp, message.componentId, message.data, buffer2);
          } else if (message.type === CrdtMessageType.DELETE_COMPONENT) {
            DeleteComponent.write(message.entityId, component.componentId, message.timestamp, buffer2);
          } else if (message.type === CrdtMessageType.APPEND_VALUE) {
            AppendValueOperation.write(message.entityId, message.timestamp, message.componentId, message.data, buffer2);
          }
          crdtMessages.push({
            ...message,
            messageBuffer: buffer2.buffer().subarray(offset, buffer2.currentWriteOffset())
          });
        }
        if (onProcessEntityComponentChange) {
          const rawValue = message.type === CrdtMessageType.PUT_COMPONENT || message.type === CrdtMessageType.APPEND_VALUE ? component.get(message.entityId) : void 0;
          onProcessEntityComponentChange(message.entityId, message.type, component, rawValue);
        }
      }
    }
    for (const entityId of entitiesDeletedThisTick) {
      const offset = buffer2.currentWriteOffset();
      DeleteEntity.write(entityId, buffer2);
      crdtMessages.push({
        type: CrdtMessageType.DELETE_ENTITY,
        entityId,
        messageBuffer: buffer2.buffer().subarray(offset, buffer2.currentWriteOffset())
      });
      onProcessEntityComponentChange && onProcessEntityComponentChange(entityId, CrdtMessageType.DELETE_ENTITY);
    }
    const transportBuffer = new ReadWriteByteBuffer();
    for (const index in transports) {
      const LIVEKIT_MAX_SIZE = 13;
      const __NetworkMessagesBuffer = [];
      const transportIndex = Number(index);
      const transport = transports[transportIndex];
      const isRendererTransport = transport.type === "renderer";
      const isNetworkTransport = transport.type === "network";
      transportBuffer.resetBuffer();
      const buffer3 = new ReadWriteByteBuffer();
      for (const message2 of crdtMessages) {
        if (isNetworkTransport && transportBuffer.toBinary().byteLength / 1024 > LIVEKIT_MAX_SIZE) {
          __NetworkMessagesBuffer.push(transportBuffer.toBinary());
          transportBuffer.resetBuffer();
        }
        if (message2.transportId === transportIndex)
          continue;
        if (!transport.filter(message2))
          continue;
        const { entityId } = findNetworkId(message2);
        const transformNeedsFix = "componentId" in message2 && message2.componentId === Transform3.componentId && Transform3.has(entityId) && NetworkParent2.has(entityId) && NetworkEntity3.has(entityId);
        if (isRendererTransport && message2.type === CrdtMessageType.PUT_COMPONENT && transformNeedsFix) {
          const parent = findNetworkId(NetworkParent2.get(entityId));
          const transformData = fixTransformParent(message2, Transform3.get(entityId), parent.entityId);
          const offset = buffer3.currentWriteOffset();
          PutComponentOperation.write(entityId, message2.timestamp, message2.componentId, transformData, buffer3);
          transportBuffer.writeBuffer(buffer3.buffer().subarray(offset, buffer3.currentWriteOffset()), false);
          continue;
        }
        if (isRendererTransport && isNetworkMessage(message2)) {
          let transformData = "data" in message2 ? message2.data : new Uint8Array();
          if (transformNeedsFix) {
            const parent = findNetworkId(NetworkParent2.get(entityId));
            transformData = fixTransformParent(message2, Transform3.get(entityId), parent.entityId);
          }
          networkMessageToLocal({ ...message2, data: transformData }, entityId, buffer3, transportBuffer);
          continue;
        }
        if (isNetworkTransport && !isNetworkMessage(message2)) {
          const networkData = NetworkEntity3.getOrNull(message2.entityId);
          if (networkData) {
            localMessageToNetwork(message2, networkData, buffer3, transportBuffer);
            continue;
          }
        }
        transportBuffer.writeBuffer(message2.messageBuffer, false);
      }
      if (isNetworkTransport && transportBuffer.currentWriteOffset()) {
        __NetworkMessagesBuffer.push(transportBuffer.toBinary());
      }
      const message = isNetworkTransport ? __NetworkMessagesBuffer : transportBuffer.toBinary();
      await transport.send(message);
    }
  }
  function addTransport(transport) {
    const id = transports.push(transport) - 1;
    transport.onmessage = parseChunkMessage(id);
  }
  return {
    sendMessages,
    receiveMessages,
    addTransport
  };
}

// node_modules/@dcl/ecs/dist/systems/crdt/utils.js
var CrdtUtils;
(function(CrdtUtils2) {
  let SynchronizedEntityType;
  (function(SynchronizedEntityType2) {
    SynchronizedEntityType2[SynchronizedEntityType2["NETWORKED"] = 0] = "NETWORKED";
    SynchronizedEntityType2[SynchronizedEntityType2["RENDERER"] = 1] = "RENDERER";
  })(SynchronizedEntityType = CrdtUtils2.SynchronizedEntityType || (CrdtUtils2.SynchronizedEntityType = {}));
})(CrdtUtils || (CrdtUtils = {}));
function dataCompare(a, b) {
  if (a === b)
    return 0;
  if (a === null && b !== null)
    return -1;
  if (a !== null && b === null)
    return 1;
  if (a instanceof Uint8Array && b instanceof Uint8Array) {
    const lengthDifference = a.byteLength - b.byteLength;
    if (lengthDifference !== 0) {
      return lengthDifference > 0 ? 1 : -1;
    }
    let res;
    for (let i = 0, n = a.byteLength; i < n; i++) {
      res = a[i] - b[i];
      if (res !== 0) {
        return res > 0 ? 1 : -1;
      }
    }
    return 0;
  }
  if (typeof a === "string") {
    const lengthDifference = a.length - b.length;
    if (lengthDifference !== 0) {
      return lengthDifference > 0 ? 1 : -1;
    }
    return a.localeCompare(b);
  }
  return a > b ? 1 : -1;
}

// node_modules/@dcl/ecs/dist/engine/readonly.js
function deepReadonly(val) {
  return Object.freeze({ ...val });
}

// node_modules/@dcl/ecs/dist/engine/lww-element-set-component-definition.js
function incrementTimestamp(entity, timestamps) {
  const newTimestamp = (timestamps.get(entity) || 0) + 1;
  timestamps.set(entity, newTimestamp);
  return newTimestamp;
}
function createDumpLwwFunctionFromCrdt(componentId, timestamps, schema, data) {
  return function dumpCrdtState(buffer2, filterEntity) {
    for (const [entity, timestamp] of timestamps) {
      if (filterEntity) {
        if (!filterEntity(entity))
          continue;
      }
      if (data.has(entity)) {
        const it = data.get(entity);
        const buf = new ReadWriteByteBuffer();
        schema.serialize(it, buf);
        PutComponentOperation.write(entity, timestamp, componentId, buf.toBinary(), buffer2);
      } else {
        DeleteComponent.write(entity, componentId, timestamp, buffer2);
      }
    }
  };
}
function createUpdateLwwFromCrdt(componentId, timestamps, schema, data) {
  function crdtRuleForCurrentState(message) {
    const { entityId, timestamp } = message;
    const currentTimestamp = timestamps.get(entityId);
    if (currentTimestamp === void 0 || currentTimestamp < timestamp) {
      return ProcessMessageResultType.StateUpdatedTimestamp;
    }
    if (currentTimestamp > timestamp) {
      return ProcessMessageResultType.StateOutdatedTimestamp;
    }
    if (message.type === CrdtMessageType.DELETE_COMPONENT && !data.has(entityId)) {
      return ProcessMessageResultType.NoChanges;
    }
    let currentDataGreater = 0;
    if (data.has(entityId)) {
      const writeBuffer = new ReadWriteByteBuffer();
      schema.serialize(data.get(entityId), writeBuffer);
      currentDataGreater = dataCompare(writeBuffer.toBinary(), message.data || null);
    } else {
      currentDataGreater = dataCompare(null, message.data);
    }
    if (currentDataGreater === 0) {
      return ProcessMessageResultType.NoChanges;
    } else if (currentDataGreater > 0) {
      return ProcessMessageResultType.StateOutdatedData;
    } else {
      return ProcessMessageResultType.StateUpdatedData;
    }
  }
  return (msg) => {
    if (msg.type !== CrdtMessageType.PUT_COMPONENT && msg.type !== CrdtMessageType.PUT_COMPONENT_NETWORK && msg.type !== CrdtMessageType.DELETE_COMPONENT && msg.type !== CrdtMessageType.DELETE_COMPONENT_NETWORK)
      return [null, data.get(msg.entityId)];
    const action = crdtRuleForCurrentState(msg);
    const entity = msg.entityId;
    switch (action) {
      case ProcessMessageResultType.StateUpdatedData:
      case ProcessMessageResultType.StateUpdatedTimestamp: {
        timestamps.set(entity, msg.timestamp);
        if (msg.type === CrdtMessageType.PUT_COMPONENT || msg.type === CrdtMessageType.PUT_COMPONENT_NETWORK) {
          const buf = new ReadWriteByteBuffer(msg.data);
          data.set(entity, schema.deserialize(buf));
        } else {
          data.delete(entity);
        }
        return [null, data.get(entity)];
      }
      case ProcessMessageResultType.StateOutdatedTimestamp:
      case ProcessMessageResultType.StateOutdatedData: {
        if (data.has(entity)) {
          const writeBuffer = new ReadWriteByteBuffer();
          schema.serialize(data.get(entity), writeBuffer);
          return [
            {
              type: CrdtMessageType.PUT_COMPONENT,
              componentId,
              data: writeBuffer.toBinary(),
              entityId: entity,
              timestamp: timestamps.get(entity)
            },
            data.get(entity)
          ];
        } else {
          return [
            {
              type: CrdtMessageType.DELETE_COMPONENT,
              componentId,
              entityId: entity,
              timestamp: timestamps.get(entity)
            },
            void 0
          ];
        }
      }
    }
    return [null, data.get(entity)];
  };
}
function createGetCrdtMessagesForLww(componentId, timestamps, dirtyIterator, schema, data) {
  return function* () {
    for (const entity of dirtyIterator) {
      const newTimestamp = incrementTimestamp(entity, timestamps);
      if (data.has(entity)) {
        const writeBuffer = new ReadWriteByteBuffer();
        schema.serialize(data.get(entity), writeBuffer);
        const msg = {
          type: CrdtMessageType.PUT_COMPONENT,
          componentId,
          entityId: entity,
          data: writeBuffer.toBinary(),
          timestamp: newTimestamp
        };
        yield msg;
      } else {
        const msg = {
          type: CrdtMessageType.DELETE_COMPONENT,
          componentId,
          entityId: entity,
          timestamp: newTimestamp
        };
        yield msg;
      }
    }
    dirtyIterator.clear();
  };
}
function createComponentDefinitionFromSchema(componentName, componentId, schema) {
  const data = /* @__PURE__ */ new Map();
  const dirtyIterator = /* @__PURE__ */ new Set();
  const timestamps = /* @__PURE__ */ new Map();
  const onChangeCallbacks = /* @__PURE__ */ new Map();
  return {
    get componentId() {
      return componentId;
    },
    get componentName() {
      return componentName;
    },
    get componentType() {
      return 0;
    },
    schema,
    has(entity) {
      return data.has(entity);
    },
    deleteFrom(entity, markAsDirty = true) {
      const component = data.get(entity);
      if (data.delete(entity) && markAsDirty) {
        dirtyIterator.add(entity);
      }
      return component || null;
    },
    entityDeleted(entity, markAsDirty) {
      if (data.delete(entity) && markAsDirty) {
        dirtyIterator.add(entity);
      }
    },
    getOrNull(entity) {
      const component = data.get(entity);
      return component ? deepReadonly(component) : null;
    },
    get(entity) {
      const component = data.get(entity);
      if (!component) {
        throw new Error(`[getFrom] Component ${componentName} for entity #${entity} not found`);
      }
      return deepReadonly(component);
    },
    create(entity, value) {
      const component = data.get(entity);
      if (component) {
        throw new Error(`[create] Component ${componentName} for ${entity} already exists`);
      }
      const usedValue = value === void 0 ? schema.create() : schema.extend ? schema.extend(value) : value;
      data.set(entity, usedValue);
      dirtyIterator.add(entity);
      return usedValue;
    },
    createOrReplace(entity, value) {
      const usedValue = value === void 0 ? schema.create() : schema.extend ? schema.extend(value) : value;
      data.set(entity, usedValue);
      dirtyIterator.add(entity);
      return usedValue;
    },
    getMutableOrNull(entity) {
      const component = data.get(entity);
      if (!component) {
        return null;
      }
      dirtyIterator.add(entity);
      return component;
    },
    getOrCreateMutable(entity, value) {
      const component = data.get(entity);
      if (!component) {
        return this.create(entity, value);
      } else {
        dirtyIterator.add(entity);
        return component;
      }
    },
    getMutable(entity) {
      const component = this.getMutableOrNull(entity);
      if (component === null) {
        throw new Error(`[mutable] Component ${componentName} for ${entity} not found`);
      }
      return component;
    },
    *iterator() {
      for (const [entity, component] of data) {
        yield [entity, component];
      }
    },
    *dirtyIterator() {
      for (const entity of dirtyIterator) {
        yield entity;
      }
    },
    getCrdtUpdates: createGetCrdtMessagesForLww(componentId, timestamps, dirtyIterator, schema, data),
    updateFromCrdt: createUpdateLwwFromCrdt(componentId, timestamps, schema, data),
    dumpCrdtStateToBuffer: createDumpLwwFunctionFromCrdt(componentId, timestamps, schema, data),
    onChange(entity, cb) {
      const cbs = onChangeCallbacks.get(entity) ?? [];
      cbs.push(cb);
      onChangeCallbacks.set(entity, cbs);
    },
    __onChangeCallbacks(entity, value) {
      const cbs = onChangeCallbacks.get(entity);
      if (!cbs)
        return;
      for (const cb of cbs) {
        cb(value);
      }
    }
  };
}

// node_modules/@dcl/ecs/dist/engine/systems.js
var SYSTEMS_REGULAR_PRIORITY = 1e5;
function SystemContainer() {
  const systems = [];
  function sort() {
    systems.sort((a, b) => b.priority - a.priority);
  }
  function add2(fn, priority, name) {
    const systemName = name ?? fn.name;
    if (systems.find((item) => item.fn === fn)) {
      throw new Error(`System ${JSON.stringify(systemName)} already added to the engine`);
    }
    systems.push({
      fn,
      priority,
      name: systemName
    });
    sort();
  }
  function remove(selector) {
    let index = -1;
    if (typeof selector === "string") {
      index = systems.findIndex((item) => item.name === selector);
    } else {
      index = systems.findIndex((item) => item.fn === selector);
    }
    if (index === -1) {
      return false;
    }
    systems.splice(index, 1);
    sort();
    return true;
  }
  return {
    add: add2,
    remove,
    getSystems() {
      return systems;
    }
  };
}

// node_modules/@dcl/ecs/dist/engine/grow-only-value-set-component-definition.js
var emptyReadonlySet = freezeSet(/* @__PURE__ */ new Set());
function frozenError() {
  throw new Error("The set is frozen");
}
function freezeSet(set) {
  ;
  set.add = frozenError;
  set.clear = frozenError;
  return set;
}
function sortByTimestamp(a, b) {
  return a.timestamp > b.timestamp ? 1 : -1;
}
function createValueSetComponentDefinitionFromSchema(componentName, componentId, schema, options) {
  const data = /* @__PURE__ */ new Map();
  const dirtyIterator = /* @__PURE__ */ new Set();
  const queuedCommands = [];
  const onChangeCallbacks = /* @__PURE__ */ new Map();
  function shouldSort(row) {
    const len = row.raw.length;
    if (len > 1 && row.raw[len - 1].timestamp <= row.raw[len - 2].timestamp) {
      return true;
    }
    return false;
  }
  function gotUpdated(entity) {
    const row = data.get(entity);
    if (row) {
      if (shouldSort(row)) {
        row.raw.sort(sortByTimestamp);
      }
      while (row.raw.length > options.maxElements) {
        row.raw.shift();
      }
      const frozenSet = freezeSet(new Set(row?.raw.map(($) => $.value)));
      row.frozenSet = frozenSet;
      return frozenSet;
    } else {
      return emptyReadonlySet;
    }
  }
  function append(entity, value) {
    let row = data.get(entity);
    if (!row) {
      row = { raw: [], frozenSet: emptyReadonlySet };
      data.set(entity, row);
    }
    const usedValue = schema.extend ? schema.extend(value) : value;
    const timestamp = options.timestampFunction(usedValue);
    if (__DEV__) {
      Object.freeze(usedValue);
    }
    row.raw.push({ value: usedValue, timestamp });
    return { set: gotUpdated(entity), value: usedValue };
  }
  const ret = {
    get componentId() {
      return componentId;
    },
    get componentName() {
      return componentName;
    },
    get componentType() {
      return 1;
    },
    schema,
    has(entity) {
      return data.has(entity);
    },
    entityDeleted(entity) {
      data.delete(entity);
    },
    get(entity) {
      const values = data.get(entity);
      if (values) {
        return values.frozenSet;
      } else {
        return emptyReadonlySet;
      }
    },
    addValue(entity, rawValue) {
      const { set, value } = append(entity, rawValue);
      dirtyIterator.add(entity);
      const buf = new ReadWriteByteBuffer();
      schema.serialize(value, buf);
      queuedCommands.push({
        componentId,
        data: buf.toBinary(),
        entityId: entity,
        timestamp: 0,
        type: CrdtMessageType.APPEND_VALUE
      });
      return set;
    },
    *iterator() {
      for (const [entity, component] of data) {
        yield [entity, component.frozenSet];
      }
    },
    *dirtyIterator() {
      for (const entity of dirtyIterator) {
        yield entity;
      }
    },
    getCrdtUpdates() {
      dirtyIterator.clear();
      return queuedCommands.splice(0, queuedCommands.length);
    },
    updateFromCrdt(_body) {
      if (_body.type === CrdtMessageType.APPEND_VALUE) {
        const buf = new ReadWriteByteBuffer(_body.data);
        const { value } = append(_body.entityId, schema.deserialize(buf));
        return [null, value];
      }
      return [null, void 0];
    },
    dumpCrdtStateToBuffer: function(buffer2, filterEntity) {
      for (const [entity, { raw }] of data) {
        if (filterEntity && !filterEntity(entity))
          continue;
        for (const it of raw) {
          const buf = new ReadWriteByteBuffer();
          schema.serialize(it.value, buf);
          AppendValueOperation.write(entity, 0, componentId, buf.toBinary(), buffer2);
        }
      }
    },
    onChange(entity, cb) {
      const cbs = onChangeCallbacks.get(entity) ?? [];
      cbs.push(cb);
      onChangeCallbacks.set(entity, cbs);
    },
    __onChangeCallbacks(entity, value) {
      const cbs = onChangeCallbacks.get(entity);
      if (!cbs)
        return;
      for (const cb of cbs) {
        cb(value);
      }
    }
  };
  return ret;
}

// node_modules/@dcl/ecs/dist/runtime/helpers/tree.js
function* genEntityTree(entity, entities) {
  if (!entities.has(entity))
    return;
  entities.delete(entity);
  for (const [_entity, value] of entities) {
    if (value.parent === entity) {
      yield* genEntityTree(_entity, entities);
    }
  }
  yield entity;
}
function getComponentEntityTree(engine2, entity, component) {
  const entities = new Map(engine2.getEntitiesWith(component));
  return genEntityTree(entity, entities);
}
function removeNetworkEntityChildrens(engine2, parent) {
  const NetworkParent2 = NetworkParent(engine2);
  const NetworkEntity3 = NetworkEntity(engine2);
  engine2.removeEntity(parent);
  const network = NetworkEntity3.getOrNull(parent);
  if (network) {
    for (const [entity, parent2] of engine2.getEntitiesWith(NetworkParent2)) {
      if (parent2.entityId === network.entityId && parent2.networkId === network.networkId) {
        removeNetworkEntityChildrens(engine2, entity);
      }
    }
  }
  return;
}
function removeEntityWithChildren(engine2, entity) {
  const Transform3 = Transform(engine2);
  const NetworkEntity3 = NetworkEntity(engine2);
  if (NetworkEntity3.has(entity)) {
    return removeNetworkEntityChildrens(engine2, entity);
  }
  for (const ent of getComponentEntityTree(engine2, entity, Transform3)) {
    engine2.removeEntity(ent);
  }
}

// node_modules/@dcl/ecs/dist/engine/input.js
var InputStateUpdateSystemPriority = 1 << 20;

// node_modules/@dcl/ecs/dist/engine/component.js
var ComponentType;
(function(ComponentType2) {
  ComponentType2[ComponentType2["LastWriteWinElementSet"] = 0] = "LastWriteWinElementSet";
  ComponentType2[ComponentType2["GrowOnlyValueSet"] = 1] = "GrowOnlyValueSet";
})(ComponentType || (ComponentType = {}));

// node_modules/@dcl/ecs/dist/engine/index.js
function preEngine(options) {
  const entityContainer = options?.entityContainer ?? createEntityContainer();
  const componentsDefinition = /* @__PURE__ */ new Map();
  const systems = SystemContainer();
  let sealed = false;
  function addSystem(fn, priority = SYSTEMS_REGULAR_PRIORITY, name) {
    systems.add(fn, priority, name);
  }
  function removeSystem(selector) {
    return systems.remove(selector);
  }
  function addEntity() {
    const entity = entityContainer.generateEntity();
    return entity;
  }
  function removeEntity(entity) {
    for (const [, component] of componentsDefinition) {
      if (component.componentName === "core-schema::Network-Entity")
        continue;
      component.entityDeleted(entity, true);
    }
    return entityContainer.removeEntity(entity);
  }
  function removeEntityWithChildren2(entity) {
    return removeEntityWithChildren({ removeEntity, defineComponentFromSchema, getEntitiesWith, defineComponent }, entity);
  }
  function registerComponentDefinition(componentName, component) {
    if (sealed)
      throw new Error("Engine is already sealed. No components can be added at this stage");
    const componentId = componentNumberFromName(componentName);
    const prev = componentsDefinition.get(componentId);
    if (prev) {
      throw new Error(`Component number ${componentId} was already registered.`);
    }
    if (component.componentName !== componentName) {
      throw new Error(`Component name doesn't match componentDefinition.componentName ${componentName} != ${component.componentName}`);
    }
    if (component.componentId !== componentId) {
      throw new Error(`Component number doesn't match componentDefinition.componentId ${componentId} != ${component.componentId}`);
    }
    componentsDefinition.set(componentId, component);
    return component;
  }
  function defineComponentFromSchema(componentName, schema) {
    const componentId = componentNumberFromName(componentName);
    const prev = componentsDefinition.get(componentId);
    if (prev) {
      return prev;
    }
    if (sealed)
      throw new Error("Engine is already sealed. No components can be added at this stage");
    const newComponent = createComponentDefinitionFromSchema(componentName, componentId, schema);
    componentsDefinition.set(componentId, newComponent);
    return newComponent;
  }
  function defineValueSetComponentFromSchema(componentName, schema, options2) {
    const componentId = componentNumberFromName(componentName);
    const prev = componentsDefinition.get(componentId);
    if (prev) {
      return prev;
    }
    if (sealed)
      throw new Error("Engine is already sealed. No components can be added at this stage");
    const newComponent = createValueSetComponentDefinitionFromSchema(componentName, componentId, schema, options2);
    componentsDefinition.set(componentId, newComponent);
    return newComponent;
  }
  function defineComponent(componentName, mapSpec, constructorDefault) {
    const componentId = componentNumberFromName(componentName);
    const prev = componentsDefinition.get(componentId);
    if (prev) {
      return prev;
    }
    if (sealed)
      throw new Error("Engine is already sealed. No components can be added at this stage");
    const schemaSpec = Schemas.Map(mapSpec, constructorDefault);
    const def = createComponentDefinitionFromSchema(componentName, componentId, schemaSpec);
    const newComponent = {
      ...def,
      create(entity, val) {
        return def.create(entity, val);
      },
      createOrReplace(entity, val) {
        return def.createOrReplace(entity, val);
      }
    };
    componentsDefinition.set(componentId, newComponent);
    return newComponent;
  }
  function getComponent(componentIdOrName) {
    const componentId = typeof componentIdOrName === "number" ? componentIdOrName : componentNumberFromName(componentIdOrName);
    const component = componentsDefinition.get(componentId);
    if (!component) {
      throw new Error(`Component ${componentIdOrName} not found. You need to declare the components at the beginnig of the engine declaration`);
    }
    return component;
  }
  function getComponentOrNull(componentIdOrName) {
    const componentId = typeof componentIdOrName === "number" ? componentIdOrName : componentNumberFromName(componentIdOrName);
    return componentsDefinition.get(componentId) ?? /* istanbul ignore next */
    null;
  }
  function* getEntitiesWith(...components) {
    for (const [entity, ...groupComp] of getComponentDefGroup(...components)) {
      yield [entity, ...groupComp.map((c) => c.get(entity))];
    }
  }
  function getEntityOrNullByName(value) {
    const NameComponent = Name({ defineComponent });
    for (const [entity, name] of getEntitiesWith(NameComponent)) {
      if (name.value === value)
        return entity;
    }
    return null;
  }
  function getEntityByName(value) {
    const entity = getEntityOrNullByName(value);
    return entity;
  }
  function* getComponentDefGroup(...args) {
    const [firstComponentDef, ...componentDefinitions] = args;
    for (const [entity] of firstComponentDef.iterator()) {
      let matches = true;
      for (const componentDef of componentDefinitions) {
        if (!componentDef.has(entity)) {
          matches = false;
          break;
        }
      }
      if (matches) {
        yield [entity, ...args];
      }
    }
  }
  function getSystems() {
    return systems.getSystems();
  }
  function componentsIter() {
    return componentsDefinition.values();
  }
  function removeComponentDefinition(componentIdOrName) {
    if (sealed)
      throw new Error("Engine is already sealed. No components can be removed at this stage");
    const componentId = typeof componentIdOrName === "number" ? componentIdOrName : componentNumberFromName(componentIdOrName);
    componentsDefinition.delete(componentId);
  }
  Transform({ defineComponentFromSchema });
  function seal() {
    if (!sealed) {
      sealed = true;
    }
  }
  return {
    addEntity,
    removeEntity,
    removeEntityWithChildren: removeEntityWithChildren2,
    addSystem,
    getSystems,
    removeSystem,
    defineComponent,
    defineComponentFromSchema,
    defineValueSetComponentFromSchema,
    getEntitiesWith,
    getComponent,
    getComponentOrNull,
    getEntityOrNullByName,
    getEntityByName,
    removeComponentDefinition,
    registerComponentDefinition,
    entityContainer,
    componentsIter,
    seal
  };
}
function Engine(options) {
  const partialEngine = preEngine(options);
  const onChangeFunction = (entity, operation, component, componentValue) => {
    if (operation === CrdtMessageType.DELETE_ENTITY) {
      for (const component2 of partialEngine.componentsIter()) {
        component2?.__onChangeCallbacks(entity, void 0);
      }
    } else {
      component?.__onChangeCallbacks(entity, componentValue);
    }
    return options?.onChangeFunction(entity, operation, component, componentValue);
  };
  const crdtSystem = crdtSceneSystem(partialEngine, onChangeFunction);
  async function update(dt) {
    await crdtSystem.receiveMessages();
    for (const system of partialEngine.getSystems()) {
      const ret = system.fn(dt);
      checkNotThenable(ret, `A system (${system.name || "anonymous"}) returned a thenable. Systems cannot be async functions. Documentation: https://dcl.gg/sdk/sync-systems`);
    }
    const deletedEntites = partialEngine.entityContainer.releaseRemovedEntities();
    await crdtSystem.sendMessages(deletedEntites);
  }
  return {
    _id: Date.now(),
    addEntity: partialEngine.addEntity,
    removeEntity: partialEngine.removeEntity,
    removeEntityWithChildren: partialEngine.removeEntityWithChildren,
    addSystem: partialEngine.addSystem,
    removeSystem: partialEngine.removeSystem,
    defineComponent: partialEngine.defineComponent,
    defineComponentFromSchema: partialEngine.defineComponentFromSchema,
    defineValueSetComponentFromSchema: partialEngine.defineValueSetComponentFromSchema,
    registerComponentDefinition: partialEngine.registerComponentDefinition,
    getEntitiesWith: partialEngine.getEntitiesWith,
    getComponent: partialEngine.getComponent,
    getComponentOrNull: partialEngine.getComponentOrNull,
    removeComponentDefinition: partialEngine.removeComponentDefinition,
    componentsIter: partialEngine.componentsIter,
    seal: partialEngine.seal,
    getEntityOrNullByName: partialEngine.getEntityOrNullByName,
    getEntityByName: partialEngine.getEntityByName,
    update,
    RootEntity: 0,
    PlayerEntity: 1,
    CameraEntity: 2,
    getEntityState: partialEngine.entityContainer.getEntityState,
    addTransport: crdtSystem.addTransport,
    entityContainer: partialEngine.entityContainer
  };
}

// node_modules/@dcl/ecs/dist/systems/tween.js
var cacheTween = /* @__PURE__ */ new Map();
function createTweenSystem(engine2) {
  if (cacheTween.has(engine2._id)) {
    return cacheTween.get(engine2._id);
  }
  const Tween3 = Tween2(engine2);
  const TweenState2 = TweenState(engine2);
  const TweenSequence2 = TweenSequence(engine2);
  const cache = /* @__PURE__ */ new Map();
  function isCompleted(entity) {
    const tweenState = TweenState2.getOrNull(entity);
    const tween = Tween3.getOrNull(entity);
    const tweenCache = cache.get(entity);
    if (!tweenState || !tween)
      return false;
    if (
      // Renderer notified that the tween is completed
      (tweenChanged(entity) || tweenState.state === 1) && // Avoid sending isCompleted multiple times
      !tweenCache?.completed && // Amount of frames needed to consider a tween completed
      (tweenCache?.frames ?? 0) > 2
    ) {
      return true;
    }
    return false;
  }
  function tweenChanged(entity) {
    const currentTween = Tween3.getOrNull(entity);
    const prevTween = cache.get(entity)?.tween;
    if (currentTween && !prevTween || !currentTween && prevTween) {
      return true;
    }
    const currentBuff = new ReadWriteByteBuffer();
    Tween3.schema.serialize(currentTween, currentBuff);
    const equal = dataCompare(currentBuff.toBinary(), prevTween);
    return equal;
  }
  const restartTweens = [];
  engine2.addSystem(() => {
    for (const restart of restartTweens) {
      restart();
    }
    restartTweens.length = 0;
    for (const [entity, tween] of engine2.getEntitiesWith(Tween3)) {
      if (tweenChanged(entity)) {
        const buffer2 = new ReadWriteByteBuffer();
        Tween3.schema.serialize(tween, buffer2);
        cache.set(entity, {
          tween: buffer2.toBinary(),
          frames: 0,
          completed: false,
          changed: true
        });
        continue;
      }
      const tweenCache = cache.get(entity);
      tweenCache.frames += 1;
      tweenCache.changed = false;
      if (isCompleted(entity)) {
        tweenCache.frames = 0;
        tweenCache.completed = true;
        const tweenSequence = TweenSequence2.getOrNull(entity);
        if (!tweenSequence)
          continue;
        const { sequence } = tweenSequence;
        if (sequence && sequence.length) {
          const [nextTweenSequence, ...otherTweens] = sequence;
          Tween3.createOrReplace(entity, nextTweenSequence);
          const mutableTweenHelper = TweenSequence2.getMutable(entity);
          mutableTweenHelper.sequence = otherTweens;
          if (tweenSequence.loop === 0) {
            mutableTweenHelper.sequence.push(tween);
          }
        } else if (tweenSequence.loop === 1) {
          Tween3.createOrReplace(entity, backwardsTween(tween));
        } else if (tweenSequence.loop === 0) {
          Tween3.deleteFrom(entity);
          cache.delete(entity);
          restartTweens.push(() => {
            Tween3.createOrReplace(entity, tween);
          });
        }
      }
    }
  }, Number.NEGATIVE_INFINITY);
  function backwardsTween(tween) {
    if (tween.mode?.$case === "move" && tween.mode.move) {
      return { ...tween, mode: { ...tween.mode, move: { start: tween.mode.move.end, end: tween.mode.move.start } } };
    }
    if (tween.mode?.$case === "rotate" && tween.mode.rotate) {
      return {
        ...tween,
        mode: { ...tween.mode, rotate: { start: tween.mode.rotate.end, end: tween.mode.rotate.start } }
      };
    }
    if (tween.mode?.$case === "scale" && tween.mode.scale) {
      return { ...tween, mode: { ...tween.mode, scale: { start: tween.mode.scale.end, end: tween.mode.scale.start } } };
    }
    if (tween.mode?.$case === "textureMove" && tween.mode.textureMove) {
      return {
        ...tween,
        mode: { ...tween.mode, textureMove: { start: tween.mode.textureMove.end, end: tween.mode.textureMove.start } }
      };
    }
    throw new Error("Invalid tween");
  }
  const tweenSystem2 = {
    // This event is fired only once per tween
    tweenCompleted: isCompleted
  };
  cacheTween.set(engine2._id, tweenSystem2);
  return tweenSystem2;
}

// node_modules/@dcl/ecs/dist/systems/pointer-event-collider-checker.js
function pointerEventColliderChecker(engine2) {
  const PointerEvents2 = PointerEvents(engine2);
  const MeshCollider4 = MeshCollider2(engine2);
  const GltfContainer3 = GltfContainer(engine2);
  const UiTransform2 = UiTransform(engine2);
  const alreadyShownlog = /* @__PURE__ */ new Set();
  let timer = 0;
  function systemChecker(dt) {
    timer += dt;
    if (timer <= 10) {
      return;
    }
    timer = 0;
    for (const [entity] of engine2.getEntitiesWith(PointerEvents2)) {
      if (alreadyShownlog.has(entity))
        continue;
      if (GltfContainer3.has(entity))
        continue;
      if (UiTransform2.has(entity))
        continue;
      const mesh = MeshCollider4.getOrNull(entity);
      if (mesh) {
        if (mesh.collisionMask === void 0 || mesh.collisionMask & 1) {
          continue;
        }
      }
      alreadyShownlog.add(entity);
      console.log(`\u26A0\uFE0F Missing MeshCollider component on entity ${entity}. Add a MeshCollider to the entity so it can be clickeable by the player.
See https://docs.decentraland.org/creator/development-guide/sdk7/colliders/#pointer-blocking`);
    }
  }
  engine2.removeSystem(systemChecker);
  engine2.addSystem(systemChecker);
}

// node_modules/@dcl/ecs/dist/runtime/initialization/index.js
var engine = /* @__PURE__ */ Engine();
var tweenSystem = createTweenSystem(engine);
pointerEventColliderChecker(engine);

// node_modules/@dcl/ecs/dist/components/generated/global.gen.js
var AvatarBase2 = /* @__PURE__ */ AvatarBase(engine);
var AvatarEmoteCommand2 = /* @__PURE__ */ AvatarEmoteCommand(engine);
var AvatarEquippedData2 = /* @__PURE__ */ AvatarEquippedData(engine);
var GltfContainer2 = /* @__PURE__ */ GltfContainer(engine);
var PlayerIdentityData2 = /* @__PURE__ */ PlayerIdentityData(engine);
var PointerEventsResult2 = /* @__PURE__ */ PointerEventsResult(engine);
var RealmInfo2 = /* @__PURE__ */ RealmInfo(engine);
var TextShape2 = /* @__PURE__ */ TextShape(engine);
var VisibilityComponent2 = /* @__PURE__ */ VisibilityComponent(engine);

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/camera_type.gen.js
var CameraType;
(function(CameraType2) {
  CameraType2[CameraType2["CT_FIRST_PERSON"] = 0] = "CT_FIRST_PERSON";
  CameraType2[CameraType2["CT_THIRD_PERSON"] = 1] = "CT_THIRD_PERSON";
  CameraType2[CameraType2["CT_CINEMATIC"] = 2] = "CT_CINEMATIC";
})(CameraType || (CameraType = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/input_action.gen.js
var InputAction;
(function(InputAction2) {
  InputAction2[InputAction2["IA_POINTER"] = 0] = "IA_POINTER";
  InputAction2[InputAction2["IA_PRIMARY"] = 1] = "IA_PRIMARY";
  InputAction2[InputAction2["IA_SECONDARY"] = 2] = "IA_SECONDARY";
  InputAction2[InputAction2["IA_ANY"] = 3] = "IA_ANY";
  InputAction2[InputAction2["IA_FORWARD"] = 4] = "IA_FORWARD";
  InputAction2[InputAction2["IA_BACKWARD"] = 5] = "IA_BACKWARD";
  InputAction2[InputAction2["IA_RIGHT"] = 6] = "IA_RIGHT";
  InputAction2[InputAction2["IA_LEFT"] = 7] = "IA_LEFT";
  InputAction2[InputAction2["IA_JUMP"] = 8] = "IA_JUMP";
  InputAction2[InputAction2["IA_WALK"] = 9] = "IA_WALK";
  InputAction2[InputAction2["IA_ACTION_3"] = 10] = "IA_ACTION_3";
  InputAction2[InputAction2["IA_ACTION_4"] = 11] = "IA_ACTION_4";
  InputAction2[InputAction2["IA_ACTION_5"] = 12] = "IA_ACTION_5";
  InputAction2[InputAction2["IA_ACTION_6"] = 13] = "IA_ACTION_6";
})(InputAction || (InputAction = {}));
var PointerEventType;
(function(PointerEventType2) {
  PointerEventType2[PointerEventType2["PET_UP"] = 0] = "PET_UP";
  PointerEventType2[PointerEventType2["PET_DOWN"] = 1] = "PET_DOWN";
  PointerEventType2[PointerEventType2["PET_HOVER_ENTER"] = 2] = "PET_HOVER_ENTER";
  PointerEventType2[PointerEventType2["PET_HOVER_LEAVE"] = 3] = "PET_HOVER_LEAVE";
})(PointerEventType || (PointerEventType = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/loading_state.gen.js
var LoadingState;
(function(LoadingState2) {
  LoadingState2[LoadingState2["UNKNOWN"] = 0] = "UNKNOWN";
  LoadingState2[LoadingState2["LOADING"] = 1] = "LOADING";
  LoadingState2[LoadingState2["NOT_FOUND"] = 2] = "NOT_FOUND";
  LoadingState2[LoadingState2["FINISHED_WITH_ERROR"] = 3] = "FINISHED_WITH_ERROR";
  LoadingState2[LoadingState2["FINISHED"] = 4] = "FINISHED";
})(LoadingState || (LoadingState = {}));

// node_modules/@dcl/ecs/dist/components/generated/pb/decentraland/sdk/components/common/texts.gen.js
var TextAlignMode;
(function(TextAlignMode2) {
  TextAlignMode2[TextAlignMode2["TAM_TOP_LEFT"] = 0] = "TAM_TOP_LEFT";
  TextAlignMode2[TextAlignMode2["TAM_TOP_CENTER"] = 1] = "TAM_TOP_CENTER";
  TextAlignMode2[TextAlignMode2["TAM_TOP_RIGHT"] = 2] = "TAM_TOP_RIGHT";
  TextAlignMode2[TextAlignMode2["TAM_MIDDLE_LEFT"] = 3] = "TAM_MIDDLE_LEFT";
  TextAlignMode2[TextAlignMode2["TAM_MIDDLE_CENTER"] = 4] = "TAM_MIDDLE_CENTER";
  TextAlignMode2[TextAlignMode2["TAM_MIDDLE_RIGHT"] = 5] = "TAM_MIDDLE_RIGHT";
  TextAlignMode2[TextAlignMode2["TAM_BOTTOM_LEFT"] = 6] = "TAM_BOTTOM_LEFT";
  TextAlignMode2[TextAlignMode2["TAM_BOTTOM_CENTER"] = 7] = "TAM_BOTTOM_CENTER";
  TextAlignMode2[TextAlignMode2["TAM_BOTTOM_RIGHT"] = 8] = "TAM_BOTTOM_RIGHT";
})(TextAlignMode || (TextAlignMode = {}));
var Font;
(function(Font2) {
  Font2[Font2["F_SANS_SERIF"] = 0] = "F_SANS_SERIF";
  Font2[Font2["F_SERIF"] = 1] = "F_SERIF";
  Font2[Font2["F_MONOSPACE"] = 2] = "F_MONOSPACE";
})(Font || (Font = {}));

// node_modules/@dcl/ecs/dist/composite/components.js
function getCompositeRootComponent(engine2) {
  const component = engine2.getComponentOrNull("composite::root");
  if (component) {
    return component;
  }
  return engine2.defineComponent("composite::root", {
    src: Schemas.String,
    entities: Schemas.Array(Schemas.Map({
      src: Schemas.Entity,
      dest: Schemas.Entity
    }))
  });
}

// node_modules/@dcl/ecs/dist/composite/path.js
var currentWorkingDir = "/";
function normalizeStringPosix(path, allowAboveRoot = false) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for (let i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47)
      break;
    else
      code = 47;
    if (code === 47) {
      if (lastSlash === i - 1 || dots === 1) {
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf("/");
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = "";
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += "/..";
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += "/" + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function resolve(...args) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  let cwd;
  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    let path;
    if (i >= 0)
      path = args[i];
    else {
      if (cwd === void 0)
        cwd = currentWorkingDir;
      path = cwd;
    }
    if (path.length === 0) {
      continue;
    }
    resolvedPath = path + "/" + resolvedPath;
    resolvedAbsolute = path.charCodeAt(0) === 47;
  }
  resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return "/" + resolvedPath;
    else
      return "/";
  } else if (resolvedPath.length > 0) {
    return resolvedPath;
  } else {
    return ".";
  }
}
function dirname(path) {
  if (path.length === 0)
    return ".";
  let code = path.charCodeAt(0);
  const hasRoot = code === 47;
  let end = -1;
  let matchedSlash = true;
  for (let i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47) {
      if (!matchedSlash) {
        end = i;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1)
    return hasRoot ? "/" : ".";
  if (hasRoot && end === 1)
    return "//";
  return path.slice(0, end);
}
function resolveComposite(path, cwd) {
  const absolutePath = path.startsWith(".") ? resolve(cwd, path) : resolve(path);
  return absolutePath.substring(1);
}

// node_modules/@dcl/ecs/dist/composite/instance.js
var EntityMappingMode;
(function(EntityMappingMode2) {
  EntityMappingMode2[EntityMappingMode2["EMM_NONE"] = 0] = "EMM_NONE";
  EntityMappingMode2[EntityMappingMode2["EMM_NEXT_AVAILABLE"] = 1] = "EMM_NEXT_AVAILABLE";
  EntityMappingMode2[EntityMappingMode2["EMM_DIRECT_MAPPING"] = 2] = "EMM_DIRECT_MAPPING";
})(EntityMappingMode || (EntityMappingMode = {}));
function getComponentValue(componentDefinition, component) {
  if (component.data?.$case === "json") {
    return component.data.json;
  } else {
    return componentDefinition.schema.deserialize(new ReadWriteByteBuffer(component.data?.binary));
  }
}
function getComponentDefinition(engine2, component) {
  const existingComponentDefinition = engine2.getComponentOrNull(component.name);
  if (!existingComponentDefinition) {
    if (component.name.startsWith("core::")) {
      if (component.name in componentDefinitionByName) {
        return componentDefinitionByName[component.name](engine2);
      } else {
        throw new Error(`The core component ${component.name} was not found.`);
      }
    } else if (component.jsonSchema) {
      return engine2.defineComponentFromSchema(component.name, Schemas.fromJson(component.jsonSchema));
    } else {
      throw new Error(`${component.name} is not defined and there is no schema to define it.`);
    }
  } else {
    return existingComponentDefinition;
  }
}
function getEntityMapping(engine2, compositeEntity, mappedEntities, { entityMapping }) {
  const existingEntity = mappedEntities.get(compositeEntity);
  if (existingEntity) {
    return existingEntity;
  }
  if (entityMapping?.type === EntityMappingMode.EMM_DIRECT_MAPPING) {
    const entity = entityMapping.getCompositeEntity(compositeEntity);
    mappedEntities.set(compositeEntity, entity);
    return entity;
  }
  const newEntity = entityMapping?.type === EntityMappingMode.EMM_NEXT_AVAILABLE ? entityMapping.getNextAvailableEntity() : engine2.addEntity();
  if (newEntity === null) {
    throw new Error("There is no more entities to allocate");
  }
  mappedEntities.set(compositeEntity, newEntity);
  return newEntity;
}
function instanceComposite(engine2, compositeResource, compositeProvider2, options) {
  const { rootEntity, alreadyRequestedSrc: optionalAlreadyRequestedSrc, entityMapping } = options;
  const alreadyRequestedSrc = optionalAlreadyRequestedSrc || /* @__PURE__ */ new Set();
  const compositeDirectoryPath = dirname(resolve(compositeResource.src));
  const TransformComponentNumber = componentNumberFromName("core::Transform");
  const CompositeRootComponent = getCompositeRootComponent(engine2);
  const mappedEntities = /* @__PURE__ */ new Map();
  const getCompositeEntity = (compositeEntity) => getEntityMapping(engine2, compositeEntity, mappedEntities, options);
  const compositeRootEntity = rootEntity ?? getCompositeEntity(0);
  if (rootEntity) {
    mappedEntities.set(0, rootEntity);
  }
  const childrenComposite = compositeResource.composite.components.find((item) => item.name === CompositeRootComponent.componentName);
  if (childrenComposite) {
    for (const [childCompositeEntity, compositeRawData] of childrenComposite.data) {
      const childComposite = getComponentValue(CompositeRootComponent, compositeRawData);
      const childCompositePath = resolveComposite(childComposite.src, compositeDirectoryPath);
      const childCompositeResource = compositeProvider2.getCompositeOrNull(childCompositePath);
      const targetEntity = getCompositeEntity(childCompositeEntity);
      if (childCompositeResource) {
        if (alreadyRequestedSrc.has(childCompositeResource.src) || childCompositeResource.src === compositeResource.src) {
          throw new Error(`Composite ${compositeResource.src} has a recursive instanciation while try to instance ${childCompositeResource.src}. Previous instances: ${alreadyRequestedSrc.toString()}`);
        }
        instanceComposite(engine2, childCompositeResource, compositeProvider2, {
          rootEntity: targetEntity,
          alreadyRequestedSrc: new Set(alreadyRequestedSrc).add(childCompositeResource.src),
          entityMapping: entityMapping?.type === EntityMappingMode.EMM_NEXT_AVAILABLE ? entityMapping : void 0
        });
      }
    }
  }
  for (const component of compositeResource.composite.components) {
    if (component.name === CompositeRootComponent.componentName)
      continue;
    const componentDefinition = getComponentDefinition(engine2, component);
    for (const [entity, compositeComponentValue] of component.data) {
      const componentValueDeserialized = getComponentValue(componentDefinition, compositeComponentValue);
      const targetEntity = getCompositeEntity(entity);
      const componentValue = componentDefinition.create(targetEntity, componentValueDeserialized);
      if (componentDefinition.componentId === TransformComponentNumber) {
        const transform = componentValue;
        if (transform.parent) {
          transform.parent = getCompositeEntity(transform.parent);
        } else {
          transform.parent = getCompositeEntity(0);
        }
      } else {
        Schemas.mutateNestedValues(componentDefinition.schema.jsonSchema, componentValue, (value, valueType) => {
          if (valueType.serializationType === "entity") {
            return { changed: true, value: getCompositeEntity(value) };
          } else {
            return { changed: false };
          }
        });
      }
    }
  }
  const composite = CompositeRootComponent.getMutableOrNull(compositeRootEntity) || CompositeRootComponent.create(compositeRootEntity);
  for (const [entitySource, targetEntity] of mappedEntities) {
    composite.entities.push({
      src: entitySource,
      dest: targetEntity
    });
  }
  composite.src = compositeResource.src;
  return compositeRootEntity;
}

// node_modules/@dcl/ecs/dist/composite/proto/gen/composite.gen.js
var import_minimal53 = __toESM(require_minimal2());

// node_modules/@dcl/ecs/dist/composite/proto/gen/google/protobuf/struct.gen.js
var import_minimal52 = __toESM(require_minimal2());
var NullValue;
(function(NullValue2) {
  NullValue2[NullValue2["NULL_VALUE"] = 0] = "NULL_VALUE";
})(NullValue || (NullValue = {}));
function nullValueFromJSON(object) {
  switch (object) {
    case 0:
    case "NULL_VALUE":
      return 0;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum NullValue");
  }
}
function nullValueToJSON(object) {
  switch (object) {
    case 0:
      return "NULL_VALUE";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum NullValue");
  }
}
function createBaseStruct() {
  return { fields: /* @__PURE__ */ new Map() };
}
var Struct;
(function(Struct2) {
  function encode(message, writer = import_minimal52.default.Writer.create()) {
    message.fields.forEach((value, key) => {
      if (value !== void 0) {
        Struct_FieldsEntry.encode({ key, value }, writer.uint32(10).fork()).ldelim();
      }
    });
    return writer;
  }
  Struct2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal52.default.Reader ? input : import_minimal52.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          const entry1 = Struct_FieldsEntry.decode(reader, reader.uint32());
          if (entry1.value !== void 0) {
            message.fields.set(entry1.key, entry1.value);
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Struct2.decode = decode;
  function fromJSON(object) {
    return {
      fields: isObject(object.fields) ? Object.entries(object.fields).reduce((acc, [key, value]) => {
        acc.set(key, value);
        return acc;
      }, /* @__PURE__ */ new Map()) : /* @__PURE__ */ new Map()
    };
  }
  Struct2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    obj.fields = {};
    if (message.fields) {
      message.fields.forEach((v, k) => {
        obj.fields[k] = v;
      });
    }
    return obj;
  }
  Struct2.toJSON = toJSON;
  function wrap(object) {
    const struct = createBaseStruct();
    if (object !== void 0) {
      Object.keys(object).forEach((key) => {
        struct.fields.set(key, object[key]);
      });
    }
    return struct;
  }
  Struct2.wrap = wrap;
  function unwrap(message) {
    const object = {};
    [...message.fields.keys()].forEach((key) => {
      object[key] = message.fields.get(key);
    });
    return object;
  }
  Struct2.unwrap = unwrap;
})(Struct || (Struct = {}));
function createBaseStruct_FieldsEntry() {
  return { key: "", value: void 0 };
}
var Struct_FieldsEntry;
(function(Struct_FieldsEntry2) {
  function encode(message, writer = import_minimal52.default.Writer.create()) {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== void 0) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }
  Struct_FieldsEntry2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal52.default.Reader ? input : import_minimal52.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseStruct_FieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Struct_FieldsEntry2.decode = decode;
  function fromJSON(object) {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object?.value) ? object.value : void 0 };
  }
  Struct_FieldsEntry2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    message.key !== void 0 && (obj.key = message.key);
    message.value !== void 0 && (obj.value = message.value);
    return obj;
  }
  Struct_FieldsEntry2.toJSON = toJSON;
})(Struct_FieldsEntry || (Struct_FieldsEntry = {}));
function createBaseValue() {
  return { kind: void 0 };
}
var Value;
(function(Value2) {
  function encode(message, writer = import_minimal52.default.Writer.create()) {
    switch (message.kind?.$case) {
      case "nullValue":
        writer.uint32(8).int32(message.kind.nullValue);
        break;
      case "numberValue":
        writer.uint32(17).double(message.kind.numberValue);
        break;
      case "stringValue":
        writer.uint32(26).string(message.kind.stringValue);
        break;
      case "boolValue":
        writer.uint32(32).bool(message.kind.boolValue);
        break;
      case "structValue":
        Struct.encode(Struct.wrap(message.kind.structValue), writer.uint32(42).fork()).ldelim();
        break;
      case "listValue":
        ListValue.encode(ListValue.wrap(message.kind.listValue), writer.uint32(50).fork()).ldelim();
        break;
    }
    return writer;
  }
  Value2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal52.default.Reader ? input : import_minimal52.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.kind = { $case: "nullValue", nullValue: reader.int32() };
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }
          message.kind = { $case: "numberValue", numberValue: reader.double() };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.kind = { $case: "stringValue", stringValue: reader.string() };
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.kind = { $case: "boolValue", boolValue: reader.bool() };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.kind = { $case: "structValue", structValue: Struct.unwrap(Struct.decode(reader, reader.uint32())) };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.kind = { $case: "listValue", listValue: ListValue.unwrap(ListValue.decode(reader, reader.uint32())) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  Value2.decode = decode;
  function fromJSON(object) {
    return {
      kind: isSet(object.nullValue) ? { $case: "nullValue", nullValue: nullValueFromJSON(object.nullValue) } : isSet(object.numberValue) ? { $case: "numberValue", numberValue: Number(object.numberValue) } : isSet(object.stringValue) ? { $case: "stringValue", stringValue: String(object.stringValue) } : isSet(object.boolValue) ? { $case: "boolValue", boolValue: Boolean(object.boolValue) } : isSet(object.structValue) ? { $case: "structValue", structValue: object.structValue } : isSet(object.listValue) ? { $case: "listValue", listValue: [...object.listValue] } : void 0
    };
  }
  Value2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    message.kind?.$case === "nullValue" && (obj.nullValue = message.kind?.nullValue !== void 0 ? nullValueToJSON(message.kind?.nullValue) : void 0);
    message.kind?.$case === "numberValue" && (obj.numberValue = message.kind?.numberValue);
    message.kind?.$case === "stringValue" && (obj.stringValue = message.kind?.stringValue);
    message.kind?.$case === "boolValue" && (obj.boolValue = message.kind?.boolValue);
    message.kind?.$case === "structValue" && (obj.structValue = message.kind?.structValue);
    message.kind?.$case === "listValue" && (obj.listValue = message.kind?.listValue);
    return obj;
  }
  Value2.toJSON = toJSON;
  function wrap(value) {
    const result = createBaseValue();
    if (value === null) {
      result.kind = {
        $case: "nullValue",
        nullValue: 0
        /* NullValue.NULL_VALUE */
      };
    } else if (typeof value === "boolean") {
      result.kind = { $case: "boolValue", boolValue: value };
    } else if (typeof value === "number") {
      result.kind = { $case: "numberValue", numberValue: value };
    } else if (typeof value === "string") {
      result.kind = { $case: "stringValue", stringValue: value };
    } else if (Array.isArray(value)) {
      result.kind = { $case: "listValue", listValue: value };
    } else if (typeof value === "object") {
      result.kind = { $case: "structValue", structValue: value };
    } else if (typeof value !== "undefined") {
      throw new Error("Unsupported any value type: " + typeof value);
    }
    return result;
  }
  Value2.wrap = wrap;
  function unwrap(message) {
    if (message.kind?.$case === "nullValue") {
      return null;
    } else if (message.kind?.$case === "numberValue") {
      return message.kind?.numberValue;
    } else if (message.kind?.$case === "stringValue") {
      return message.kind?.stringValue;
    } else if (message.kind?.$case === "boolValue") {
      return message.kind?.boolValue;
    } else if (message.kind?.$case === "structValue") {
      return message.kind?.structValue;
    } else if (message.kind?.$case === "listValue") {
      return message.kind?.listValue;
    } else {
      return void 0;
    }
  }
  Value2.unwrap = unwrap;
})(Value || (Value = {}));
function createBaseListValue() {
  return { values: [] };
}
var ListValue;
(function(ListValue2) {
  function encode(message, writer = import_minimal52.default.Writer.create()) {
    for (const v of message.values) {
      Value.encode(Value.wrap(v), writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }
  ListValue2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal52.default.Reader ? input : import_minimal52.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseListValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.values.push(Value.unwrap(Value.decode(reader, reader.uint32())));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  ListValue2.decode = decode;
  function fromJSON(object) {
    return { values: Array.isArray(object?.values) ? [...object.values] : [] };
  }
  ListValue2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    if (message.values) {
      obj.values = message.values.map((e) => e);
    } else {
      obj.values = [];
    }
    return obj;
  }
  ListValue2.toJSON = toJSON;
  function wrap(array) {
    const result = createBaseListValue();
    result.values = array ?? [];
    return result;
  }
  ListValue2.wrap = wrap;
  function unwrap(message) {
    if (message?.hasOwnProperty("values") && Array.isArray(message.values)) {
      return message.values;
    } else {
      return message;
    }
  }
  ListValue2.unwrap = unwrap;
})(ListValue || (ListValue = {}));
var tsProtoGlobalThis2 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (false) {
    return void 0;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function isSet(value) {
  return value !== null && value !== void 0;
}

// node_modules/@dcl/ecs/dist/composite/proto/gen/composite.gen.js
function createBaseComponentData() {
  return { data: void 0 };
}
var ComponentData;
(function(ComponentData2) {
  function encode(message, writer = import_minimal53.default.Writer.create()) {
    switch (message.data?.$case) {
      case "json":
        Value.encode(Value.wrap(message.data.json), writer.uint32(10).fork()).ldelim();
        break;
      case "binary":
        writer.uint32(18).bytes(message.data.binary);
        break;
    }
    return writer;
  }
  ComponentData2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal53.default.Reader ? input : import_minimal53.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseComponentData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = { $case: "json", json: Value.unwrap(Value.decode(reader, reader.uint32())) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = { $case: "binary", binary: reader.bytes() };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  ComponentData2.decode = decode;
  function fromJSON(object) {
    return {
      data: isSet2(object.json) ? { $case: "json", json: object.json } : isSet2(object.binary) ? { $case: "binary", binary: bytesFromBase64(object.binary) } : void 0
    };
  }
  ComponentData2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    message.data?.$case === "json" && (obj.json = message.data?.json);
    message.data?.$case === "binary" && (obj.binary = message.data?.binary !== void 0 ? base64FromBytes(message.data?.binary) : void 0);
    return obj;
  }
  ComponentData2.toJSON = toJSON;
})(ComponentData || (ComponentData = {}));
function createBaseCompositeComponent() {
  return { name: "", jsonSchema: void 0, data: /* @__PURE__ */ new Map() };
}
var CompositeComponent;
(function(CompositeComponent2) {
  function encode(message, writer = import_minimal53.default.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.jsonSchema !== void 0) {
      Value.encode(Value.wrap(message.jsonSchema), writer.uint32(18).fork()).ldelim();
    }
    message.data.forEach((value, key) => {
      CompositeComponent_DataEntry.encode({ key, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  }
  CompositeComponent2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal53.default.Reader ? input : import_minimal53.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseCompositeComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.jsonSchema = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          const entry3 = CompositeComponent_DataEntry.decode(reader, reader.uint32());
          if (entry3.value !== void 0) {
            message.data.set(entry3.key, entry3.value);
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  CompositeComponent2.decode = decode;
  function fromJSON(object) {
    return {
      name: isSet2(object.name) ? String(object.name) : "",
      jsonSchema: isSet2(object?.jsonSchema) ? object.jsonSchema : void 0,
      data: isObject2(object.data) ? Object.entries(object.data).reduce((acc, [key, value]) => {
        acc.set(Number(key), ComponentData.fromJSON(value));
        return acc;
      }, /* @__PURE__ */ new Map()) : /* @__PURE__ */ new Map()
    };
  }
  CompositeComponent2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    message.name !== void 0 && (obj.name = message.name);
    message.jsonSchema !== void 0 && (obj.jsonSchema = message.jsonSchema);
    obj.data = {};
    if (message.data) {
      message.data.forEach((v, k) => {
        obj.data[k] = ComponentData.toJSON(v);
      });
    }
    return obj;
  }
  CompositeComponent2.toJSON = toJSON;
})(CompositeComponent || (CompositeComponent = {}));
function createBaseCompositeComponent_DataEntry() {
  return { key: 0, value: void 0 };
}
var CompositeComponent_DataEntry;
(function(CompositeComponent_DataEntry2) {
  function encode(message, writer = import_minimal53.default.Writer.create()) {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== void 0) {
      ComponentData.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }
  CompositeComponent_DataEntry2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal53.default.Reader ? input : import_minimal53.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseCompositeComponent_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = ComponentData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  CompositeComponent_DataEntry2.decode = decode;
  function fromJSON(object) {
    return {
      key: isSet2(object.key) ? Number(object.key) : 0,
      value: isSet2(object.value) ? ComponentData.fromJSON(object.value) : void 0
    };
  }
  CompositeComponent_DataEntry2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    message.key !== void 0 && (obj.key = Math.round(message.key));
    message.value !== void 0 && (obj.value = message.value ? ComponentData.toJSON(message.value) : void 0);
    return obj;
  }
  CompositeComponent_DataEntry2.toJSON = toJSON;
})(CompositeComponent_DataEntry || (CompositeComponent_DataEntry = {}));
function createBaseCompositeDefinition() {
  return { version: 0, components: [] };
}
var CompositeDefinition;
(function(CompositeDefinition2) {
  function encode(message, writer = import_minimal53.default.Writer.create()) {
    if (message.version !== 0) {
      writer.uint32(8).int32(message.version);
    }
    for (const v of message.components) {
      CompositeComponent.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }
  CompositeDefinition2.encode = encode;
  function decode(input, length2) {
    const reader = input instanceof import_minimal53.default.Reader ? input : import_minimal53.default.Reader.create(input);
    let end = length2 === void 0 ? reader.len : reader.pos + length2;
    const message = createBaseCompositeDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.version = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.components.push(CompositeComponent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }
  CompositeDefinition2.decode = decode;
  function fromJSON(object) {
    return {
      version: isSet2(object.version) ? Number(object.version) : 0,
      components: Array.isArray(object?.components) ? object.components.map((e) => CompositeComponent.fromJSON(e)) : []
    };
  }
  CompositeDefinition2.fromJSON = fromJSON;
  function toJSON(message) {
    const obj = {};
    message.version !== void 0 && (obj.version = Math.round(message.version));
    if (message.components) {
      obj.components = message.components.map((e) => e ? CompositeComponent.toJSON(e) : void 0);
    } else {
      obj.components = [];
    }
    return obj;
  }
  CompositeDefinition2.toJSON = toJSON;
})(CompositeDefinition || (CompositeDefinition = {}));
var tsProtoGlobalThis3 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (false) {
    return void 0;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
  if (tsProtoGlobalThis3.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis3.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis3.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (tsProtoGlobalThis3.Buffer) {
    return tsProtoGlobalThis3.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis3.btoa(bin.join(""));
  }
}
function isObject2(value) {
  return typeof value === "object" && value !== null;
}
function isSet2(value) {
  return value !== null && value !== void 0;
}

// node_modules/@dcl/ecs/dist/composite/index.js
var Composite;
(function(Composite2) {
  function fromJson(object) {
    return CompositeDefinition.fromJSON(object);
  }
  Composite2.fromJson = fromJson;
  function fromBinary(buffer2) {
    return CompositeDefinition.decode(buffer2);
  }
  Composite2.fromBinary = fromBinary;
  function toJson(composite) {
    return CompositeDefinition.toJSON(composite);
  }
  Composite2.toJson = toJson;
  function toBinary(composite) {
    return CompositeDefinition.encode(composite).finish();
  }
  Composite2.toBinary = toBinary;
  function instance(engine2, compositeData, compositeProvider2, options = {}) {
    instanceComposite(engine2, compositeData, compositeProvider2, options);
  }
  Composite2.instance = instance;
  function resolveAndNormalizePath(src, cwd = "/") {
    return resolveComposite(src, cwd);
  }
  Composite2.resolveAndNormalizePath = resolveAndNormalizePath;
})(Composite || (Composite = {}));

// node_modules/@dcl/ecs/dist/index.js
var Transform2 = /* @__PURE__ */ Transform(engine);
var Material3 = /* @__PURE__ */ Material2(engine);
var MeshRenderer3 = /* @__PURE__ */ MeshRenderer2(engine);
var Name2 = Name(engine);

// node_modules/@dcl/ecs-math/dist/types.js
var ToGammaSpace = 1 / 2.2;
var ToLinearSpace = 2.2;
var Epsilon = 1e-6;
var DEG2RAD = Math.PI / 180;
var RAD2DEG = 360 / (Math.PI * 2);

// node_modules/@dcl/ecs-math/dist/Scalar.js
var Scalar;
(function(Scalar2) {
  Scalar2.TwoPi = Math.PI * 2;
  function withinEpsilon(a, b, epsilon = 1401298e-51) {
    const num = a - b;
    return -epsilon <= num && num <= epsilon;
  }
  Scalar2.withinEpsilon = withinEpsilon;
  function toHex(i) {
    const str = i.toString(16);
    if (i <= 15) {
      return ("0" + str).toUpperCase();
    }
    return str.toUpperCase();
  }
  Scalar2.toHex = toHex;
  function sign(value) {
    const _value = +value;
    if (_value === 0 || isNaN(_value)) {
      return _value;
    }
    return _value > 0 ? 1 : -1;
  }
  Scalar2.sign = sign;
  function clamp(value, min = 0, max = 1) {
    return Math.min(max, Math.max(min, value));
  }
  Scalar2.clamp = clamp;
  function log2(value) {
    return Math.log(value) * Math.LOG2E;
  }
  Scalar2.log2 = log2;
  function repeat(value, length2) {
    return value - Math.floor(value / length2) * length2;
  }
  Scalar2.repeat = repeat;
  function normalize(value, min, max) {
    return (value - min) / (max - min);
  }
  Scalar2.normalize = normalize;
  function denormalize(normalized, min, max) {
    return normalized * (max - min) + min;
  }
  Scalar2.denormalize = denormalize;
  function deltaAngle(current, target) {
    let num = repeat(target - current, 360);
    if (num > 180) {
      num -= 360;
    }
    return num;
  }
  Scalar2.deltaAngle = deltaAngle;
  function pingPong(tx, length2) {
    const t = repeat(tx, length2 * 2);
    return length2 - Math.abs(t - length2);
  }
  Scalar2.pingPong = pingPong;
  function smoothStep(from, to, tx) {
    let t = clamp(tx);
    t = -2 * t * t * t + 3 * t * t;
    return to * t + from * (1 - t);
  }
  Scalar2.smoothStep = smoothStep;
  function moveTowards(current, target, maxDelta) {
    let result = 0;
    if (Math.abs(target - current) <= maxDelta) {
      result = target;
    } else {
      result = current + sign(target - current) * maxDelta;
    }
    return result;
  }
  Scalar2.moveTowards = moveTowards;
  function moveTowardsAngle(current, target, maxDelta) {
    const num = deltaAngle(current, target);
    let result = 0;
    if (-maxDelta < num && num < maxDelta) {
      result = target;
    } else {
      result = moveTowards(current, current + num, maxDelta);
    }
    return result;
  }
  Scalar2.moveTowardsAngle = moveTowardsAngle;
  function lerp(start, end, amount) {
    return start + (end - start) * amount;
  }
  Scalar2.lerp = lerp;
  function lerpAngle(start, end, amount) {
    let num = repeat(end - start, 360);
    if (num > 180) {
      num -= 360;
    }
    return start + num * clamp(amount);
  }
  Scalar2.lerpAngle = lerpAngle;
  function inverseLerp(a, b, value) {
    let result = 0;
    if (a !== b) {
      result = clamp((value - a) / (b - a));
    } else {
      result = 0;
    }
    return result;
  }
  Scalar2.inverseLerp = inverseLerp;
  function hermite(value1, tangent1, value2, tangent2, amount) {
    const squared = amount * amount;
    const cubed = amount * squared;
    const part1 = 2 * cubed - 3 * squared + 1;
    const part2 = -2 * cubed + 3 * squared;
    const part3 = cubed - 2 * squared + amount;
    const part4 = cubed - squared;
    return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;
  }
  Scalar2.hermite = hermite;
  function randomRange(min, max) {
    if (min === max) {
      return min;
    }
    return Math.random() * (max - min) + min;
  }
  Scalar2.randomRange = randomRange;
  function rangeToPercent(num, min, max) {
    return (num - min) / (max - min);
  }
  Scalar2.rangeToPercent = rangeToPercent;
  function percentToRange(percent, min, max) {
    return (max - min) * percent + min;
  }
  Scalar2.percentToRange = percentToRange;
  function normalizeRadians(angle) {
    return angle - Scalar2.TwoPi * Math.floor((angle + Math.PI) / Scalar2.TwoPi);
  }
  Scalar2.normalizeRadians = normalizeRadians;
})(Scalar || (Scalar = {}));

// node_modules/@dcl/ecs-math/dist/Vector3.js
var Vector32;
(function(Vector33) {
  function isNonUniform(vector) {
    const absX = Math.abs(vector.x);
    const absY = Math.abs(vector.y);
    if (absX !== absY) {
      return true;
    }
    const absZ = Math.abs(vector.z);
    if (absX !== absZ) {
      return true;
    }
    return false;
  }
  Vector33.isNonUniform = isNonUniform;
  function create(x = 0, y = 0, z = 0) {
    return { x, y, z };
  }
  Vector33.create = create;
  function add2(vector1, vector2) {
    return {
      x: vector1.x + vector2.x,
      y: vector1.y + vector2.y,
      z: vector1.z + vector2.z
    };
  }
  Vector33.add = add2;
  function addToRef(vectorA, vectorB, result) {
    result.x = vectorA.x + vectorB.x;
    result.y = vectorA.y + vectorB.y;
    result.z = vectorA.z + vectorB.z;
  }
  Vector33.addToRef = addToRef;
  function subtract2(vector1, vector2) {
    return {
      x: vector1.x - vector2.x,
      y: vector1.y - vector2.y,
      z: vector1.z - vector2.z
    };
  }
  Vector33.subtract = subtract2;
  function subtractToRef(vectorA, vectorB, result) {
    result.x = vectorA.x - vectorB.x;
    result.y = vectorA.y - vectorB.y;
    result.z = vectorA.z - vectorB.z;
  }
  Vector33.subtractToRef = subtractToRef;
  function subtractFromFloatsToRef(vector1, x, y, z, result) {
    result.x = vector1.x - x;
    result.y = vector1.y - y;
    result.z = vector1.z - z;
  }
  Vector33.subtractFromFloatsToRef = subtractFromFloatsToRef;
  function negate2(value) {
    return { x: -value.x, y: -value.y, z: -value.z };
  }
  Vector33.negate = negate2;
  function copyFrom(source, dest) {
    dest.x = source.x;
    dest.y = source.y;
    dest.z = source.z;
  }
  Vector33.copyFrom = copyFrom;
  function copyFromFloats(x, y, z, dest) {
    dest.x = x;
    dest.y = y;
    dest.z = z;
  }
  Vector33.copyFromFloats = copyFromFloats;
  function clone(source) {
    return create(source.x, source.y, source.z);
  }
  Vector33.clone = clone;
  function getClipFactor(vector0, vector1, axis, size) {
    const d0 = dot(vector0, axis) - size;
    const d1 = dot(vector1, axis) - size;
    const s = d0 / (d0 - d1);
    return s;
  }
  Vector33.getClipFactor = getClipFactor;
  function getAngleBetweenVectors(vector0, vector1, normal) {
    const v0 = normalize(vector0);
    const v1 = normalize(vector1);
    const v0v1dot = dot(v0, v1);
    const n = create();
    crossToRef(v0, v1, n);
    if (dot(n, normal) > 0) {
      return Math.acos(v0v1dot);
    }
    return -Math.acos(v0v1dot);
  }
  Vector33.getAngleBetweenVectors = getAngleBetweenVectors;
  function fromArray(array, offset = 0) {
    return create(array[offset], array[offset + 1], array[offset + 2]);
  }
  Vector33.fromArray = fromArray;
  function fromFloatArray(array, offset) {
    return fromArray(array, offset);
  }
  Vector33.fromFloatArray = fromFloatArray;
  function fromArrayToRef(array, offset, result) {
    result.x = array[offset];
    result.y = array[offset + 1];
    result.z = array[offset + 2];
  }
  Vector33.fromArrayToRef = fromArrayToRef;
  function fromFloatArrayToRef(array, offset, result) {
    return fromArrayToRef(array, offset, result);
  }
  Vector33.fromFloatArrayToRef = fromFloatArrayToRef;
  function length2(vector) {
    return Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
  }
  Vector33.length = length2;
  function lengthSquared(vector) {
    return vector.x * vector.x + vector.y * vector.y + vector.z * vector.z;
  }
  Vector33.lengthSquared = lengthSquared;
  function scaleToRef(vector, scale2, result) {
    result.x = vector.x * scale2;
    result.y = vector.y * scale2;
    result.z = vector.z * scale2;
  }
  Vector33.scaleToRef = scaleToRef;
  function scale(vector, scale2) {
    return create(vector.x * scale2, vector.y * scale2, vector.z * scale2);
  }
  Vector33.scale = scale;
  function normalizeFromLength(vector, len) {
    const result = create(0, 0, 0);
    normalizeFromLengthToRef(vector, len, result);
    return result;
  }
  Vector33.normalizeFromLength = normalizeFromLength;
  function normalizeFromLengthToRef(vector, len, result) {
    if (len === 0 || len === 1) {
      copyFrom(vector, result);
      return;
    }
    scaleToRef(vector, 1 / len, result);
  }
  Vector33.normalizeFromLengthToRef = normalizeFromLengthToRef;
  function normalize(vector) {
    return normalizeFromLength(vector, length2(vector));
  }
  Vector33.normalize = normalize;
  function normalizeToRef(vector, result) {
    normalizeFromLengthToRef(vector, length2(vector), result);
  }
  Vector33.normalizeToRef = normalizeToRef;
  function dot(left, right) {
    return left.x * right.x + left.y * right.y + left.z * right.z;
  }
  Vector33.dot = dot;
  function applyMatrix4(vector, matrix) {
    const result = clone(vector);
    applyMatrix4ToRef(vector, matrix, result);
    return result;
  }
  Vector33.applyMatrix4 = applyMatrix4;
  function applyMatrix4ToRef(vector, matrix, result) {
    const { x, y, z } = vector;
    const m = matrix._m;
    const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);
    result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;
    result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;
    result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;
  }
  Vector33.applyMatrix4ToRef = applyMatrix4ToRef;
  function rotate(vector, q) {
    const result = create();
    rotateToRef(vector, q, result);
    return result;
  }
  Vector33.rotate = rotate;
  function rotateToRef(vector, q, result) {
    const { x, y, z } = vector;
    const { x: qx, y: qy, z: qz, w: qw } = q;
    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z;
    result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  }
  Vector33.rotateToRef = rotateToRef;
  function lerp(start, end, amount) {
    const result = create(0, 0, 0);
    lerpToRef(start, end, amount, result);
    return result;
  }
  Vector33.lerp = lerp;
  function lerpToRef(start, end, amount, result) {
    result.x = start.x + (end.x - start.x) * amount;
    result.y = start.y + (end.y - start.y) * amount;
    result.z = start.z + (end.z - start.z) * amount;
  }
  Vector33.lerpToRef = lerpToRef;
  function cross(left, right) {
    const result = Zero();
    crossToRef(left, right, result);
    return result;
  }
  Vector33.cross = cross;
  function crossToRef(left, right, result) {
    result.x = left.y * right.z - left.z * right.y;
    result.y = left.z * right.x - left.x * right.z;
    result.z = left.x * right.y - left.y * right.x;
  }
  Vector33.crossToRef = crossToRef;
  function transformCoordinates(vector, transformation) {
    const result = Zero();
    transformCoordinatesToRef(vector, transformation, result);
    return result;
  }
  Vector33.transformCoordinates = transformCoordinates;
  function transformCoordinatesToRef(vector, transformation, result) {
    return transformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);
  }
  Vector33.transformCoordinatesToRef = transformCoordinatesToRef;
  function transformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {
    const m = transformation._m;
    const rx = x * m[0] + y * m[4] + z * m[8] + m[12];
    const ry = x * m[1] + y * m[5] + z * m[9] + m[13];
    const rz = x * m[2] + y * m[6] + z * m[10] + m[14];
    const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);
    result.x = rx * rw;
    result.y = ry * rw;
    result.z = rz * rw;
  }
  Vector33.transformCoordinatesFromFloatsToRef = transformCoordinatesFromFloatsToRef;
  function transformNormal(vector, transformation) {
    const result = Zero();
    transformNormalToRef(vector, transformation, result);
    return result;
  }
  Vector33.transformNormal = transformNormal;
  function transformNormalToRef(vector, transformation, result) {
    transformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);
  }
  Vector33.transformNormalToRef = transformNormalToRef;
  function transformNormalFromFloatsToRef(x, y, z, transformation, result) {
    const m = transformation._m;
    result.x = x * m[0] + y * m[4] + z * m[8];
    result.y = x * m[1] + y * m[5] + z * m[9];
    result.z = x * m[2] + y * m[6] + z * m[10];
  }
  Vector33.transformNormalFromFloatsToRef = transformNormalFromFloatsToRef;
  function catmullRom(value1, value2, value3, value4, amount) {
    const squared = amount * amount;
    const cubed = amount * squared;
    const x = 0.5 * (2 * value2.x + (-value1.x + value3.x) * amount + (2 * value1.x - 5 * value2.x + 4 * value3.x - value4.x) * squared + (-value1.x + 3 * value2.x - 3 * value3.x + value4.x) * cubed);
    const y = 0.5 * (2 * value2.y + (-value1.y + value3.y) * amount + (2 * value1.y - 5 * value2.y + 4 * value3.y - value4.y) * squared + (-value1.y + 3 * value2.y - 3 * value3.y + value4.y) * cubed);
    const z = 0.5 * (2 * value2.z + (-value1.z + value3.z) * amount + (2 * value1.z - 5 * value2.z + 4 * value3.z - value4.z) * squared + (-value1.z + 3 * value2.z - 3 * value3.z + value4.z) * cubed);
    return create(x, y, z);
  }
  Vector33.catmullRom = catmullRom;
  function clamp(value, min, max) {
    const v = create();
    clampToRef(value, min, max, v);
    return v;
  }
  Vector33.clamp = clamp;
  function clampToRef(value, min, max, result) {
    let x = value.x;
    x = x > max.x ? max.x : x;
    x = x < min.x ? min.x : x;
    let y = value.y;
    y = y > max.y ? max.y : y;
    y = y < min.y ? min.y : y;
    let z = value.z;
    z = z > max.z ? max.z : z;
    z = z < min.z ? min.z : z;
    copyFromFloats(x, y, z, result);
  }
  Vector33.clampToRef = clampToRef;
  function hermite(value1, tangent1, value2, tangent2, amount) {
    const squared = amount * amount;
    const cubed = amount * squared;
    const part1 = 2 * cubed - 3 * squared + 1;
    const part2 = -2 * cubed + 3 * squared;
    const part3 = cubed - 2 * squared + amount;
    const part4 = cubed - squared;
    const x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
    const y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
    const z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;
    return create(x, y, z);
  }
  Vector33.hermite = hermite;
  function minimize(left, right) {
    const min = create();
    minimizeInPlaceFromFloatsToRef(right, left.x, left.y, left.z, min);
    return min;
  }
  Vector33.minimize = minimize;
  function maximize(left, right) {
    const max = create();
    maximizeInPlaceFromFloatsToRef(left, right.x, right.y, right.z, max);
    return max;
  }
  Vector33.maximize = maximize;
  function distance(value1, value2) {
    return Math.sqrt(distanceSquared(value1, value2));
  }
  Vector33.distance = distance;
  function distanceSquared(value1, value2) {
    const x = value1.x - value2.x;
    const y = value1.y - value2.y;
    const z = value1.z - value2.z;
    return x * x + y * y + z * z;
  }
  Vector33.distanceSquared = distanceSquared;
  function center(value1, value2) {
    const center2 = add2(value1, value2);
    scaleToRef(center2, 0.5, center2);
    return center2;
  }
  Vector33.center = center;
  function rotationFromAxis(axis1, axis2, axis3) {
    const rotation = Zero();
    rotationFromAxisToRef(axis1, axis2, axis3, rotation);
    return rotation;
  }
  Vector33.rotationFromAxis = rotationFromAxis;
  function rotationFromAxisToRef(axis1, axis2, axis3, result) {
    const quat = Quaternion2.create();
    Quaternion2.fromAxisToRotationQuaternionToRef(axis1, axis2, axis3, quat);
    copyFrom(Quaternion2.toEulerAngles(quat), result);
  }
  Vector33.rotationFromAxisToRef = rotationFromAxisToRef;
  function toString2(vector) {
    return `(${vector.x}, ${vector.y}, ${vector.z})`;
  }
  Vector33.toString = toString2;
  function getHashCode(vector) {
    let hash = vector.x || 0;
    hash = hash * 397 ^ (vector.y || 0);
    hash = hash * 397 ^ (vector.z || 0);
    return hash;
  }
  Vector33.getHashCode = getHashCode;
  function equals2(vector1, vector2) {
    return vector1.x === vector2.x && vector1.y === vector2.y && vector1.z === vector2.z;
  }
  Vector33.equals = equals2;
  function equalsWithEpsilon(vector1, vector2, epsilon = Epsilon) {
    return Scalar.withinEpsilon(vector1.x, vector2.x, epsilon) && Scalar.withinEpsilon(vector1.y, vector2.y, epsilon) && Scalar.withinEpsilon(vector1.z, vector2.z, epsilon);
  }
  Vector33.equalsWithEpsilon = equalsWithEpsilon;
  function equalsToFloats(vector, x, y, z) {
    return vector.x === x && vector.y === y && vector.z === z;
  }
  Vector33.equalsToFloats = equalsToFloats;
  function multiply2(vector1, vector2) {
    const result = create();
    multiplyToRef(vector1, vector2, result);
    return result;
  }
  Vector33.multiply = multiply2;
  function multiplyToRef(vector1, vector2, result) {
    result.x = vector1.x * vector2.x;
    result.y = vector1.y * vector2.y;
    result.z = vector1.z * vector2.z;
  }
  Vector33.multiplyToRef = multiplyToRef;
  function multiplyByFloatsToRef(vector1, x, y, z, result) {
    result.x = vector1.x * x;
    result.y = vector1.y * y;
    result.z = vector1.z * z;
  }
  Vector33.multiplyByFloatsToRef = multiplyByFloatsToRef;
  function multiplyByFloats(vector1, x, y, z) {
    const result = create();
    multiplyByFloatsToRef(vector1, x, y, z, result);
    return result;
  }
  Vector33.multiplyByFloats = multiplyByFloats;
  function divide2(vector1, vector2) {
    return {
      x: vector1.x / vector2.x,
      y: vector1.y / vector2.y,
      z: vector1.z / vector2.z
    };
  }
  Vector33.divide = divide2;
  function divideToRef(vector1, vector2, result) {
    result.x = vector1.x / vector2.x;
    result.y = vector1.y / vector2.y;
    result.z = vector1.z / vector2.z;
  }
  Vector33.divideToRef = divideToRef;
  function maximizeInPlaceFromFloatsToRef(vector1, x, y, z, result) {
    if (x > vector1.x) {
      result.x = x;
    } else {
      result.x = vector1.x;
    }
    if (y > vector1.y) {
      result.y = y;
    } else {
      result.y = vector1.y;
    }
    if (z > vector1.z) {
      result.z = z;
    } else {
      result.z = vector1.z;
    }
  }
  Vector33.maximizeInPlaceFromFloatsToRef = maximizeInPlaceFromFloatsToRef;
  function minimizeInPlaceFromFloatsToRef(vector1, x, y, z, result) {
    if (x < vector1.x) {
      result.x = x;
    } else {
      result.x = vector1.x;
    }
    if (y < vector1.y) {
      result.y = y;
    } else {
      result.y = vector1.y;
    }
    if (z < vector1.z) {
      result.z = z;
    } else {
      result.z = vector1.z;
    }
  }
  Vector33.minimizeInPlaceFromFloatsToRef = minimizeInPlaceFromFloatsToRef;
  function floor(vector1) {
    return create(Math.floor(vector1.x), Math.floor(vector1.y), Math.floor(vector1.z));
  }
  Vector33.floor = floor;
  function fract(vector1) {
    return create(vector1.x - Math.floor(vector1.x), vector1.y - Math.floor(vector1.y), vector1.z - Math.floor(vector1.z));
  }
  Vector33.fract = fract;
  function Zero() {
    return create(0, 0, 0);
  }
  Vector33.Zero = Zero;
  function One() {
    return create(1, 1, 1);
  }
  Vector33.One = One;
  function Up() {
    return create(0, 1, 0);
  }
  Vector33.Up = Up;
  function Down() {
    return create(0, -1, 0);
  }
  Vector33.Down = Down;
  function Forward() {
    return create(0, 0, 1);
  }
  Vector33.Forward = Forward;
  function Backward() {
    return create(0, 0, -1);
  }
  Vector33.Backward = Backward;
  function Right() {
    return create(1, 0, 0);
  }
  Vector33.Right = Right;
  function Left() {
    return create(-1, 0, 0);
  }
  Vector33.Left = Left;
  function Random() {
    return create(Math.random(), Math.random(), Math.random());
  }
  Vector33.Random = Random;
})(Vector32 || (Vector32 = {}));

// node_modules/@dcl/ecs-math/dist/Plane.js
var Plane;
(function(Plane2) {
  function create(a, b, c, d) {
    return {
      normal: Vector32.create(a, b, c),
      d
    };
  }
  Plane2.create = create;
  function fromArray(array) {
    return create(array[0], array[1], array[2], array[3]);
  }
  Plane2.fromArray = fromArray;
  function fromPoints(_point1, _point2, _point3) {
    const result = create(0, 0, 0, 0);
    return result;
  }
  Plane2.fromPoints = fromPoints;
  function romPositionAndNormal(origin, normal) {
    const result = create(0, 0, 0, 0);
    result.normal = Vector32.normalize(normal);
    result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
    return result;
  }
  Plane2.romPositionAndNormal = romPositionAndNormal;
  function signedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {
    const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
    return Vector32.dot(point, normal) + d;
  }
  Plane2.signedDistanceToPlaneFromPositionAndNormal = signedDistanceToPlaneFromPositionAndNormal;
  function asArray(plane) {
    return [plane.normal.x, plane.normal.y, plane.normal.z, plane.d];
  }
  Plane2.asArray = asArray;
  function clone(plane) {
    return create(plane.normal.x, plane.normal.y, plane.normal.z, plane.d);
  }
  Plane2.clone = clone;
  function getHashCode(_plane) {
    return 0;
  }
  Plane2.getHashCode = getHashCode;
  function normalize(plane) {
    const result = create(0, 0, 0, 0);
    const norm = Math.sqrt(plane.normal.x * plane.normal.x + plane.normal.y * plane.normal.y + plane.normal.z * plane.normal.z);
    let magnitude = 0;
    if (norm !== 0) {
      magnitude = 1 / norm;
    }
    result.normal.x = plane.normal.x * magnitude;
    result.normal.y = plane.normal.y * magnitude;
    result.normal.z = plane.normal.z * magnitude;
    result.d *= magnitude;
    return plane;
  }
  Plane2.normalize = normalize;
  function transform(plane, transformation) {
    const transposedMatrix = Matrix.create();
    Matrix.transposeToRef(transformation, transposedMatrix);
    const m = transposedMatrix._m;
    const x = plane.normal.x;
    const y = plane.normal.y;
    const z = plane.normal.z;
    const d = plane.d;
    const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];
    const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];
    const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];
    const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];
    return create(normalX, normalY, normalZ, finalD);
  }
  Plane2.transform = transform;
  function dotCoordinate(plane, point) {
    return plane.normal.x * point.x + plane.normal.y * point.y + plane.normal.z * point.z + plane.d;
  }
  Plane2.dotCoordinate = dotCoordinate;
  function copyFromPoints(point1, point2, point3) {
    const x1 = point2.x - point1.x;
    const y1 = point2.y - point1.y;
    const z1 = point2.z - point1.z;
    const x2 = point3.x - point1.x;
    const y2 = point3.y - point1.y;
    const z2 = point3.z - point1.z;
    const yz = y1 * z2 - z1 * y2;
    const xz = z1 * x2 - x1 * z2;
    const xy = x1 * y2 - y1 * x2;
    const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
    let invPyth;
    if (pyth !== 0) {
      invPyth = 1 / pyth;
    } else {
      invPyth = 0;
    }
    const normal = Vector32.create(yz * invPyth, xz * invPyth, xy * invPyth);
    return {
      normal,
      d: -(normal.x * point1.x + normal.y * point1.y + normal.z * point1.z)
    };
  }
  Plane2.copyFromPoints = copyFromPoints;
  function isFrontFacingTo(plane, direction, epsilon) {
    const dot = Vector32.dot(plane.normal, direction);
    return dot <= epsilon;
  }
  Plane2.isFrontFacingTo = isFrontFacingTo;
  function signedDistanceTo(plane, point) {
    return Vector32.dot(point, plane.normal) + plane.d;
  }
  Plane2.signedDistanceTo = signedDistanceTo;
})(Plane || (Plane = {}));

// node_modules/@dcl/ecs-math/dist/Matrix.js
var Matrix;
(function(Matrix2) {
  function m(self2) {
    return self2._m;
  }
  Matrix2.m = m;
  let _updateFlagSeed = 0;
  const _identityReadonly = {};
  function IdentityReadonly() {
    return _identityReadonly;
  }
  Matrix2.IdentityReadonly = IdentityReadonly;
  function create() {
    const newMatrix = {
      updateFlag: 0,
      isIdentity: false,
      isIdentity3x2: true,
      _isIdentityDirty: true,
      _isIdentity3x2Dirty: true,
      _m: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    };
    _updateIdentityStatus(newMatrix, false);
    return newMatrix;
  }
  Matrix2.create = create;
  function fromArray(array, offset = 0) {
    const result = create();
    fromArrayToRef(array, offset, result);
    return result;
  }
  Matrix2.fromArray = fromArray;
  function fromArrayToRef(array, offset, result) {
    for (let index = 0; index < 16; index++) {
      result._m[index] = array[index + offset];
    }
    _markAsUpdated(result);
  }
  Matrix2.fromArrayToRef = fromArrayToRef;
  function fromFloatArrayToRefScaled(array, offset, scale2, result) {
    for (let index = 0; index < 16; index++) {
      result._m[index] = array[index + offset] * scale2;
    }
    _markAsUpdated(result);
  }
  Matrix2.fromFloatArrayToRefScaled = fromFloatArrayToRefScaled;
  function fromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {
    const m2 = result._m;
    m2[0] = initialM11;
    m2[1] = initialM12;
    m2[2] = initialM13;
    m2[3] = initialM14;
    m2[4] = initialM21;
    m2[5] = initialM22;
    m2[6] = initialM23;
    m2[7] = initialM24;
    m2[8] = initialM31;
    m2[9] = initialM32;
    m2[10] = initialM33;
    m2[11] = initialM34;
    m2[12] = initialM41;
    m2[13] = initialM42;
    m2[14] = initialM43;
    m2[15] = initialM44;
    _markAsUpdated(result);
  }
  Matrix2.fromValuesToRef = fromValuesToRef;
  function fromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {
    const result = create();
    const m2 = result._m;
    m2[0] = initialM11;
    m2[1] = initialM12;
    m2[2] = initialM13;
    m2[3] = initialM14;
    m2[4] = initialM21;
    m2[5] = initialM22;
    m2[6] = initialM23;
    m2[7] = initialM24;
    m2[8] = initialM31;
    m2[9] = initialM32;
    m2[10] = initialM33;
    m2[11] = initialM34;
    m2[12] = initialM41;
    m2[13] = initialM42;
    m2[14] = initialM43;
    m2[15] = initialM44;
    _markAsUpdated(result);
    return result;
  }
  Matrix2.fromValues = fromValues;
  function compose(scale2, rotation, translation2) {
    const result = create();
    composeToRef(scale2, rotation, translation2, result);
    return result;
  }
  Matrix2.compose = compose;
  function composeToRef(scale2, rotation, translation2, result) {
    const tmpMatrix = [create(), create(), create()];
    scalingToRef(scale2.x, scale2.y, scale2.z, tmpMatrix[1]);
    fromQuaternionToRef(rotation, tmpMatrix[0]);
    multiplyToRef(tmpMatrix[1], tmpMatrix[0], result);
    setTranslation(result, translation2);
  }
  Matrix2.composeToRef = composeToRef;
  function Identity() {
    const identity = fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    _updateIdentityStatus(identity, true);
    return identity;
  }
  Matrix2.Identity = Identity;
  function IdentityToRef(result) {
    fromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, result);
    _updateIdentityStatus(result, true);
  }
  Matrix2.IdentityToRef = IdentityToRef;
  function Zero() {
    const zero = fromValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    _updateIdentityStatus(zero, false);
    return zero;
  }
  Matrix2.Zero = Zero;
  function RotationX(angle) {
    const result = create();
    rotationXToRef(angle, result);
    return result;
  }
  Matrix2.RotationX = RotationX;
  function rotationXToRef(angle, result) {
    const s = Math.sin(angle);
    const c = Math.cos(angle);
    fromValuesToRef(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, result);
    _updateIdentityStatus(result, c === 1 && s === 0);
  }
  Matrix2.rotationXToRef = rotationXToRef;
  function rotationY(angle) {
    const result = create();
    rotationYToRef(angle, result);
    return result;
  }
  Matrix2.rotationY = rotationY;
  function rotationYToRef(angle, result) {
    const s = Math.sin(angle);
    const c = Math.cos(angle);
    fromValuesToRef(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1, result);
    _updateIdentityStatus(result, c === 1 && s === 0);
  }
  Matrix2.rotationYToRef = rotationYToRef;
  function rotationZ(angle) {
    const result = create();
    rotationZToRef(angle, result);
    return result;
  }
  Matrix2.rotationZ = rotationZ;
  function rotationZToRef(angle, result) {
    const s = Math.sin(angle);
    const c = Math.cos(angle);
    fromValuesToRef(c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, result);
    _updateIdentityStatus(result, c === 1 && s === 0);
  }
  Matrix2.rotationZToRef = rotationZToRef;
  function rotationAxis(axis, angle) {
    const result = create();
    rotationAxisToRef(axis, angle, result);
    return result;
  }
  Matrix2.rotationAxis = rotationAxis;
  function rotationAxisToRef(_axis, angle, result) {
    const s = Math.sin(-angle);
    const c = Math.cos(-angle);
    const c1 = 1 - c;
    const axis = Vector32.normalize(_axis);
    const m2 = result._m;
    m2[0] = axis.x * axis.x * c1 + c;
    m2[1] = axis.x * axis.y * c1 - axis.z * s;
    m2[2] = axis.x * axis.z * c1 + axis.y * s;
    m2[3] = 0;
    m2[4] = axis.y * axis.x * c1 + axis.z * s;
    m2[5] = axis.y * axis.y * c1 + c;
    m2[6] = axis.y * axis.z * c1 - axis.x * s;
    m2[7] = 0;
    m2[8] = axis.z * axis.x * c1 - axis.y * s;
    m2[9] = axis.z * axis.y * c1 + axis.x * s;
    m2[10] = axis.z * axis.z * c1 + c;
    m2[11] = 0;
    m2[12] = 0;
    m2[13] = 0;
    m2[14] = 0;
    m2[15] = 1;
    _markAsUpdated(result);
  }
  Matrix2.rotationAxisToRef = rotationAxisToRef;
  function rotationYawPitchRoll(yaw, pitch, roll) {
    const result = create();
    rotationYawPitchRollToRef(yaw, pitch, roll, result);
    return result;
  }
  Matrix2.rotationYawPitchRoll = rotationYawPitchRoll;
  function rotationYawPitchRollToRef(yaw, pitch, roll, result) {
    const quaternionResult = Quaternion2.Zero();
    Quaternion2.fromRotationYawPitchRollToRef(yaw, pitch, roll, quaternionResult);
    fromQuaternionToRef(quaternionResult, result);
  }
  Matrix2.rotationYawPitchRollToRef = rotationYawPitchRollToRef;
  function scaling(x, y, z) {
    const result = create();
    scalingToRef(x, y, z, result);
    return result;
  }
  Matrix2.scaling = scaling;
  function scalingToRef(x, y, z, result) {
    fromValuesToRef(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1, result);
    _updateIdentityStatus(result, x === 1 && y === 1 && z === 1);
  }
  Matrix2.scalingToRef = scalingToRef;
  function translation(x, y, z) {
    const result = create();
    translationToRef(x, y, z, result);
    return result;
  }
  Matrix2.translation = translation;
  function translationToRef(x, y, z, result) {
    fromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1, result);
    _updateIdentityStatus(result, x === 0 && y === 0 && z === 0);
  }
  Matrix2.translationToRef = translationToRef;
  function lerp(startValue, endValue, gradient) {
    const result = create();
    lerpToRef(startValue, endValue, gradient, result);
    return result;
  }
  Matrix2.lerp = lerp;
  function lerpToRef(startValue, endValue, gradient, result) {
    for (let index = 0; index < 16; index++) {
      result._m[index] = startValue._m[index] * (1 - gradient) + endValue._m[index] * gradient;
    }
    _markAsUpdated(result);
  }
  Matrix2.lerpToRef = lerpToRef;
  function decomposeLerp(startValue, endValue, gradient) {
    const result = create();
    decomposeLerpToRef(startValue, endValue, gradient, result);
    return result;
  }
  Matrix2.decomposeLerp = decomposeLerp;
  function decomposeLerpToRef(startValue, endValue, gradient, result) {
    const startScale = Vector32.Zero();
    const startRotation = Quaternion2.Zero();
    const startTranslation = Vector32.Zero();
    decompose(startValue, startScale, startRotation, startTranslation);
    const endScale = Vector32.Zero();
    const endRotation = Quaternion2.Zero();
    const endTranslation = Vector32.Zero();
    decompose(endValue, endScale, endRotation, endTranslation);
    const resultScale = Vector32.Zero();
    Vector32.lerpToRef(startScale, endScale, gradient, resultScale);
    const resultRotation = Quaternion2.Zero();
    Quaternion2.slerpToRef(startRotation, endRotation, gradient, resultRotation);
    const resultTranslation = Vector32.Zero();
    Vector32.lerpToRef(startTranslation, endTranslation, gradient, resultTranslation);
    composeToRef(resultScale, resultRotation, resultTranslation, result);
  }
  Matrix2.decomposeLerpToRef = decomposeLerpToRef;
  function LookAtLH(eye, target, up) {
    const result = create();
    lookAtLHToRef(eye, target, up, result);
    return result;
  }
  Matrix2.LookAtLH = LookAtLH;
  function lookAtLHToRef(eye, target, up, result) {
    const xAxis = Vector32.Zero();
    const yAxis = Vector32.Zero();
    const zAxis = Vector32.Zero();
    Vector32.subtractToRef(target, eye, zAxis);
    Vector32.normalizeToRef(zAxis, zAxis);
    Vector32.crossToRef(up, zAxis, xAxis);
    const xSquareLength = Vector32.lengthSquared(xAxis);
    if (xSquareLength === 0) {
      xAxis.x = 1;
    } else {
      Vector32.normalizeFromLengthToRef(xAxis, Math.sqrt(xSquareLength), xAxis);
    }
    Vector32.crossToRef(zAxis, xAxis, yAxis);
    Vector32.normalizeToRef(yAxis, yAxis);
    const ex = -Vector32.dot(xAxis, eye);
    const ey = -Vector32.dot(yAxis, eye);
    const ez = -Vector32.dot(zAxis, eye);
    fromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, ex, ey, ez, 1, result);
  }
  Matrix2.lookAtLHToRef = lookAtLHToRef;
  function lookAtRH(eye, target, up) {
    const result = create();
    lookAtRHToRef(eye, target, up, result);
    return result;
  }
  Matrix2.lookAtRH = lookAtRH;
  function lookAtRHToRef(eye, target, up, result) {
    const xAxis = Vector32.Zero();
    const yAxis = Vector32.Zero();
    const zAxis = Vector32.Zero();
    Vector32.subtractToRef(eye, target, zAxis);
    Vector32.normalizeToRef(zAxis, zAxis);
    Vector32.crossToRef(up, zAxis, xAxis);
    const xSquareLength = Vector32.lengthSquared(xAxis);
    if (xSquareLength === 0) {
      xAxis.x = 1;
    } else {
      Vector32.normalizeFromLengthToRef(xAxis, Math.sqrt(xSquareLength), xAxis);
    }
    Vector32.crossToRef(zAxis, xAxis, yAxis);
    Vector32.normalizeToRef(yAxis, yAxis);
    const ex = -Vector32.dot(xAxis, eye);
    const ey = -Vector32.dot(yAxis, eye);
    const ez = -Vector32.dot(zAxis, eye);
    fromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, ex, ey, ez, 1, result);
  }
  Matrix2.lookAtRHToRef = lookAtRHToRef;
  function orthoLH(width, height, znear, zfar) {
    const matrix = create();
    orthoLHToRef(width, height, znear, zfar, matrix);
    return matrix;
  }
  Matrix2.orthoLH = orthoLH;
  function orthoLHToRef(width, height, znear, zfar, result) {
    const n = znear;
    const f = zfar;
    const a = 2 / width;
    const b = 2 / height;
    const c = 2 / (f - n);
    const d = -(f + n) / (f - n);
    fromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, d, 1, result);
    _updateIdentityStatus(result, a === 1 && b === 1 && c === 1 && d === 0);
  }
  Matrix2.orthoLHToRef = orthoLHToRef;
  function OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {
    const matrix = create();
    orthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);
    return matrix;
  }
  Matrix2.OrthoOffCenterLH = OrthoOffCenterLH;
  function orthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {
    const n = znear;
    const f = zfar;
    const a = 2 / (right - left);
    const b = 2 / (top - bottom);
    const c = 2 / (f - n);
    const d = -(f + n) / (f - n);
    const i0 = (left + right) / (left - right);
    const i1 = (top + bottom) / (bottom - top);
    fromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, i0, i1, d, 1, result);
    _markAsUpdated(result);
  }
  Matrix2.orthoOffCenterLHToRef = orthoOffCenterLHToRef;
  function orthoOffCenterRH(left, right, bottom, top, znear, zfar) {
    const matrix = create();
    orthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);
    return matrix;
  }
  Matrix2.orthoOffCenterRH = orthoOffCenterRH;
  function orthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {
    orthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);
    result._m[10] *= -1;
  }
  Matrix2.orthoOffCenterRHToRef = orthoOffCenterRHToRef;
  function perspectiveLH(width, height, znear, zfar) {
    const matrix = create();
    const n = znear;
    const f = zfar;
    const a = 2 * n / width;
    const b = 2 * n / height;
    const c = (f + n) / (f - n);
    const d = -2 * f * n / (f - n);
    fromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 1, 0, 0, d, 0, matrix);
    _updateIdentityStatus(matrix, false);
    return matrix;
  }
  Matrix2.perspectiveLH = perspectiveLH;
  function perspectiveFovLH(fov, aspect, znear, zfar) {
    const matrix = create();
    perspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);
    return matrix;
  }
  Matrix2.perspectiveFovLH = perspectiveFovLH;
  function perspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {
    const n = znear;
    const f = zfar;
    const t = 1 / Math.tan(fov * 0.5);
    const a = isVerticalFovFixed ? t / aspect : t;
    const b = isVerticalFovFixed ? t : t * aspect;
    const c = (f + n) / (f - n);
    const d = -2 * f * n / (f - n);
    fromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 1, 0, 0, d, 0, result);
    _updateIdentityStatus(result, false);
  }
  Matrix2.perspectiveFovLHToRef = perspectiveFovLHToRef;
  function PerspectiveFovRH(fov, aspect, znear, zfar) {
    const matrix = create();
    perspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);
    return matrix;
  }
  Matrix2.PerspectiveFovRH = PerspectiveFovRH;
  function perspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {
    const n = znear;
    const f = zfar;
    const t = 1 / Math.tan(fov * 0.5);
    const a = isVerticalFovFixed ? t / aspect : t;
    const b = isVerticalFovFixed ? t : t * aspect;
    const c = -(f + n) / (f - n);
    const d = -2 * f * n / (f - n);
    fromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, -1, 0, 0, d, 0, result);
    _updateIdentityStatus(result, false);
  }
  Matrix2.perspectiveFovRHToRef = perspectiveFovRHToRef;
  function perspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {
    const rightHandedFactor = rightHanded ? -1 : 1;
    const upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    const downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    const xScale = 2 / (leftTan + rightTan);
    const yScale = 2 / (upTan + downTan);
    const m2 = result._m;
    m2[0] = xScale;
    m2[1] = m2[2] = m2[3] = m2[4] = 0;
    m2[5] = yScale;
    m2[6] = m2[7] = 0;
    m2[8] = (leftTan - rightTan) * xScale * 0.5;
    m2[9] = -((upTan - downTan) * yScale * 0.5);
    m2[10] = -zfar / (znear - zfar);
    m2[11] = 1 * rightHandedFactor;
    m2[12] = m2[13] = m2[15] = 0;
    m2[14] = -(2 * zfar * znear) / (zfar - znear);
    _markAsUpdated(result);
  }
  Matrix2.perspectiveFovWebVRToRef = perspectiveFovWebVRToRef;
  function GetAsMatrix2x2(matrix) {
    return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];
  }
  Matrix2.GetAsMatrix2x2 = GetAsMatrix2x2;
  function GetAsMatrix3x3(matrix) {
    return [
      matrix._m[0],
      matrix._m[1],
      matrix._m[2],
      matrix._m[4],
      matrix._m[5],
      matrix._m[6],
      matrix._m[8],
      matrix._m[9],
      matrix._m[10]
    ];
  }
  Matrix2.GetAsMatrix3x3 = GetAsMatrix3x3;
  function transpose(matrix) {
    const result = create();
    transposeToRef(matrix, result);
    return result;
  }
  Matrix2.transpose = transpose;
  function transposeToRef(matrix, result) {
    const rm = result._m;
    const mm = matrix._m;
    rm[0] = mm[0];
    rm[1] = mm[4];
    rm[2] = mm[8];
    rm[3] = mm[12];
    rm[4] = mm[1];
    rm[5] = mm[5];
    rm[6] = mm[9];
    rm[7] = mm[13];
    rm[8] = mm[2];
    rm[9] = mm[6];
    rm[10] = mm[10];
    rm[11] = mm[14];
    rm[12] = mm[3];
    rm[13] = mm[7];
    rm[14] = mm[11];
    rm[15] = mm[15];
    _updateIdentityStatus(result, matrix.isIdentity, matrix._isIdentityDirty);
  }
  Matrix2.transposeToRef = transposeToRef;
  function reflection(plane) {
    const matrix = create();
    reflectionToRef(plane, matrix);
    return matrix;
  }
  Matrix2.reflection = reflection;
  function reflectionToRef(_plane, result) {
    const plane = Plane.normalize(_plane);
    const x = plane.normal.x;
    const y = plane.normal.y;
    const z = plane.normal.z;
    const temp = -2 * x;
    const temp2 = -2 * y;
    const temp3 = -2 * z;
    fromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0, temp * y, temp2 * y + 1, temp3 * y, 0, temp * z, temp2 * z, temp3 * z + 1, 0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1, result);
  }
  Matrix2.reflectionToRef = reflectionToRef;
  function fromXYZAxesToRef(xaxis, yaxis, zaxis, result) {
    fromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0, yaxis.x, yaxis.y, yaxis.z, 0, zaxis.x, zaxis.y, zaxis.z, 0, 0, 0, 0, 1, result);
  }
  Matrix2.fromXYZAxesToRef = fromXYZAxesToRef;
  function fromQuaternionToRef(quat, result) {
    const xx = quat.x * quat.x;
    const yy = quat.y * quat.y;
    const zz = quat.z * quat.z;
    const xy = quat.x * quat.y;
    const zw = quat.z * quat.w;
    const zx = quat.z * quat.x;
    const yw = quat.y * quat.w;
    const yz = quat.y * quat.z;
    const xw = quat.x * quat.w;
    result._m[0] = 1 - 2 * (yy + zz);
    result._m[1] = 2 * (xy + zw);
    result._m[2] = 2 * (zx - yw);
    result._m[3] = 0;
    result._m[4] = 2 * (xy - zw);
    result._m[5] = 1 - 2 * (zz + xx);
    result._m[6] = 2 * (yz + xw);
    result._m[7] = 0;
    result._m[8] = 2 * (zx + yw);
    result._m[9] = 2 * (yz - xw);
    result._m[10] = 1 - 2 * (yy + xx);
    result._m[11] = 0;
    result._m[12] = 0;
    result._m[13] = 0;
    result._m[14] = 0;
    result._m[15] = 1;
    _markAsUpdated(result);
  }
  Matrix2.fromQuaternionToRef = fromQuaternionToRef;
  function _markAsUpdated(self2) {
    self2.updateFlag = _updateFlagSeed++;
    self2.isIdentity = false;
    self2.isIdentity3x2 = false;
    self2._isIdentityDirty = true;
    self2._isIdentity3x2Dirty = true;
  }
  function isIdentityUpdate(self2) {
    if (self2._isIdentityDirty) {
      self2._isIdentityDirty = false;
      const m2 = self2._m;
      self2.isIdentity = m2[0] === 1 && m2[1] === 0 && m2[2] === 0 && m2[3] === 0 && m2[4] === 0 && m2[5] === 1 && m2[6] === 0 && m2[7] === 0 && m2[8] === 0 && m2[9] === 0 && m2[10] === 1 && m2[11] === 0 && m2[12] === 0 && m2[13] === 0 && m2[14] === 0 && m2[15] === 1;
    }
    return self2.isIdentity;
  }
  Matrix2.isIdentityUpdate = isIdentityUpdate;
  function isIdentityAs3x2Update(self2) {
    if (self2._isIdentity3x2Dirty) {
      self2._isIdentity3x2Dirty = false;
      if (self2._m[0] !== 1 || self2._m[5] !== 1 || self2._m[15] !== 1) {
        self2.isIdentity3x2 = false;
      } else if (self2._m[1] !== 0 || self2._m[2] !== 0 || self2._m[3] !== 0 || self2._m[4] !== 0 || self2._m[6] !== 0 || self2._m[7] !== 0 || self2._m[8] !== 0 || self2._m[9] !== 0 || self2._m[10] !== 0 || self2._m[11] !== 0 || self2._m[12] !== 0 || self2._m[13] !== 0 || self2._m[14] !== 0) {
        self2.isIdentity3x2 = false;
      } else {
        self2.isIdentity3x2 = true;
      }
    }
    return self2.isIdentity3x2;
  }
  Matrix2.isIdentityAs3x2Update = isIdentityAs3x2Update;
  function determinant(self2) {
    if (self2.isIdentity === true) {
      return 1;
    }
    const m2 = self2._m;
    const m00 = m2[0], m01 = m2[1], m02 = m2[2], m03 = m2[3];
    const m10 = m2[4], m11 = m2[5], m12 = m2[6], m13 = m2[7];
    const m20 = m2[8], m21 = m2[9], m22 = m2[10], m23 = m2[11];
    const m30 = m2[12], m31 = m2[13], m32 = m2[14], m33 = m2[15];
    const det_22_33 = m22 * m33 - m32 * m23;
    const det_21_33 = m21 * m33 - m31 * m23;
    const det_21_32 = m21 * m32 - m31 * m22;
    const det_20_33 = m20 * m33 - m30 * m23;
    const det_20_32 = m20 * m32 - m22 * m30;
    const det_20_31 = m20 * m31 - m30 * m21;
    const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);
    const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);
    const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);
    const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);
    return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;
  }
  Matrix2.determinant = determinant;
  function toArray(self2) {
    return self2._m;
  }
  Matrix2.toArray = toArray;
  function asArray(self2) {
    return self2._m;
  }
  Matrix2.asArray = asArray;
  function reset(self2) {
    fromValuesToRef(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, self2);
    _updateIdentityStatus(self2, false);
  }
  Matrix2.reset = reset;
  function add2(self2, other) {
    const result = create();
    addToRef(self2, other, result);
    return result;
  }
  Matrix2.add = add2;
  function addToRef(self2, other, result) {
    for (let index = 0; index < 16; index++) {
      result._m[index] = self2._m[index] + other._m[index];
    }
    _markAsUpdated(result);
  }
  Matrix2.addToRef = addToRef;
  function addToSelf(self2, other) {
    for (let index = 0; index < 16; index++) {
      self2._m[index] += other._m[index];
    }
    _markAsUpdated(self2);
  }
  Matrix2.addToSelf = addToSelf;
  function invert(source) {
    const result = create();
    invertToRef(source, result);
    return result;
  }
  Matrix2.invert = invert;
  function invertToRef(source, result) {
    if (source.isIdentity === true) {
      copy(source, result);
      return;
    }
    const m2 = source._m;
    const m00 = m2[0], m01 = m2[1], m02 = m2[2], m03 = m2[3];
    const m10 = m2[4], m11 = m2[5], m12 = m2[6], m13 = m2[7];
    const m20 = m2[8], m21 = m2[9], m22 = m2[10], m23 = m2[11];
    const m30 = m2[12], m31 = m2[13], m32 = m2[14], m33 = m2[15];
    const det_22_33 = m22 * m33 - m32 * m23;
    const det_21_33 = m21 * m33 - m31 * m23;
    const det_21_32 = m21 * m32 - m31 * m22;
    const det_20_33 = m20 * m33 - m30 * m23;
    const det_20_32 = m20 * m32 - m22 * m30;
    const det_20_31 = m20 * m31 - m30 * m21;
    const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);
    const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);
    const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);
    const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);
    const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;
    if (det === 0) {
      copy(source, result);
      return;
    }
    const detInv = 1 / det;
    const det_12_33 = m12 * m33 - m32 * m13;
    const det_11_33 = m11 * m33 - m31 * m13;
    const det_11_32 = m11 * m32 - m31 * m12;
    const det_10_33 = m10 * m33 - m30 * m13;
    const det_10_32 = m10 * m32 - m30 * m12;
    const det_10_31 = m10 * m31 - m30 * m11;
    const det_12_23 = m12 * m23 - m22 * m13;
    const det_11_23 = m11 * m23 - m21 * m13;
    const det_11_22 = m11 * m22 - m21 * m12;
    const det_10_23 = m10 * m23 - m20 * m13;
    const det_10_22 = m10 * m22 - m20 * m12;
    const det_10_21 = m10 * m21 - m20 * m11;
    const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);
    const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);
    const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);
    const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);
    const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);
    const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);
    const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);
    const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);
    const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);
    const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);
    const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);
    const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);
    fromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, result);
  }
  Matrix2.invertToRef = invertToRef;
  function addAtIndex(self2, index, value) {
    self2._m[index] += value;
    _markAsUpdated(self2);
  }
  Matrix2.addAtIndex = addAtIndex;
  function multiplyAtIndex(self2, index, value) {
    self2._m[index] *= value;
    _markAsUpdated(self2);
    return self2;
  }
  Matrix2.multiplyAtIndex = multiplyAtIndex;
  function setTranslationFromFloats(self2, x, y, z) {
    self2._m[12] = x;
    self2._m[13] = y;
    self2._m[14] = z;
    _markAsUpdated(self2);
  }
  Matrix2.setTranslationFromFloats = setTranslationFromFloats;
  function setTranslation(self2, vector3) {
    setTranslationFromFloats(self2, vector3.x, vector3.y, vector3.z);
  }
  Matrix2.setTranslation = setTranslation;
  function getTranslation(self2) {
    return Vector32.create(self2._m[12], self2._m[13], self2._m[14]);
  }
  Matrix2.getTranslation = getTranslation;
  function getTranslationToRef(self2, result) {
    result.x = self2._m[12];
    result.y = self2._m[13];
    result.z = self2._m[14];
  }
  Matrix2.getTranslationToRef = getTranslationToRef;
  function removeRotationAndScaling(self2) {
    const m2 = self2._m;
    fromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, m2[12], m2[13], m2[14], m2[15], self2);
    _updateIdentityStatus(self2, m2[12] === 0 && m2[13] === 0 && m2[14] === 0 && m2[15] === 1);
    return self2;
  }
  Matrix2.removeRotationAndScaling = removeRotationAndScaling;
  function multiply2(self2, other) {
    const result = create();
    multiplyToRef(self2, other, result);
    return result;
  }
  Matrix2.multiply = multiply2;
  function copy(from, dest) {
    copyToArray(from, dest._m);
    _updateIdentityStatus(dest, from.isIdentity, from._isIdentityDirty, from.isIdentity3x2, from._isIdentity3x2Dirty);
  }
  Matrix2.copy = copy;
  function copyToArray(self2, arrayDest, offsetDest = 0) {
    for (let index = 0; index < 16; index++) {
      arrayDest[offsetDest + index] = self2._m[index];
    }
  }
  Matrix2.copyToArray = copyToArray;
  function multiplyToRef(self2, other, result) {
    if (self2.isIdentity) {
      copy(other, result);
      return;
    }
    if (other.isIdentity) {
      copy(self2, result);
      return;
    }
    multiplyToArray(self2, other, result._m, 0);
    _markAsUpdated(result);
  }
  Matrix2.multiplyToRef = multiplyToRef;
  function multiplyToArray(self2, other, result, offset) {
    const m2 = self2._m;
    const otherM = other._m;
    const tm0 = m2[0], tm1 = m2[1], tm2 = m2[2], tm3 = m2[3];
    const tm4 = m2[4], tm5 = m2[5], tm6 = m2[6], tm7 = m2[7];
    const tm8 = m2[8], tm9 = m2[9], tm10 = m2[10], tm11 = m2[11];
    const tm12 = m2[12], tm13 = m2[13], tm14 = m2[14], tm15 = m2[15];
    const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];
    const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];
    const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];
    const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];
    result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;
    result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;
    result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;
    result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;
    result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;
    result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;
    result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;
    result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;
    result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;
    result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;
    result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;
    result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;
    result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;
    result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;
    result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;
    result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;
  }
  Matrix2.multiplyToArray = multiplyToArray;
  function equals2(self2, value) {
    const other = value;
    if (!other) {
      return false;
    }
    if (self2.isIdentity || other.isIdentity) {
      if (!self2._isIdentityDirty && !other._isIdentityDirty) {
        return self2.isIdentity && other.isIdentity;
      }
    }
    const m2 = self2._m;
    const om = other._m;
    return m2[0] === om[0] && m2[1] === om[1] && m2[2] === om[2] && m2[3] === om[3] && m2[4] === om[4] && m2[5] === om[5] && m2[6] === om[6] && m2[7] === om[7] && m2[8] === om[8] && m2[9] === om[9] && m2[10] === om[10] && m2[11] === om[11] && m2[12] === om[12] && m2[13] === om[13] && m2[14] === om[14] && m2[15] === om[15];
  }
  Matrix2.equals = equals2;
  function clone(self2) {
    const result = create();
    copy(self2, result);
    return result;
  }
  Matrix2.clone = clone;
  function getHashCode(self2) {
    let hash = self2._m[0] || 0;
    for (let i = 1; i < 16; i++) {
      hash = hash * 397 ^ (self2._m[i] || 0);
    }
    return hash;
  }
  Matrix2.getHashCode = getHashCode;
  function decompose(self2, scale2, rotation, translation2) {
    if (self2.isIdentity) {
      if (translation2) {
        translation2.x = 0;
        translation2.y = 0;
        translation2.z = 0;
      }
      if (scale2) {
        scale2.x = 1;
        scale2.y = 1;
        scale2.z = 1;
      }
      if (rotation) {
        rotation.w = 1;
        rotation.x = 0;
        rotation.y = 0;
        rotation.z = 0;
      }
      return true;
    }
    const m2 = self2._m;
    if (translation2) {
      translation2.x = m2[12];
      translation2.y = m2[13];
      translation2.z = m2[14];
    }
    const usedScale = scale2 || Vector32.Zero();
    usedScale.x = Math.sqrt(m2[0] * m2[0] + m2[1] * m2[1] + m2[2] * m2[2]);
    usedScale.y = Math.sqrt(m2[4] * m2[4] + m2[5] * m2[5] + m2[6] * m2[6]);
    usedScale.z = Math.sqrt(m2[8] * m2[8] + m2[9] * m2[9] + m2[10] * m2[10]);
    if (determinant(self2) <= 0) {
      usedScale.y *= -1;
    }
    if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {
      if (rotation) {
        rotation.w = 1;
        rotation.x = 0;
        rotation.y = 0;
        rotation.z = 0;
      }
      return false;
    }
    if (rotation) {
      const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;
      const tmpMatrix = create();
      fromValuesToRef(m2[0] * sx, m2[1] * sx, m2[2] * sx, 0, m2[4] * sy, m2[5] * sy, m2[6] * sy, 0, m2[8] * sz, m2[9] * sz, m2[10] * sz, 0, 0, 0, 0, 1, tmpMatrix);
      Quaternion2.fromRotationMatrixToRef(tmpMatrix, rotation);
    }
    return true;
  }
  Matrix2.decompose = decompose;
  function setRowFromFloats(self2, index, x, y, z, w) {
    if (index < 0 || index > 3) {
      return;
    }
    const i = index * 4;
    self2._m[i + 0] = x;
    self2._m[i + 1] = y;
    self2._m[i + 2] = z;
    self2._m[i + 3] = w;
    _markAsUpdated(self2);
  }
  Matrix2.setRowFromFloats = setRowFromFloats;
  function scale(self2, scale2) {
    const result = create();
    scaleToRef(self2, scale2, result);
    return result;
  }
  Matrix2.scale = scale;
  function scaleToRef(self2, scale2, result) {
    for (let index = 0; index < 16; index++) {
      result._m[index] = self2._m[index] * scale2;
    }
    _markAsUpdated(result);
  }
  Matrix2.scaleToRef = scaleToRef;
  function scaleAndAddToRef(self2, scale2, result) {
    for (let index = 0; index < 16; index++) {
      result._m[index] += self2._m[index] * scale2;
    }
    _markAsUpdated(result);
  }
  Matrix2.scaleAndAddToRef = scaleAndAddToRef;
  function normalMatrixToRef(self2, ref) {
    const tmp = create();
    invertToRef(self2, tmp);
    transposeToRef(tmp, ref);
    const m2 = ref._m;
    fromValuesToRef(m2[0], m2[1], m2[2], 0, m2[4], m2[5], m2[6], 0, m2[8], m2[9], m2[10], 0, 0, 0, 0, 1, ref);
  }
  Matrix2.normalMatrixToRef = normalMatrixToRef;
  function getRotationMatrix(self2) {
    const result = create();
    getRotationMatrixToRef(self2, result);
    return result;
  }
  Matrix2.getRotationMatrix = getRotationMatrix;
  function getRotationMatrixToRef(self2, result) {
    const scale2 = Vector32.Zero();
    if (!decompose(self2, scale2)) {
      result = Identity();
      return;
    }
    const m2 = self2._m;
    const sx = 1 / scale2.x, sy = 1 / scale2.y, sz = 1 / scale2.z;
    fromValuesToRef(m2[0] * sx, m2[1] * sx, m2[2] * sx, 0, m2[4] * sy, m2[5] * sy, m2[6] * sy, 0, m2[8] * sz, m2[9] * sz, m2[10] * sz, 0, 0, 0, 0, 1, result);
  }
  Matrix2.getRotationMatrixToRef = getRotationMatrixToRef;
  function toggleModelMatrixHandInPlace(self2) {
    self2._m[2] *= -1;
    self2._m[6] *= -1;
    self2._m[8] *= -1;
    self2._m[9] *= -1;
    self2._m[14] *= -1;
    _markAsUpdated(self2);
  }
  Matrix2.toggleModelMatrixHandInPlace = toggleModelMatrixHandInPlace;
  function toggleProjectionMatrixHandInPlace(self2) {
    self2._m[8] *= -1;
    self2._m[9] *= -1;
    self2._m[10] *= -1;
    self2._m[11] *= -1;
    _markAsUpdated(self2);
  }
  Matrix2.toggleProjectionMatrixHandInPlace = toggleProjectionMatrixHandInPlace;
  function _updateIdentityStatus(self2, isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {
    self2.updateFlag = _updateFlagSeed++;
    self2.isIdentity = isIdentity;
    self2.isIdentity3x2 = isIdentity || isIdentity3x2;
    self2._isIdentityDirty = self2.isIdentity ? false : isIdentityDirty;
    self2._isIdentity3x2Dirty = self2.isIdentity3x2 ? false : isIdentity3x2Dirty;
  }
})(Matrix || (Matrix = {}));

// node_modules/@dcl/ecs-math/dist/Quaternion.js
var Quaternion2;
(function(Quaternion3) {
  function create(x = 0, y = 0, z = 0, w = 1) {
    return { x, y, z, w };
  }
  Quaternion3.create = create;
  function add2(q1, q2) {
    return { x: q1.x + q2.x, y: q1.y + q2.y, z: q1.z + q2.z, w: q1.w + q2.w };
  }
  Quaternion3.add = add2;
  function fromRotationYawPitchRoll(yaw, pitch, roll) {
    const halfPitch = pitch * 0.5;
    const halfYaw = yaw * 0.5;
    const halfRoll = roll * 0.5;
    const c1 = Math.cos(halfPitch);
    const c2 = Math.cos(halfYaw);
    const c3 = Math.cos(halfRoll);
    const s1 = Math.sin(halfPitch);
    const s2 = Math.sin(halfYaw);
    const s3 = Math.sin(halfRoll);
    return create(c2 * s1 * c3 + s2 * c1 * s3, s2 * c1 * c3 - c2 * s1 * s3, c2 * c1 * s3 - s2 * s1 * c3, c2 * c1 * c3 + s2 * s1 * s3);
  }
  Quaternion3.fromRotationYawPitchRoll = fromRotationYawPitchRoll;
  function fromEulerDegrees(x, y, z) {
    return fromRotationYawPitchRoll(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD);
  }
  Quaternion3.fromEulerDegrees = fromEulerDegrees;
  function length2(q) {
    return Math.sqrt(lengthSquared(q));
  }
  Quaternion3.length = length2;
  function lengthSquared(q) {
    return q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
  }
  Quaternion3.lengthSquared = lengthSquared;
  function dot(left, right) {
    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
  }
  Quaternion3.dot = dot;
  function angle(quat1, quat2) {
    const dotVal = dot(quat1, quat2);
    return Math.acos(Math.min(Math.abs(dotVal), 1)) * 2 * RAD2DEG;
  }
  Quaternion3.angle = angle;
  function rotateTowards(from, to, maxDegreesDelta) {
    const num = angle(from, to);
    if (num === 0) {
      return to;
    }
    const t = Math.min(1, maxDegreesDelta / num);
    return slerp(from, to, t);
  }
  Quaternion3.rotateTowards = rotateTowards;
  function lookRotation(forward, up = { x: 0, y: 1, z: 0 }) {
    const forwardNew = Vector32.normalize(forward);
    const right = Vector32.normalize(Vector32.cross(up, forwardNew));
    const upNew = Vector32.cross(forwardNew, right);
    const m00 = right.x;
    const m01 = right.y;
    const m02 = right.z;
    const m10 = upNew.x;
    const m11 = upNew.y;
    const m12 = upNew.z;
    const m20 = forwardNew.x;
    const m21 = forwardNew.y;
    const m22 = forwardNew.z;
    const num8 = m00 + m11 + m22;
    const quaternion = create();
    if (num8 > 0) {
      let num = Math.sqrt(num8 + 1);
      quaternion.w = num * 0.5;
      num = 0.5 / num;
      quaternion.x = (m12 - m21) * num;
      quaternion.y = (m20 - m02) * num;
      quaternion.z = (m01 - m10) * num;
      return quaternion;
    }
    if (m00 >= m11 && m00 >= m22) {
      const num7 = Math.sqrt(1 + m00 - m11 - m22);
      const num4 = 0.5 / num7;
      quaternion.x = 0.5 * num7;
      quaternion.y = (m01 + m10) * num4;
      quaternion.z = (m02 + m20) * num4;
      quaternion.w = (m12 - m21) * num4;
      return quaternion;
    }
    if (m11 > m22) {
      const num6 = Math.sqrt(1 + m11 - m00 - m22);
      const num3 = 0.5 / num6;
      quaternion.x = (m10 + m01) * num3;
      quaternion.y = 0.5 * num6;
      quaternion.z = (m21 + m12) * num3;
      quaternion.w = (m20 - m02) * num3;
      return quaternion;
    }
    const num5 = Math.sqrt(1 + m22 - m00 - m11);
    const num2 = 0.5 / num5;
    quaternion.x = (m20 + m02) * num2;
    quaternion.y = (m21 + m12) * num2;
    quaternion.z = 0.5 * num5;
    quaternion.w = (m01 - m10) * num2;
    return quaternion;
  }
  Quaternion3.lookRotation = lookRotation;
  function normalize(q) {
    const qLength = 1 / length2(q);
    return create(q.x * qLength, q.y * qLength, q.z * qLength, q.w * qLength);
  }
  Quaternion3.normalize = normalize;
  function fromToRotation(from, to, up = Vector32.Up()) {
    const v0 = Vector32.normalize(from);
    const v1 = Vector32.normalize(to);
    const a = Vector32.cross(v0, v1);
    const w = Math.sqrt(Vector32.lengthSquared(v0) * Vector32.lengthSquared(v1)) + Vector32.dot(v0, v1);
    if (Vector32.lengthSquared(a) < 1e-4) {
      return Math.abs(w) < 1e-4 ? normalize(create(up.x, up.y, up.z, 0)) : Identity();
    } else {
      return normalize(create(a.x, a.y, a.z, w));
    }
  }
  Quaternion3.fromToRotation = fromToRotation;
  function Identity() {
    return create(0, 0, 0, 1);
  }
  Quaternion3.Identity = Identity;
  function toEulerAngles(q) {
    const out = Vector32.create();
    const unit = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
    const test = q.x * q.w - q.y * q.z;
    if (test > 0.4995 * unit) {
      out.x = Math.PI / 2;
      out.y = 2 * Math.atan2(q.y, q.x);
      out.z = 0;
    } else if (test < -0.4995 * unit) {
      out.x = -Math.PI / 2;
      out.y = -2 * Math.atan2(q.y, q.x);
      out.z = 0;
    } else {
      out.x = Math.asin(2 * (q.w * q.x - q.y * q.z));
      out.y = Math.atan2(2 * q.w * q.y + 2 * q.z * q.x, 1 - 2 * (q.x * q.x + q.y * q.y));
      out.z = Math.atan2(2 * q.w * q.z + 2 * q.x * q.y, 1 - 2 * (q.z * q.z + q.x * q.x));
    }
    out.x *= RAD2DEG;
    out.y *= RAD2DEG;
    out.z *= RAD2DEG;
    out.x = Scalar.repeat(out.x, 360);
    out.y = Scalar.repeat(out.y, 360);
    out.z = Scalar.repeat(out.z, 360);
    return out;
  }
  Quaternion3.toEulerAngles = toEulerAngles;
  function fromRotationYawPitchRollToRef(yaw, pitch, roll, result) {
    const halfPitch = pitch * 0.5;
    const halfYaw = yaw * 0.5;
    const halfRoll = roll * 0.5;
    const c1 = Math.cos(halfPitch);
    const c2 = Math.cos(halfYaw);
    const c3 = Math.cos(halfRoll);
    const s1 = Math.sin(halfPitch);
    const s2 = Math.sin(halfYaw);
    const s3 = Math.sin(halfRoll);
    result.x = c2 * s1 * c3 + s2 * c1 * s3;
    result.y = s2 * c1 * c3 - c2 * s1 * s3;
    result.z = c2 * c1 * s3 - s2 * s1 * c3;
    result.w = c2 * c1 * c3 + s2 * s1 * s3;
  }
  Quaternion3.fromRotationYawPitchRollToRef = fromRotationYawPitchRollToRef;
  function fromRotationMatrixToRef(matrix, result) {
    const data = matrix._m;
    const m11 = data[0], m12 = data[4], m13 = data[8];
    const m21 = data[1], m22 = data[5], m23 = data[9];
    const m31 = data[2], m32 = data[6], m33 = data[10];
    const trace = m11 + m22 + m33;
    let s;
    if (trace > 0) {
      s = 0.5 / Math.sqrt(trace + 1);
      result.w = 0.25 / s;
      result.x = (m32 - m23) * s;
      result.y = (m13 - m31) * s;
      result.z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      result.w = (m32 - m23) / s;
      result.x = 0.25 * s;
      result.y = (m12 + m21) / s;
      result.z = (m13 + m31) / s;
    } else if (m22 > m33) {
      s = 2 * Math.sqrt(1 + m22 - m11 - m33);
      result.w = (m13 - m31) / s;
      result.x = (m12 + m21) / s;
      result.y = 0.25 * s;
      result.z = (m23 + m32) / s;
    } else {
      s = 2 * Math.sqrt(1 + m33 - m11 - m22);
      result.w = (m21 - m12) / s;
      result.x = (m13 + m31) / s;
      result.y = (m23 + m32) / s;
      result.z = 0.25 * s;
    }
  }
  Quaternion3.fromRotationMatrixToRef = fromRotationMatrixToRef;
  function slerp(left, right, amount) {
    const result = Quaternion3.Identity();
    Quaternion3.slerpToRef(left, right, amount, result);
    return result;
  }
  Quaternion3.slerp = slerp;
  function slerpToRef(left, right, amount, result) {
    let num2;
    let num3;
    let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
    let flag = false;
    if (num4 < 0) {
      flag = true;
      num4 = -num4;
    }
    if (num4 > 0.999999) {
      num3 = 1 - amount;
      num2 = flag ? -amount : amount;
    } else {
      const num5 = Math.acos(num4);
      const num6 = 1 / Math.sin(num5);
      num3 = Math.sin((1 - amount) * num5) * num6;
      num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;
    }
    result.x = num3 * left.x + num2 * right.x;
    result.y = num3 * left.y + num2 * right.y;
    result.z = num3 * left.z + num2 * right.z;
    result.w = num3 * left.w + num2 * right.w;
  }
  Quaternion3.slerpToRef = slerpToRef;
  function multiply2(self2, q1) {
    const result = create(0, 0, 0, 1);
    multiplyToRef(self2, q1, result);
    return result;
  }
  Quaternion3.multiply = multiply2;
  function multiplyToRef(self2, q1, result) {
    result.x = self2.x * q1.w + self2.y * q1.z - self2.z * q1.y + self2.w * q1.x;
    result.y = -self2.x * q1.z + self2.y * q1.w + self2.z * q1.x + self2.w * q1.y;
    result.z = self2.x * q1.y - self2.y * q1.x + self2.z * q1.w + self2.w * q1.z;
    result.w = -self2.x * q1.x - self2.y * q1.y - self2.z * q1.z + self2.w * q1.w;
  }
  Quaternion3.multiplyToRef = multiplyToRef;
  function fromAngleAxis(degrees, axis) {
    if (Vector32.lengthSquared(axis) === 0) {
      return Quaternion3.Identity();
    }
    const result = Identity();
    let radians = degrees * DEG2RAD;
    radians *= 0.5;
    const a2 = Vector32.normalize(axis);
    Vector32.scaleToRef(a2, Math.sin(radians), a2);
    result.x = a2.x;
    result.y = a2.y;
    result.z = a2.z;
    result.w = Math.cos(radians);
    return normalize(result);
  }
  Quaternion3.fromAngleAxis = fromAngleAxis;
  function fromAxisToRotationQuaternion(axis1, axis2, axis3) {
    const quat = Quaternion3.create(0, 0, 0, 0);
    fromAxisToRotationQuaternionToRef(axis1, axis2, axis3, quat);
    return quat;
  }
  Quaternion3.fromAxisToRotationQuaternion = fromAxisToRotationQuaternion;
  function fromAxisToRotationQuaternionToRef(axis1, axis2, axis3, ref) {
    const rotMat = Matrix.create();
    Matrix.fromXYZAxesToRef(Vector32.normalize(axis1), Vector32.normalize(axis2), Vector32.normalize(axis3), rotMat);
    Quaternion3.fromRotationMatrixToRef(rotMat, ref);
  }
  Quaternion3.fromAxisToRotationQuaternionToRef = fromAxisToRotationQuaternionToRef;
  function Zero() {
    return create(0, 0, 0, 0);
  }
  Quaternion3.Zero = Zero;
  function fromLookAt(position, target, worldUp = Vector32.Up()) {
    const result = Quaternion3.Identity();
    fromLookAtToRef(position, target, worldUp, result);
    return result;
  }
  Quaternion3.fromLookAt = fromLookAt;
  function fromLookAtToRef(position, target, worldUp = Vector32.Up(), result) {
    const m = Matrix.Identity();
    Matrix.lookAtLHToRef(position, target, worldUp, m);
    Matrix.invertToRef(m, m);
    Quaternion3.fromRotationMatrixToRef(m, result);
  }
  Quaternion3.fromLookAtToRef = fromLookAtToRef;
})(Quaternion2 || (Quaternion2 = {}));

// node_modules/@dcl/ecs-math/dist/Vector2.js
var Vector22;
(function(Vector23) {
  function create(x = 0, y = 0) {
    return { x, y };
  }
  Vector23.create = create;
  function Zero() {
    return create(0, 0);
  }
  Vector23.Zero = Zero;
  function One() {
    return create(1, 1);
  }
  Vector23.One = One;
})(Vector22 || (Vector22 = {}));

// node_modules/@dcl/ecs-math/dist/Color4.js
var Color42;
(function(Color43) {
  function create(r = 0, g = 0, b = 0, a = 1) {
    return { r, g, b, a };
  }
  Color43.create = create;
  function fromHexString(hex) {
    if (hex.substring(0, 1) !== "#" || hex.length !== 7 && hex.length !== 9) {
      return create(0, 0, 0, 1);
    }
    const r = parseInt(hex.substring(1, 3), 16);
    const g = parseInt(hex.substring(3, 5), 16);
    const b = parseInt(hex.substring(5, 7), 16);
    const aStr = hex.substring(7, 9);
    const a = aStr ? parseInt(aStr, 16) : 255;
    return Color43.fromInts(r, g, b, a);
  }
  Color43.fromHexString = fromHexString;
  function lerp(left, right, amount) {
    const result = create(0, 0, 0, 0);
    Color43.lerpToRef(left, right, amount, result);
    return result;
  }
  Color43.lerp = lerp;
  function lerpToRef(left, right, amount, result) {
    result.r = left.r + (right.r - left.r) * amount;
    result.g = left.g + (right.g - left.g) * amount;
    result.b = left.b + (right.b - left.b) * amount;
    result.a = left.a + (right.a - left.a) * amount;
  }
  Color43.lerpToRef = lerpToRef;
  function Red() {
    return create(1, 0, 0, 1);
  }
  Color43.Red = Red;
  function Green() {
    return create(0, 1, 0, 1);
  }
  Color43.Green = Green;
  function Blue() {
    return create(0, 0, 1, 1);
  }
  Color43.Blue = Blue;
  function Black() {
    return create(0, 0, 0, 1);
  }
  Color43.Black = Black;
  function White() {
    return create(1, 1, 1, 1);
  }
  Color43.White = White;
  function Purple() {
    return create(0.5, 0, 0.5, 1);
  }
  Color43.Purple = Purple;
  function Magenta() {
    return create(1, 0, 1, 1);
  }
  Color43.Magenta = Magenta;
  function Yellow() {
    return create(1, 1, 0, 1);
  }
  Color43.Yellow = Yellow;
  function Gray() {
    return create(0.5, 0.5, 0.5, 1);
  }
  Color43.Gray = Gray;
  function Teal() {
    return create(0, 1, 1, 1);
  }
  Color43.Teal = Teal;
  function Clear() {
    return create(0, 0, 0, 0);
  }
  Color43.Clear = Clear;
  function fromColor3(color3, alpha = 1) {
    return create(color3.r, color3.g, color3.b, alpha);
  }
  Color43.fromColor3 = fromColor3;
  function fromArray(array, offset = 0) {
    return create(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
  }
  Color43.fromArray = fromArray;
  function fromInts(r, g, b, a) {
    return create(r / 255, g / 255, b / 255, a / 255);
  }
  Color43.fromInts = fromInts;
  function checkColors4(colors, count) {
    if (colors.length === count * 3) {
      const colors4 = [];
      for (let index = 0; index < colors.length; index += 3) {
        const newIndex = index / 3 * 4;
        colors4[newIndex] = colors[index];
        colors4[newIndex + 1] = colors[index + 1];
        colors4[newIndex + 2] = colors[index + 2];
        colors4[newIndex + 3] = 1;
      }
      return colors4;
    }
    return colors;
  }
  Color43.checkColors4 = checkColors4;
  function addToRef(a, b, ref) {
    ref.r = a.r + b.r;
    ref.g = a.g + b.g;
    ref.b = a.b + b.b;
    ref.a = a.a + b.a;
  }
  Color43.addToRef = addToRef;
  function toArray(value, array, index = 0) {
    array[index] = value.r;
    array[index + 1] = value.g;
    array[index + 2] = value.b;
    array[index + 3] = value.a;
  }
  Color43.toArray = toArray;
  function add2(value, right) {
    const ret = Clear();
    addToRef(value, right, ret);
    return ret;
  }
  Color43.add = add2;
  function subtract2(value, right) {
    const ret = Clear();
    subtractToRef(value, right, ret);
    return ret;
  }
  Color43.subtract = subtract2;
  function subtractToRef(a, b, result) {
    result.r = a.r - b.r;
    result.g = a.g - b.g;
    result.b = a.b - b.b;
    result.a = a.a - b.a;
  }
  Color43.subtractToRef = subtractToRef;
  function scale(value, scale2) {
    return create(value.r * scale2, value.g * scale2, value.b * scale2, value.a * scale2);
  }
  Color43.scale = scale;
  function scaleToRef(value, scale2, result) {
    result.r = value.r * scale2;
    result.g = value.g * scale2;
    result.b = value.b * scale2;
    result.a = value.a * scale2;
  }
  Color43.scaleToRef = scaleToRef;
  function scaleAndAddToRef(value, scale2, result) {
    result.r += value.r * scale2;
    result.g += value.g * scale2;
    result.b += value.b * scale2;
    result.a += value.a * scale2;
  }
  Color43.scaleAndAddToRef = scaleAndAddToRef;
  function clampToRef(value, min = 0, max = 1, result) {
    result.r = Scalar.clamp(value.r, min, max);
    result.g = Scalar.clamp(value.g, min, max);
    result.b = Scalar.clamp(value.b, min, max);
    result.a = Scalar.clamp(value.a, min, max);
  }
  Color43.clampToRef = clampToRef;
  function multiply2(value, color) {
    return create(value.r * color.r, value.g * color.g, value.b * color.b, value.a * color.a);
  }
  Color43.multiply = multiply2;
  function multiplyToRef(value, color, result) {
    result.r = value.r * color.r;
    result.g = value.g * color.g;
    result.b = value.b * color.b;
    result.a = value.a * color.a;
  }
  Color43.multiplyToRef = multiplyToRef;
  function toString2(value) {
    return "{R: " + value.r + " G:" + value.g + " B:" + value.b + " A:" + value.a + "}";
  }
  Color43.toString = toString2;
  function getHashCode(value) {
    let hash = value.r || 0;
    hash = hash * 397 ^ (value.g || 0);
    hash = hash * 397 ^ (value.b || 0);
    hash = hash * 397 ^ (value.a || 0);
    return hash;
  }
  Color43.getHashCode = getHashCode;
  function clone(value) {
    return create(value.r, value.g, value.b, value.a);
  }
  Color43.clone = clone;
  function copyFrom(source, dest) {
    dest.r = source.r;
    dest.g = source.g;
    dest.b = source.b;
    dest.a = source.a;
  }
  Color43.copyFrom = copyFrom;
  function copyFromFloats(r, g, b, a, dest) {
    dest.r = r;
    dest.g = g;
    dest.b = b;
    dest.a = a;
  }
  Color43.copyFromFloats = copyFromFloats;
  function set(r, g, b, a, dest) {
    dest.r = r;
    dest.g = g;
    dest.b = b;
    dest.a = a;
  }
  Color43.set = set;
  function toHexString(value) {
    const intR = value.r * 255 | 0;
    const intG = value.g * 255 | 0;
    const intB = value.b * 255 | 0;
    const intA = value.a * 255 | 0;
    return "#" + Scalar.toHex(intR) + Scalar.toHex(intG) + Scalar.toHex(intB) + Scalar.toHex(intA);
  }
  Color43.toHexString = toHexString;
  function toLinearSpace(value) {
    const convertedColor = create();
    toLinearSpaceToRef(value, convertedColor);
    return convertedColor;
  }
  Color43.toLinearSpace = toLinearSpace;
  function toLinearSpaceToRef(value, ref) {
    ref.r = Math.pow(value.r, ToLinearSpace);
    ref.g = Math.pow(value.g, ToLinearSpace);
    ref.b = Math.pow(value.b, ToLinearSpace);
    ref.a = value.a;
  }
  Color43.toLinearSpaceToRef = toLinearSpaceToRef;
  function toGammaSpace(value) {
    const convertedColor = create();
    toGammaSpaceToRef(value, convertedColor);
    return convertedColor;
  }
  Color43.toGammaSpace = toGammaSpace;
  function toGammaSpaceToRef(value, convertedColor) {
    convertedColor.r = Math.pow(value.r, ToGammaSpace);
    convertedColor.g = Math.pow(value.g, ToGammaSpace);
    convertedColor.b = Math.pow(value.b, ToGammaSpace);
    convertedColor.a = value.a;
  }
  Color43.toGammaSpaceToRef = toGammaSpaceToRef;
})(Color42 || (Color42 = {}));

// node_modules/@dcl/ecs-math/dist/Color3.js
var Color32;
(function(Color33) {
  function create(r = 0, g = 0, b = 0) {
    return { r, g, b };
  }
  Color33.create = create;
  function fromHexString(hex) {
    if (hex.substring(0, 1) !== "#" || hex.length !== 7) {
      return create(0, 0, 0);
    }
    const r = parseInt(hex.substring(1, 3), 16);
    const g = parseInt(hex.substring(3, 5), 16);
    const b = parseInt(hex.substring(5, 7), 16);
    return fromInts(r, g, b);
  }
  Color33.fromHexString = fromHexString;
  function fromArray(array, offset = 0) {
    return create(array[offset], array[offset + 1], array[offset + 2]);
  }
  Color33.fromArray = fromArray;
  function fromInts(r, g, b) {
    return create(r / 255, g / 255, b / 255);
  }
  Color33.fromInts = fromInts;
  function lerp(start, end, amount) {
    const result = create(0, 0, 0);
    Color33.lerpToRef(start, end, amount, result);
    return result;
  }
  Color33.lerp = lerp;
  function lerpToRef(left, right, amount, result) {
    result.r = left.r + (right.r - left.r) * amount;
    result.g = left.g + (right.g - left.g) * amount;
    result.b = left.b + (right.b - left.b) * amount;
  }
  Color33.lerpToRef = lerpToRef;
  function Red() {
    return create(1, 0, 0);
  }
  Color33.Red = Red;
  function Green() {
    return create(0, 1, 0);
  }
  Color33.Green = Green;
  function Blue() {
    return create(0, 0, 1);
  }
  Color33.Blue = Blue;
  function Black() {
    return create(0, 0, 0);
  }
  Color33.Black = Black;
  function White() {
    return create(1, 1, 1);
  }
  Color33.White = White;
  function Purple() {
    return create(0.5, 0, 0.5);
  }
  Color33.Purple = Purple;
  function Magenta() {
    return create(1, 0, 1);
  }
  Color33.Magenta = Magenta;
  function Yellow() {
    return create(1, 1, 0);
  }
  Color33.Yellow = Yellow;
  function Gray() {
    return create(0.5, 0.5, 0.5);
  }
  Color33.Gray = Gray;
  function Teal() {
    return create(0, 1, 1);
  }
  Color33.Teal = Teal;
  function Random() {
    return create(Math.random(), Math.random(), Math.random());
  }
  Color33.Random = Random;
  function toString2(value) {
    return "{R: " + value.r + " G:" + value.g + " B:" + value.b + "}";
  }
  Color33.toString = toString2;
  function getHashCode(value) {
    let hash = value.r || 0;
    hash = hash * 397 ^ (value.g || 0);
    hash = hash * 397 ^ (value.b || 0);
    return hash;
  }
  Color33.getHashCode = getHashCode;
  function toArray(value, array, index = 0) {
    array[index] = value.r;
    array[index + 1] = value.g;
    array[index + 2] = value.b;
  }
  Color33.toArray = toArray;
  function toColor4(value, alpha = 1) {
    return Color42.create(value.r, value.g, value.b, alpha);
  }
  Color33.toColor4 = toColor4;
  function asArray(value) {
    const result = new Array();
    toArray(value, result, 0);
    return result;
  }
  Color33.asArray = asArray;
  function toLuminance(value) {
    return value.r * 0.3 + value.g * 0.59 + value.b * 0.11;
  }
  Color33.toLuminance = toLuminance;
  function multiply2(value, otherColor) {
    return create(value.r * otherColor.r, value.g * otherColor.g, value.b * otherColor.b);
  }
  Color33.multiply = multiply2;
  function multiplyToRef(value, otherColor, result) {
    result.r = value.r * otherColor.r;
    result.g = value.g * otherColor.g;
    result.b = value.b * otherColor.b;
  }
  Color33.multiplyToRef = multiplyToRef;
  function equals2(value, otherColor) {
    return otherColor && value.r === otherColor.r && value.g === otherColor.g && value.b === otherColor.b;
  }
  Color33.equals = equals2;
  function equalsFloats(value, r, g, b) {
    return value.r === r && value.g === g && value.b === b;
  }
  Color33.equalsFloats = equalsFloats;
  function scale(value, scale2) {
    return create(value.r * scale2, value.g * scale2, value.b * scale2);
  }
  Color33.scale = scale;
  function scaleToRef(value, scale2, result) {
    result.r = value.r * scale2;
    result.g = value.g * scale2;
    result.b = value.b * scale2;
  }
  Color33.scaleToRef = scaleToRef;
  function scaleAndAddToRef(value, scale2, result) {
    result.r += value.r * scale2;
    result.g += value.g * scale2;
    result.b += value.b * scale2;
  }
  Color33.scaleAndAddToRef = scaleAndAddToRef;
  function clampToRef(value, min = 0, max = 1, result) {
    result.r = Scalar.clamp(value.r, min, max);
    result.g = Scalar.clamp(value.g, min, max);
    result.b = Scalar.clamp(value.b, min, max);
  }
  Color33.clampToRef = clampToRef;
  function clamp(value, min = 0, max = 1) {
    const result = Color33.Black();
    clampToRef(value, min, max, result);
    return result;
  }
  Color33.clamp = clamp;
  function add2(value, otherColor) {
    return create(value.r + otherColor.r, value.g + otherColor.g, value.b + otherColor.b);
  }
  Color33.add = add2;
  function addToRef(value, otherColor, result) {
    result.r = value.r + otherColor.r;
    result.g = value.g + otherColor.g;
    result.b = value.b + otherColor.b;
  }
  Color33.addToRef = addToRef;
  function subtract2(value, otherColor) {
    return create(value.r - otherColor.r, value.g - otherColor.g, value.b - otherColor.b);
  }
  Color33.subtract = subtract2;
  function subtractToRef(value, otherColor, result) {
    result.r = value.r - otherColor.r;
    result.g = value.g - otherColor.g;
    result.b = value.b - otherColor.b;
  }
  Color33.subtractToRef = subtractToRef;
  function clone(value) {
    return create(value.r, value.g, value.b);
  }
  Color33.clone = clone;
  function copyFrom(source, dest) {
    dest.r = source.r;
    dest.g = source.g;
    dest.b = source.b;
  }
  Color33.copyFrom = copyFrom;
  function set(dest, r, g, b) {
    dest.r = r;
    dest.g = g;
    dest.b = b;
  }
  Color33.set = set;
  function toHexString(value) {
    const intR = value.r * 255 | 0;
    const intG = value.g * 255 | 0;
    const intB = value.b * 255 | 0;
    return "#" + Scalar.toHex(intR) + Scalar.toHex(intG) + Scalar.toHex(intB);
  }
  Color33.toHexString = toHexString;
  function toLinearSpace(value) {
    const convertedColor = create();
    toLinearSpaceToRef(value, convertedColor);
    return convertedColor;
  }
  Color33.toLinearSpace = toLinearSpace;
  function toLinearSpaceToRef(value, convertedColor) {
    convertedColor.r = Math.pow(value.r, ToLinearSpace);
    convertedColor.g = Math.pow(value.g, ToLinearSpace);
    convertedColor.b = Math.pow(value.b, ToLinearSpace);
  }
  Color33.toLinearSpaceToRef = toLinearSpaceToRef;
  function toGammaSpace(value) {
    const convertedColor = create();
    toGammaSpaceToRef(value, convertedColor);
    return convertedColor;
  }
  Color33.toGammaSpace = toGammaSpace;
  function toGammaSpaceToRef(value, convertedColor) {
    convertedColor.r = Math.pow(value.r, ToGammaSpace);
    convertedColor.g = Math.pow(value.g, ToGammaSpace);
    convertedColor.b = Math.pow(value.b, ToGammaSpace);
  }
  Color33.toGammaSpaceToRef = toGammaSpaceToRef;
})(Color32 || (Color32 = {}));

// src/terrain/terrain-generator.ts
function createTerrainGenerator(sceneSize, maxLayers) {
  return {
    /**
     * Generates a sine-based heightmap terrain
     * Uses the formula: height = 8 + 4 * Math.sin(x / 4) + 4 * Math.sin(z / 4)
     * Creates a wavy terrain with heights ranging roughly from 4 to 12
     * @returns An array of voxel positions
     */
    generateTerrain() {
      const voxelPositions = [];
      const useMaxLayers = maxLayers !== void 0 && maxLayers > 0;
      console.log(`Terrain generator: ${useMaxLayers ? "Using max layers: " + maxLayers : "No height limit"}`);
      for (let localX = 0; localX < sceneSize; localX++) {
        for (let localZ = 0; localZ < sceneSize; localZ++) {
          const worldX = localX + 16;
          const worldZ = localZ;
          const height = Math.floor(8 + 4 * Math.sin(localX / 4) + 4 * Math.sin(localZ / 4));
          const effectiveHeight = useMaxLayers ? Math.min(height, maxLayers) : height;
          for (let y = 0; y <= effectiveHeight; y++) {
            let type;
            if (y === effectiveHeight) {
              type = "grass" /* GRASS */;
            } else if (y > effectiveHeight - 4) {
              type = "dirt" /* DIRT */;
            } else {
              type = "stone_dark" /* STONE_DARK */;
            }
            voxelPositions.push({ x: worldX, y, z: worldZ, type });
          }
        }
      }
      if (useMaxLayers) {
        console.log(`Generated terrain with ${maxLayers} max layers (${voxelPositions.length} voxels total)`);
      } else {
        console.log(`Generated terrain with natural height (${voxelPositions.length} voxels total)`);
      }
      return voxelPositions;
    }
  };
}

// src/systems/voxel-system.ts
function createVoxelSystem(_engine, voxelPositions, chunkManager, visibilityThreshold, debug) {
  const alwaysVisible = debug?.ALWAYS_VISIBLE || false;
  const modelPaths = {
    ["grass" /* GRASS */]: "models/grass.glb",
    ["dirt" /* DIRT */]: "models/dirt.glb",
    ["stone_dark" /* STONE_DARK */]: "models/stone_dark.glb"
  };
  const blockCounts = {
    ["grass" /* GRASS */]: 0,
    ["dirt" /* DIRT */]: 0,
    ["stone_dark" /* STONE_DARK */]: 0
  };
  voxelPositions.forEach((pos) => {
    const entity = engine.addEntity();
    blockCounts[pos.type]++;
    GltfContainer2.create(entity, {
      src: modelPaths[pos.type]
    });
    Transform2.create(entity, {
      position: Vector32.create(
        pos.x + 0.5,
        pos.y + 0.5,
        pos.z + 0.5
      )
    });
    VisibilityComponent2.create(entity, {
      visible: alwaysVisible
    });
    chunkManager.addEntityToChunk(entity, pos);
  });
  const chunks = chunkManager.getChunks();
  console.log(`Created ${Object.keys(chunks).length} chunks`);
  console.log(`Block counts: Grass: ${blockCounts["grass" /* GRASS */]}, Dirt: ${blockCounts["dirt" /* DIRT */]}, Stone: ${blockCounts["stone_dark" /* STONE_DARK */]}`);
  if (alwaysVisible) {
    console.log("DEBUG: Visibility toggle disabled - all voxels are always visible");
  } else {
    const visibilitySystem = () => {
      const playerTransform = Transform2.getMutableOrNull(engine.PlayerEntity);
      if (!playerTransform) {
        return;
      }
      const playerPos = playerTransform.position;
      for (const chunkKey in chunks) {
        const chunk = chunks[chunkKey];
        const distance = Vector32.distance(playerPos, chunk.center);
        const visible = distance < visibilityThreshold;
        for (const entity of chunk.entities) {
          const visibilityComponent = VisibilityComponent2.getMutable(entity);
          if (visibilityComponent.visible !== visible) {
            visibilityComponent.visible = visible;
          }
        }
      }
    };
    engine.addSystem(visibilitySystem);
  }
  console.log("Voxel system initialized");
}

// src/systems/chunk-manager.ts
function initChunkManager(chunkSize) {
  const chunks = {};
  return {
    /**
     * Gets all created chunks
     * @returns A map of all chunks
     */
    getChunks() {
      return chunks;
    },
    /**
     * Gets the appropriate chunk key for a voxel position
     * @param position The voxel position
     * @returns The chunk key (e.g., "0,0,0")
     */
    getChunkKey(position) {
      const chunkX = Math.floor(position.x / chunkSize);
      const chunkY = Math.floor(position.y / chunkSize);
      const chunkZ = Math.floor(position.z / chunkSize);
      return `${chunkX},${chunkY},${chunkZ}`;
    },
    /**
     * Creates a new chunk or returns an existing one
     * @param key The chunk key
     * @returns The chunk object
     */
    createChunk(key) {
      if (!chunks[key]) {
        const [x, y, z] = key.split(",").map(Number);
        const centerX = x * chunkSize + chunkSize / 2;
        const centerY = y * chunkSize + chunkSize / 2;
        const centerZ = z * chunkSize + chunkSize / 2;
        chunks[key] = {
          key,
          entities: [],
          center: Vector32.create(centerX, centerY, centerZ)
        };
      }
      return chunks[key];
    },
    /**
     * Adds an entity to the appropriate chunk
     * @param entity The entity to add
     * @param position The voxel position
     */
    addEntityToChunk(entity, position) {
      const chunkKey = this.getChunkKey(position);
      const chunk = this.createChunk(chunkKey);
      chunk.entities.push(entity);
    }
  };
}

// src/index.ts
var import_RestrictedActions = require("~system/RestrictedActions");

// src/resources.ts
var DEBUG2 = {
  ALWAYS_VISIBLE: true,
  // Set to true to make all voxels visible regardless of distance
  MAX_LAYERS: 1
  // Maximum number of vertical layers to generate (for performance testing)
};
var MAIN_SCENE_SIZE = 32;
var CHUNK_SIZE = 4;
var VISIBILITY_THRESHOLD = 5;
var MAIN_SCENE_POSITION = { x: 16, y: 30, z: 16 };
var TERRAIN_GENERATION_DELAY = 1;
var PLAYER_TELEPORT_DELAY = 15;

// src/index.ts
var terrainGenerationTimer = 0;
var playerTeleportTimer = 0;
var isPlayerTeleported = false;
var hasStartedTerrainGeneration = false;
var hasCompletedInitialization = false;
var terrainGeneratorInstance;
var chunkManagerInstance;
function main() {
  console.log("Initializing Minecraft voxel world...");
  setupScene();
  engine.addSystem(timerSystem);
}
function setupScene() {
  console.log("Step 1: Setting up scene");
  terrainGeneratorInstance = createTerrainGenerator(MAIN_SCENE_SIZE, DEBUG2.MAX_LAYERS);
  chunkManagerInstance = initChunkManager(CHUNK_SIZE);
  createSpawnAreaGround();
}
function createSpawnAreaGround() {
  console.log("Creating spawn area ground");
  const groundEntity = engine.addEntity();
  Transform2.create(groundEntity, {
    position: Vector32.create(8, 0, 8),
    // Center of spawn parcel
    scale: Vector32.create(16, 16, 1),
    // 16x16 meter platform
    rotation: Quaternion2.fromEulerDegrees(90, 0, 0)
  });
  MeshRenderer3.setPlane(groundEntity);
  Material3.setPbrMaterial(groundEntity, {
    albedoColor: { r: 0.2, g: 0.8, b: 0.2, a: 1 }
    // Green color
  });
  createInformationSign();
}
function createInformationSign() {
  const signEntity = engine.addEntity();
  Transform2.create(signEntity, {
    position: Vector32.create(8, 1.5, 8),
    // Center of spawn parcel
    rotation: Quaternion2.fromEulerDegrees(0, 90, 0)
    // Face the player toward +X
  });
  TextShape2.create(signEntity, {
    text: "Welcome to Minecraft World!\nLoading terrain...\nYou will be teleported shortly.",
    fontSize: 2,
    textColor: Color42.create(1, 1, 1, 1),
    // White text
    outlineColor: Color42.create(0, 0, 0, 1),
    // Black outline
    outlineWidth: 0.1,
    width: 10,
    height: 5,
    textWrapping: true
  });
}
function timerSystem(dt) {
  if (hasCompletedInitialization && isPlayerTeleported)
    return;
  if (!hasStartedTerrainGeneration) {
    terrainGenerationTimer += dt;
    if (terrainGenerationTimer >= TERRAIN_GENERATION_DELAY) {
      startTerrainGeneration();
      hasStartedTerrainGeneration = true;
      playerTeleportTimer = 0;
      hasCompletedInitialization = true;
    }
  }
  if (hasStartedTerrainGeneration && !isPlayerTeleported) {
    playerTeleportTimer += dt;
    if (playerTeleportTimer >= PLAYER_TELEPORT_DELAY) {
      teleportPlayerToMainScene();
      isPlayerTeleported = true;
    }
  }
}
function startTerrainGeneration() {
  console.log("Step 2: Starting terrain generation...");
  const voxelPositions = terrainGeneratorInstance.generateTerrain();
  console.log(`Generated ${voxelPositions.length} voxels`);
  console.log("Setting up voxel rendering system");
  createVoxelSystem(engine, voxelPositions, chunkManagerInstance, VISIBILITY_THRESHOLD, DEBUG2);
  console.log("Minecraft voxel world terrain generation started!");
}
function teleportPlayerToMainScene() {
  console.log("Step 3: Teleporting player to main scene");
  (0, import_RestrictedActions.movePlayerTo)({
    newRelativePosition: MAIN_SCENE_POSITION
  });
  console.log("Player teleported to main scene");
}

// node_modules/@dcl/sdk/index.js
var import_EngineApi2 = require("~system/EngineApi");

// node_modules/@dcl/sdk/internal/transports/rendererTransport.js
function createRendererTransport(engineApi) {
  async function sendToRenderer(message) {
    const response = await engineApi.crdtSendToRenderer({
      data: new Uint8Array(message)
    });
    if (response && response.data && response.data.length) {
      if (rendererTransport2.onmessage) {
        for (const byteArray of response.data) {
          rendererTransport2.onmessage(byteArray);
        }
      }
    }
  }
  const rendererTransport2 = {
    async send(message) {
      try {
        await sendToRenderer(message);
      } catch (error) {
        console.error(error);
        debugger;
      }
    },
    filter(message) {
      if (
        // filter out messages for non-core components
        message.componentId > MAX_STATIC_COMPONENT
      ) {
        return false;
      }
      return !!message;
    },
    type: "renderer"
  };
  return rendererTransport2;
}

// node_modules/@dcl/sdk/internal/Observable.js
var ObserverEventState = class {
  /**
   * Create a new EventState
   * @param mask - defines the mask associated with this state
   * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true
   * @param target - defines the original target of the state
   * @param currentTarget - defines the current target of the state
   */
  constructor(mask, skipNextObservers = false, target, currentTarget) {
    this.initalize(mask, skipNextObservers, target, currentTarget);
  }
  /**
   * Initialize the current event state
   * @param mask - defines the mask associated with this state
   * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true
   * @param target - defines the original target of the state
   * @param currentTarget - defines the current target of the state
   * @returns the current event state
   */
  initalize(mask, skipNextObservers = false, target, currentTarget) {
    this.mask = mask;
    this.skipNextObservers = skipNextObservers;
    this.target = target;
    this.currentTarget = currentTarget;
    return this;
  }
};
var Observer = class {
  /**
   * Creates a new observer
   * @param callback - defines the callback to call when the observer is notified
   * @param mask - defines the mask of the observer (used to filter notifications)
   * @param scope - defines the current scope used to restore the JS context
   */
  constructor(callback, mask, scope = null) {
    this.callback = callback;
    this.mask = mask;
    this.scope = scope;
    this.unregisterOnNextCall = false;
    this._willBeUnregistered = false;
  }
};
var Observable = class _Observable {
  /**
   * Creates a new observable
   * @param onObserverAdded - defines a callback to call when a new observer is added
   */
  constructor(onObserverAdded) {
    this._observers = new Array();
    this._onObserverAdded = null;
    this._eventState = new ObserverEventState(0);
    if (onObserverAdded) {
      this._onObserverAdded = onObserverAdded;
    }
  }
  /**
   * Create a new Observer with the specified callback
   * @param callback - the callback that will be executed for that Observer
   * @param mask - the mask used to filter observers
   * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.
   * @param scope - optional scope for the callback to be called from
   * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification
   * @returns the new observer created for the callback
   */
  add(callback, mask = -1, insertFirst = false, scope = null, unregisterOnFirstCall = false) {
    if (!callback) {
      return null;
    }
    const observer = new Observer(callback, mask, scope);
    observer.unregisterOnNextCall = unregisterOnFirstCall;
    if (insertFirst) {
      this._observers.unshift(observer);
    } else {
      this._observers.push(observer);
    }
    if (this._onObserverAdded) {
      this._onObserverAdded(observer);
    }
    return observer;
  }
  /**
   * Create a new Observer with the specified callback and unregisters after the next notification
   * @param callback - the callback that will be executed for that Observer
   * @returns the new observer created for the callback
   */
  addOnce(callback) {
    return this.add(callback, void 0, void 0, void 0, true);
  }
  /**
   * Remove an Observer from the Observable object
   * @param observer - the instance of the Observer to remove
   * @returns false if it doesn't belong to this Observable
   */
  remove(observer) {
    if (!observer) {
      return false;
    }
    const index = this._observers.indexOf(observer);
    if (index !== -1) {
      this._deferUnregister(observer);
      return true;
    }
    return false;
  }
  /**
   * Remove a callback from the Observable object
   * @param callback - the callback to remove
   * @param scope - optional scope. If used only the callbacks with this scope will be removed
   * @returns false if it doesn't belong to this Observable
   */
  removeCallback(callback, scope) {
    for (let index = 0; index < this._observers.length; index++) {
      if (this._observers[index].callback === callback && (!scope || scope === this._observers[index].scope)) {
        this._deferUnregister(this._observers[index]);
        return true;
      }
    }
    return false;
  }
  /**
   * Notify all Observers by calling their respective callback with the given data
   * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute
   * @param eventData - defines the data to send to all observers
   * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)
   * @param target - defines the original target of the state
   * @param currentTarget - defines the current target of the state
   * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)
   */
  notifyObservers(eventData, mask = -1, target, currentTarget) {
    if (!this._observers.length) {
      return true;
    }
    const state = this._eventState;
    state.mask = mask;
    state.target = target;
    state.currentTarget = currentTarget;
    state.skipNextObservers = false;
    state.lastReturnValue = eventData;
    for (const obs of this._observers) {
      if (obs._willBeUnregistered) {
        continue;
      }
      if (obs.mask & mask) {
        if (obs.scope) {
          state.lastReturnValue = obs.callback.apply(obs.scope, [eventData, state]);
        } else {
          state.lastReturnValue = obs.callback(eventData, state);
        }
        if (obs.unregisterOnNextCall) {
          this._deferUnregister(obs);
        }
      }
      if (state.skipNextObservers) {
        return false;
      }
    }
    return true;
  }
  /**
   * Calling this will execute each callback, expecting it to be a promise or return a value.
   * If at any point in the chain one function fails, the promise will fail and the execution will not continue.
   * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object
   * and it is crucial that all callbacks will be executed.
   * The order of the callbacks is kept, callbacks are not executed parallel.
   *
   * @param eventData - The data to be sent to each callback
   * @param mask - is used to filter observers defaults to -1
   * @param target - defines the callback target (see EventState)
   * @param currentTarget - defines he current object in the bubbling phase
   * @returns will return a Promise than resolves when all callbacks executed successfully.
   */
  notifyObserversWithPromise(eventData, mask = -1, target, currentTarget) {
    let p = Promise.resolve(eventData);
    if (!this._observers.length) {
      return p;
    }
    const state = this._eventState;
    state.mask = mask;
    state.target = target;
    state.currentTarget = currentTarget;
    state.skipNextObservers = false;
    this._observers.forEach((obs) => {
      if (state.skipNextObservers) {
        return;
      }
      if (obs._willBeUnregistered) {
        return;
      }
      if (obs.mask & mask) {
        if (obs.scope) {
          p = p.then((lastReturnedValue) => {
            state.lastReturnValue = lastReturnedValue;
            return obs.callback.apply(obs.scope, [eventData, state]);
          });
        } else {
          p = p.then((lastReturnedValue) => {
            state.lastReturnValue = lastReturnedValue;
            return obs.callback(eventData, state);
          });
        }
        if (obs.unregisterOnNextCall) {
          this._deferUnregister(obs);
        }
      }
    });
    return p.then(() => {
      return eventData;
    });
  }
  /**
   * Notify a specific observer
   * @param observer - defines the observer to notify
   * @param eventData - defines the data to be sent to each callback
   * @param mask - is used to filter observers defaults to -1
   */
  notifyObserver(observer, eventData, mask = -1) {
    const state = this._eventState;
    state.mask = mask;
    state.skipNextObservers = false;
    observer.callback(eventData, state);
  }
  /**
   * Gets a boolean indicating if the observable has at least one observer
   * @returns true is the Observable has at least one Observer registered
   */
  hasObservers() {
    return this._observers.length > 0;
  }
  /**
   * Clear the list of observers
   */
  clear() {
    this._observers = new Array();
    this._onObserverAdded = null;
  }
  /**
   * Clone the current observable
   * @returns a new observable
   */
  clone() {
    const result = new _Observable();
    result._observers = this._observers.slice(0);
    return result;
  }
  /**
   * Does this observable handles observer registered with a given mask
   * @param mask - defines the mask to be tested
   * @returns whether or not one observer registered with the given mask is handeled
   */
  hasSpecificMask(mask = -1) {
    for (const obs of this._observers) {
      if (obs.mask & mask || obs.mask === mask) {
        return true;
      }
    }
    return false;
  }
  _deferUnregister(observer) {
    observer.unregisterOnNextCall = false;
    observer._willBeUnregistered = true;
    Promise.resolve().then.bind(Promise.resolve())(async () => this._remove(observer)).catch(console.error);
  }
  // This should only be called when not iterating over _observers to avoid callback skipping.
  // Removes an observer from the _observer Array.
  _remove(observer) {
    if (!observer) {
      return false;
    }
    const index = this._observers.indexOf(observer);
    if (index !== -1) {
      this._observers.splice(index, 1);
      return true;
    }
    return false;
  }
};

// node_modules/@dcl/sdk/observables.js
var import_EngineApi = require("~system/EngineApi");

// node_modules/@dcl/sdk/players/index.js
function definePlayerHelper(engine2) {
  const Transform3 = Transform(engine2);
  const PlayerIdentityData3 = PlayerIdentityData(engine2);
  const AvatarEquippedData3 = AvatarEquippedData(engine2);
  const AvatarBase3 = AvatarBase(engine2);
  const playerEntities = /* @__PURE__ */ new Map();
  const onEnterSceneCb = [];
  const onLeaveSceneCb = [];
  engine2.addSystem(() => {
    const players2 = Array.from(engine2.getEntitiesWith(PlayerIdentityData3, AvatarBase3));
    if (players2.length === playerEntities.size)
      return;
    for (const [entity, identity] of players2) {
      if (!playerEntities.has(entity)) {
        playerEntities.set(entity, identity.address);
        if (onEnterSceneCb.length) {
          onEnterSceneCb.forEach((cb) => cb(getPlayer({ userId: identity.address })));
        }
        AvatarBase3.onChange(entity, (value) => {
          if (!value && onLeaveSceneCb.length && playerEntities.get(entity)) {
            onLeaveSceneCb.forEach((cb) => cb(playerEntities.get(entity)));
            playerEntities.delete(entity);
          }
        });
      }
    }
  });
  return {
    onEnterScene(cb) {
      onEnterSceneCb.push(cb);
    },
    onLeaveScene(cb) {
      onLeaveSceneCb.push(cb);
    },
    /**
     * Returns the info of the player if it's in the scene.
     */
    getPlayer(user) {
      function getEntity() {
        if (!user?.userId)
          return engine2.PlayerEntity;
        for (const [entity, data] of engine2.getEntitiesWith(PlayerIdentityData3)) {
          if (data.address === user.userId) {
            return entity;
          }
        }
        return void 0;
      }
      const userEntity = getEntity();
      if (!userEntity)
        return null;
      const playerData = PlayerIdentityData3.getOrNull(userEntity);
      const avatarData = AvatarBase3.getOrNull(userEntity);
      const wearablesData = AvatarEquippedData3.getOrNull(userEntity);
      if (!playerData && !avatarData && !wearablesData)
        return null;
      return {
        entity: userEntity,
        name: avatarData?.name ?? "",
        isGuest: !!playerData?.isGuest,
        userId: playerData?.address ?? "",
        avatar: avatarData ?? void 0,
        wearables: wearablesData?.wearableUrns ?? [],
        emotes: wearablesData?.emoteUrns ?? [],
        position: Transform3.getOrNull(userEntity)?.position
      };
    }
  };
}
var players = definePlayerHelper(engine);
var { getPlayer, onEnterScene, onLeaveScene } = players;
var players_default = players;

// node_modules/@dcl/sdk/observables.js
function createSubscriber(eventName) {
  return () => {
    if (eventName === "comms") {
      (0, import_EngineApi.subscribe)({ eventId: eventName }).catch(console.error);
    } else {
      SDK7ComponentsObservable?.subscribe(eventName);
    }
  };
}
var onEnterSceneObservable = new Observable(createSubscriber("onEnterScene"));
var onLeaveSceneObservable = new Observable(createSubscriber("onLeaveScene"));
var onSceneReadyObservable = new Observable(createSubscriber("sceneStart"));
var onPlayerExpressionObservable = new Observable(createSubscriber("playerExpression"));
var onVideoEvent = new Observable(createSubscriber("videoEvent"));
var onProfileChanged = new Observable(createSubscriber("profileChanged"));
var onPlayerConnectedObservable = new Observable(createSubscriber("playerConnected"));
var onPlayerDisconnectedObservable = new Observable(createSubscriber("playerDisconnected"));
var onRealmChangedObservable = new Observable(createSubscriber("onRealmChanged"));
var onPlayerClickedObservable = new Observable(createSubscriber("playerClicked"));
var onCommsMessage = new Observable(createSubscriber("comms"));
async function pollEvents(sendBatch2) {
  const { events } = await sendBatch2({ actions: [] });
  for (const e of events) {
    if (e.generic) {
      const data = JSON.parse(e.generic.eventData);
      switch (e.generic.eventId) {
        case "comms": {
          onCommsMessage.notifyObservers(data);
          break;
        }
      }
    }
  }
}
var SDK7ComponentsObservable = processObservables();
function processObservables() {
  const subscriptions = /* @__PURE__ */ new Set();
  function subscribe2(eventName) {
    if (subscriptions.has(eventName))
      return;
    switch (eventName) {
      case "playerClicked": {
        subscribePlayerClick();
      }
      case "onEnterScene":
      case "playerConnected": {
        subscribeEnterScene();
      }
      case "onLeaveScene":
      case "playerDisconnected": {
        subscribeLeaveScene();
      }
      case "onRealmChanged": {
        subscribeRealmChange();
      }
      case "playerExpression": {
        subscribePlayerExpression();
      }
      case "profileChanged": {
        subscribeProfileChange();
      }
    }
    subscriptions.add(eventName);
  }
  function subscribeEnterScene() {
    players_default.onEnterScene((player) => {
      if (subscriptions.has("onEnterScene")) {
        onEnterSceneObservable.notifyObservers({ userId: player.userId });
      }
      if (subscriptions.has("playerConnected")) {
        onPlayerConnectedObservable.notifyObservers({ userId: player.userId });
      }
    });
  }
  function subscribeLeaveScene() {
    players_default.onLeaveScene((userId) => {
      if (subscriptions.has("onLeaveScene")) {
        onLeaveSceneObservable.notifyObservers({ userId });
      }
      if (subscriptions.has("playerDisconnected")) {
        onPlayerDisconnectedObservable.notifyObservers({ userId });
      }
    });
  }
  function subscribeRealmChange() {
    RealmInfo2.onChange(engine.RootEntity, (value) => {
      if (value) {
        onRealmChangedObservable.notifyObservers({
          domain: value.baseUrl,
          displayName: value.realmName,
          room: value.room ?? "",
          serverName: value.realmName
        });
      }
    });
  }
  function subscribePlayerClick() {
    const playerEntities = /* @__PURE__ */ new Set();
    engine.addSystem(() => {
      for (const [entity] of engine.getEntitiesWith(PlayerIdentityData2)) {
        if (playerEntities.has(entity))
          return;
        playerEntities.add(entity);
        PointerEventsResult2.onChange(entity, (data) => {
          if (data?.hit) {
            onPlayerClickedObservable.notifyObservers({
              userId: PlayerIdentityData2.getOrNull(entity)?.address ?? "",
              ray: {
                direction: data.hit.direction,
                distance: data.hit.length,
                origin: data.hit.globalOrigin
              }
            });
          }
        });
      }
    });
  }
  function subscribePlayerExpression() {
    AvatarEmoteCommand2.onChange(engine.PlayerEntity, (value) => {
      onPlayerExpressionObservable.notifyObservers({ expressionId: value?.emoteUrn ?? "" });
    });
  }
  function subscribeProfileChange() {
    AvatarBase2.onChange(engine.PlayerEntity, () => {
      if (!profileAddress)
        return;
      onProfileChanged.notifyObservers({ ethAddress: profileAddress, version: 0 });
    });
    AvatarEquippedData2.onChange(engine.PlayerEntity, () => {
      if (!profileAddress)
        return;
      onProfileChanged.notifyObservers({ ethAddress: profileAddress, version: 0 });
    });
  }
  let sceneReady = false;
  let profileAddress;
  function observableSystem() {
    if (sceneReady && profileAddress) {
      return engine.removeSystem(observableSystem);
    }
    if (!sceneReady) {
      sceneReady = true;
      onSceneReadyObservable.notifyObservers({});
    }
    if (profileAddress)
      return;
    profileAddress = PlayerIdentityData2.getOrNull(engine.PlayerEntity)?.address;
  }
  engine.addSystem(observableSystem);
  return { subscribe: subscribe2 };
}

// sdk-composite:all-composites
var compositeFromLoader = {};

// node_modules/@dcl/sdk/composite-provider.js
var composites = [];
var compositeProvider = {
  getCompositeOrNull(src, _currentPath) {
    const fromLoader = compositeFromLoader[src];
    if (fromLoader) {
      try {
        if (fromLoader instanceof Uint8Array) {
          const composite = Composite.fromBinary(fromLoader);
          composites.push({ src, composite });
        } else if (typeof fromLoader === "string") {
          const composite = Composite.fromJson(JSON.parse(fromLoader));
          composites.push({ src, composite });
        } else if (typeof fromLoader === "object") {
          const composite = Composite.fromJson(fromLoader);
          composites.push({ src, composite });
        }
      } catch (err) {
        console.error(err);
      }
      delete compositeFromLoader[src];
    }
    return composites.find((item) => item.src === src) || null;
  }
};

// node_modules/@dcl/sdk/index.js
var rendererTransport = createRendererTransport({ crdtSendToRenderer: import_EngineApi2.crdtSendToRenderer });
engine.addTransport(rendererTransport);
async function onUpdate(deltaTime) {
  engine.seal();
  await engine.update(deltaTime);
  await pollEvents(import_EngineApi2.sendBatch);
}
async function onStart() {
  const response = await (0, import_EngineApi2.crdtGetState)({ data: new Uint8Array() });
  if (!response.hasEntities) {
    const mainComposite = compositeProvider.getCompositeOrNull("main.composite");
    if (mainComposite) {
      try {
        Composite.instance(engine, mainComposite, compositeProvider);
      } catch (err) {
        console.log(`Warning: main.composite couldn't be instanced.`);
        console.error(err);
      }
    }
  }
  if (!!rendererTransport.onmessage) {
    if (response && response.data && response.data.length) {
      for (const byteArray of response.data) {
        rendererTransport.onmessage(byteArray);
      }
    }
  }
}

// src/index.ts.entry-point.ts
if (main !== void 0) {
  let _INTERNAL_startup_system = function() {
    try {
      const maybePromise = main();
      if (maybePromise && typeof maybePromise === "object" && typeof maybePromise.then === "function") {
        maybePromise.catch(console.error);
      }
    } catch (e) {
      console.error(e);
    } finally {
      engine.removeSystem(_INTERNAL_startup_system);
    }
  };
  engine.addSystem(_INTERNAL_startup_system, Infinity);
}
/*! Bundled license information:

long/index.js:
  (**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2FzcHJvbWlzZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYmFzZTY0L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9ldmVudGVtaXR0ZXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2Zsb2F0L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9pbnF1aXJlL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy91dGY4L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9wb29sL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL2xvbmdiaXRzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL21pbmltYWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9ycGMvc2VydmljZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9taW5pbWFsLmpzIiwgIi4uL3NyYy9pbmRleC50cy5lbnRyeS1wb2ludC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYW5pbWF0b3IuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0FuaW1hdG9yLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXVkaW9fZXZlbnQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0F1ZGlvRXZlbnQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdWRpb19zb3VyY2UuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0F1ZGlvU291cmNlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXVkaW9fc3RyZWFtLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9BdWRpb1N0cmVhbS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9hdHRhY2guZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0F2YXRhckF0dGFjaC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9iYXNlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvY29tbW9uL2NvbG9ycy5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvQXZhdGFyQmFzZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9lbW90ZV9jb21tYW5kLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9BdmF0YXJFbW90ZUNvbW1hbmQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdmF0YXJfZXF1aXBwZWRfZGF0YS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvQXZhdGFyRXF1aXBwZWREYXRhLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXZhdGFyX21vZGlmaWVyX2FyZWEuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9jb21tb24vdmVjdG9ycy5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvQXZhdGFyTW9kaWZpZXJBcmVhLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9uZy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXZhdGFyX3NoYXBlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9BdmF0YXJTaGFwZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2JpbGxib2FyZC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvQmlsbGJvYXJkLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvY2FtZXJhX21vZGUuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0NhbWVyYU1vZGUuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9jYW1lcmFfbW9kZV9hcmVhLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9DYW1lcmFNb2RlQXJlYS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2VuZ2luZV9pbmZvLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9FbmdpbmVJbmZvLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvZ2x0Zl9jb250YWluZXIuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0dsdGZDb250YWluZXIuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9nbHRmX2NvbnRhaW5lcl9sb2FkaW5nX3N0YXRlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9HbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvaW5wdXRfbW9kaWZpZXIuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL0lucHV0TW9kaWZpZXIuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9tYWluX2NhbWVyYS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvTWFpbkNhbWVyYS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL21hdGVyaWFsLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvY29tbW9uL3RleHR1cmUuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL01hdGVyaWFsLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbWVzaF9jb2xsaWRlci5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvTWVzaENvbGxpZGVyLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbWVzaF9yZW5kZXJlci5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvTWVzaFJlbmRlcmVyLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbmZ0X3NoYXBlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9OZnRTaGFwZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3BsYXllcl9pZGVudGl0eV9kYXRhLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9QbGF5ZXJJZGVudGl0eURhdGEuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9wb2ludGVyX2V2ZW50cy5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvUG9pbnRlckV2ZW50cy5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3BvaW50ZXJfZXZlbnRzX3Jlc3VsdC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2NvbW1vbi9yYXljYXN0X2hpdC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvUG9pbnRlckV2ZW50c1Jlc3VsdC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3BvaW50ZXJfbG9jay5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvUG9pbnRlckxvY2suZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9yYXljYXN0Lmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9SYXljYXN0Lmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvcmF5Y2FzdF9yZXN1bHQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL1JheWNhc3RSZXN1bHQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9yZWFsbV9pbmZvLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9SZWFsbUluZm8uZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy90ZXh0X3NoYXBlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9UZXh0U2hhcGUuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy90d2Vlbi5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVHdlZW4uZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy90d2Vlbl9zZXF1ZW5jZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVHdlZW5TZXF1ZW5jZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3R3ZWVuX3N0YXRlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9Ud2VlblN0YXRlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdWlfYmFja2dyb3VuZC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL2NvbW1vbi9ib3JkZXJfcmVjdC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVWlCYWNrZ3JvdW5kLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdWlfY2FudmFzX2luZm9ybWF0aW9uLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9VaUNhbnZhc0luZm9ybWF0aW9uLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdWlfZHJvcGRvd24uZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL1VpRHJvcGRvd24uZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9kcm9wZG93bl9yZXN1bHQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL1VpRHJvcGRvd25SZXN1bHQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9pbnB1dC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVWlJbnB1dC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX2lucHV0X3Jlc3VsdC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVWlJbnB1dFJlc3VsdC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX3RleHQuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL1VpVGV4dC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX3RyYW5zZm9ybS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVWlUcmFuc2Zvcm0uZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy92aWRlb19ldmVudC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVmlkZW9FdmVudC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3ZpZGVvX3BsYXllci5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVmlkZW9QbGF5ZXIuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy92aXJ0dWFsX2NhbWVyYS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2NvbW1vbi9jYW1lcmFfdHJhbnNpdGlvbi5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvVmlydHVhbENhbWVyYS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3Zpc2liaWxpdHlfY29tcG9uZW50Lmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9WaXNpYmlsaXR5Q29tcG9uZW50Lmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9pbmRleC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9leHRlbmRlZC9NYXRlcmlhbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2V4dGVuZGVkL01lc2hDb2xsaWRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2V4dGVuZGVkL01lc2hSZW5kZXJlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2V4dGVuZGVkL1R3ZWVuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NjaGVtYXMvQXJyYXkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2NoZW1hcy9iYXNpYy9Cb29sZWFuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NjaGVtYXMvYmFzaWMvSW50ZWdlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zY2hlbWFzL2Jhc2ljL1N0cmluZy5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zY2hlbWFzL2Jhc2ljL0VudW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2NoZW1hcy9iYXNpYy9GbG9hdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zY2hlbWFzL2N1c3RvbS9Db2xvcjMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2NoZW1hcy9jdXN0b20vQ29sb3I0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NjaGVtYXMvY3VzdG9tL0VudGl0eS5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zY2hlbWFzL2N1c3RvbS9RdWF0ZXJuaW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NjaGVtYXMvY3VzdG9tL1ZlY3RvcjMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2NoZW1hcy9NYXAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2NoZW1hcy9PcHRpb25hbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zY2hlbWFzL09uZU9mLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NjaGVtYXMvYnVpbGRTY2hlbWEvdXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2NoZW1hcy9idWlsZFNjaGVtYS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zY2hlbWFzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvbWFudWFsL05hbWUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9tYW51YWwvTmV0d29ya0VudGl0eS5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL21hbnVhbC9OZXR3b3JrUGFyZW50LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvbWFudWFsL1RyYW5zZm9ybS5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvY29tbW9uL21lZGlhX3N0YXRlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb25lbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL2NvbXBvbmVudC1uYW1lcy5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9jb21wb25lbnQtbnVtYmVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3J1bnRpbWUvY3JjLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3J1bnRpbWUvaW52YXJpYW50LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3N5c3RlbXMvY3JkdC9nc2V0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2VuZ2luZS9lbnRpdHkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NlcmlhbGl6YXRpb24vY3JkdC90eXBlcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zZXJpYWxpemF0aW9uL2NyZHQvY3JkdE1lc3NhZ2VQcm90b2NvbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zZXJpYWxpemF0aW9uL2NyZHQvZGVsZXRlQ29tcG9uZW50LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NlcmlhbGl6YXRpb24vY3JkdC9hcHBlbmRWYWx1ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zZXJpYWxpemF0aW9uL2NyZHQvZGVsZXRlRW50aXR5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NlcmlhbGl6YXRpb24vY3JkdC9wdXRDb21wb25lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2VyaWFsaXphdGlvbi9jcmR0L25ldHdvcmsvcHV0Q29tcG9uZW50TmV0d29yay5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zZXJpYWxpemF0aW9uL2NyZHQvbmV0d29yay9kZWxldGVDb21wb25lbnROZXR3b3JrLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3NlcmlhbGl6YXRpb24vY3JkdC9uZXR3b3JrL2RlbGV0ZUVudGl0eU5ldHdvcmsuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc2VyaWFsaXphdGlvbi9jcmR0L25ldHdvcmsvdXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc3lzdGVtcy9jcmR0L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L3N5c3RlbXMvY3JkdC91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9lbmdpbmUvcmVhZG9ubHkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvZW5naW5lL2x3dy1lbGVtZW50LXNldC1jb21wb25lbnQtZGVmaW5pdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9lbmdpbmUvc3lzdGVtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9lbmdpbmUvZ3Jvdy1vbmx5LXZhbHVlLXNldC1jb21wb25lbnQtZGVmaW5pdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9ydW50aW1lL2hlbHBlcnMvdHJlZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9lbmdpbmUvaW5wdXQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvZW5naW5lL2NvbXBvbmVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9lbmdpbmUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3Qvc3lzdGVtcy90d2Vlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9zeXN0ZW1zL3BvaW50ZXItZXZlbnQtY29sbGlkZXItY2hlY2tlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9ydW50aW1lL2luaXRpYWxpemF0aW9uL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL2dsb2JhbC5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2NvbW1vbi9jYW1lcmFfdHlwZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2NvbW1vbi9pbnB1dF9hY3Rpb24uZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9jb21tb24vbG9hZGluZ19zdGF0ZS5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2NvbW1vbi90ZXh0cy5nZW4uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9zaXRlL2NvbXBvbmVudHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9zaXRlL3BhdGguanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzL2Rpc3QvY29tcG9zaXRlL2luc3RhbmNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvc2l0ZS9wcm90by9nZW4vY29tcG9zaXRlLmdlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9jb21wb3NpdGUvcHJvdG8vZ2VuL2dvb2dsZS9wcm90b2J1Zi9zdHJ1Y3QuZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy9kaXN0L2NvbXBvc2l0ZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MvZGlzdC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L3R5cGVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvU2NhbGFyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvVmVjdG9yMy5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1BsYW5lLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvTWF0cml4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvUXVhdGVybmlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1ZlY3RvcjIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9Db2xvcjQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9Db2xvcjMuanMiLCAiLi4vc3JjL3RlcnJhaW4vdGVycmFpbi1nZW5lcmF0b3IudHMiLCAiLi4vc3JjL3N5c3RlbXMvdm94ZWwtc3lzdGVtLnRzIiwgIi4uL3NyYy9zeXN0ZW1zL2NodW5rLW1hbmFnZXIudHMiLCAiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9yZXNvdXJjZXMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvc2RrL3NyYy9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGRjbC9zZGsvc3JjL2ludGVybmFsL3RyYW5zcG9ydHMvcmVuZGVyZXJUcmFuc3BvcnQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvc2RrL3NyYy9pbnRlcm5hbC9PYnNlcnZhYmxlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZGNsL3Nkay9zcmMvb2JzZXJ2YWJsZXMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvc2RrL3NyYy9wbGF5ZXJzL2luZGV4LnRzIiwgInNkay1jb21wb3NpdGU6YWxsLWNvbXBvc2l0ZXMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkY2wvc2RrL3NyYy9jb21wb3NpdGUtcHJvdmlkZXIudHMiXSwKICAic291cmNlUm9vdCI6ICJmaWxlOi8vL1VzZXJzL2xhc3RyYXVtL0Rlc2t0b3AvUHJvZ3JhbW1pbmcvRGVjZW50cmFsYW5kL0xhc3RTbGljZS9zZGs3L2FpLW1pbmVjcmFmdC9zY2VuZS9iaW4iLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gYXNQcm9taXNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuYXNQcm9taXNlfS5cclxuICogQHR5cGVkZWYgYXNQcm9taXNlQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnlcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgQWRkaXRpb25hbCBhcmd1bWVudHNcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHByb21pc2UgZnJvbSBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7YXNQcm9taXNlQ2FsbGJhY2t9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcclxuICogQHBhcmFtIHsqfSBjdHggRnVuY3Rpb24gY29udGV4dFxyXG4gKiBAcGFyYW0gey4uLip9IHBhcmFtcyBGdW5jdGlvbiBhcmd1bWVudHNcclxuICogQHJldHVybnMge1Byb21pc2U8Kj59IFByb21pc2lmaWVkIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBhc1Byb21pc2UoZm4sIGN0eC8qLCB2YXJhcmdzICovKSB7XHJcbiAgICB2YXIgcGFyYW1zICA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgb2Zmc2V0ICA9IDAsXHJcbiAgICAgICAgaW5kZXggICA9IDIsXHJcbiAgICAgICAgcGVuZGluZyA9IHRydWU7XHJcbiAgICB3aGlsZSAoaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoKVxyXG4gICAgICAgIHBhcmFtc1tvZmZzZXQrK10gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgcGFyYW1zW29mZnNldF0gPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIvKiwgdmFyYXJncyAqLykge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBwYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW29mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgcGFyYW1zKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgbWluaW1hbCBiYXNlNjQgaW1wbGVtZW50YXRpb24gZm9yIG51bWJlciBhcnJheXMuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciBiYXNlNjQgPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGJ5dGUgbGVuZ3RoIG9mIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gKi9cclxuYmFzZTY0Lmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aChzdHJpbmcpIHtcclxuICAgIHZhciBwID0gc3RyaW5nLmxlbmd0aDtcclxuICAgIGlmICghcClcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIHZhciBuID0gMDtcclxuICAgIHdoaWxlICgtLXAgJSA0ID4gMSAmJiBzdHJpbmcuY2hhckF0KHApID09PSBcIj1cIilcclxuICAgICAgICArK247XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKHN0cmluZy5sZW5ndGggKiAzKSAvIDQgLSBuO1xyXG59O1xyXG5cclxuLy8gQmFzZTY0IGVuY29kaW5nIHRhYmxlXHJcbnZhciBiNjQgPSBuZXcgQXJyYXkoNjQpO1xyXG5cclxuLy8gQmFzZTY0IGRlY29kaW5nIHRhYmxlXHJcbnZhciBzNjQgPSBuZXcgQXJyYXkoMTIzKTtcclxuXHJcbi8vIDY1Li45MCwgOTcuLjEyMiwgNDguLjU3LCA0MywgNDdcclxuZm9yICh2YXIgaSA9IDA7IGkgPCA2NDspXHJcbiAgICBzNjRbYjY0W2ldID0gaSA8IDI2ID8gaSArIDY1IDogaSA8IDUyID8gaSArIDcxIDogaSA8IDYyID8gaSAtIDQgOiBpIC0gNTkgfCA0M10gPSBpKys7XHJcblxyXG4vKipcclxuICogRW5jb2RlcyBhIGJ1ZmZlciB0byBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU291cmNlIHN0YXJ0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgU291cmNlIGVuZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmJhc2U2NC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYnVmZmVyLCBzdGFydCwgZW5kKSB7XHJcbiAgICB2YXIgcGFydHMgPSBudWxsLFxyXG4gICAgICAgIGNodW5rID0gW107XHJcbiAgICB2YXIgaSA9IDAsIC8vIG91dHB1dCBpbmRleFxyXG4gICAgICAgIGogPSAwLCAvLyBnb3RvIGluZGV4XHJcbiAgICAgICAgdDsgICAgIC8vIHRlbXBvcmFyeVxyXG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XHJcbiAgICAgICAgdmFyIGIgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbYiA+PiAyXTtcclxuICAgICAgICAgICAgICAgIHQgPSAoYiAmIDMpIDw8IDQ7XHJcbiAgICAgICAgICAgICAgICBqID0gMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W3QgfCBiID4+IDRdO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiICYgMTUpIDw8IDI7XHJcbiAgICAgICAgICAgICAgICBqID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W3QgfCBiID4+IDZdO1xyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFtiICYgNjNdO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgPiA4MTkxKSB7XHJcbiAgICAgICAgICAgIChwYXJ0cyB8fCAocGFydHMgPSBbXSkpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rKSk7XHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChqKSB7XHJcbiAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFt0XTtcclxuICAgICAgICBjaHVua1tpKytdID0gNjE7XHJcbiAgICAgICAgaWYgKGogPT09IDEpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSA2MTtcclxuICAgIH1cclxuICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgIGlmIChpKVxyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSkpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSk7XHJcbn07XHJcblxyXG52YXIgaW52YWxpZEVuY29kaW5nID0gXCJpbnZhbGlkIGVuY29kaW5nXCI7XHJcblxyXG4vKipcclxuICogRGVjb2RlcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byBhIGJ1ZmZlci5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgZW5jb2RpbmcgaXMgaW52YWxpZFxyXG4gKi9cclxuYmFzZTY0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICB2YXIgaiA9IDAsIC8vIGdvdG8gaW5kZXhcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7KSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKyspO1xyXG4gICAgICAgIGlmIChjID09PSA2MSAmJiBqID4gMSlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgaWYgKChjID0gczY0W2NdKSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkRW5jb2RpbmcpO1xyXG4gICAgICAgIHN3aXRjaCAoaikge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSB0IDw8IDIgfCAoYyAmIDQ4KSA+PiA0O1xyXG4gICAgICAgICAgICAgICAgdCA9IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gKHQgJiAxNSkgPDwgNCB8IChjICYgNjApID4+IDI7XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAzO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAodCAmIDMpIDw8IDYgfCBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaiA9PT0gMSlcclxuICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkRW5jb2RpbmcpO1xyXG4gICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgc3RyaW5nIGFwcGVhcnMgdG8gYmUgYmFzZTY0IGVuY29kZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBwcm9iYWJseSBiYXNlNjQgZW5jb2RlZCwgb3RoZXJ3aXNlIGZhbHNlXHJcbiAqL1xyXG5iYXNlNjQudGVzdCA9IGZ1bmN0aW9uIHRlc3Qoc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvLnRlc3Qoc3RyaW5nKTtcclxufTtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGV2ZW50IGVtaXR0ZXIgaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgQSBtaW5pbWFsIGV2ZW50IGVtaXR0ZXIuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lci5cclxuICogQHBhcmFtIHtzdHJpbmd9IGV2dCBFdmVudCBuYW1lXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIExpc3RlbmVyXHJcbiAqIEBwYXJhbSB7Kn0gW2N0eF0gTGlzdGVuZXIgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2dCwgZm4sIGN0eCkge1xyXG4gICAgKHRoaXMuX2xpc3RlbmVyc1tldnRdIHx8ICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9IFtdKSkucHVzaCh7XHJcbiAgICAgICAgZm4gIDogZm4sXHJcbiAgICAgICAgY3R4IDogY3R4IHx8IHRoaXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBvciBhbnkgbWF0Y2hpbmcgbGlzdGVuZXJzIGlmIGFyZ3VtZW50cyBhcmUgb21pdHRlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtldnRdIEV2ZW50IG5hbWUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBpZiBvbWl0dGVkLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZm5dIExpc3RlbmVyIHRvIHJlbW92ZS4gUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIG9mIGBldnRgIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIG9mZihldnQsIGZuKSB7XHJcbiAgICBpZiAoZXZ0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZm4gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5mbiA9PT0gZm4pXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdHMgYW4gZXZlbnQgYnkgY2FsbGluZyBpdHMgbGlzdGVuZXJzIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBhcmdzID0gW10sXHJcbiAgICAgICAgICAgIGkgPSAxO1xyXG4gICAgICAgIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDspXHJcbiAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2krK10uY3R4LCBhcmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZmFjdG9yeSk7XHJcblxyXG4vKipcclxuICogUmVhZHMgLyB3cml0ZXMgZmxvYXRzIC8gZG91YmxlcyBmcm9tIC8gdG8gYnVmZmVycy5cclxuICogQG5hbWUgdXRpbC5mbG9hdFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIDMyIGJpdCBmbG9hdCB0byBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVGbG9hdExFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSAzMiBiaXQgZmxvYXQgdG8gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LndyaXRlRmxvYXRCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSAzMiBiaXQgZmxvYXQgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZEZsb2F0TEVcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBTb3VyY2UgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgMzIgYml0IGZsb2F0IGZyb20gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWRGbG9hdEJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8vIEZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBwdXJwb3NlIG9mIG5vZGUtYmFzZWQgdGVzdGluZyBpbiBtb2RpZmllZCBnbG9iYWwgZW52aXJvbm1lbnRzXHJcbmZ1bmN0aW9uIGZhY3RvcnkoZXhwb3J0cykge1xyXG5cclxuICAgIC8vIGZsb2F0OiB0eXBlZCBhcnJheVxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoWyAtMCBdKSxcclxuICAgICAgICAgICAgZjhiID0gbmV3IFVpbnQ4QXJyYXkoZjMyLmJ1ZmZlciksXHJcbiAgICAgICAgICAgIGxlICA9IGY4YlszXSA9PT0gMTI4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2YzMl9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmMzJbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfZjMyX3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGYzMlswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzNdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGxlID8gd3JpdGVGbG9hdF9mMzJfY3B5IDogd3JpdGVGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBsZSA/IHdyaXRlRmxvYXRfZjMyX3JldiA6IHdyaXRlRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsxXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gbGUgPyByZWFkRmxvYXRfZjMyX2NweSA6IHJlYWRGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGxlID8gcmVhZEZsb2F0X2YzMl9yZXYgOiByZWFkRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAvLyBmbG9hdDogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfaWVlZTc1NCh3cml0ZVVpbnQsIHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGlmIChzaWduKVxyXG4gICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgxIC8gdmFsID4gMCA/IC8qIHBvc2l0aXZlICovIDAgOiAvKiBuZWdhdGl2ZSAwICovIDIxNDc0ODM2NDgsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4odmFsKSlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQzMjg5MzQ0LCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA+IDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpIC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IDIxMzkwOTUwNDApID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8IDEuMTc1NDk0MzUwODIyMjg3NWUtMzgpIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCBNYXRoLnJvdW5kKHZhbCAvIDEuNDAxMjk4NDY0MzI0ODE3ZS00NSkpID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gTWF0aC5yb3VuZCh2YWwgKiBNYXRoLnBvdygyLCAtZXhwb25lbnQpICogODM4ODYwOCkgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgZXhwb25lbnQgKyAxMjcgPDwgMjMgfCBtYW50aXNzYSkgPj4+IDAsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRMRSk7XHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9pZWVlNzU0KHJlYWRVaW50LCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICB2YXIgdWludCA9IHJlYWRVaW50KGJ1ZiwgcG9zKSxcclxuICAgICAgICAgICAgICAgIHNpZ24gPSAodWludCA+PiAzMSkgKiAyICsgMSxcclxuICAgICAgICAgICAgICAgIGV4cG9uZW50ID0gdWludCA+Pj4gMjMgJiAyNTUsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHVpbnQgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDI1NVxyXG4gICAgICAgICAgICAgICAgPyBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgPyBOYU5cclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICA6IGV4cG9uZW50ID09PSAwIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICA/IHNpZ24gKiAxLjQwMTI5ODQ2NDMyNDgxN2UtNDUgKiBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgOiBzaWduICogTWF0aC5wb3coMiwgZXhwb25lbnQgLSAxNTApICogKG1hbnRpc3NhICsgODM4ODYwOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludExFKTtcclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdEJFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIGRvdWJsZTogdHlwZWQgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgRmxvYXQ2NEFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBmNjQgPSBuZXcgRmxvYXQ2NEFycmF5KFstMF0pLFxyXG4gICAgICAgICAgICBmOGIgPSBuZXcgVWludDhBcnJheShmNjQuYnVmZmVyKSxcclxuICAgICAgICAgICAgbGUgID0gZjhiWzddID09PSAxMjg7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2Y2NF9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmNjRbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDRdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNV0gPSBmOGJbNV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA2XSA9IGY4Yls2XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDddID0gZjhiWzddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVEb3VibGVfZjY0X3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY2NFswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzddO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbNl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4Yls1XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNF0gPSBmOGJbM107XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA1XSA9IGY4YlsyXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDZdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgN10gPSBmOGJbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGxlID8gd3JpdGVEb3VibGVfZjY0X2NweSA6IHdyaXRlRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBsZSA/IHdyaXRlRG91YmxlX2Y2NF9yZXYgOiB3cml0ZURvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbNF0gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzZdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbN10gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzddID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbNl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzRdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbM10gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbMF0gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gbGUgPyByZWFkRG91YmxlX2Y2NF9jcHkgOiByZWFkRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGxlID8gcmVhZERvdWJsZV9mNjRfcmV2IDogcmVhZERvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgIC8vIGRvdWJsZTogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2llZWU3NTQod3JpdGVVaW50LCBvZmYwLCBvZmYxLCB2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICBpZiAoc2lnbilcclxuICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KDEgLyB2YWwgPiAwID8gLyogcG9zaXRpdmUgKi8gMCA6IC8qIG5lZ2F0aXZlIDAgKi8gMjE0NzQ4MzY0OCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQ2OTU5MzYwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KSB7IC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgMjE0NjQzNTA3MikgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFudGlzc2E7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgMi4yMjUwNzM4NTg1MDcyMDE0ZS0zMDgpIHsgLy8gZGVub3JtYWxcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHZhbCAvIDVlLTMyNDtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgbWFudGlzc2EgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvbmVudCA9PT0gMTAyNClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgPSAxMDIzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gdmFsICogTWF0aC5wb3coMiwgLWV4cG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgKiA0NTAzNTk5NjI3MzcwNDk2ID4+PiAwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IGV4cG9uZW50ICsgMTAyMyA8PCAyMCB8IG1hbnRpc3NhICogMTA0ODU3NiAmIDEwNDg1NzUpID4+PiAwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSB3cml0ZURvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50TEUsIDAsIDQpO1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IHdyaXRlRG91YmxlX2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSwgNCwgMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWREb3VibGVfaWVlZTc1NChyZWFkVWludCwgb2ZmMCwgb2ZmMSwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIGxvID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYwKSxcclxuICAgICAgICAgICAgICAgIGhpID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSAoaGkgPj4gMzEpICogMiArIDEsXHJcbiAgICAgICAgICAgICAgICBleHBvbmVudCA9IGhpID4+PiAyMCAmIDIwNDcsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IDQyOTQ5NjcyOTYgKiAoaGkgJiAxMDQ4NTc1KSArIGxvO1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDIwNDdcclxuICAgICAgICAgICAgICAgID8gbWFudGlzc2FcclxuICAgICAgICAgICAgICAgID8gTmFOXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgOiBleHBvbmVudCA9PT0gMCAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgPyBzaWduICogNWUtMzI0ICogbWFudGlzc2FcclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIE1hdGgucG93KDIsIGV4cG9uZW50IC0gMTA3NSkgKiAobWFudGlzc2EgKyA0NTAzNTk5NjI3MzcwNDk2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gcmVhZERvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRMRSwgMCwgNCk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSByZWFkRG91YmxlX2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFLCA0LCAwKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59XHJcblxyXG4vLyB1aW50IGhlbHBlcnNcclxuXHJcbmZ1bmN0aW9uIHdyaXRlVWludExFKHZhbCwgYnVmLCBwb3MpIHtcclxuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDFdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMl0gPSAgdmFsID4+PiAxNiAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZVVpbnRCRSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsID4+PiAyNDtcclxuICAgIGJ1Zltwb3MgKyAxXSA9ICB2YWwgPj4+IDE2ICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsICAgICAgICAmIDI1NTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZFVpbnRMRShidWYsIHBvcykge1xyXG4gICAgcmV0dXJuIChidWZbcG9zICAgIF1cclxuICAgICAgICAgIHwgYnVmW3BvcyArIDFdIDw8IDhcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDJdIDw8IDE2XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAzXSA8PCAyNCkgPj4+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRVaW50QkUoYnVmLCBwb3MpIHtcclxuICAgIHJldHVybiAoYnVmW3BvcyAgICBdIDw8IDI0XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAxXSA8PCAxNlxyXG4gICAgICAgICAgfCBidWZbcG9zICsgMl0gPDwgOFxyXG4gICAgICAgICAgfCBidWZbcG9zICsgM10pID4+PiAwO1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBpbnF1aXJlO1xyXG5cclxuLyoqXHJcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIG9ubHkgaWYgYXZhaWxhYmxlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBNb2R1bGUgdG8gcmVxdWlyZVxyXG4gKiBAcmV0dXJucyB7P09iamVjdH0gUmVxdWlyZWQgbW9kdWxlIGlmIGF2YWlsYWJsZSBhbmQgbm90IGVtcHR5LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnF1aXJlKG1vZHVsZU5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIG1vZCA9IGV2YWwoXCJxdWlyZVwiLnJlcGxhY2UoL14vLFwicmVcIikpKG1vZHVsZU5hbWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcclxuICAgICAgICBpZiAobW9kICYmIChtb2QubGVuZ3RoIHx8IE9iamVjdC5rZXlzKG1vZCkubGVuZ3RoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG1pbmltYWwgVVRGOCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHV0ZjggPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIFVURjggYnl0ZSBsZW5ndGggb2YgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG51dGY4Lmxlbmd0aCA9IGZ1bmN0aW9uIHV0ZjhfbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIGxlbiA9IDAsXHJcbiAgICAgICAgYyA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOClcclxuICAgICAgICAgICAgbGVuICs9IDE7XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpXHJcbiAgICAgICAgICAgIGxlbiArPSAyO1xyXG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhGQzAwKSA9PT0gMHhEODAwICYmIChzdHJpbmcuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBsZW4gKz0gNDtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgbGVuICs9IDM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVuO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIFVURjggYnl0ZXMgYXMgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFNvdXJjZSBzdGFydFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFNvdXJjZSBlbmRcclxuICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlYWRcclxuICovXHJcbnV0ZjgucmVhZCA9IGZ1bmN0aW9uIHV0ZjhfcmVhZChidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcclxuICAgIGlmIChsZW4gPCAxKVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgdmFyIHBhcnRzID0gbnVsbCxcclxuICAgICAgICBjaHVuayA9IFtdLFxyXG4gICAgICAgIGkgPSAwLCAvLyBjaGFyIG9mZnNldFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xyXG4gICAgICAgIHQgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgaWYgKHQgPCAxMjgpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSB0O1xyXG4gICAgICAgIGVsc2UgaWYgKHQgPiAxOTEgJiYgdCA8IDIyNClcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9ICh0ICYgMzEpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBlbHNlIGlmICh0ID4gMjM5ICYmIHQgPCAzNjUpIHtcclxuICAgICAgICAgICAgdCA9ICgodCAmIDcpIDw8IDE4IHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCAxMiB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzKSAtIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweEQ4MDAgKyAodCA+PiAxMCk7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweERDMDAgKyAodCAmIDEwMjMpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gKHQgJiAxNSkgPDwgMTIgfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBzdHJpbmcgYXMgVVRGOCBieXRlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlcyB3cml0dGVuXHJcbiAqL1xyXG51dGY4LndyaXRlID0gZnVuY3Rpb24gdXRmOF93cml0ZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgYzEsIC8vIGNoYXJhY3RlciAxXHJcbiAgICAgICAgYzI7IC8vIGNoYXJhY3RlciAyXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMxID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMTtcclxuICAgICAgICB9IGVsc2UgaWYgKGMxIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgICAgICB8IDE5MjtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoYzEgJiAweEZDMDApID09PSAweEQ4MDAgJiYgKChjMiA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgYzEgPSAweDEwMDAwICsgKChjMSAmIDB4MDNGRikgPDwgMTApICsgKGMyICYgMHgwM0ZGKTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTggICAgICB8IDI0MDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTIgICAgICB8IDIyNDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxufTtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTG9uZ0JpdHM7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMuXG4gKiBAY2xhc3NkZXNjIEhlbHBlciBjbGFzcyBmb3Igd29ya2luZyB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsbyBMb3cgMzIgYml0cywgdW5zaWduZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSBIaWdoIDMyIGJpdHMsIHVuc2lnbmVkXG4gKi9cbmZ1bmN0aW9uIExvbmdCaXRzKGxvLCBoaSkge1xuXG4gICAgLy8gbm90ZSB0aGF0IHRoZSBjYXN0cyBiZWxvdyBhcmUgdGhlb3JldGljYWxseSB1bm5lY2Vzc2FyeSBhcyBvZiB0b2RheSwgYnV0IG9sZGVyIHN0YXRpY2FsbHlcbiAgICAvLyBnZW5lcmF0ZWQgY29udmVydGVyIGNvZGUgbWlnaHQgc3RpbGwgY2FsbCB0aGUgY3RvciB3aXRoIHNpZ25lZCAzMmJpdHMuIGtlcHQgZm9yIGNvbXBhdC5cblxuICAgIC8qKlxuICAgICAqIExvdyBiaXRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sbyA9IGxvID4+PiAwO1xuXG4gICAgLyoqXG4gICAgICogSGlnaCBiaXRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5oaSA9IGhpID4+PiAwO1xufVxuXG4vKipcbiAqIFplcm8gYml0cy5cbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXG4gKiBAdHlwZSB7dXRpbC5Mb25nQml0c31cbiAqL1xudmFyIHplcm8gPSBMb25nQml0cy56ZXJvID0gbmV3IExvbmdCaXRzKDAsIDApO1xuXG56ZXJvLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuemVyby56ekVuY29kZSA9IHplcm8uenpEZWNvZGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XG56ZXJvLmxlbmd0aCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMTsgfTtcblxuLyoqXG4gKiBaZXJvIGhhc2guXG4gKiBAbWVtYmVyb2YgdXRpbC5Mb25nQml0c1xuICogQHR5cGUge3N0cmluZ31cbiAqL1xudmFyIHplcm9IYXNoID0gTG9uZ0JpdHMuemVyb0hhc2ggPSBcIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcbiAqL1xuTG9uZ0JpdHMuZnJvbU51bWJlciA9IGZ1bmN0aW9uIGZyb21OdW1iZXIodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IDApXG4gICAgICAgIHJldHVybiB6ZXJvO1xuICAgIHZhciBzaWduID0gdmFsdWUgPCAwO1xuICAgIGlmIChzaWduKVxuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICB2YXIgbG8gPSB2YWx1ZSA+Pj4gMCxcbiAgICAgICAgaGkgPSAodmFsdWUgLSBsbykgLyA0Mjk0OTY3Mjk2ID4+PiAwO1xuICAgIGlmIChzaWduKSB7XG4gICAgICAgIGhpID0gfmhpID4+PiAwO1xuICAgICAgICBsbyA9IH5sbyA+Pj4gMDtcbiAgICAgICAgaWYgKCsrbG8gPiA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgICAgICBsbyA9IDA7XG4gICAgICAgICAgICBpZiAoKytoaSA+IDQyOTQ5NjcyOTUpXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMobG8sIGhpKTtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gYSBudW1iZXIsIGxvbmcgb3Igc3RyaW5nLlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcbiAqL1xuTG9uZ0JpdHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20odmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmICh1dGlsLkxvbmcpXG4gICAgICAgICAgICB2YWx1ZSA9IHV0aWwuTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIExvbmdCaXRzLmZyb21OdW1iZXIocGFyc2VJbnQodmFsdWUsIDEwKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5sb3cgfHwgdmFsdWUuaGlnaCA/IG5ldyBMb25nQml0cyh2YWx1ZS5sb3cgPj4+IDAsIHZhbHVlLmhpZ2ggPj4+IDApIDogemVybztcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBwb3NzaWJseSB1bnNhZmUgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvc3NpYmx5IHVuc2FmZSBudW1iZXJcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIodW5zaWduZWQpIHtcbiAgICBpZiAoIXVuc2lnbmVkICYmIHRoaXMuaGkgPj4+IDMxKSB7XG4gICAgICAgIHZhciBsbyA9IH50aGlzLmxvICsgMSA+Pj4gMCxcbiAgICAgICAgICAgIGhpID0gfnRoaXMuaGkgICAgID4+PiAwO1xuICAgICAgICBpZiAoIWxvKVxuICAgICAgICAgICAgaGkgPSBoaSArIDEgPj4+IDA7XG4gICAgICAgIHJldHVybiAtKGxvICsgaGkgKiA0Mjk0OTY3Mjk2KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG8gKyB0aGlzLmhpICogNDI5NDk2NzI5Njtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBsb25nLlxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKiBAcmV0dXJucyB7TG9uZ30gTG9uZ1xuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9Mb25nID0gZnVuY3Rpb24gdG9Mb25nKHVuc2lnbmVkKSB7XG4gICAgcmV0dXJuIHV0aWwuTG9uZ1xuICAgICAgICA/IG5ldyB1dGlsLkxvbmcodGhpcy5sbyB8IDAsIHRoaXMuaGkgfCAwLCBCb29sZWFuKHVuc2lnbmVkKSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiB7IGxvdzogdGhpcy5sbyB8IDAsIGhpZ2g6IHRoaXMuaGkgfCAwLCB1bnNpZ25lZDogQm9vbGVhbih1bnNpZ25lZCkgfTtcbn07XG5cbnZhciBjaGFyQ29kZUF0ID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBCaXRzXG4gKi9cbkxvbmdCaXRzLmZyb21IYXNoID0gZnVuY3Rpb24gZnJvbUhhc2goaGFzaCkge1xuICAgIGlmIChoYXNoID09PSB6ZXJvSGFzaClcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMClcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMSkgPDwgOFxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAyKSA8PCAxNlxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAzKSA8PCAyNCkgPj4+IDBcbiAgICAsXG4gICAgICAgICggY2hhckNvZGVBdC5jYWxsKGhhc2gsIDQpXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDUpIDw8IDhcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNikgPDwgMTZcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNykgPDwgMjQpID4+PiAwXG4gICAgKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxuICogQHJldHVybnMge3N0cmluZ30gSGFzaFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9IYXNoID0gZnVuY3Rpb24gdG9IYXNoKCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICB0aGlzLmxvICAgICAgICAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gOCAgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDE2ICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiAyNCAgICAgICxcbiAgICAgICAgdGhpcy5oaSAgICAgICAgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDggICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiAxNiAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gMjRcbiAgICApO1xufTtcblxuLyoqXG4gKiBaaWctemFnIGVuY29kZXMgdGhpcyBsb25nIGJpdHMuXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gYHRoaXNgXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS56ekVuY29kZSA9IGZ1bmN0aW9uIHp6RW5jb2RlKCkge1xuICAgIHZhciBtYXNrID0gICB0aGlzLmhpID4+IDMxO1xuICAgIHRoaXMuaGkgID0gKCh0aGlzLmhpIDw8IDEgfCB0aGlzLmxvID4+PiAzMSkgXiBtYXNrKSA+Pj4gMDtcbiAgICB0aGlzLmxvICA9ICggdGhpcy5sbyA8PCAxICAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFppZy16YWcgZGVjb2RlcyB0aGlzIGxvbmcgYml0cy5cbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnp6RGVjb2RlID0gZnVuY3Rpb24genpEZWNvZGUoKSB7XG4gICAgdmFyIG1hc2sgPSAtKHRoaXMubG8gJiAxKTtcbiAgICB0aGlzLmxvICA9ICgodGhpcy5sbyA+Pj4gMSB8IHRoaXMuaGkgPDwgMzEpIF4gbWFzaykgPj4+IDA7XG4gICAgdGhpcy5oaSAgPSAoIHRoaXMuaGkgPj4+IDEgICAgICAgICAgICAgICAgICBeIG1hc2spID4+PiAwO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhpcyBsb25nYml0cyB3aGVuIGVuY29kZWQgYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBMZW5ndGhcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICB2YXIgcGFydDAgPSAgdGhpcy5sbyxcbiAgICAgICAgcGFydDEgPSAodGhpcy5sbyA+Pj4gMjggfCB0aGlzLmhpIDw8IDQpID4+PiAwLFxuICAgICAgICBwYXJ0MiA9ICB0aGlzLmhpID4+PiAyNDtcbiAgICByZXR1cm4gcGFydDIgPT09IDBcbiAgICAgICAgID8gcGFydDEgPT09IDBcbiAgICAgICAgICAgPyBwYXJ0MCA8IDE2Mzg0XG4gICAgICAgICAgICAgPyBwYXJ0MCA8IDEyOCA/IDEgOiAyXG4gICAgICAgICAgICAgOiBwYXJ0MCA8IDIwOTcxNTIgPyAzIDogNFxuICAgICAgICAgICA6IHBhcnQxIDwgMTYzODRcbiAgICAgICAgICAgICA/IHBhcnQxIDwgMTI4ID8gNSA6IDZcbiAgICAgICAgICAgICA6IHBhcnQxIDwgMjA5NzE1MiA/IDcgOiA4XG4gICAgICAgICA6IHBhcnQyIDwgMTI4ID8gOSA6IDEwO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gZXhwb3J0cztcblxuLy8gdXNlZCB0byByZXR1cm4gYSBQcm9taXNlIHdoZXJlIGNhbGxiYWNrIGlzIG9taXR0ZWRcbnV0aWwuYXNQcm9taXNlID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2FzcHJvbWlzZVwiKTtcblxuLy8gY29udmVydHMgdG8gLyBmcm9tIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwuYmFzZTY0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Jhc2U2NFwiKTtcblxuLy8gYmFzZSBjbGFzcyBvZiBycGMuU2VydmljZVxudXRpbC5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyXCIpO1xuXG4vLyBmbG9hdCBoYW5kbGluZyBhY2Nyb3NzIGJyb3dzZXJzXG51dGlsLmZsb2F0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Zsb2F0XCIpO1xuXG4vLyByZXF1aXJlcyBtb2R1bGVzIG9wdGlvbmFsbHkgYW5kIGhpZGVzIHRoZSBjYWxsIGZyb20gYnVuZGxlcnNcbnV0aWwuaW5xdWlyZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9pbnF1aXJlXCIpO1xuXG4vLyBjb252ZXJ0cyB0byAvIGZyb20gdXRmOCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwudXRmOCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy91dGY4XCIpO1xuXG4vLyBwcm92aWRlcyBhIG5vZGUtbGlrZSBidWZmZXIgcG9vbCBpbiB0aGUgYnJvd3NlclxudXRpbC5wb29sID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL3Bvb2xcIik7XG5cbi8vIHV0aWxpdHkgdG8gd29yayB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZVxudXRpbC5Mb25nQml0cyA9IHJlcXVpcmUoXCIuL2xvbmdiaXRzXCIpO1xuXG4vKipcbiAqIFdoZXRoZXIgcnVubmluZyB3aXRoaW4gbm9kZSBvciBub3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbnV0aWwuaXNOb2RlID0gQm9vbGVhbih0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsLnByb2Nlc3NcbiAgICAgICAgICAgICAgICAgICAmJiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uc1xuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbC5wcm9jZXNzLnZlcnNpb25zLm5vZGUpO1xuXG4vKipcbiAqIEdsb2JhbCBvYmplY3QgcmVmZXJlbmNlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnV0aWwuZ2xvYmFsID0gdXRpbC5pc05vZGUgJiYgZ2xvYmFsXG4gICAgICAgICAgIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XG4gICAgICAgICAgIHx8IHR5cGVvZiBzZWxmICAgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZlxuICAgICAgICAgICB8fCB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4vKipcbiAqIEFuIGltbXVhYmxlIGVtcHR5IGFycmF5LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtBcnJheS48Kj59XG4gKiBAY29uc3RcbiAqL1xudXRpbC5lbXB0eUFycmF5ID0gT2JqZWN0LmZyZWV6ZSA/IE9iamVjdC5mcmVlemUoW10pIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gW107IC8vIHVzZWQgb24gcHJvdG90eXBlc1xuXG4vKipcbiAqIEFuIGltbXV0YWJsZSBlbXB0eSBvYmplY3QuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGNvbnN0XG4gKi9cbnV0aWwuZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplID8gT2JqZWN0LmZyZWV6ZSh7fSkgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7fTsgLy8gdXNlZCBvbiBwcm90b3R5cGVzXG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIGludGVnZXJcbiAqL1xudXRpbC5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIHN0cmluZy5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBzdHJpbmdcbiAqL1xudXRpbC5pc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG5vbi1udWxsIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBub24tbnVsbCBvYmplY3RcbiAqL1xudXRpbC5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIHV0aWwuaXNTZXR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc3NldCA9XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogUGxhaW4gb2JqZWN0IG9yIG1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgY29uc2lkZXJlZCB0byBiZSBwcmVzZW50LCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG51dGlsLmlzU2V0ID0gZnVuY3Rpb24gaXNTZXQob2JqLCBwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEsIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpID4gMDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgYSBtaW5pbWFsIHN0YW5kLWFsb25lIGRlZmluaXRpb24gb2YgYSBCdWZmZXIgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IG5vZGUncyB0eXBpbmdzLlxuICogQGludGVyZmFjZSBCdWZmZXJcbiAqIEBleHRlbmRzIFVpbnQ4QXJyYXlcbiAqL1xuXG4vKipcbiAqIE5vZGUncyBCdWZmZXIgY2xhc3MgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge0NvbnN0cnVjdG9yPEJ1ZmZlcj59XG4gKi9cbnV0aWwuQnVmZmVyID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBCdWZmZXIgPSB1dGlsLmlucXVpcmUoXCJidWZmZXJcIikuQnVmZmVyO1xuICAgICAgICAvLyByZWZ1c2UgdG8gdXNlIG5vbi1ub2RlIGJ1ZmZlcnMgaWYgbm90IGV4cGxpY2l0bHkgYXNzaWduZWQgKHBlcmYgcmVhc29ucyk6XG4gICAgICAgIHJldHVybiBCdWZmZXIucHJvdG90eXBlLnV0ZjhXcml0ZSA/IEJ1ZmZlciA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59KSgpO1xuXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZnVsbCBmb3IgQnVmZmVyLmZyb20uXG51dGlsLl9CdWZmZXJfZnJvbSA9IG51bGw7XG5cbi8vIEludGVybmFsIGFsaWFzIG9mIG9yIHBvbHlmaWxsIGZvciBCdWZmZXIuYWxsb2NVbnNhZmUuXG51dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYnVmZmVyIG9mIHdoYXRldmVyIHR5cGUgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfG51bWJlcltdfSBbc2l6ZU9yQXJyYXk9MF0gQnVmZmVyIHNpemUgb3IgbnVtYmVyIGFycmF5XG4gKiBAcmV0dXJucyB7VWludDhBcnJheXxCdWZmZXJ9IEJ1ZmZlclxuICovXG51dGlsLm5ld0J1ZmZlciA9IGZ1bmN0aW9uIG5ld0J1ZmZlcihzaXplT3JBcnJheSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHR5cGVvZiBzaXplT3JBcnJheSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IHV0aWwuQnVmZmVyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZShzaXplT3JBcnJheSlcbiAgICAgICAgICAgIDogbmV3IHV0aWwuQXJyYXkoc2l6ZU9yQXJyYXkpXG4gICAgICAgIDogdXRpbC5CdWZmZXJcbiAgICAgICAgICAgID8gdXRpbC5fQnVmZmVyX2Zyb20oc2l6ZU9yQXJyYXkpXG4gICAgICAgICAgICA6IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBzaXplT3JBcnJheVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoc2l6ZU9yQXJyYXkpO1xufTtcblxuLyoqXG4gKiBBcnJheSBpbXBsZW1lbnRhdGlvbiB1c2VkIGluIHRoZSBicm93c2VyLiBgVWludDhBcnJheWAgaWYgc3VwcG9ydGVkLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxVaW50OEFycmF5Pn1cbiAqL1xudXRpbC5BcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gVWludDhBcnJheSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA6IEFycmF5O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIExvbmcgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIGEgbWluaW1hbCBzdGFuZC1hbG9uZSBkZWZpbml0aW9uIG9mIGEgTG9uZyBpbnN0YW5jZS4gVGhlIGFjdHVhbCB0eXBlIGlzIHRoYXQgZXhwb3J0ZWQgYnkgbG9uZy5qcy5cbiAqIEBpbnRlcmZhY2UgTG9uZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvdyBMb3cgYml0c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGhpZ2ggSGlnaCBiaXRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKi9cblxuLyoqXG4gKiBMb25nLmpzJ3MgTG9uZyBjbGFzcyBpZiBhdmFpbGFibGUuXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8TG9uZz59XG4gKi9cbnV0aWwuTG9uZyA9IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8gJiYgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuZGNvZGVJTy5Mb25nXG4gICAgICAgICB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLmdsb2JhbC5Mb25nXG4gICAgICAgICB8fCB1dGlsLmlucXVpcmUoXCJsb25nXCIpO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSAyIGJpdCAoYGJvb2xgKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkyUmUgPSAvXnRydWV8ZmFsc2V8MHwxJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDMyIGJpdCAoYGludDMyYCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkzMlJlID0gL14tPyg/OjB8WzEtOV1bMC05XSopJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDY0IGJpdCAoYGludDY0YCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXk2NFJlID0gL14oPzpbXFxcXHgwMC1cXFxceGZmXXs4fXwtPyg/OjB8WzEtOV1bMC05XSopKSQvO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIG9yIGxvbmcgdG8gYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbnV0aWwubG9uZ1RvSGFzaCA9IGZ1bmN0aW9uIGxvbmdUb0hhc2godmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyB1dGlsLkxvbmdCaXRzLmZyb20odmFsdWUpLnRvSGFzaCgpXG4gICAgICAgIDogdXRpbC5Mb25nQml0cy56ZXJvSGFzaDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcgdG8gYSBsb25nIG9yIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge0xvbmd8bnVtYmVyfSBPcmlnaW5hbCB2YWx1ZVxuICovXG51dGlsLmxvbmdGcm9tSGFzaCA9IGZ1bmN0aW9uIGxvbmdGcm9tSGFzaChoYXNoLCB1bnNpZ25lZCkge1xuICAgIHZhciBiaXRzID0gdXRpbC5Mb25nQml0cy5mcm9tSGFzaChoYXNoKTtcbiAgICBpZiAodXRpbC5Mb25nKVxuICAgICAgICByZXR1cm4gdXRpbC5Mb25nLmZyb21CaXRzKGJpdHMubG8sIGJpdHMuaGksIHVuc2lnbmVkKTtcbiAgICByZXR1cm4gYml0cy50b051bWJlcihCb29sZWFuKHVuc2lnbmVkKSk7XG59O1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc291cmNlIG9iamVjdCBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZHN0IERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gc3JjIFNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmTm90U2V0PWZhbHNlXSBNZXJnZXMgb25seSBpZiB0aGUga2V5IGlzIG5vdCBhbHJlYWR5IHNldFxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXN0aW5hdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoZHN0LCBzcmMsIGlmTm90U2V0KSB7IC8vIHVzZWQgYnkgY29udmVydGVyc1xuICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChkc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCB8fCAhaWZOb3RTZXQpXG4gICAgICAgICAgICBkc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgcmV0dXJuIGRzdDtcbn1cblxudXRpbC5tZXJnZSA9IG1lcmdlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgdG8gbG93ZXIgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcbiAqL1xudXRpbC5sY0ZpcnN0ID0gZnVuY3Rpb24gbGNGaXJzdChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGN1c3RvbSBlcnJvciBjb25zdHJ1Y3Rvci5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFcnJvciBuYW1lXG4gKiBAcmV0dXJucyB7Q29uc3RydWN0b3I8RXJyb3I+fSBDdXN0b20gZXJyb3IgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gbmV3RXJyb3IobmFtZSkge1xuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXJyb3IobWVzc2FnZSwgcHJvcGVydGllcykge1xuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDdXN0b21FcnJvcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgICAgIC8vIF4ganVzdCByZXR1cm5zIGEgbmV3IGVycm9yIGluc3RhbmNlIGJlY2F1c2UgdGhlIGN0b3IgY2FuIGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uXG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVzc2FnZVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtZXNzYWdlOyB9IH0pO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgLy8gbm9kZVxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ3VzdG9tRXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGFja1wiLCB7IHZhbHVlOiBuZXcgRXJyb3IoKS5zdGFjayB8fCBcIlwiIH0pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgbWVyZ2UodGhpcywgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgQ3VzdG9tRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgIHZhbHVlOiBDdXN0b21FcnJvcixcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgeyByZXR1cm4gbmFtZTsgfSxcbiAgICAgICAgICAgIHNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBjb25maWd1cmFibGU6IGZhbHNlIHdvdWxkIGFjY3VyYXRlbHkgcHJlc2VydmUgdGhlIGJlaGF2aW9yIG9mXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwsIGJ1dCBJJ20gZ3Vlc3NpbmcgdGhhdCB3YXMgbm90IGludGVudGlvbmFsLlxuICAgICAgICAgICAgLy8gRm9yIGFuIGFjdHVhbCBlcnJvciBzdWJjbGFzcywgdGhpcyBwcm9wZXJ0eSB3b3VsZFxuICAgICAgICAgICAgLy8gYmUgY29uZmlndXJhYmxlLlxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB0b1N0cmluZzoge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkgeyByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlOyB9LFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBDdXN0b21FcnJvcjtcbn1cblxudXRpbC5uZXdFcnJvciA9IG5ld0Vycm9yO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcHJvdG9jb2wgZXJyb3IuXG4gKiBAY2xhc3NkZXNjIEVycm9yIHN1YmNsYXNzIGluZGljYXRpbmcgYSBwcm90b2NvbCBzcGVjaWZjIGVycm9yLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIEFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQGV4YW1wbGVcbiAqIHRyeSB7XG4gKiAgICAgTXlNZXNzYWdlLmRlY29kZShzb21lQnVmZmVyKTsgLy8gdGhyb3dzIGlmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICogfSBjYXRjaCAoZSkge1xuICogICAgIGlmIChlIGluc3RhbmNlb2YgUHJvdG9jb2xFcnJvciAmJiBlLmluc3RhbmNlKVxuICogICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZWQgc28gZmFyOiBcIiArIEpTT04uc3RyaW5naWZ5KGUuaW5zdGFuY2UpKTtcbiAqIH1cbiAqL1xudXRpbC5Qcm90b2NvbEVycm9yID0gbmV3RXJyb3IoXCJQcm90b2NvbEVycm9yXCIpO1xuXG4vKipcbiAqIFNvIGZhciBkZWNvZGVkIG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAbmFtZSB1dGlsLlByb3RvY29sRXJyb3IjaW5zdGFuY2VcbiAqIEB0eXBlIHtNZXNzYWdlPFQ+fVxuICovXG5cbi8qKlxuICogQSBPbmVPZiBnZXR0ZXIgYXMgcmV0dXJuZWQgYnkge0BsaW5rIHV0aWwub25lT2ZHZXR0ZXJ9LlxuICogQHR5cGVkZWYgT25lT2ZHZXR0ZXJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBTZXQgZmllbGQgbmFtZSwgaWYgYW55XG4gKi9cblxuLyoqXG4gKiBCdWlsZHMgYSBnZXR0ZXIgZm9yIGEgb25lb2YncyBwcmVzZW50IGZpZWxkIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXG4gKiBAcmV0dXJucyB7T25lT2ZHZXR0ZXJ9IFVuYm91bmQgZ2V0dGVyXG4gKi9cbnV0aWwub25lT2ZHZXR0ZXIgPSBmdW5jdGlvbiBnZXRPbmVPZihmaWVsZE5hbWVzKSB7XG4gICAgdmFyIGZpZWxkTWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICBmaWVsZE1hcFtmaWVsZE5hbWVzW2ldXSA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxuICAgICAqIEB0aGlzIE9iamVjdFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpLCBpID0ga2V5cy5sZW5ndGggLSAxOyBpID4gLTE7IC0taSlcbiAgICAgICAgICAgIGlmIChmaWVsZE1hcFtrZXlzW2ldXSA9PT0gMSAmJiB0aGlzW2tleXNbaV1dICE9PSB1bmRlZmluZWQgJiYgdGhpc1trZXlzW2ldXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5c1tpXTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBIE9uZU9mIHNldHRlciBhcyByZXR1cm5lZCBieSB7QGxpbmsgdXRpbC5vbmVPZlNldHRlcn0uXG4gKiBAdHlwZWRlZiBPbmVPZlNldHRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSB2YWx1ZSBGaWVsZCBuYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogQnVpbGRzIGEgc2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZmllbGROYW1lcyBGaWVsZCBuYW1lc1xuICogQHJldHVybnMge09uZU9mU2V0dGVyfSBVbmJvdW5kIHNldHRlclxuICovXG51dGlsLm9uZU9mU2V0dGVyID0gZnVuY3Rpb24gc2V0T25lT2YoZmllbGROYW1lcykge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHRoaXMgT2JqZWN0XG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWVzW2ldICE9PSBuYW1lKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2ZpZWxkTmFtZXNbaV1dO1xuICAgIH07XG59O1xuXG4vKipcbiAqIERlZmF1bHQgY29udmVyc2lvbiBvcHRpb25zIHVzZWQgZm9yIHtAbGluayBNZXNzYWdlI3RvSlNPTn0gaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIFRoZXNlIG9wdGlvbnMgYXJlIGNsb3NlIHRvIHByb3RvMydzIEpTT04gbWFwcGluZyB3aXRoIHRoZSBleGNlcHRpb24gdGhhdCBpbnRlcm5hbCB0eXBlcyBsaWtlIEFueSBhcmUgaGFuZGxlZCBqdXN0IGxpa2UgbWVzc2FnZXMuIE1vcmUgcHJlY2lzZWx5OlxuICpcbiAqIC0gTG9uZ3MgYmVjb21lIHN0cmluZ3NcbiAqIC0gRW51bXMgYmVjb21lIHN0cmluZyBrZXlzXG4gKiAtIEJ5dGVzIGJlY29tZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKiAtIChTdWItKU1lc3NhZ2VzIGJlY29tZSBwbGFpbiBvYmplY3RzXG4gKiAtIE1hcHMgYmVjb21lIHBsYWluIG9iamVjdHMgd2l0aCBhbGwgc3RyaW5nIGtleXNcbiAqIC0gUmVwZWF0ZWQgZmllbGRzIGJlY29tZSBhcnJheXNcbiAqIC0gTmFOIGFuZCBJbmZpbml0eSBmb3IgZmxvYXQgYW5kIGRvdWJsZSBmaWVsZHMgYmVjb21lIHN0cmluZ3NcbiAqXG4gKiBAdHlwZSB7SUNvbnZlcnNpb25PcHRpb25zfVxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zP2hsPWVuI2pzb25cbiAqL1xudXRpbC50b0pTT05PcHRpb25zID0ge1xuICAgIGxvbmdzOiBTdHJpbmcsXG4gICAgZW51bXM6IFN0cmluZyxcbiAgICBieXRlczogU3RyaW5nLFxuICAgIGpzb246IHRydWVcbn07XG5cbi8vIFNldHMgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudCAoY2FsbGVkIGluIGluZGV4LW1pbmltYWwpXG51dGlsLl9jb25maWd1cmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgQnVmZmVyID0gdXRpbC5CdWZmZXI7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFCdWZmZXIpIHtcbiAgICAgICAgdXRpbC5fQnVmZmVyX2Zyb20gPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJlY2F1c2Ugbm9kZSA0LnggYnVmZmVycyBhcmUgaW5jb21wYXRpYmxlICYgaW1tdXRhYmxlXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9wcm90b2J1Zi5qcy9wdWxsLzY2NVxuICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSAmJiBCdWZmZXIuZnJvbSB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfZnJvbSh2YWx1ZSwgZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlLCBlbmNvZGluZyk7XG4gICAgICAgIH07XG4gICAgdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gQnVmZmVyLmFsbG9jVW5zYWZlIHx8XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGZ1bmN0aW9uIEJ1ZmZlcl9hbGxvY1Vuc2FmZShzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICAgICAgfTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlcldyaXRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIGJhc2U2NCAgICA9IHV0aWwuYmFzZTY0LFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB3cml0ZXIgb3BlcmF0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIFVpbnQ4QXJyYXksIG51bWJlcil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhbHVlIHRvIHdyaXRlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIE9wKGZuLCBsZW4sIHZhbCkge1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oVWludDhBcnJheSwgbnVtYmVyLCAqKX1cbiAgICAgKi9cbiAgICB0aGlzLmZuID0gZm47XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBieXRlIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gbGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBvcGVyYXRpb24uXG4gICAgICogQHR5cGUge1dyaXRlci5PcHx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gd3JpdGUuXG4gICAgICogQHR5cGUgeyp9XG4gICAgICovXG4gICAgdGhpcy52YWwgPSB2YWw7IC8vIHR5cGUgdmFyaWVzXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBub29wKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIHN0YXRlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBDb3BpZWQgd3JpdGVyIHN0YXRlLlxuICogQG1lbWJlcm9mIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1dyaXRlcn0gd3JpdGVyIFdyaXRlciB0byBjb3B5IHN0YXRlIGZyb21cbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gU3RhdGUod3JpdGVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhlYWQuXG4gICAgICogQHR5cGUge1dyaXRlci5PcH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSB3cml0ZXIuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdGFpbC5cbiAgICAgKiBAdHlwZSB7V3JpdGVyLk9wfVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHdyaXRlci50YWlsO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSB3cml0ZXIubGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBzdGF0ZS5cbiAgICAgKiBAdHlwZSB7U3RhdGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm5leHQgPSB3cml0ZXIuc3RhdGVzO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gV3JpdGVyKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBsZW5ndGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxlbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIGhlYWQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIHRhaWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHRoaXMuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIExpbmtlZCBmb3JrZWQgc3RhdGVzLlxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnN0YXRlcyA9IG51bGw7XG5cbiAgICAvLyBXaGVuIGEgdmFsdWUgaXMgd3JpdHRlbiwgdGhlIHdyaXRlciBjYWxjdWxhdGVzIGl0cyBieXRlIGxlbmd0aCBhbmQgcHV0cyBpdCBpbnRvIGEgbGlua2VkXG4gICAgLy8gbGlzdCBvZiBvcGVyYXRpb25zIHRvIHBlcmZvcm0gd2hlbiBmaW5pc2goKSBpcyBjYWxsZWQuIFRoaXMgYm90aCBhbGxvd3MgdXMgdG8gYWxsb2NhdGVcbiAgICAvLyBidWZmZXJzIG9mIHRoZSBleGFjdCByZXF1aXJlZCBzaXplIGFuZCByZWR1Y2VzIHRoZSBhbW91bnQgb2Ygd29yayB3ZSBoYXZlIHRvIGRvIGNvbXBhcmVkXG4gICAgLy8gdG8gZmlyc3QgY2FsY3VsYXRpbmcgb3ZlciBvYmplY3RzIGFuZCB0aGVuIGVuY29kaW5nIG92ZXIgb2JqZWN0cy4gSW4gb3VyIGNhc2UsIHRoZSBlbmNvZGluZ1xuICAgIC8vIHBhcnQgaXMganVzdCBhIGxpbmtlZCBsaXN0IHdhbGsgY2FsbGluZyBvcGVyYXRpb25zIHdpdGggYWxyZWFkeSBwcmVwYXJlZCB2YWx1ZXMuXG59XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHV0aWwuQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcl9zZXR1cCgpIHtcbiAgICAgICAgICAgIHJldHVybiAoV3JpdGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJXcml0ZXIoKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlcigpO1xuICAgICAgICB9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHdyaXRlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcldyaXRlcnxXcml0ZXJ9IEEge0BsaW5rIEJ1ZmZlcldyaXRlcn0gd2hlbiBCdWZmZXJzIGFyZSBzdXBwb3J0ZWQsIG90aGVyd2lzZSBhIHtAbGluayBXcml0ZXJ9XG4gKi9cbldyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcblxuLyoqXG4gKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBCdWZmZXJcbiAqL1xuV3JpdGVyLmFsbG9jID0gZnVuY3Rpb24gYWxsb2Moc2l6ZSkge1xuICAgIHJldHVybiBuZXcgdXRpbC5BcnJheShzaXplKTtcbn07XG5cbi8vIFVzZSBVaW50OEFycmF5IGJ1ZmZlciBwb29sIGluIHRoZSBicm93c2VyLCBqdXN0IGxpa2Ugbm9kZSBkb2VzIHdpdGggYnVmZmVyc1xuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh1dGlsLkFycmF5ICE9PSBBcnJheSlcbiAgICBXcml0ZXIuYWxsb2MgPSB1dGlsLnBvb2woV3JpdGVyLmFsbG9jLCB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSk7XG5cbi8qKlxuICogUHVzaGVzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFVpbnQ4QXJyYXksIG51bWJlciwgKil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHByaXZhdGVcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5fcHVzaCA9IGZ1bmN0aW9uIHB1c2goZm4sIGxlbiwgdmFsKSB7XG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgT3AoZm4sIGxlbiwgdmFsKTtcbiAgICB0aGlzLmxlbiArPSBsZW47XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUJ5dGUodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3NdID0gdmFsICYgMjU1O1xufVxuXG5mdW5jdGlvbiB3cml0ZVZhcmludDMyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwgJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbCA+Pj49IDc7XG4gICAgfVxuICAgIGJ1Zltwb3NdID0gdmFsO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgdmFyaW50IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB2YXJpbnQgd3JpdGVyIG9wZXJhdGlvbi5cbiAqIEBleHRlbmRzIE9wXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gVmFyaW50T3AobGVuLCB2YWwpIHtcbiAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB0aGlzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWwgPSB2YWw7XG59XG5cblZhcmludE9wLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT3AucHJvdG90eXBlKTtcblZhcmludE9wLnByb3RvdHlwZS5mbiA9IHdyaXRlVmFyaW50MzI7XG5cbi8qKlxuICogV3JpdGVzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDMyID0gZnVuY3Rpb24gd3JpdGVfdWludDMyKHZhbHVlKSB7XG4gICAgLy8gaGVyZSwgdGhlIGNhbGwgdG8gdGhpcy5wdXNoIGhhcyBiZWVuIGlubGluZWQgYW5kIGEgdmFyaW50IHNwZWNpZmljIE9wIHN1YmNsYXNzIGlzIHVzZWQuXG4gICAgLy8gdWludDMyIGlzIGJ5IGZhciB0aGUgbW9zdCBmcmVxdWVudGx5IHVzZWQgb3BlcmF0aW9uIGFuZCBiZW5lZml0cyBzaWduaWZpY2FudGx5IGZyb20gdGhpcy5cbiAgICB0aGlzLmxlbiArPSAodGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgVmFyaW50T3AoXG4gICAgICAgICh2YWx1ZSA9IHZhbHVlID4+PiAwKVxuICAgICAgICAgICAgICAgIDwgMTI4ICAgICAgID8gMVxuICAgICAgICA6IHZhbHVlIDwgMTYzODQgICAgID8gMlxuICAgICAgICA6IHZhbHVlIDwgMjA5NzE1MiAgID8gM1xuICAgICAgICA6IHZhbHVlIDwgMjY4NDM1NDU2ID8gNFxuICAgICAgICA6ICAgICAgICAgICAgICAgICAgICAgNSxcbiAgICB2YWx1ZSkpLmxlbjtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ludDMyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgMFxuICAgICAgICA/IHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgMTAsIExvbmdCaXRzLmZyb21OdW1iZXIodmFsdWUpKSAvLyAxMCBieXRlcyBwZXIgc3BlY1xuICAgICAgICA6IHRoaXMudWludDMyKHZhbHVlKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgMzIgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX3NpbnQzMih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigodmFsdWUgPDwgMSBeIHZhbHVlID4+IDMxKSA+Pj4gMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVZhcmludDY0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsLmhpKSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9ICh2YWwubG8gPj4+IDcgfCB2YWwuaGkgPDwgMjUpID4+PiAwO1xuICAgICAgICB2YWwuaGkgPj4+PSA3O1xuICAgIH1cbiAgICB3aGlsZSAodmFsLmxvID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9IHZhbC5sbyA+Pj4gNztcbiAgICB9XG4gICAgYnVmW3BvcysrXSA9IHZhbC5sbztcbn1cblxuLyoqXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDY0ID0gZnVuY3Rpb24gd3JpdGVfdWludDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCBiaXRzLmxlbmd0aCgpLCBiaXRzKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuaW50NjQgPSBXcml0ZXIucHJvdG90eXBlLnVpbnQ2NDtcblxuLyoqXG4gKiBXcml0ZXMgYSBzaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zaW50NjQgPSBmdW5jdGlvbiB3cml0ZV9zaW50NjQodmFsdWUpIHtcbiAgICB2YXIgYml0cyA9IExvbmdCaXRzLmZyb20odmFsdWUpLnp6RW5jb2RlKCk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgYml0cy5sZW5ndGgoKSwgYml0cyk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGJvb2xpc2ggdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gd3JpdGVfYm9vbCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgdmFsdWUgPyAxIDogMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUZpeGVkMzIodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICAmIDI1NTtcbiAgICBidWZbcG9zICsgMV0gPSAgdmFsID4+PiA4ICAgJiAyNTU7XG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gMTYgICYgMjU1O1xuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xufVxuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgZml4ZWQgMzIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ZpeGVkMzIodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIHZhbHVlID4+PiAwKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBmaXhlZCAzMiBiaXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNmaXhlZDMyID0gV3JpdGVyLnByb3RvdHlwZS5maXhlZDMyO1xuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZpeGVkNjQgPSBmdW5jdGlvbiB3cml0ZV9maXhlZDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGJpdHMubG8pLl9wdXNoKHdyaXRlRml4ZWQzMiwgNCwgYml0cy5oaSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuc2ZpeGVkNjQgPSBXcml0ZXIucHJvdG90eXBlLmZpeGVkNjQ7XG5cbi8qKlxuICogV3JpdGVzIGEgZmxvYXQgKDMyIGJpdCkuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiB3cml0ZV9mbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHV0aWwuZmxvYXQud3JpdGVGbG9hdExFLCA0LCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5kb3VibGUgPSBmdW5jdGlvbiB3cml0ZV9kb3VibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh1dGlsLmZsb2F0LndyaXRlRG91YmxlTEUsIDgsIHZhbHVlKTtcbn07XG5cbnZhciB3cml0ZUJ5dGVzID0gdXRpbC5BcnJheS5wcm90b3R5cGUuc2V0XG4gICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNfZm9yKHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBidWZbcG9zICsgaV0gPSB2YWxbaV07XG4gICAgfTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzZXF1ZW5jZSBvZiBieXRlcy5cbiAqIEBwYXJhbSB7VWludDhBcnJheXxzdHJpbmd9IHZhbHVlIEJ1ZmZlciBvciBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXModmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIGlmICghbGVuKVxuICAgICAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB2YXIgYnVmID0gV3JpdGVyLmFsbG9jKGxlbiA9IGJhc2U2NC5sZW5ndGgodmFsdWUpKTtcbiAgICAgICAgYmFzZTY0LmRlY29kZSh2YWx1ZSwgYnVmLCAwKTtcbiAgICAgICAgdmFsdWUgPSBidWY7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVpbnQzMihsZW4pLl9wdXNoKHdyaXRlQnl0ZXMsIGxlbiwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZyh2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGY4Lmxlbmd0aCh2YWx1ZSk7XG4gICAgcmV0dXJuIGxlblxuICAgICAgICA/IHRoaXMudWludDMyKGxlbikuX3B1c2godXRmOC53cml0ZSwgbGVuLCB2YWx1ZSlcbiAgICAgICAgOiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgMCk7XG59O1xuXG4vKipcbiAqIEZvcmtzIHRoaXMgd3JpdGVyJ3Mgc3RhdGUgYnkgcHVzaGluZyBpdCB0byBhIHN0YWNrLlxuICogQ2FsbGluZyB7QGxpbmsgV3JpdGVyI3Jlc2V0fHJlc2V0fSBvciB7QGxpbmsgV3JpdGVyI2xkZWxpbXxsZGVsaW19IHJlc2V0cyB0aGUgd3JpdGVyIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZvcmsgPSBmdW5jdGlvbiBmb3JrKCkge1xuICAgIHRoaXMuc3RhdGVzID0gbmV3IFN0YXRlKHRoaXMpO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyBPcChub29wLCAwLCAwKTtcbiAgICB0aGlzLmxlbiA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc2V0cyB0aGlzIGluc3RhbmNlIHRvIHRoZSBsYXN0IHN0YXRlLlxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZXMpIHtcbiAgICAgICAgdGhpcy5oZWFkICAgPSB0aGlzLnN0YXRlcy5oZWFkO1xuICAgICAgICB0aGlzLnRhaWwgICA9IHRoaXMuc3RhdGVzLnRhaWw7XG4gICAgICAgIHRoaXMubGVuICAgID0gdGhpcy5zdGF0ZXMubGVuO1xuICAgICAgICB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzLm5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbmV3IE9wKG5vb3AsIDAsIDApO1xuICAgICAgICB0aGlzLmxlbiAgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVzZXRzIHRvIHRoZSBsYXN0IHN0YXRlIGFuZCBhcHBlbmRzIHRoZSBmb3JrIHN0YXRlJ3MgY3VycmVudCB3cml0ZSBsZW5ndGggYXMgYSB2YXJpbnQgZm9sbG93ZWQgYnkgaXRzIG9wZXJhdGlvbnMuXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5sZGVsaW0gPSBmdW5jdGlvbiBsZGVsaW0oKSB7XG4gICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQsXG4gICAgICAgIHRhaWwgPSB0aGlzLnRhaWwsXG4gICAgICAgIGxlbiAgPSB0aGlzLmxlbjtcbiAgICB0aGlzLnJlc2V0KCkudWludDMyKGxlbik7XG4gICAgaWYgKGxlbikge1xuICAgICAgICB0aGlzLnRhaWwubmV4dCA9IGhlYWQubmV4dDsgLy8gc2tpcCBub29wXG4gICAgICAgIHRoaXMudGFpbCA9IHRhaWw7XG4gICAgICAgIHRoaXMubGVuICs9IGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gRmluaXNoZWQgYnVmZmVyXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIHZhciBoZWFkID0gdGhpcy5oZWFkLm5leHQsIC8vIHNraXAgbm9vcFxuICAgICAgICBidWYgID0gdGhpcy5jb25zdHJ1Y3Rvci5hbGxvYyh0aGlzLmxlbiksXG4gICAgICAgIHBvcyAgPSAwO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICAgIGhlYWQuZm4oaGVhZC52YWwsIGJ1ZiwgcG9zKTtcbiAgICAgICAgcG9zICs9IGhlYWQubGVuO1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICAvLyB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHJldHVybiBidWY7XG59O1xuXG5Xcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlcldyaXRlcl8pIHtcbiAgICBCdWZmZXJXcml0ZXIgPSBCdWZmZXJXcml0ZXJfO1xuICAgIFdyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcbiAgICBCdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xuXG4vLyBleHRlbmRzIFdyaXRlclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbihCdWZmZXJXcml0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJXcml0ZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHdyaXRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgd3JpdGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcbn1cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxuICAgICAqL1xuICAgIEJ1ZmZlcldyaXRlci5hbGxvYyA9IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZTtcblxuICAgIEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyID0gdXRpbC5CdWZmZXIgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2V0Lm5hbWUgPT09IFwic2V0XCJcbiAgICAgICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxuICAgICAgICAgIC8vIGFsc28gd29ya3MgZm9yIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9jb3B5KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBpZiAodmFsLmNvcHkpIC8vIEJ1ZmZlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xuICAgICAgICB9O1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXNfYnVmZmVyKHZhbHVlKSB7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKVxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaChCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVN0cmluZ0J1ZmZlcih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgaWYgKHZhbC5sZW5ndGggPCA0MCkgLy8gcGxhaW4ganMgaXMgZmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIChwcm9iYWJseSBkdWUgdG8gcmVkdW5kYW50IGFzc2VydGlvbnMpXG4gICAgICAgIHV0aWwudXRmOC53cml0ZSh2YWwsIGJ1ZiwgcG9zKTtcbiAgICBlbHNlIGlmIChidWYudXRmOFdyaXRlKVxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcbiAgICBlbHNlXG4gICAgICAgIGJ1Zi53cml0ZSh2YWwsIHBvcyk7XG59XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nX2J1ZmZlcih2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGlsLkJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAbmFtZSBCdWZmZXJXcml0ZXIjZmluaXNoXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlKCk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlclJlYWRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGluZGV4T3V0T2ZSYW5nZShyZWFkZXIsIHdyaXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIFJhbmdlRXJyb3IoXCJpbmRleCBvdXQgb2YgcmFuZ2U6IFwiICsgcmVhZGVyLnBvcyArIFwiICsgXCIgKyAod3JpdGVMZW5ndGggfHwgMSkgKyBcIiA+IFwiICsgcmVhZGVyLmxlbik7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyByZWFkZXIgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBgVWludDhBcnJheWAgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICovXG5mdW5jdGlvbiBSZWFkZXIoYnVmZmVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlci5cbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmJ1ZiA9IGJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyIHBvc2l0aW9uLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wb3MgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSBidWZmZXIubGVuZ3RoO1xufVxuXG52YXIgY3JlYXRlX2FycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/IGZ1bmN0aW9uIGNyZWF0ZV90eXBlZF9hcnJheShidWZmZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgQXJyYXkuaXNBcnJheShidWZmZXIpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJpbGxlZ2FsIGJ1ZmZlclwiKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIGNyZWF0ZV9hcnJheShidWZmZXIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYnVmZmVyKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XG4gICAgfTtcblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gdXRpbC5CdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyX3NldHVwKGJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFkZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcihidWZmZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5CdWZmZXIuaXNCdWZmZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBCdWZmZXJSZWFkZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZV9hcnJheShidWZmZXIpO1xuICAgICAgICAgICAgfSkoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IGNyZWF0ZV9hcnJheTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyByZWFkZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VWludDhBcnJheXxCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKiBAcmV0dXJucyB7UmVhZGVyfEJ1ZmZlclJlYWRlcn0gQSB7QGxpbmsgQnVmZmVyUmVhZGVyfSBpZiBgYnVmZmVyYCBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGEge0BsaW5rIFJlYWRlcn1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgYnVmZmVyYCBpcyBub3QgYSB2YWxpZCBidWZmZXJcbiAqL1xuUmVhZGVyLmNyZWF0ZSA9IGNyZWF0ZSgpO1xuXG5SZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQXJyYXkucHJvdG90eXBlLnN1YmFycmF5IHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnVpbnQzMiA9IChmdW5jdGlvbiByZWFkX3VpbnQzMl9zZXR1cCgpIHtcbiAgICB2YXIgdmFsdWUgPSA0Mjk0OTY3Mjk1OyAvLyBvcHRpbWl6ZXIgdHlwZS1oaW50LCB0ZW5kcyB0byBkZW9wdCBvdGhlcndpc2UgKD8hKVxuICAgIHJldHVybiBmdW5jdGlvbiByZWFkX3VpbnQzMigpIHtcbiAgICAgICAgdmFsdWUgPSAoICAgICAgICAgdGhpcy5idWZbdGhpcy5wb3NdICYgMTI3ICAgICAgICkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8ICA3KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMTQpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAyMSkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAgMTUpIDw8IDI4KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICgodGhpcy5wb3MgKz0gNSkgPiB0aGlzLmxlbikge1xuICAgICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLmxlbjtcbiAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHJlYWRfaW50MzIoKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCB2YXJpbnQgYXMgYSBzaWduZWQgMzIgYml0IHZhbHVlLlxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ludDMyKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMudWludDMyKCk7XG4gICAgcmV0dXJuIHZhbHVlID4+PiAxIF4gLSh2YWx1ZSAmIDEpIHwgMDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuXG5mdW5jdGlvbiByZWFkTG9uZ1ZhcmludCgpIHtcbiAgICAvLyB0ZW5kcyB0byBkZW9wdCB3aXRoIGxvY2FsIHZhcnMgZm9yIG9jdGV0IGV0Yy5cbiAgICB2YXIgYml0cyA9IG5ldyBMb25nQml0cygwLCAwKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgaWYgKHRoaXMubGVuIC0gdGhpcy5wb3MgPiA0KSB7IC8vIGZhc3Qgcm91dGUgKGxvKVxuICAgICAgICBmb3IgKDsgaSA8IDQ7ICsraSkge1xuICAgICAgICAgICAgLy8gMXN0Li40dGhcbiAgICAgICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLyA1dGhcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjgpID4+PiAwO1xuICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA+PiAgNCkgPj4+IDA7XG4gICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICBpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IDM7ICsraSkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgLy8gMXN0Li4zdGhcbiAgICAgICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLyA0dGhcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zKytdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgIHJldHVybiBiaXRzO1xuICAgIH1cbiAgICBpZiAodGhpcy5sZW4gLSB0aGlzLnBvcyA+IDQpIHsgLy8gZmFzdCByb3V0ZSAoaGkpXG4gICAgICAgIGZvciAoOyBpIDwgNTsgKytpKSB7XG4gICAgICAgICAgICAvLyA2dGguLjEwdGhcbiAgICAgICAgICAgIGJpdHMuaGkgPSAoYml0cy5oaSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3ICsgMykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgLy8gNnRoLi4xMHRoXG4gICAgICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNyArIDMpID4+PiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHZhcmludCBlbmNvZGluZ1wiKTtcbn1cblxuLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjaW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDY0IGJpdCB2YWx1ZS5cbiAqIEBuYW1lIFJlYWRlciN1aW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjc2ludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIGJvb2xlYW4uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmJvb2wgPSBmdW5jdGlvbiByZWFkX2Jvb2woKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgIT09IDA7XG59O1xuXG5mdW5jdGlvbiByZWFkRml4ZWQzMl9lbmQoYnVmLCBlbmQpIHsgLy8gbm90ZSB0aGF0IHRoaXMgdXNlcyBgZW5kYCwgbm90IGBwb3NgXG4gICAgcmV0dXJuIChidWZbZW5kIC0gNF1cbiAgICAgICAgICB8IGJ1ZltlbmQgLSAzXSA8PCA4XG4gICAgICAgICAgfCBidWZbZW5kIC0gMl0gPDwgMTZcbiAgICAgICAgICB8IGJ1ZltlbmQgLSAxXSA8PCAyNCkgPj4+IDA7XG59XG5cbi8qKlxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCAzMiBiaXQgaW50ZWdlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5maXhlZDMyID0gZnVuY3Rpb24gcmVhZF9maXhlZDMyKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICByZXR1cm4gcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KTtcbn07XG5cbi8qKlxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhIHNpZ25lZCAzMiBiaXQgaW50ZWdlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ZpeGVkMzIoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA0ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHJldHVybiByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpIHwgMDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuXG5mdW5jdGlvbiByZWFkRml4ZWQ2NCgvKiB0aGlzOiBSZWFkZXIgKi8pIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDggPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDgpO1xuXG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhyZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpLCByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpKTtcbn1cblxuLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuLyoqXG4gKiBSZWFkcyBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI2ZpeGVkNjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIHppZy16YWcgZW5jb2RlZCBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI3NmaXhlZDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIGZsb2F0ICgzMiBiaXQpIGFzIGEgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiByZWFkX2Zsb2F0KCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICB2YXIgdmFsdWUgPSB1dGlsLmZsb2F0LnJlYWRGbG9hdExFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgdGhpcy5wb3MgKz0gNDtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgZG91YmxlICg2NCBiaXQgZmxvYXQpIGFzIGEgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gcmVhZF9kb3VibGUoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHZhciB2YWx1ZSA9IHV0aWwuZmxvYXQucmVhZERvdWJsZUxFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgdGhpcy5wb3MgKz0gODtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gcmVhZF9ieXRlcygpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy51aW50MzIoKSxcbiAgICAgICAgc3RhcnQgID0gdGhpcy5wb3MsXG4gICAgICAgIGVuZCAgICA9IHRoaXMucG9zICsgbGVuZ3RoO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVuZCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgbGVuZ3RoKTtcblxuICAgIHRoaXMucG9zICs9IGxlbmd0aDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmJ1ZikpIC8vIHBsYWluIGFycmF5XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIGlmIChzdGFydCA9PT0gZW5kKSB7IC8vIGZpeCBmb3IgSUUgMTAvV2luOCBhbmQgb3RoZXJzJyBzdWJhcnJheSByZXR1cm5pbmcgYXJyYXkgb2Ygc2l6ZSAxXG4gICAgICAgIHZhciBuYXRpdmVCdWZmZXIgPSB1dGlsLkJ1ZmZlcjtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUJ1ZmZlclxuICAgICAgICAgICAgPyBuYXRpdmVCdWZmZXIuYWxsb2MoMClcbiAgICAgICAgICAgIDogbmV3IHRoaXMuYnVmLmNvbnN0cnVjdG9yKDApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2xpY2UuY2FsbCh0aGlzLmJ1Ziwgc3RhcnQsIGVuZCk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc3RyaW5nIHByZWNlZWRlZCBieSBpdHMgYnl0ZSBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmcoKSB7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5ieXRlcygpO1xuICAgIHJldHVybiB1dGY4LnJlYWQoYnl0ZXMsIDAsIGJ5dGVzLmxlbmd0aCk7XG59O1xuXG4vKipcbiAqIFNraXBzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJ5dGVzIGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIHNraXBzIGEgdmFyaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIExlbmd0aCBpZiBrbm93biwgb3RoZXJ3aXNlIGEgdmFyaW50IGlzIGFzc3VtZWRcbiAqIEByZXR1cm5zIHtSZWFkZXJ9IGB0aGlzYFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAodGhpcy5wb3MgKyBsZW5ndGggPiB0aGlzLmxlbilcbiAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCBsZW5ndGgpO1xuICAgICAgICB0aGlzLnBvcyArPSBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICB9IHdoaWxlICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSAmIDEyOCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTa2lwcyB0aGUgbmV4dCBlbGVtZW50IG9mIHRoZSBzcGVjaWZpZWQgd2lyZSB0eXBlLlxuICogQHBhcmFtIHtudW1iZXJ9IHdpcmVUeXBlIFdpcmUgdHlwZSByZWNlaXZlZFxuICogQHJldHVybnMge1JlYWRlcn0gYHRoaXNgXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2tpcFR5cGUgPSBmdW5jdGlvbih3aXJlVHlwZSkge1xuICAgIHN3aXRjaCAod2lyZVR5cGUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdGhpcy5za2lwKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhpcy5za2lwKDgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHRoaXMuc2tpcCh0aGlzLnVpbnQzMigpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB3aGlsZSAoKHdpcmVUeXBlID0gdGhpcy51aW50MzIoKSAmIDcpICE9PSA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwVHlwZSh3aXJlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdGhpcy5za2lwKDQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB3aXJlIHR5cGUgXCIgKyB3aXJlVHlwZSArIFwiIGF0IG9mZnNldCBcIiArIHRoaXMucG9zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlclJlYWRlcl8pIHtcbiAgICBCdWZmZXJSZWFkZXIgPSBCdWZmZXJSZWFkZXJfO1xuICAgIFJlYWRlci5jcmVhdGUgPSBjcmVhdGUoKTtcbiAgICBCdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSgpO1xuXG4gICAgdmFyIGZuID0gdXRpbC5Mb25nID8gXCJ0b0xvbmdcIiA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFwidG9OdW1iZXJcIjtcbiAgICB1dGlsLm1lcmdlKFJlYWRlci5wcm90b3R5cGUsIHtcblxuICAgICAgICBpbnQ2NDogZnVuY3Rpb24gcmVhZF9pbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpW2ZuXShmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdWludDY0OiBmdW5jdGlvbiByZWFkX3VpbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpW2ZuXSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaW50NjQ6IGZ1bmN0aW9uIHJlYWRfc2ludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcykuenpEZWNvZGUoKVtmbl0oZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpeGVkNjQ6IGZ1bmN0aW9uIHJlYWRfZml4ZWQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRml4ZWQ2NC5jYWxsKHRoaXMpW2ZuXSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZml4ZWQ2NDogZnVuY3Rpb24gcmVhZF9zZml4ZWQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRml4ZWQ2NC5jYWxsKHRoaXMpW2ZuXShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyUmVhZGVyO1xuXG4vLyBleHRlbmRzIFJlYWRlclxudmFyIFJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbihCdWZmZXJSZWFkZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWFkZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJSZWFkZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHJlYWRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgcmVhZGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFJlYWRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cbiAqL1xuZnVuY3Rpb24gQnVmZmVyUmVhZGVyKGJ1ZmZlcikge1xuICAgIFJlYWRlci5jYWxsKHRoaXMsIGJ1ZmZlcik7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlci5cbiAgICAgKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnVmXG4gICAgICogQHR5cGUge0J1ZmZlcn1cbiAgICAgKi9cbn1cblxuQnVmZmVyUmVhZGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodXRpbC5CdWZmZXIpXG4gICAgICAgIEJ1ZmZlclJlYWRlci5wcm90b3R5cGUuX3NsaWNlID0gdXRpbC5CdWZmZXIucHJvdG90eXBlLnNsaWNlO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJSZWFkZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHJlYWRfc3RyaW5nX2J1ZmZlcigpIHtcbiAgICB2YXIgbGVuID0gdGhpcy51aW50MzIoKTsgLy8gbW9kaWZpZXMgcG9zXG4gICAgcmV0dXJuIHRoaXMuYnVmLnV0ZjhTbGljZVxuICAgICAgICA/IHRoaXMuYnVmLnV0ZjhTbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKVxuICAgICAgICA6IHRoaXMuYnVmLnRvU3RyaW5nKFwidXRmLThcIiwgdGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnl0ZXNcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcn0gVmFsdWUgcmVhZFxuICovXG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlKCk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLy8gRXh0ZW5kcyBFdmVudEVtaXR0ZXJcbihTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodXRpbC5FdmVudEVtaXR0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBTZXJ2aWNlO1xuXG4vKipcbiAqIEEgc2VydmljZSBtZXRob2QgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgcnBjLlNlcnZpY2VNZXRob2R8U2VydmljZU1ldGhvZH0uXG4gKlxuICogRGlmZmVycyBmcm9tIHtAbGluayBSUENJbXBsQ2FsbGJhY2t9IGluIHRoYXQgaXQgaXMgYW4gYWN0dWFsIGNhbGxiYWNrIG9mIGEgc2VydmljZSBtZXRob2Qgd2hpY2ggbWF5IG5vdCByZXR1cm4gYHJlc3BvbnNlID0gbnVsbGAuXG4gKiBAdHlwZWRlZiBycGMuU2VydmljZU1ldGhvZENhbGxiYWNrXG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueVxuICogQHBhcmFtIHtUUmVzfSBbcmVzcG9uc2VdIFJlc3BvbnNlIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBBIHNlcnZpY2UgbWV0aG9kIHBhcnQgb2YgYSB7QGxpbmsgcnBjLlNlcnZpY2V9IGFzIGNyZWF0ZWQgYnkge0BsaW5rIFNlcnZpY2UuY3JlYXRlfS5cbiAqIEB0eXBlZGVmIHJwYy5TZXJ2aWNlTWV0aG9kXG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtUUmVxfFByb3BlcnRpZXM8VFJlcT59IHJlcXVlc3QgUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtycGMuU2VydmljZU1ldGhvZENhbGxiYWNrPFRSZXM+fSBbY2FsbGJhY2tdIE5vZGUtc3R5bGUgY2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIGVycm9yLCBpZiBhbnksIGFuZCB0aGUgcmVzcG9uc2UgbWVzc2FnZVxuICogQHJldHVybnMge1Byb21pc2U8TWVzc2FnZTxUUmVzPj59IFByb21pc2UgaWYgYGNhbGxiYWNrYCBoYXMgYmVlbiBvbWl0dGVkLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgUlBDIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFuIFJQQyBzZXJ2aWNlIGFzIHJldHVybmVkIGJ5IHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0uXG4gKiBAZXhwb3J0cyBycGMuU2VydmljZVxuICogQGV4dGVuZHMgdXRpbC5FdmVudEVtaXR0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSUENJbXBsfSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICogQHBhcmFtIHtib29sZWFufSBbcmVzcG9uc2VEZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkXG4gKi9cbmZ1bmN0aW9uIFNlcnZpY2UocnBjSW1wbCwgcmVxdWVzdERlbGltaXRlZCwgcmVzcG9uc2VEZWxpbWl0ZWQpIHtcblxuICAgIGlmICh0eXBlb2YgcnBjSW1wbCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJycGNJbXBsIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIHV0aWwuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBSUEMgaW1wbGVtZW50YXRpb24uIEJlY29tZXMgYG51bGxgIG9uY2UgdGhlIHNlcnZpY2UgaXMgZW5kZWQuXG4gICAgICogQHR5cGUge1JQQ0ltcGx8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJwY0ltcGwgPSBycGNJbXBsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3REZWxpbWl0ZWQgPSBCb29sZWFuKHJlcXVlc3REZWxpbWl0ZWQpO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZURlbGltaXRlZCA9IEJvb2xlYW4ocmVzcG9uc2VEZWxpbWl0ZWQpO1xufVxuXG4vKipcbiAqIENhbGxzIGEgc2VydmljZSBtZXRob2QgdGhyb3VnaCB7QGxpbmsgcnBjLlNlcnZpY2UjcnBjSW1wbHxycGNJbXBsfS5cbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPFRSZXEsVFJlcz59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZFxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVxPn0gcmVxdWVzdEN0b3IgUmVxdWVzdCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVzPn0gcmVzcG9uc2VDdG9yIFJlc3BvbnNlIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1RSZXF8UHJvcGVydGllczxUUmVxPn0gcmVxdWVzdCBSZXF1ZXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0XG4gKiBAcGFyYW0ge3JwYy5TZXJ2aWNlTWV0aG9kQ2FsbGJhY2s8VFJlcz59IGNhbGxiYWNrIFNlcnZpY2UgY2FsbGJhY2tcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5ycGNDYWxsID0gZnVuY3Rpb24gcnBjQ2FsbChtZXRob2QsIHJlcXVlc3RDdG9yLCByZXNwb25zZUN0b3IsIHJlcXVlc3QsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXJlcXVlc3QpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlcXVlc3QgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIHV0aWwuYXNQcm9taXNlKHJwY0NhbGwsIHNlbGYsIG1ldGhvZCwgcmVxdWVzdEN0b3IsIHJlc3BvbnNlQ3RvciwgcmVxdWVzdCk7XG5cbiAgICBpZiAoIXNlbGYucnBjSW1wbCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhFcnJvcihcImFscmVhZHkgZW5kZWRcIikpOyB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gc2VsZi5ycGNJbXBsKFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgcmVxdWVzdEN0b3Jbc2VsZi5yZXF1ZXN0RGVsaW1pdGVkID8gXCJlbmNvZGVEZWxpbWl0ZWRcIiA6IFwiZW5jb2RlXCJdKHJlcXVlc3QpLmZpbmlzaCgpLFxuICAgICAgICAgICAgZnVuY3Rpb24gcnBjQ2FsbGJhY2soZXJyLCByZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIsIG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVuZCgvKiBlbmRlZEJ5UlBDICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgcmVzcG9uc2VDdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZUN0b3Jbc2VsZi5yZXNwb25zZURlbGltaXRlZCA/IFwiZGVjb2RlRGVsaW1pdGVkXCIgOiBcImRlY29kZVwiXShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJkYXRhXCIsIHJlc3BvbnNlLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soZXJyKTsgfSwgMCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiBFbmRzIHRoaXMgc2VydmljZSBhbmQgZW1pdHMgdGhlIGBlbmRgIGV2ZW50LlxuICogQHBhcmFtIHtib29sZWFufSBbZW5kZWRCeVJQQz1mYWxzZV0gV2hldGhlciB0aGUgc2VydmljZSBoYXMgYmVlbiBlbmRlZCBieSB0aGUgUlBDIGltcGxlbWVudGF0aW9uLlxuICogQHJldHVybnMge3JwYy5TZXJ2aWNlfSBgdGhpc2BcbiAqL1xuU2VydmljZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gZW5kKGVuZGVkQnlSUEMpIHtcbiAgICBpZiAodGhpcy5ycGNJbXBsKSB7XG4gICAgICAgIGlmICghZW5kZWRCeVJQQykgLy8gc2lnbmFsIGVuZCB0byBycGNJbXBsXG4gICAgICAgICAgICB0aGlzLnJwY0ltcGwobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIHRoaXMucnBjSW1wbCA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKS5vZmYoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFN0cmVhbWluZyBSUEMgaGVscGVycy5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHJwYyA9IGV4cG9ydHM7XG5cbi8qKlxuICogUlBDIGltcGxlbWVudGF0aW9uIHBhc3NlZCB0byB7QGxpbmsgU2VydmljZSNjcmVhdGV9IHBlcmZvcm1pbmcgYSBzZXJ2aWNlIHJlcXVlc3Qgb24gbmV0d29yayBsZXZlbCwgaS5lLiBieSB1dGlsaXppbmcgaHR0cCByZXF1ZXN0cyBvciB3ZWJzb2NrZXRzLlxuICogQHR5cGVkZWYgUlBDSW1wbFxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8TWVzc2FnZTx7fT4sTWVzc2FnZTx7fT4+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2QgYmVpbmcgY2FsbGVkXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHJlcXVlc3REYXRhIFJlcXVlc3QgZGF0YVxuICogQHBhcmFtIHtSUENJbXBsQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIHJwY0ltcGwobWV0aG9kLCByZXF1ZXN0RGF0YSwgY2FsbGJhY2spIHtcbiAqICAgICBpZiAocHJvdG9idWYudXRpbC5sY0ZpcnN0KG1ldGhvZC5uYW1lKSAhPT0gXCJteU1ldGhvZFwiKSAvLyBjb21wYXRpYmxlIHdpdGggc3RhdGljIGNvZGVcbiAqICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIG1ldGhvZFwiKTtcbiAqICAgICBhc3luY2hyb25vdXNseU9idGFpbkFSZXNwb25zZShyZXF1ZXN0RGF0YSwgZnVuY3Rpb24oZXJyLCByZXNwb25zZURhdGEpIHtcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZURhdGEpO1xuICogICAgIH0pO1xuICogfVxuICovXG5cbi8qKlxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBSUENJbXBsfS5cbiAqIEB0eXBlZGVmIFJQQ0ltcGxDYWxsYmFja1xuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8bnVsbH0gW3Jlc3BvbnNlXSBSZXNwb25zZSBkYXRhIG9yIGBudWxsYCB0byBzaWduYWwgZW5kIG9mIHN0cmVhbSwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxucnBjLlNlcnZpY2UgPSByZXF1aXJlKFwiLi9ycGMvc2VydmljZVwiKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKlxuICogTmFtZWQgcm9vdHMuXG4gKiBUaGlzIGlzIHdoZXJlIHBianMgc3RvcmVzIGdlbmVyYXRlZCBzdHJ1Y3R1cmVzICh0aGUgb3B0aW9uIGAtciwgLS1yb290YCBzcGVjaWZpZXMgYSBuYW1lKS5cbiAqIENhbiBhbHNvIGJlIHVzZWQgbWFudWFsbHkgdG8gbWFrZSByb290cyBhdmFpbGFibGUgYWNyb3NzIG1vZHVsZXMuXG4gKiBAbmFtZSByb290c1xuICogQHR5cGUge09iamVjdC48c3RyaW5nLFJvb3Q+fVxuICogQGV4YW1wbGVcbiAqIC8vIHBianMgLXIgbXlyb290IC1vIGNvbXBpbGVkLmpzIC4uLlxuICpcbiAqIC8vIGluIGFub3RoZXIgbW9kdWxlOlxuICogcmVxdWlyZShcIi4vY29tcGlsZWQuanNcIik7XG4gKlxuICogLy8gaW4gYW55IHN1YnNlcXVlbnQgbW9kdWxlOlxuICogdmFyIHJvb3QgPSBwcm90b2J1Zi5yb290c1tcIm15cm9vdFwiXTtcbiAqL1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIHByb3RvYnVmID0gZXhwb3J0cztcblxuLyoqXG4gKiBCdWlsZCB0eXBlLCBvbmUgb2YgYFwiZnVsbFwiYCwgYFwibGlnaHRcImAgb3IgYFwibWluaW1hbFwiYC5cbiAqIEBuYW1lIGJ1aWxkXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbnByb3RvYnVmLmJ1aWxkID0gXCJtaW5pbWFsXCI7XG5cbi8vIFNlcmlhbGl6YXRpb25cbnByb3RvYnVmLldyaXRlciAgICAgICA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbnByb3RvYnVmLkJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlcl9idWZmZXJcIik7XG5wcm90b2J1Zi5SZWFkZXIgICAgICAgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJfYnVmZmVyXCIpO1xuXG4vLyBVdGlsaXR5XG5wcm90b2J1Zi51dGlsICAgICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5wcm90b2J1Zi5ycGMgICAgICAgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XG5wcm90b2J1Zi5yb290cyAgICAgICAgPSByZXF1aXJlKFwiLi9yb290c1wiKTtcbnByb3RvYnVmLmNvbmZpZ3VyZSAgICA9IGNvbmZpZ3VyZTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogUmVjb25maWd1cmVzIHRoZSBsaWJyYXJ5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBjb25maWd1cmUoKSB7XG4gICAgcHJvdG9idWYudXRpbC5fY29uZmlndXJlKCk7XG4gICAgcHJvdG9idWYuV3JpdGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyV3JpdGVyKTtcbiAgICBwcm90b2J1Zi5SZWFkZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJSZWFkZXIpO1xufVxuXG4vLyBTZXQgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudFxuY29uZmlndXJlKCk7XG4iLCAiLy8gbWluaW1hbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4LW1pbmltYWxcIik7XG4iLCAiLy8gQkVHSU4gQVVUTyBHRU5FUkFURUQgQ09ERSBcIn5zZGsvc2NlbmUtZW50cnlwb2ludFwiXG5cInVzZSBzdHJpY3RcIjtcbmltcG9ydCAqIGFzIGVudHJ5cG9pbnQgZnJvbSAnL1VzZXJzL2xhc3RyYXVtL0Rlc2t0b3AvUHJvZ3JhbW1pbmcvRGVjZW50cmFsYW5kL0xhc3RTbGljZS9zZGs3L2FpLW1pbmVjcmFmdC9zY2VuZS9zcmMvaW5kZXgudHMnXG5pbXBvcnQgeyBlbmdpbmUsIE5ldHdvcmtFbnRpdHkgfSBmcm9tICdAZGNsL3Nkay9lY3MnXG5pbXBvcnQgKiBhcyBzZGsgZnJvbSAnQGRjbC9zZGsnXG5pbXBvcnQgeyBjb21wb3NpdGVQcm92aWRlciB9IGZyb20gJ0BkY2wvc2RrL2NvbXBvc2l0ZS1wcm92aWRlcidcbmltcG9ydCB7IGNvbXBvc2l0ZUZyb21Mb2FkZXIgfSBmcm9tICd+c2RrL2FsbC1jb21wb3NpdGVzJ1xuXG5mYWxzZVxuXG5pZiAoKGVudHJ5cG9pbnQgYXMgYW55KS5tYWluICE9PSB1bmRlZmluZWQpIHtcbiAgZnVuY3Rpb24gX0lOVEVSTkFMX3N0YXJ0dXBfc3lzdGVtKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtYXliZVByb21pc2UgPSAoZW50cnlwb2ludCBhcyBhbnkpLm1haW4oKVxuICAgICAgaWYgKG1heWJlUHJvbWlzZSAmJiB0eXBlb2YgbWF5YmVQcm9taXNlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgKG1heWJlUHJvbWlzZSBhcyB1bmtub3duIGFzIFByb21pc2U8dW5rbm93bj4pLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbWF5YmVQcm9taXNlLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGVuZ2luZS5yZW1vdmVTeXN0ZW0oX0lOVEVSTkFMX3N0YXJ0dXBfc3lzdGVtKVxuICAgIH1cbiAgfVxuICBlbmdpbmUuYWRkU3lzdGVtKF9JTlRFUk5BTF9zdGFydHVwX3N5c3RlbSwgSW5maW5pdHkpXG59XG5cbmV4cG9ydCAqIGZyb20gJ0BkY2wvc2RrJ1xuZXhwb3J0ICogZnJvbSAnL1VzZXJzL2xhc3RyYXVtL0Rlc2t0b3AvUHJvZ3JhbW1pbmcvRGVjZW50cmFsYW5kL0xhc3RTbGljZS9zZGs3L2FpLW1pbmVjcmFmdC9zY2VuZS9zcmMvaW5kZXgudHMnXG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkFuaW1hdG9yKCkge1xuICAgIHJldHVybiB7IHN0YXRlczogW10gfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCQW5pbWF0b3I7XG4oZnVuY3Rpb24gKFBCQW5pbWF0b3IpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zdGF0ZXMpIHtcbiAgICAgICAgICAgIFBCQW5pbWF0aW9uU3RhdGUuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJBbmltYXRvci5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQW5pbWF0b3IoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGF0ZXMucHVzaChQQkFuaW1hdGlvblN0YXRlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCQW5pbWF0b3IuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJBbmltYXRvciB8fCAoUEJBbmltYXRvciA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBbmltYXRpb25TdGF0ZSgpIHtcbiAgICByZXR1cm4geyBjbGlwOiBcIlwiLCBwbGF5aW5nOiB1bmRlZmluZWQsIHdlaWdodDogdW5kZWZpbmVkLCBzcGVlZDogdW5kZWZpbmVkLCBsb29wOiB1bmRlZmluZWQsIHNob3VsZFJlc2V0OiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCQW5pbWF0aW9uU3RhdGU7XG4oZnVuY3Rpb24gKFBCQW5pbWF0aW9uU3RhdGUpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jbGlwICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5jbGlwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wbGF5aW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS5wbGF5aW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS53ZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS53ZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNwZWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDUpLmZsb2F0KG1lc3NhZ2Uuc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0OCkuYm9vbChtZXNzYWdlLmxvb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNob3VsZFJlc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTYpLmJvb2wobWVzc2FnZS5zaG91bGRSZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJBbmltYXRpb25TdGF0ZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jbGlwID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBsYXlpbmcgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLndlaWdodCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQ1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNwZWVkID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9vcCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2hvdWxkUmVzZXQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCQW5pbWF0aW9uU3RhdGUuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJBbmltYXRpb25TdGF0ZSB8fCAoUEJBbmltYXRpb25TdGF0ZSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJBbmltYXRvciB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2FuaW1hdG9yLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQW5pbWF0b3JTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDQyLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQkFuaW1hdG9yLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQW5pbWF0b3IuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCQW5pbWF0b3IuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCQW5pbWF0b3JcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkF1ZGlvRXZlbnQoKSB7XG4gICAgcmV0dXJuIHsgc3RhdGU6IDAsIHRpbWVzdGFtcDogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJBdWRpb0V2ZW50O1xuKGZ1bmN0aW9uIChQQkF1ZGlvRXZlbnQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5zdGF0ZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQzMihtZXNzYWdlLnRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJBdWRpb0V2ZW50LmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJBdWRpb0V2ZW50KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGF0ZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQkF1ZGlvRXZlbnQuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJBdWRpb0V2ZW50IHx8IChQQkF1ZGlvRXZlbnQgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCQXVkaW9FdmVudCB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F1ZGlvX2V2ZW50Lmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQXVkaW9FdmVudFNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDExMDUsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQXVkaW9FdmVudC5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQkF1ZGlvRXZlbnQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCQXVkaW9FdmVudC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJBdWRpb0V2ZW50XCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdWRpb1NvdXJjZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwbGF5aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHZvbHVtZTogdW5kZWZpbmVkLFxuICAgICAgICBsb29wOiB1bmRlZmluZWQsXG4gICAgICAgIHBpdGNoOiB1bmRlZmluZWQsXG4gICAgICAgIGF1ZGlvQ2xpcFVybDogXCJcIixcbiAgICAgICAgY3VycmVudFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2xvYmFsOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCQXVkaW9Tb3VyY2U7XG4oZnVuY3Rpb24gKFBCQXVkaW9Tb3VyY2UpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wbGF5aW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLnBsYXlpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZvbHVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLnZvbHVtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubG9vcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UubG9vcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGl0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS5waXRjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYXVkaW9DbGlwVXJsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQyKS5zdHJpbmcobWVzc2FnZS5hdWRpb0NsaXBVcmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmN1cnJlbnRUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTMpLmZsb2F0KG1lc3NhZ2UuY3VycmVudFRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdsb2JhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU2KS5ib29sKG1lc3NhZ2UuZ2xvYmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQkF1ZGlvU291cmNlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJBdWRpb1NvdXJjZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGxheWluZyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uudm9sdW1lID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9vcCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGl0Y2ggPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hdWRpb0NsaXBVcmwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VycmVudFRpbWUgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nbG9iYWwgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCQXVkaW9Tb3VyY2UuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJBdWRpb1NvdXJjZSB8fCAoUEJBdWRpb1NvdXJjZSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJBdWRpb1NvdXJjZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F1ZGlvX3NvdXJjZS5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEF1ZGlvU291cmNlU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTAyMCxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJBdWRpb1NvdXJjZS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQkF1ZGlvU291cmNlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQkF1ZGlvU291cmNlLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQkF1ZGlvU291cmNlXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdWRpb1N0cmVhbSgpIHtcbiAgICByZXR1cm4geyBwbGF5aW5nOiB1bmRlZmluZWQsIHZvbHVtZTogdW5kZWZpbmVkLCB1cmw6IFwiXCIgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCQXVkaW9TdHJlYW07XG4oZnVuY3Rpb24gKFBCQXVkaW9TdHJlYW0pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wbGF5aW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLnBsYXlpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZvbHVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLnZvbHVtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudXJsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS51cmwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCQXVkaW9TdHJlYW0uZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkF1ZGlvU3RyZWFtKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wbGF5aW5nID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52b2x1bWUgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51cmwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJBdWRpb1N0cmVhbS5kZWNvZGUgPSBkZWNvZGU7XG59KShQQkF1ZGlvU3RyZWFtIHx8IChQQkF1ZGlvU3RyZWFtID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQkF1ZGlvU3RyZWFtIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXVkaW9fc3RyZWFtLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQXVkaW9TdHJlYW1TY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDIxLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQkF1ZGlvU3RyZWFtLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQXVkaW9TdHJlYW0uZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCQXVkaW9TdHJlYW0uZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCQXVkaW9TdHJlYW1cIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbi8qKiBBdmF0YXJBbmNob3JQb2ludFR5cGUgZGV0ZXJtaW5lcyB0aGUgcGFydCBvZiB0aGUgYXZhdGFyJ3MgYm9keSB0aGF0IGFuY2hvcnMgdGhlIEVudGl0eS4gKi9cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIEF2YXRhckFuY2hvclBvaW50VHlwZTtcbihmdW5jdGlvbiAoQXZhdGFyQW5jaG9yUG9pbnRUeXBlKSB7XG4gICAgLyoqIEFBUFRfUE9TSVRJT04gLSBAZGVwcmVjYXRlZCBjb25zaWRlciBwYXJlbnRpbmcgdG8gYGVuZ2luZS5QbGF5ZXJFbnRpdHlgLCB0aGlzIHdpbGwgYXR0YWNoIHRvIHBsYXllciBwb3NpdGlvbiB3aXRoIGFuIGFyYml0cmFyeSBvZmZzZXQgKi9cbiAgICBBdmF0YXJBbmNob3JQb2ludFR5cGVbQXZhdGFyQW5jaG9yUG9pbnRUeXBlW1wiQUFQVF9QT1NJVElPTlwiXSA9IDBdID0gXCJBQVBUX1BPU0lUSU9OXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTkFNRV9UQUdcIl0gPSAxXSA9IFwiQUFQVF9OQU1FX1RBR1wiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX0hFQURcIl0gPSA0XSA9IFwiQUFQVF9IRUFEXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTkVDS1wiXSA9IDVdID0gXCJBQVBUX05FQ0tcIjtcbiAgICBBdmF0YXJBbmNob3JQb2ludFR5cGVbQXZhdGFyQW5jaG9yUG9pbnRUeXBlW1wiQUFQVF9TUElORVwiXSA9IDZdID0gXCJBQVBUX1NQSU5FXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfU1BJTkUxXCJdID0gN10gPSBcIkFBUFRfU1BJTkUxXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfU1BJTkUyXCJdID0gOF0gPSBcIkFBUFRfU1BJTkUyXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfSElQXCJdID0gOV0gPSBcIkFBUFRfSElQXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTEVGVF9TSE9VTERFUlwiXSA9IDEwXSA9IFwiQUFQVF9MRUZUX1NIT1VMREVSXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTEVGVF9BUk1cIl0gPSAxMV0gPSBcIkFBUFRfTEVGVF9BUk1cIjtcbiAgICBBdmF0YXJBbmNob3JQb2ludFR5cGVbQXZhdGFyQW5jaG9yUG9pbnRUeXBlW1wiQUFQVF9MRUZUX0ZPUkVBUk1cIl0gPSAxMl0gPSBcIkFBUFRfTEVGVF9GT1JFQVJNXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTEVGVF9IQU5EXCJdID0gMl0gPSBcIkFBUFRfTEVGVF9IQU5EXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTEVGVF9IQU5EX0lOREVYXCJdID0gMTNdID0gXCJBQVBUX0xFRlRfSEFORF9JTkRFWFwiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX1JJR0hUX1NIT1VMREVSXCJdID0gMTRdID0gXCJBQVBUX1JJR0hUX1NIT1VMREVSXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfUklHSFRfQVJNXCJdID0gMTVdID0gXCJBQVBUX1JJR0hUX0FSTVwiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX1JJR0hUX0ZPUkVBUk1cIl0gPSAxNl0gPSBcIkFBUFRfUklHSFRfRk9SRUFSTVwiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX1JJR0hUX0hBTkRcIl0gPSAzXSA9IFwiQUFQVF9SSUdIVF9IQU5EXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfUklHSFRfSEFORF9JTkRFWFwiXSA9IDE3XSA9IFwiQUFQVF9SSUdIVF9IQU5EX0lOREVYXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfTEVGVF9VUF9MRUdcIl0gPSAxOF0gPSBcIkFBUFRfTEVGVF9VUF9MRUdcIjtcbiAgICBBdmF0YXJBbmNob3JQb2ludFR5cGVbQXZhdGFyQW5jaG9yUG9pbnRUeXBlW1wiQUFQVF9MRUZUX0xFR1wiXSA9IDE5XSA9IFwiQUFQVF9MRUZUX0xFR1wiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX0xFRlRfRk9PVFwiXSA9IDIwXSA9IFwiQUFQVF9MRUZUX0ZPT1RcIjtcbiAgICBBdmF0YXJBbmNob3JQb2ludFR5cGVbQXZhdGFyQW5jaG9yUG9pbnRUeXBlW1wiQUFQVF9MRUZUX1RPRV9CQVNFXCJdID0gMjFdID0gXCJBQVBUX0xFRlRfVE9FX0JBU0VcIjtcbiAgICBBdmF0YXJBbmNob3JQb2ludFR5cGVbQXZhdGFyQW5jaG9yUG9pbnRUeXBlW1wiQUFQVF9SSUdIVF9VUF9MRUdcIl0gPSAyMl0gPSBcIkFBUFRfUklHSFRfVVBfTEVHXCI7XG4gICAgQXZhdGFyQW5jaG9yUG9pbnRUeXBlW0F2YXRhckFuY2hvclBvaW50VHlwZVtcIkFBUFRfUklHSFRfTEVHXCJdID0gMjNdID0gXCJBQVBUX1JJR0hUX0xFR1wiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX1JJR0hUX0ZPT1RcIl0gPSAyNF0gPSBcIkFBUFRfUklHSFRfRk9PVFwiO1xuICAgIEF2YXRhckFuY2hvclBvaW50VHlwZVtBdmF0YXJBbmNob3JQb2ludFR5cGVbXCJBQVBUX1JJR0hUX1RPRV9CQVNFXCJdID0gMjVdID0gXCJBQVBUX1JJR0hUX1RPRV9CQVNFXCI7XG59KShBdmF0YXJBbmNob3JQb2ludFR5cGUgfHwgKEF2YXRhckFuY2hvclBvaW50VHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdmF0YXJBdHRhY2goKSB7XG4gICAgcmV0dXJuIHsgYXZhdGFySWQ6IHVuZGVmaW5lZCwgYW5jaG9yUG9pbnRJZDogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJBdmF0YXJBdHRhY2g7XG4oZnVuY3Rpb24gKFBCQXZhdGFyQXR0YWNoKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYXZhdGFySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYXZhdGFySWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFuY2hvclBvaW50SWQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UuYW5jaG9yUG9pbnRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJBdmF0YXJBdHRhY2guZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkF2YXRhckF0dGFjaCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF2YXRhcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFuY2hvclBvaW50SWQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQkF2YXRhckF0dGFjaC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQkF2YXRhckF0dGFjaCB8fCAoUEJBdmF0YXJBdHRhY2ggPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCQXZhdGFyQXR0YWNoIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXZhdGFyX2F0dGFjaC5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEF2YXRhckF0dGFjaFNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwNzMsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQXZhdGFyQXR0YWNoLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQXZhdGFyQXR0YWNoLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQkF2YXRhckF0dGFjaC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJBdmF0YXJBdHRhY2hcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgQ29sb3IzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb2xvcnMuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCQXZhdGFyQmFzZSgpIHtcbiAgICByZXR1cm4geyBza2luQ29sb3I6IHVuZGVmaW5lZCwgZXllc0NvbG9yOiB1bmRlZmluZWQsIGhhaXJDb2xvcjogdW5kZWZpbmVkLCBib2R5U2hhcGVVcm46IFwiXCIsIG5hbWU6IFwiXCIgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCQXZhdGFyQmFzZTtcbihmdW5jdGlvbiAoUEJBdmF0YXJCYXNlKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2tpbkNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5za2luQ29sb3IsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXllc0NvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5leWVzQ29sb3IsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGFpckNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5oYWlyQ29sb3IsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9keVNoYXBlVXJuICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS5ib2R5U2hhcGVVcm4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDIpLnN0cmluZyhtZXNzYWdlLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCQXZhdGFyQmFzZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQXZhdGFyQmFzZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNraW5Db2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV5ZXNDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhhaXJDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHlTaGFwZVVybiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5uYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCQXZhdGFyQmFzZS5kZWNvZGUgPSBkZWNvZGU7XG59KShQQkF2YXRhckJhc2UgfHwgKFBCQXZhdGFyQmFzZSA9IHt9KSk7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuY29tbW9uXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29sb3IzKCkge1xuICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIENvbG9yMztcbihmdW5jdGlvbiAoQ29sb3IzKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuciAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMykuZmxvYXQobWVzc2FnZS5yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5nICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmIgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjkpLmZsb2F0KG1lc3NhZ2UuYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgQ29sb3IzLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29sb3IzKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuciA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmcgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5iID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgQ29sb3IzLmRlY29kZSA9IGRlY29kZTtcbn0pKENvbG9yMyB8fCAoQ29sb3IzID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb2xvcjQoKSB7XG4gICAgcmV0dXJuIHsgcjogMCwgZzogMCwgYjogMCwgYTogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQ29sb3I0O1xuKGZ1bmN0aW9uIChDb2xvcjQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5yICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmcgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UuZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS5iKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM3KS5mbG9hdChtZXNzYWdlLmEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIENvbG9yNC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbG9yNCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnIgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYiA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmEgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBDb2xvcjQuZGVjb2RlID0gZGVjb2RlO1xufSkoQ29sb3I0IHx8IChDb2xvcjQgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCQXZhdGFyQmFzZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9iYXNlLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQXZhdGFyQmFzZVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwODcsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQXZhdGFyQmFzZS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQkF2YXRhckJhc2UuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCQXZhdGFyQmFzZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJBdmF0YXJCYXNlXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdmF0YXJFbW90ZUNvbW1hbmQoKSB7XG4gICAgcmV0dXJuIHsgZW1vdGVVcm46IFwiXCIsIGxvb3A6IGZhbHNlLCB0aW1lc3RhbXA6IDAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCQXZhdGFyRW1vdGVDb21tYW5kO1xuKGZ1bmN0aW9uIChQQkF2YXRhckVtb3RlQ29tbWFuZCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmVtb3RlVXJuICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5lbW90ZVVybik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubG9vcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLmxvb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnRpbWVzdGFtcCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDMyKG1lc3NhZ2UudGltZXN0YW1wKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQkF2YXRhckVtb3RlQ29tbWFuZC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQXZhdGFyRW1vdGVDb21tYW5kKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW1vdGVVcm4gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9vcCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGltZXN0YW1wID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCQXZhdGFyRW1vdGVDb21tYW5kLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCQXZhdGFyRW1vdGVDb21tYW5kIHx8IChQQkF2YXRhckVtb3RlQ29tbWFuZCA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJBdmF0YXJFbW90ZUNvbW1hbmQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdmF0YXJfZW1vdGVfY29tbWFuZC5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEF2YXRhckVtb3RlQ29tbWFuZFNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwODgsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQXZhdGFyRW1vdGVDb21tYW5kLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQXZhdGFyRW1vdGVDb21tYW5kLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQkF2YXRhckVtb3RlQ29tbWFuZC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJBdmF0YXJFbW90ZUNvbW1hbmRcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkF2YXRhckVxdWlwcGVkRGF0YSgpIHtcbiAgICByZXR1cm4geyB3ZWFyYWJsZVVybnM6IFtdLCBlbW90ZVVybnM6IFtdIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQkF2YXRhckVxdWlwcGVkRGF0YTtcbihmdW5jdGlvbiAoUEJBdmF0YXJFcXVpcHBlZERhdGEpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS53ZWFyYWJsZVVybnMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyh2KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5lbW90ZVVybnMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQkF2YXRhckVxdWlwcGVkRGF0YS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQXZhdGFyRXF1aXBwZWREYXRhKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uud2VhcmFibGVVcm5zLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbW90ZVVybnMucHVzaChyZWFkZXIuc3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCQXZhdGFyRXF1aXBwZWREYXRhLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCQXZhdGFyRXF1aXBwZWREYXRhIHx8IChQQkF2YXRhckVxdWlwcGVkRGF0YSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJBdmF0YXJFcXVpcHBlZERhdGEgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdmF0YXJfZXF1aXBwZWRfZGF0YS5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEF2YXRhckVxdWlwcGVkRGF0YVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwOTEsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQXZhdGFyRXF1aXBwZWREYXRhLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQXZhdGFyRXF1aXBwZWREYXRhLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQkF2YXRhckVxdWlwcGVkRGF0YS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJBdmF0YXJFcXVpcHBlZERhdGFcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi8uLi9jb21tb24vdmVjdG9ycy5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG4vKiogQXZhdGFyTW9kaWZpZXJUeXBlIGlzIGFuIGVmZmVjdCB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIGF2YXRhcnMgaW5zaWRlIHRoZSByZWdpb24uICovXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBBdmF0YXJNb2RpZmllclR5cGU7XG4oZnVuY3Rpb24gKEF2YXRhck1vZGlmaWVyVHlwZSkge1xuICAgIC8qKiBBTVRfSElERV9BVkFUQVJTIC0gYXZhdGFycyBhcmUgaW52aXNpYmxlICovXG4gICAgQXZhdGFyTW9kaWZpZXJUeXBlW0F2YXRhck1vZGlmaWVyVHlwZVtcIkFNVF9ISURFX0FWQVRBUlNcIl0gPSAwXSA9IFwiQU1UX0hJREVfQVZBVEFSU1wiO1xuICAgIC8qKiBBTVRfRElTQUJMRV9QQVNTUE9SVFMgLSBzZWxlY3RpbmcgKGUuZy4gY2xpY2tpbmcpIGFuIGF2YXRhciB3aWxsIG5vdCBicmluZyB1cCB0aGVpciBwcm9maWxlLiAqL1xuICAgIEF2YXRhck1vZGlmaWVyVHlwZVtBdmF0YXJNb2RpZmllclR5cGVbXCJBTVRfRElTQUJMRV9QQVNTUE9SVFNcIl0gPSAxXSA9IFwiQU1UX0RJU0FCTEVfUEFTU1BPUlRTXCI7XG59KShBdmF0YXJNb2RpZmllclR5cGUgfHwgKEF2YXRhck1vZGlmaWVyVHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdmF0YXJNb2RpZmllckFyZWEoKSB7XG4gICAgcmV0dXJuIHsgYXJlYTogdW5kZWZpbmVkLCBleGNsdWRlSWRzOiBbXSwgbW9kaWZpZXJzOiBbXSB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJBdmF0YXJNb2RpZmllckFyZWE7XG4oZnVuY3Rpb24gKFBCQXZhdGFyTW9kaWZpZXJBcmVhKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYXJlYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLmFyZWEsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXhjbHVkZUlkcykge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKHYpO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKTtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UubW9kaWZpZXJzKSB7XG4gICAgICAgICAgICB3cml0ZXIuaW50MzIodik7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVyLmxkZWxpbSgpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQkF2YXRhck1vZGlmaWVyQXJlYS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQXZhdGFyTW9kaWZpZXJBcmVhKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYXJlYSA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5leGNsdWRlSWRzLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnID09PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tb2RpZmllcnMucHVzaChyZWFkZXIuaW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnID09PSAyNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1vZGlmaWVycy5wdXNoKHJlYWRlci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJBdmF0YXJNb2RpZmllckFyZWEuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJBdmF0YXJNb2RpZmllckFyZWEgfHwgKFBCQXZhdGFyTW9kaWZpZXJBcmVhID0ge30pKTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5jb21tb25cIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQb3NpdGlvbigpIHtcbiAgICByZXR1cm4geyB4OiAwLCB5OiAwLCB6OiAwIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQb3NpdGlvbjtcbihmdW5jdGlvbiAoUG9zaXRpb24pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS54ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLngpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnkgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UueSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UueiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS56KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQb3NpdGlvbi5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBvc2l0aW9uKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UueCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnkgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS56ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUG9zaXRpb24uZGVjb2RlID0gZGVjb2RlO1xufSkoUG9zaXRpb24gfHwgKFBvc2l0aW9uID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VWZWN0b3IzKCkge1xuICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHo6IDAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFZlY3RvcjM7XG4oZnVuY3Rpb24gKFZlY3RvcjMpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS54ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLngpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnkgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UueSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UueiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS56KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBWZWN0b3IzLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVmVjdG9yMygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnggPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS55ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UueiA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFZlY3RvcjMuZGVjb2RlID0gZGVjb2RlO1xufSkoVmVjdG9yMyB8fCAoVmVjdG9yMyA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlVmVjdG9yMigpIHtcbiAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBWZWN0b3IyO1xuKGZ1bmN0aW9uIChWZWN0b3IyKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UueCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMykuZmxvYXQobWVzc2FnZS54KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS55ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFZlY3RvcjIuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VWZWN0b3IyKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UueCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnkgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBWZWN0b3IyLmRlY29kZSA9IGRlY29kZTtcbn0pKFZlY3RvcjIgfHwgKFZlY3RvcjIgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVF1YXRlcm5pb24oKSB7XG4gICAgcmV0dXJuIHsgeDogMCwgeTogMCwgejogMCwgdzogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUXVhdGVybmlvbjtcbihmdW5jdGlvbiAoUXVhdGVybmlvbikge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTMpLmZsb2F0KG1lc3NhZ2UueCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UueSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyMSkuZmxvYXQobWVzc2FnZS55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS56ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI5KS5mbG9hdChtZXNzYWdlLnopO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLncgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzcpLmZsb2F0KG1lc3NhZ2Uudyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVF1YXRlcm5pb24oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS54ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UueSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnogPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5kZWNvZGUgPSBkZWNvZGU7XG59KShRdWF0ZXJuaW9uIHx8IChRdWF0ZXJuaW9uID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQkF2YXRhck1vZGlmaWVyQXJlYSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9tb2RpZmllcl9hcmVhLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQXZhdGFyTW9kaWZpZXJBcmVhU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA3MCxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJBdmF0YXJNb2RpZmllckFyZWEuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJBdmF0YXJNb2RpZmllckFyZWEuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCQXZhdGFyTW9kaWZpZXJBcmVhLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQkF2YXRhck1vZGlmaWVyQXJlYVwiXG4gICAgfVxufTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAwOSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnNcbiAqIENvcHlyaWdodCAyMDIwIERhbmllbCBXaXJ0eiAvIFRoZSBsb25nLmpzIEF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLy8gV2ViQXNzZW1ibHkgb3B0aW1pemF0aW9ucyB0byBkbyBuYXRpdmUgaTY0IG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpZGVcbnZhciB3YXNtID0gbnVsbDtcbnRyeSB7XG4gIHdhc20gPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UoXG4gICAgbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShcbiAgICAgIG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgLy8gXFwwYXNtXG4gICAgICAgIDAsIDk3LCAxMTUsIDEwOSxcbiAgICAgICAgLy8gdmVyc2lvbiAxXG4gICAgICAgIDEsIDAsIDAsIDAsXG5cbiAgICAgICAgLy8gc2VjdGlvbiBcInR5cGVcIlxuICAgICAgICAxLCAxMywgMixcbiAgICAgICAgLy8gMCwgKCkgPT4gaTMyXG4gICAgICAgIDk2LCAwLCAxLCAxMjcsXG4gICAgICAgIC8vIDEsIChpMzIsIGkzMiwgaTMyLCBpMzIpID0+IGkzMlxuICAgICAgICA5NiwgNCwgMTI3LCAxMjcsIDEyNywgMTI3LCAxLCAxMjcsXG5cbiAgICAgICAgLy8gc2VjdGlvbiBcImZ1bmN0aW9uXCJcbiAgICAgICAgMywgNywgNixcbiAgICAgICAgLy8gMCwgdHlwZSAwXG4gICAgICAgIDAsXG4gICAgICAgIC8vIDEsIHR5cGUgMVxuICAgICAgICAxLFxuICAgICAgICAvLyAyLCB0eXBlIDFcbiAgICAgICAgMSxcbiAgICAgICAgLy8gMywgdHlwZSAxXG4gICAgICAgIDEsXG4gICAgICAgIC8vIDQsIHR5cGUgMVxuICAgICAgICAxLFxuICAgICAgICAvLyA1LCB0eXBlIDFcbiAgICAgICAgMSxcblxuICAgICAgICAvLyBzZWN0aW9uIFwiZ2xvYmFsXCJcbiAgICAgICAgNiwgNiwgMSxcbiAgICAgICAgLy8gMCwgXCJoaWdoXCIsIG11dGFibGUgaTMyXG4gICAgICAgIDEyNywgMSwgNjUsIDAsIDExLFxuXG4gICAgICAgIC8vIHNlY3Rpb24gXCJleHBvcnRcIlxuICAgICAgICA3LCA1MCwgNixcbiAgICAgICAgLy8gMCwgXCJtdWxcIlxuICAgICAgICAzLCAxMDksIDExNywgMTA4LCAwLCAxLFxuICAgICAgICAvLyAxLCBcImRpdl9zXCJcbiAgICAgICAgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNSwgMCwgMixcbiAgICAgICAgLy8gMiwgXCJkaXZfdVwiXG4gICAgICAgIDUsIDEwMCwgMTA1LCAxMTgsIDk1LCAxMTcsIDAsIDMsXG4gICAgICAgIC8vIDMsIFwicmVtX3NcIlxuICAgICAgICA1LCAxMTQsIDEwMSwgMTA5LCA5NSwgMTE1LCAwLCA0LFxuICAgICAgICAvLyA0LCBcInJlbV91XCJcbiAgICAgICAgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNywgMCwgNSxcbiAgICAgICAgLy8gNSwgXCJnZXRfaGlnaFwiXG4gICAgICAgIDgsIDEwMywgMTAxLCAxMTYsIDk1LCAxMDQsIDEwNSwgMTAzLCAxMDQsIDAsIDAsXG5cbiAgICAgICAgLy8gc2VjdGlvbiBcImNvZGVcIlxuICAgICAgICAxMCwgMTkxLCAxLCA2LFxuICAgICAgICAvLyAwLCBcImdldF9oaWdoXCJcbiAgICAgICAgNCwgMCwgMzUsIDAsIDExLFxuICAgICAgICAvLyAxLCBcIm11bFwiXG4gICAgICAgIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLFxuICAgICAgICAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNiwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCxcbiAgICAgICAgMTY3LCAxMSxcbiAgICAgICAgLy8gMiwgXCJkaXZfc1wiXG4gICAgICAgIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLFxuICAgICAgICAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNywgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCxcbiAgICAgICAgMTY3LCAxMSxcbiAgICAgICAgLy8gMywgXCJkaXZfdVwiXG4gICAgICAgIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLFxuICAgICAgICAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyOCwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCxcbiAgICAgICAgMTY3LCAxMSxcbiAgICAgICAgLy8gNCwgXCJyZW1fc1wiXG4gICAgICAgIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLFxuICAgICAgICAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyOSwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCxcbiAgICAgICAgMTY3LCAxMSxcbiAgICAgICAgLy8gNSwgXCJyZW1fdVwiXG4gICAgICAgIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLFxuICAgICAgICAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEzMCwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCxcbiAgICAgICAgMTY3LCAxMSxcbiAgICAgIF0pLFxuICAgICksXG4gICAge30sXG4gICkuZXhwb3J0cztcbn0gY2F0Y2gge1xuICAvLyBubyB3YXNtIHN1cHBvcnQgOihcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciwgZ2l2ZW4gaXRzIGxvdyBhbmQgaGlnaCAzMiBiaXQgdmFsdWVzIGFzICpzaWduZWQqIGludGVnZXJzLlxuICogIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBtb3JlIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgTG9uZ3MuXG4gKiBAZXhwb3J0cyBMb25nXG4gKiBAY2xhc3MgQSBMb25nIGNsYXNzIGZvciByZXByZXNlbnRpbmcgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBMb25nKGxvdywgaGlnaCwgdW5zaWduZWQpIHtcbiAgLyoqXG4gICAqIFRoZSBsb3cgMzIgYml0cyBhcyBhIHNpZ25lZCB2YWx1ZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubG93ID0gbG93IHwgMDtcblxuICAvKipcbiAgICogVGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCB2YWx1ZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuaGlnaCA9IGhpZ2ggfCAwO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnVuc2lnbmVkID0gISF1bnNpZ25lZDtcbn1cblxuLy8gVGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGEgbG9uZyBpcyB0aGUgdHdvIGdpdmVuIHNpZ25lZCwgMzItYml0IHZhbHVlcy5cbi8vIFdlIHVzZSAzMi1iaXQgcGllY2VzIGJlY2F1c2UgdGhlc2UgYXJlIHRoZSBzaXplIG9mIGludGVnZXJzIG9uIHdoaWNoXG4vLyBKYXZhc2NyaXB0IHBlcmZvcm1zIGJpdC1vcGVyYXRpb25zLiAgRm9yIG9wZXJhdGlvbnMgbGlrZSBhZGRpdGlvbiBhbmRcbi8vIG11bHRpcGxpY2F0aW9uLCB3ZSBzcGxpdCBlYWNoIG51bWJlciBpbnRvIDE2IGJpdCBwaWVjZXMsIHdoaWNoIGNhbiBlYXNpbHkgYmVcbi8vIG11bHRpcGxpZWQgd2l0aGluIEphdmFzY3JpcHQncyBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiB3aXRob3V0IG92ZXJmbG93XG4vLyBvciBjaGFuZ2UgaW4gc2lnbi5cbi8vXG4vLyBJbiB0aGUgYWxnb3JpdGhtcyBiZWxvdywgd2UgZnJlcXVlbnRseSByZWR1Y2UgdGhlIG5lZ2F0aXZlIGNhc2UgdG8gdGhlXG4vLyBwb3NpdGl2ZSBjYXNlIGJ5IG5lZ2F0aW5nIHRoZSBpbnB1dChzKSBhbmQgdGhlbiBwb3N0LXByb2Nlc3NpbmcgdGhlIHJlc3VsdC5cbi8vIE5vdGUgdGhhdCB3ZSBtdXN0IEFMV0FZUyBjaGVjayBzcGVjaWFsbHkgd2hldGhlciB0aG9zZSB2YWx1ZXMgYXJlIE1JTl9WQUxVRVxuLy8gKC0yXjYzKSBiZWNhdXNlIC1NSU5fVkFMVUUgPT0gTUlOX1ZBTFVFIChzaW5jZSAyXjYzIGNhbm5vdCBiZSByZXByZXNlbnRlZCBhc1xuLy8gYSBwb3NpdGl2ZSBudW1iZXIsIGl0IG92ZXJmbG93cyBiYWNrIGludG8gYSBuZWdhdGl2ZSkuICBOb3QgaGFuZGxpbmcgdGhpc1xuLy8gY2FzZSB3b3VsZCBvZnRlbiByZXN1bHQgaW4gaW5maW5pdGUgcmVjdXJzaW9uLlxuLy9cbi8vIENvbW1vbiBjb25zdGFudCB2YWx1ZXMgWkVSTywgT05FLCBORUdfT05FLCBldGMuIGFyZSBkZWZpbmVkIGJlbG93IHRoZSBmcm9tKlxuLy8gbWV0aG9kcyBvbiB3aGljaCB0aGV5IGRlcGVuZC5cblxuLyoqXG4gKiBBbiBpbmRpY2F0b3IgdXNlZCB0byByZWxpYWJseSBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgTG9uZyBvciBub3QuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBjb25zdFxuICogQHByaXZhdGVcbiAqL1xuTG9uZy5wcm90b3R5cGUuX19pc0xvbmdfXztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExvbmcucHJvdG90eXBlLCBcIl9faXNMb25nX19cIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gaXNMb25nKG9iaikge1xuICByZXR1cm4gKG9iaiAmJiBvYmpbXCJfX2lzTG9uZ19fXCJdKSA9PT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgbnVtYmVyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGN0ejMyKHZhbHVlKSB7XG4gIHZhciBjID0gTWF0aC5jbHozMih2YWx1ZSAmIC12YWx1ZSk7XG4gIHJldHVybiB2YWx1ZSA/IDMxIC0gYyA6IGM7XG59XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBMb25nLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nLmlzTG9uZyA9IGlzTG9uZztcblxuLyoqXG4gKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCBpbnRlZ2VyIHZhbHVlcy5cbiAqIEB0eXBlIHshT2JqZWN0fVxuICogQGlubmVyXG4gKi9cbnZhciBJTlRfQ0FDSEUgPSB7fTtcblxuLyoqXG4gKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy5cbiAqIEB0eXBlIHshT2JqZWN0fVxuICogQGlubmVyXG4gKi9cbnZhciBVSU5UX0NBQ0hFID0ge307XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxuICogQHJldHVybnMgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGZyb21JbnQodmFsdWUsIHVuc2lnbmVkKSB7XG4gIHZhciBvYmosIGNhY2hlZE9iaiwgY2FjaGU7XG4gIGlmICh1bnNpZ25lZCkge1xuICAgIHZhbHVlID4+Pj0gMDtcbiAgICBpZiAoKGNhY2hlID0gMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDI1NikpIHtcbiAgICAgIGNhY2hlZE9iaiA9IFVJTlRfQ0FDSEVbdmFsdWVdO1xuICAgICAgaWYgKGNhY2hlZE9iaikgcmV0dXJuIGNhY2hlZE9iajtcbiAgICB9XG4gICAgb2JqID0gZnJvbUJpdHModmFsdWUsIDAsIHRydWUpO1xuICAgIGlmIChjYWNoZSkgVUlOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XG4gICAgcmV0dXJuIG9iajtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSB8PSAwO1xuICAgIGlmICgoY2FjaGUgPSAtMTI4IDw9IHZhbHVlICYmIHZhbHVlIDwgMTI4KSkge1xuICAgICAgY2FjaGVkT2JqID0gSU5UX0NBQ0hFW3ZhbHVlXTtcbiAgICAgIGlmIChjYWNoZWRPYmopIHJldHVybiBjYWNoZWRPYmo7XG4gICAgfVxuICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCB2YWx1ZSA8IDAgPyAtMSA6IDAsIGZhbHNlKTtcbiAgICBpZiAoY2FjaGUpIElOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gMzIgYml0IGludGVnZXIgdmFsdWUuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgMzIgYml0IGludGVnZXIgaW4gcXVlc3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcbiAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxuICovXG5Mb25nLmZyb21JbnQgPSBmcm9tSW50O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcbiAqIEByZXR1cm5zIHshTG9uZ31cbiAqIEBpbm5lclxuICovXG5mdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlLCB1bnNpZ25lZCkge1xuICBpZiAoaXNOYU4odmFsdWUpKSByZXR1cm4gdW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XG4gIGlmICh1bnNpZ25lZCkge1xuICAgIGlmICh2YWx1ZSA8IDApIHJldHVybiBVWkVSTztcbiAgICBpZiAodmFsdWUgPj0gVFdPX1BXUl82NF9EQkwpIHJldHVybiBNQVhfVU5TSUdORURfVkFMVUU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlIDw9IC1UV09fUFdSXzYzX0RCTCkgcmV0dXJuIE1JTl9WQUxVRTtcbiAgICBpZiAodmFsdWUgKyAxID49IFRXT19QV1JfNjNfREJMKSByZXR1cm4gTUFYX1ZBTFVFO1xuICB9XG4gIGlmICh2YWx1ZSA8IDApIHJldHVybiBmcm9tTnVtYmVyKC12YWx1ZSwgdW5zaWduZWQpLm5lZygpO1xuICByZXR1cm4gZnJvbUJpdHMoXG4gICAgdmFsdWUgJSBUV09fUFdSXzMyX0RCTCB8IDAsXG4gICAgKHZhbHVlIC8gVFdPX1BXUl8zMl9EQkwpIHwgMCxcbiAgICB1bnNpZ25lZCxcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlIG51bWJlci4gT3RoZXJ3aXNlLCB6ZXJvIGlzIHJldHVybmVkLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG51bWJlciBpbiBxdWVzdGlvblxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXG4gKi9cbkxvbmcuZnJvbU51bWJlciA9IGZyb21OdW1iZXI7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0c1xuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcbiAqIEByZXR1cm5zIHshTG9uZ31cbiAqIEBpbm5lclxuICovXG5mdW5jdGlvbiBmcm9tQml0cyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpIHtcbiAgcmV0dXJuIG5ldyBMb25nKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSA2NCBiaXQgaW50ZWdlciB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGdpdmVuIGxvdyBhbmQgaGlnaCBiaXRzLiBFYWNoIGlzXG4gKiAgYXNzdW1lZCB0byB1c2UgMzIgYml0cy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHMgVGhlIGxvdyAzMiBiaXRzXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaEJpdHMgVGhlIGhpZ2ggMzIgYml0c1xuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXG4gKi9cbkxvbmcuZnJvbUJpdHMgPSBmcm9tQml0cztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlXG4gKiBAcGFyYW0ge251bWJlcn0gZXhwb25lbnRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKiBAaW5uZXJcbiAqL1xudmFyIHBvd19kYmwgPSBNYXRoLnBvdzsgLy8gVXNlZCA0IHRpbWVzICg0KjggdG8gMTUrNClcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZFxuICogQHBhcmFtIHtudW1iZXI9fSByYWRpeFxuICogQHJldHVybnMgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGZyb21TdHJpbmcoc3RyLCB1bnNpZ25lZCwgcmFkaXgpIHtcbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHRocm93IEVycm9yKFwiZW1wdHkgc3RyaW5nXCIpO1xuICBpZiAodHlwZW9mIHVuc2lnbmVkID09PSBcIm51bWJlclwiKSB7XG4gICAgLy8gRm9yIGdvb2cubWF0aC5sb25nIGNvbXBhdGliaWxpdHlcbiAgICByYWRpeCA9IHVuc2lnbmVkO1xuICAgIHVuc2lnbmVkID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdW5zaWduZWQgPSAhIXVuc2lnbmVkO1xuICB9XG4gIGlmIChcbiAgICBzdHIgPT09IFwiTmFOXCIgfHxcbiAgICBzdHIgPT09IFwiSW5maW5pdHlcIiB8fFxuICAgIHN0ciA9PT0gXCIrSW5maW5pdHlcIiB8fFxuICAgIHN0ciA9PT0gXCItSW5maW5pdHlcIlxuICApXG4gICAgcmV0dXJuIHVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xuICByYWRpeCA9IHJhZGl4IHx8IDEwO1xuICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpIHRocm93IFJhbmdlRXJyb3IoXCJyYWRpeFwiKTtcblxuICB2YXIgcDtcbiAgaWYgKChwID0gc3RyLmluZGV4T2YoXCItXCIpKSA+IDApIHRocm93IEVycm9yKFwiaW50ZXJpb3IgaHlwaGVuXCIpO1xuICBlbHNlIGlmIChwID09PSAwKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcoc3RyLnN1YnN0cmluZygxKSwgdW5zaWduZWQsIHJhZGl4KS5uZWcoKTtcbiAgfVxuXG4gIC8vIERvIHNldmVyYWwgKDgpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cbiAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXG4gIHZhciByYWRpeFRvUG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIDgpKTtcblxuICB2YXIgcmVzdWx0ID0gWkVSTztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDgpIHtcbiAgICB2YXIgc2l6ZSA9IE1hdGgubWluKDgsIHN0ci5sZW5ndGggLSBpKSxcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhpLCBpICsgc2l6ZSksIHJhZGl4KTtcbiAgICBpZiAoc2l6ZSA8IDgpIHtcbiAgICAgIHZhciBwb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgc2l6ZSkpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChwb3dlcikuYWRkKGZyb21OdW1iZXIodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChyYWRpeFRvUG93ZXIpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChmcm9tTnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC51bnNpZ25lZCA9IHVuc2lnbmVkO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlIHNwZWNpZmllZCByYWRpeC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgTG9uZ1xuICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxuICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBUaGUgcmFkaXggaW4gd2hpY2ggdGhlIHRleHQgaXMgd3JpdHRlbiAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tU3RyaW5nID0gZnJvbVN0cmluZztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxuICogQHJldHVybnMgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGZyb21WYWx1ZSh2YWwsIHVuc2lnbmVkKSB7XG4gIGlmICh0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSByZXR1cm4gZnJvbU51bWJlcih2YWwsIHVuc2lnbmVkKTtcbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHJldHVybiBmcm9tU3RyaW5nKHZhbCwgdW5zaWduZWQpO1xuICAvLyBUaHJvd3MgZm9yIG5vbi1vYmplY3RzLCBjb252ZXJ0cyBub24taW5zdGFuY2VvZiBMb25nOlxuICByZXR1cm4gZnJvbUJpdHMoXG4gICAgdmFsLmxvdyxcbiAgICB2YWwuaGlnaCxcbiAgICB0eXBlb2YgdW5zaWduZWQgPT09IFwiYm9vbGVhblwiID8gdW5zaWduZWQgOiB2YWwudW5zaWduZWQsXG4gICk7XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIHNwZWNpZmllZCB2YWx1ZSB0byBhIExvbmcgdXNpbmcgdGhlIGFwcHJvcHJpYXRlIGZyb20qIGZ1bmN0aW9uIGZvciBpdHMgdHlwZS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsIFZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKi9cbkxvbmcuZnJvbVZhbHVlID0gZnJvbVZhbHVlO1xuXG4vLyBOT1RFOiB0aGUgY29tcGlsZXIgc2hvdWxkIGlubGluZSB0aGVzZSBjb25zdGFudCB2YWx1ZXMgYmVsb3cgYW5kIHRoZW4gcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlXG4vLyBubyBydW50aW1lIHBlbmFsdHkgZm9yIHRoZXNlLlxuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl8xNl9EQkwgPSAxIDw8IDE2O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl8yNF9EQkwgPSAxIDw8IDI0O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl8zMl9EQkwgPSBUV09fUFdSXzE2X0RCTCAqIFRXT19QV1JfMTZfREJMO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl82NF9EQkwgPSBUV09fUFdSXzMyX0RCTCAqIFRXT19QV1JfMzJfREJMO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl82M19EQkwgPSBUV09fUFdSXzY0X0RCTCAvIDI7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGNvbnN0XG4gKiBAaW5uZXJcbiAqL1xudmFyIFRXT19QV1JfMjQgPSBmcm9tSW50KFRXT19QV1JfMjRfREJMKTtcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIFpFUk8gPSBmcm9tSW50KDApO1xuXG4vKipcbiAqIFNpZ25lZCB6ZXJvLlxuICogQHR5cGUgeyFMb25nfVxuICovXG5Mb25nLlpFUk8gPSBaRVJPO1xuXG4vKipcbiAqIEB0eXBlIHshTG9uZ31cbiAqIEBpbm5lclxuICovXG52YXIgVVpFUk8gPSBmcm9tSW50KDAsIHRydWUpO1xuXG4vKipcbiAqIFVuc2lnbmVkIHplcm8uXG4gKiBAdHlwZSB7IUxvbmd9XG4gKi9cbkxvbmcuVVpFUk8gPSBVWkVSTztcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIE9ORSA9IGZyb21JbnQoMSk7XG5cbi8qKlxuICogU2lnbmVkIG9uZS5cbiAqIEB0eXBlIHshTG9uZ31cbiAqL1xuTG9uZy5PTkUgPSBPTkU7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbnZhciBVT05FID0gZnJvbUludCgxLCB0cnVlKTtcblxuLyoqXG4gKiBVbnNpZ25lZCBvbmUuXG4gKiBAdHlwZSB7IUxvbmd9XG4gKi9cbkxvbmcuVU9ORSA9IFVPTkU7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbnZhciBORUdfT05FID0gZnJvbUludCgtMSk7XG5cbi8qKlxuICogU2lnbmVkIG5lZ2F0aXZlIG9uZS5cbiAqIEB0eXBlIHshTG9uZ31cbiAqL1xuTG9uZy5ORUdfT05FID0gTkVHX09ORTtcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIE1BWF9WQUxVRSA9IGZyb21CaXRzKDB4ZmZmZmZmZmYgfCAwLCAweDdmZmZmZmZmIHwgMCwgZmFsc2UpO1xuXG4vKipcbiAqIE1heGltdW0gc2lnbmVkIHZhbHVlLlxuICogQHR5cGUgeyFMb25nfVxuICovXG5Mb25nLk1BWF9WQUxVRSA9IE1BWF9WQUxVRTtcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIE1BWF9VTlNJR05FRF9WQUxVRSA9IGZyb21CaXRzKDB4ZmZmZmZmZmYgfCAwLCAweGZmZmZmZmZmIHwgMCwgdHJ1ZSk7XG5cbi8qKlxuICogTWF4aW11bSB1bnNpZ25lZCB2YWx1ZS5cbiAqIEB0eXBlIHshTG9uZ31cbiAqL1xuTG9uZy5NQVhfVU5TSUdORURfVkFMVUUgPSBNQVhfVU5TSUdORURfVkFMVUU7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbnZhciBNSU5fVkFMVUUgPSBmcm9tQml0cygwLCAweDgwMDAwMDAwIHwgMCwgZmFsc2UpO1xuXG4vKipcbiAqIE1pbmltdW0gc2lnbmVkIHZhbHVlLlxuICogQHR5cGUgeyFMb25nfVxuICovXG5Mb25nLk1JTl9WQUxVRSA9IE1JTl9WQUxVRTtcblxuLyoqXG4gKiBAYWxpYXMgTG9uZy5wcm90b3R5cGVcbiAqIEBpbm5lclxuICovXG52YXIgTG9uZ1Byb3RvdHlwZSA9IExvbmcucHJvdG90eXBlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgMzIgYml0IGludGVnZXIsIGFzc3VtaW5nIGl0IGlzIGEgMzIgYml0IGludGVnZXIuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24gdG9JbnQoKSB7XG4gIHJldHVybiB0aGlzLnVuc2lnbmVkID8gdGhpcy5sb3cgPj4+IDAgOiB0aGlzLmxvdztcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSB0aGUgbmVhcmVzdCBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlIChkb3VibGUsIDUzIGJpdCBtYW50aXNzYSkuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7XG4gIGlmICh0aGlzLnVuc2lnbmVkKVxuICAgIHJldHVybiAodGhpcy5oaWdoID4+PiAwKSAqIFRXT19QV1JfMzJfREJMICsgKHRoaXMubG93ID4+PiAwKTtcbiAgcmV0dXJuIHRoaXMuaGlnaCAqIFRXT19QV1JfMzJfREJMICsgKHRoaXMubG93ID4+PiAwKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSBzdHJpbmcgd3JpdHRlbiBpbiB0aGUgc3BlY2lmaWVkIHJhZGl4LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBSYWRpeCAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQG92ZXJyaWRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgcmFkaXhgIGlzIG91dCBvZiByYW5nZVxuICovXG5Mb25nUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcocmFkaXgpIHtcbiAgcmFkaXggPSByYWRpeCB8fCAxMDtcbiAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KSB0aHJvdyBSYW5nZUVycm9yKFwicmFkaXhcIik7XG4gIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gXCIwXCI7XG4gIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xuICAgIC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxuICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hhbmdlIHRoZSBMb25nIHZhbHVlIGJlZm9yZSBpdCBjYW4gYmUgbmVnYXRlZCwgc28gd2UgcmVtb3ZlXG4gICAgICAvLyB0aGUgYm90dG9tLW1vc3QgZGlnaXQgaW4gdGhpcyBiYXNlIGFuZCB0aGVuIHJlY3Vyc2UgdG8gZG8gdGhlIHJlc3QuXG4gICAgICB2YXIgcmFkaXhMb25nID0gZnJvbU51bWJlcihyYWRpeCksXG4gICAgICAgIGRpdiA9IHRoaXMuZGl2KHJhZGl4TG9uZyksXG4gICAgICAgIHJlbTEgPSBkaXYubXVsKHJhZGl4TG9uZykuc3ViKHRoaXMpO1xuICAgICAgcmV0dXJuIGRpdi50b1N0cmluZyhyYWRpeCkgKyByZW0xLnRvSW50KCkudG9TdHJpbmcocmFkaXgpO1xuICAgIH0gZWxzZSByZXR1cm4gXCItXCIgKyB0aGlzLm5lZygpLnRvU3RyaW5nKHJhZGl4KTtcbiAgfVxuXG4gIC8vIERvIHNldmVyYWwgKDYpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cbiAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXG4gIHZhciByYWRpeFRvUG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIDYpLCB0aGlzLnVuc2lnbmVkKSxcbiAgICByZW0gPSB0aGlzO1xuICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgcmVtRGl2ID0gcmVtLmRpdihyYWRpeFRvUG93ZXIpLFxuICAgICAgaW50dmFsID0gcmVtLnN1YihyZW1EaXYubXVsKHJhZGl4VG9Qb3dlcikpLnRvSW50KCkgPj4+IDAsXG4gICAgICBkaWdpdHMgPSBpbnR2YWwudG9TdHJpbmcocmFkaXgpO1xuICAgIHJlbSA9IHJlbURpdjtcbiAgICBpZiAocmVtLmlzWmVybygpKSByZXR1cm4gZGlnaXRzICsgcmVzdWx0O1xuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKGRpZ2l0cy5sZW5ndGggPCA2KSBkaWdpdHMgPSBcIjBcIiArIGRpZ2l0cztcbiAgICAgIHJlc3VsdCA9IFwiXCIgKyBkaWdpdHMgKyByZXN1bHQ7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGhpZ2ggYml0c1xuICovXG5Mb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24gZ2V0SGlnaEJpdHMoKSB7XG4gIHJldHVybiB0aGlzLmhpZ2g7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgaGlnaCBiaXRzXG4gKi9cbkxvbmdQcm90b3R5cGUuZ2V0SGlnaEJpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzVW5zaWduZWQoKSB7XG4gIHJldHVybiB0aGlzLmhpZ2ggPj4+IDA7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgbG93IGJpdHNcbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzID0gZnVuY3Rpb24gZ2V0TG93Qml0cygpIHtcbiAgcmV0dXJuIHRoaXMubG93O1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgbG93IGJpdHNcbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRMb3dCaXRzVW5zaWduZWQoKSB7XG4gIHJldHVybiB0aGlzLmxvdyA+Pj4gMDtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHJlcHJlc2VudCB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBMb25nLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24gZ2V0TnVtQml0c0FicygpIHtcbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKVxuICAgIC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxuICAgIHJldHVybiB0aGlzLmVxKE1JTl9WQUxVRSkgPyA2NCA6IHRoaXMubmVnKCkuZ2V0TnVtQml0c0FicygpO1xuICB2YXIgdmFsID0gdGhpcy5oaWdoICE9IDAgPyB0aGlzLmhpZ2ggOiB0aGlzLmxvdztcbiAgZm9yICh2YXIgYml0ID0gMzE7IGJpdCA+IDA7IGJpdC0tKSBpZiAoKHZhbCAmICgxIDw8IGJpdCkpICE9IDApIGJyZWFrO1xuICByZXR1cm4gdGhpcy5oaWdoICE9IDAgPyBiaXQgKyAzMyA6IGJpdCArIDE7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZyBjYW4gYmUgc2FmZWx5IHJlcHJlc2VudGVkIGFzIGEgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5pc1NhZmVJbnRlZ2VyID0gZnVuY3Rpb24gaXNTYWZlSW50ZWdlcigpIHtcbiAgLy8gMl41My0xIGlzIHRoZSBtYXhpbXVtIHNhZmUgdmFsdWVcbiAgdmFyIHRvcDExQml0cyA9IHRoaXMuaGlnaCA+PiAyMTtcbiAgLy8gWzAsIDJeNTMtMV1cbiAgaWYgKCF0b3AxMUJpdHMpIHJldHVybiB0cnVlO1xuICAvLyA+IDJeNTMtMVxuICBpZiAodGhpcy51bnNpZ25lZCkgcmV0dXJuIGZhbHNlO1xuICAvLyBbLTJeNTMsIC0xXSBleGNlcHQgLTJeNTNcbiAgcmV0dXJuIHRvcDExQml0cyA9PT0gLTEgJiYgISh0aGlzLmxvdyA9PT0gMCAmJiB0aGlzLmhpZ2ggPT09IC0weDIwMDAwMCk7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB6ZXJvLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvKCkge1xuICByZXR1cm4gdGhpcy5oaWdoID09PSAwICYmIHRoaXMubG93ID09PSAwO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNpc1plcm99LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuZXF6ID0gTG9uZ1Byb3RvdHlwZS5pc1plcm87XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbmVnYXRpdmUuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5pc05lZ2F0aXZlID0gZnVuY3Rpb24gaXNOZWdhdGl2ZSgpIHtcbiAgcmV0dXJuICF0aGlzLnVuc2lnbmVkICYmIHRoaXMuaGlnaCA8IDA7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIHBvc2l0aXZlIG9yIHplcm8uXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5pc1Bvc2l0aXZlID0gZnVuY3Rpb24gaXNQb3NpdGl2ZSgpIHtcbiAgcmV0dXJuIHRoaXMudW5zaWduZWQgfHwgdGhpcy5oaWdoID49IDA7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG9kZC5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQoKSB7XG4gIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZXZlbi5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbigpIHtcbiAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAwO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgdGhlIHNwZWNpZmllZCdzLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgaWYgKFxuICAgIHRoaXMudW5zaWduZWQgIT09IG90aGVyLnVuc2lnbmVkICYmXG4gICAgdGhpcy5oaWdoID4+PiAzMSA9PT0gMSAmJlxuICAgIG90aGVyLmhpZ2ggPj4+IDMxID09PSAxXG4gIClcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNlcXVhbHN9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuZXEgPSBMb25nUHJvdG90eXBlLmVxdWFscztcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIG5vdEVxdWFscyhvdGhlcikge1xuICByZXR1cm4gIXRoaXMuZXEoLyogdmFsaWRhdGVzICovIG90aGVyKTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubmVxID0gTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHM7XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubmUgPSBMb25nUHJvdG90eXBlLm5vdEVxdWFscztcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmxlc3NUaGFuID0gZnVuY3Rpb24gbGVzc1RoYW4ob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDwgMDtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbn0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5sdCA9IExvbmdQcm90b3R5cGUubGVzc1RoYW47XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDw9IDA7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmx0ZSA9IExvbmdQcm90b3R5cGUubGVzc1RoYW5PckVxdWFsO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmxlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBzcGVjaWZpZWQncy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+IDA7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW59LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuZ3QgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsID0gZnVuY3Rpb24gZ3JlYXRlclRoYW5PckVxdWFsKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+PSAwO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFuT3JFcXVhbH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5ndGUgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbDtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFuT3JFcXVhbH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZSA9IExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsO1xuXG4vKipcbiAqIENvbXBhcmVzIHRoaXMgTG9uZydzIHZhbHVlIHdpdGggdGhlIHNwZWNpZmllZCdzLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcbiAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcbiAqL1xuTG9uZ1Byb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZShvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgaWYgKHRoaXMuZXEob3RoZXIpKSByZXR1cm4gMDtcbiAgdmFyIHRoaXNOZWcgPSB0aGlzLmlzTmVnYXRpdmUoKSxcbiAgICBvdGhlck5lZyA9IG90aGVyLmlzTmVnYXRpdmUoKTtcbiAgaWYgKHRoaXNOZWcgJiYgIW90aGVyTmVnKSByZXR1cm4gLTE7XG4gIGlmICghdGhpc05lZyAmJiBvdGhlck5lZykgcmV0dXJuIDE7XG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHNpZ24gYml0cyBhcmUgdGhlIHNhbWVcbiAgaWYgKCF0aGlzLnVuc2lnbmVkKSByZXR1cm4gdGhpcy5zdWIob3RoZXIpLmlzTmVnYXRpdmUoKSA/IC0xIDogMTtcbiAgLy8gQm90aCBhcmUgcG9zaXRpdmUgaWYgYXQgbGVhc3Qgb25lIGlzIHVuc2lnbmVkXG4gIHJldHVybiBvdGhlci5oaWdoID4+PiAwID4gdGhpcy5oaWdoID4+PiAwIHx8XG4gICAgKG90aGVyLmhpZ2ggPT09IHRoaXMuaGlnaCAmJiBvdGhlci5sb3cgPj4+IDAgPiB0aGlzLmxvdyA+Pj4gMClcbiAgICA/IC0xXG4gICAgOiAxO1xufTtcblxuLyoqXG4gKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNjb21wYXJlfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcbiAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcbiAqL1xuTG9uZ1Byb3RvdHlwZS5jb21wID0gTG9uZ1Byb3RvdHlwZS5jb21wYXJlO1xuXG4vKipcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IUxvbmd9IE5lZ2F0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcbiAgaWYgKCF0aGlzLnVuc2lnbmVkICYmIHRoaXMuZXEoTUlOX1ZBTFVFKSkgcmV0dXJuIE1JTl9WQUxVRTtcbiAgcmV0dXJuIHRoaXMubm90KCkuYWRkKE9ORSk7XG59O1xuXG4vKipcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbmVnYXRlfS5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS5uZWcgPSBMb25nUHJvdG90eXBlLm5lZ2F0ZTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gYWRkZW5kIEFkZGVuZFxuICogQHJldHVybnMgeyFMb25nfSBTdW1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoYWRkZW5kKSB7XG4gIGlmICghaXNMb25nKGFkZGVuZCkpIGFkZGVuZCA9IGZyb21WYWx1ZShhZGRlbmQpO1xuXG4gIC8vIERpdmlkZSBlYWNoIG51bWJlciBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIHN1bSB0aGUgY2h1bmtzLlxuXG4gIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xuICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhmZmZmO1xuICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xuICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweGZmZmY7XG5cbiAgdmFyIGI0OCA9IGFkZGVuZC5oaWdoID4+PiAxNjtcbiAgdmFyIGIzMiA9IGFkZGVuZC5oaWdoICYgMHhmZmZmO1xuICB2YXIgYjE2ID0gYWRkZW5kLmxvdyA+Pj4gMTY7XG4gIHZhciBiMDAgPSBhZGRlbmQubG93ICYgMHhmZmZmO1xuXG4gIHZhciBjNDggPSAwLFxuICAgIGMzMiA9IDAsXG4gICAgYzE2ID0gMCxcbiAgICBjMDAgPSAwO1xuICBjMDAgKz0gYTAwICsgYjAwO1xuICBjMTYgKz0gYzAwID4+PiAxNjtcbiAgYzAwICY9IDB4ZmZmZjtcbiAgYzE2ICs9IGExNiArIGIxNjtcbiAgYzMyICs9IGMxNiA+Pj4gMTY7XG4gIGMxNiAmPSAweGZmZmY7XG4gIGMzMiArPSBhMzIgKyBiMzI7XG4gIGM0OCArPSBjMzIgPj4+IDE2O1xuICBjMzIgJj0gMHhmZmZmO1xuICBjNDggKz0gYTQ4ICsgYjQ4O1xuICBjNDggJj0gMHhmZmZmO1xuICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBzdWJ0cmFoZW5kIFN1YnRyYWhlbmRcbiAqIEByZXR1cm5zIHshTG9uZ30gRGlmZmVyZW5jZVxuICovXG5Mb25nUHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3Qoc3VidHJhaGVuZCkge1xuICBpZiAoIWlzTG9uZyhzdWJ0cmFoZW5kKSkgc3VidHJhaGVuZCA9IGZyb21WYWx1ZShzdWJ0cmFoZW5kKTtcbiAgcmV0dXJuIHRoaXMuYWRkKHN1YnRyYWhlbmQubmVnKCkpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzdWJ0cmFjdH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxuICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXG4gKi9cbkxvbmdQcm90b3R5cGUuc3ViID0gTG9uZ1Byb3RvdHlwZS5zdWJ0cmFjdDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XG4gKi9cbkxvbmdQcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbiBtdWx0aXBseShtdWx0aXBsaWVyKSB7XG4gIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gdGhpcztcbiAgaWYgKCFpc0xvbmcobXVsdGlwbGllcikpIG11bHRpcGxpZXIgPSBmcm9tVmFsdWUobXVsdGlwbGllcik7XG5cbiAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XG4gIGlmICh3YXNtKSB7XG4gICAgdmFyIGxvdyA9IHdhc21bXCJtdWxcIl0odGhpcy5sb3csIHRoaXMuaGlnaCwgbXVsdGlwbGllci5sb3csIG11bHRpcGxpZXIuaGlnaCk7XG4gICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbVtcImdldF9oaWdoXCJdKCksIHRoaXMudW5zaWduZWQpO1xuICB9XG5cbiAgaWYgKG11bHRpcGxpZXIuaXNaZXJvKCkpIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xuICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKSByZXR1cm4gbXVsdGlwbGllci5pc09kZCgpID8gTUlOX1ZBTFVFIDogWkVSTztcbiAgaWYgKG11bHRpcGxpZXIuZXEoTUlOX1ZBTFVFKSkgcmV0dXJuIHRoaXMuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XG5cbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XG4gICAgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKSByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllci5uZWcoKSk7XG4gICAgZWxzZSByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllcikubmVnKCk7XG4gIH0gZWxzZSBpZiAobXVsdGlwbGllci5pc05lZ2F0aXZlKCkpIHJldHVybiB0aGlzLm11bChtdWx0aXBsaWVyLm5lZygpKS5uZWcoKTtcblxuICAvLyBJZiBib3RoIGxvbmdzIGFyZSBzbWFsbCwgdXNlIGZsb2F0IG11bHRpcGxpY2F0aW9uXG4gIGlmICh0aGlzLmx0KFRXT19QV1JfMjQpICYmIG11bHRpcGxpZXIubHQoVFdPX1BXUl8yNCkpXG4gICAgcmV0dXJuIGZyb21OdW1iZXIodGhpcy50b051bWJlcigpICogbXVsdGlwbGllci50b051bWJlcigpLCB0aGlzLnVuc2lnbmVkKTtcblxuICAvLyBEaXZpZGUgZWFjaCBsb25nIGludG8gNCBjaHVua3Mgb2YgMTYgYml0cywgYW5kIHRoZW4gYWRkIHVwIDR4NCBwcm9kdWN0cy5cbiAgLy8gV2UgY2FuIHNraXAgcHJvZHVjdHMgdGhhdCB3b3VsZCBvdmVyZmxvdy5cblxuICB2YXIgYTQ4ID0gdGhpcy5oaWdoID4+PiAxNjtcbiAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4ZmZmZjtcbiAgdmFyIGExNiA9IHRoaXMubG93ID4+PiAxNjtcbiAgdmFyIGEwMCA9IHRoaXMubG93ICYgMHhmZmZmO1xuXG4gIHZhciBiNDggPSBtdWx0aXBsaWVyLmhpZ2ggPj4+IDE2O1xuICB2YXIgYjMyID0gbXVsdGlwbGllci5oaWdoICYgMHhmZmZmO1xuICB2YXIgYjE2ID0gbXVsdGlwbGllci5sb3cgPj4+IDE2O1xuICB2YXIgYjAwID0gbXVsdGlwbGllci5sb3cgJiAweGZmZmY7XG5cbiAgdmFyIGM0OCA9IDAsXG4gICAgYzMyID0gMCxcbiAgICBjMTYgPSAwLFxuICAgIGMwMCA9IDA7XG4gIGMwMCArPSBhMDAgKiBiMDA7XG4gIGMxNiArPSBjMDAgPj4+IDE2O1xuICBjMDAgJj0gMHhmZmZmO1xuICBjMTYgKz0gYTE2ICogYjAwO1xuICBjMzIgKz0gYzE2ID4+PiAxNjtcbiAgYzE2ICY9IDB4ZmZmZjtcbiAgYzE2ICs9IGEwMCAqIGIxNjtcbiAgYzMyICs9IGMxNiA+Pj4gMTY7XG4gIGMxNiAmPSAweGZmZmY7XG4gIGMzMiArPSBhMzIgKiBiMDA7XG4gIGM0OCArPSBjMzIgPj4+IDE2O1xuICBjMzIgJj0gMHhmZmZmO1xuICBjMzIgKz0gYTE2ICogYjE2O1xuICBjNDggKz0gYzMyID4+PiAxNjtcbiAgYzMyICY9IDB4ZmZmZjtcbiAgYzMyICs9IGEwMCAqIGIzMjtcbiAgYzQ4ICs9IGMzMiA+Pj4gMTY7XG4gIGMzMiAmPSAweGZmZmY7XG4gIGM0OCArPSBhNDggKiBiMDAgKyBhMzIgKiBiMTYgKyBhMTYgKiBiMzIgKyBhMDAgKiBiNDg7XG4gIGM0OCAmPSAweGZmZmY7XG4gIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtdWx0aXBseX0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XG4gKi9cbkxvbmdQcm90b3R5cGUubXVsID0gTG9uZ1Byb3RvdHlwZS5tdWx0aXBseTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBkaXZpZGVkIGJ5IHRoZSBzcGVjaWZpZWQuIFRoZSByZXN1bHQgaXMgc2lnbmVkIGlmIHRoaXMgTG9uZyBpcyBzaWduZWQgb3JcbiAqICB1bnNpZ25lZCBpZiB0aGlzIExvbmcgaXMgdW5zaWduZWQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcbiAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcbiAqL1xuTG9uZ1Byb3RvdHlwZS5kaXZpZGUgPSBmdW5jdGlvbiBkaXZpZGUoZGl2aXNvcikge1xuICBpZiAoIWlzTG9uZyhkaXZpc29yKSkgZGl2aXNvciA9IGZyb21WYWx1ZShkaXZpc29yKTtcbiAgaWYgKGRpdmlzb3IuaXNaZXJvKCkpIHRocm93IEVycm9yKFwiZGl2aXNpb24gYnkgemVyb1wiKTtcblxuICAvLyB1c2Ugd2FzbSBzdXBwb3J0IGlmIHByZXNlbnRcbiAgaWYgKHdhc20pIHtcbiAgICAvLyBndWFyZCBhZ2FpbnN0IHNpZ25lZCBkaXZpc2lvbiBvdmVyZmxvdzogdGhlIGxhcmdlc3RcbiAgICAvLyBuZWdhdGl2ZSBudW1iZXIgLyAtMSB3b3VsZCBiZSAxIGxhcmdlciB0aGFuIHRoZSBsYXJnZXN0XG4gICAgLy8gcG9zaXRpdmUgbnVtYmVyLCBkdWUgdG8gdHdvJ3MgY29tcGxlbWVudC5cbiAgICBpZiAoXG4gICAgICAhdGhpcy51bnNpZ25lZCAmJlxuICAgICAgdGhpcy5oaWdoID09PSAtMHg4MDAwMDAwMCAmJlxuICAgICAgZGl2aXNvci5sb3cgPT09IC0xICYmXG4gICAgICBkaXZpc29yLmhpZ2ggPT09IC0xXG4gICAgKSB7XG4gICAgICAvLyBiZSBjb25zaXN0ZW50IHdpdGggbm9uLXdhc20gY29kZSBwYXRoXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIGxvdyA9ICh0aGlzLnVuc2lnbmVkID8gd2FzbVtcImRpdl91XCJdIDogd2FzbVtcImRpdl9zXCJdKShcbiAgICAgIHRoaXMubG93LFxuICAgICAgdGhpcy5oaWdoLFxuICAgICAgZGl2aXNvci5sb3csXG4gICAgICBkaXZpc29yLmhpZ2gsXG4gICAgKTtcbiAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtW1wiZ2V0X2hpZ2hcIl0oKSwgdGhpcy51bnNpZ25lZCk7XG4gIH1cblxuICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XG4gIHZhciBhcHByb3gsIHJlbSwgcmVzO1xuICBpZiAoIXRoaXMudW5zaWduZWQpIHtcbiAgICAvLyBUaGlzIHNlY3Rpb24gaXMgb25seSByZWxldmFudCBmb3Igc2lnbmVkIGxvbmdzIGFuZCBpcyBkZXJpdmVkIGZyb20gdGhlXG4gICAgLy8gY2xvc3VyZSBsaWJyYXJ5IGFzIGEgd2hvbGUuXG4gICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xuICAgICAgaWYgKGRpdmlzb3IuZXEoT05FKSB8fCBkaXZpc29yLmVxKE5FR19PTkUpKVxuICAgICAgICByZXR1cm4gTUlOX1ZBTFVFOyAvLyByZWNhbGwgdGhhdCAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRVxuICAgICAgZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKSByZXR1cm4gT05FO1xuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgfG90aGVyfCA+PSAyLCBzbyB8dGhpcy9vdGhlcnwgPCB8TUlOX1ZBTFVFfC5cbiAgICAgICAgdmFyIGhhbGZUaGlzID0gdGhpcy5zaHIoMSk7XG4gICAgICAgIGFwcHJveCA9IGhhbGZUaGlzLmRpdihkaXZpc29yKS5zaGwoMSk7XG4gICAgICAgIGlmIChhcHByb3guZXEoWkVSTykpIHtcbiAgICAgICAgICByZXR1cm4gZGl2aXNvci5pc05lZ2F0aXZlKCkgPyBPTkUgOiBORUdfT05FO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbSA9IHRoaXMuc3ViKGRpdmlzb3IubXVsKGFwcHJveCkpO1xuICAgICAgICAgIHJlcyA9IGFwcHJveC5hZGQocmVtLmRpdihkaXZpc29yKSk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKSByZXR1cm4gdGhpcy51bnNpZ25lZCA/IFVaRVJPIDogWkVSTztcbiAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHtcbiAgICAgIGlmIChkaXZpc29yLmlzTmVnYXRpdmUoKSkgcmV0dXJuIHRoaXMubmVnKCkuZGl2KGRpdmlzb3IubmVnKCkpO1xuICAgICAgcmV0dXJuIHRoaXMubmVnKCkuZGl2KGRpdmlzb3IpLm5lZygpO1xuICAgIH0gZWxzZSBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpIHJldHVybiB0aGlzLmRpdihkaXZpc29yLm5lZygpKS5uZWcoKTtcbiAgICByZXMgPSBaRVJPO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBhbGdvcml0aG0gYmVsb3cgaGFzIG5vdCBiZWVuIG1hZGUgZm9yIHVuc2lnbmVkIGxvbmdzLiBJdCdzIHRoZXJlZm9yZVxuICAgIC8vIHJlcXVpcmVkIHRvIHRha2Ugc3BlY2lhbCBjYXJlIG9mIHRoZSBNU0IgcHJpb3IgdG8gcnVubmluZyBpdC5cbiAgICBpZiAoIWRpdmlzb3IudW5zaWduZWQpIGRpdmlzb3IgPSBkaXZpc29yLnRvVW5zaWduZWQoKTtcbiAgICBpZiAoZGl2aXNvci5ndCh0aGlzKSkgcmV0dXJuIFVaRVJPO1xuICAgIGlmIChkaXZpc29yLmd0KHRoaXMuc2hydSgxKSkpXG4gICAgICAvLyAxNSA+Pj4gMSA9IDcgOyB3aXRoIGRpdmlzb3IgPSA4IDsgdHJ1ZVxuICAgICAgcmV0dXJuIFVPTkU7XG4gICAgcmVzID0gVVpFUk87XG4gIH1cblxuICAvLyBSZXBlYXQgdGhlIGZvbGxvd2luZyB1bnRpbCB0aGUgcmVtYWluZGVyIGlzIGxlc3MgdGhhbiBvdGhlcjogIGZpbmQgYVxuICAvLyBmbG9hdGluZy1wb2ludCB0aGF0IGFwcHJveGltYXRlcyByZW1haW5kZXIgLyBvdGhlciAqZnJvbSBiZWxvdyosIGFkZCB0aGlzXG4gIC8vIGludG8gdGhlIHJlc3VsdCwgYW5kIHN1YnRyYWN0IGl0IGZyb20gdGhlIHJlbWFpbmRlci4gIEl0IGlzIGNyaXRpY2FsIHRoYXRcbiAgLy8gdGhlIGFwcHJveGltYXRlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVhbCB2YWx1ZSBzbyB0aGF0IHRoZVxuICAvLyByZW1haW5kZXIgbmV2ZXIgYmVjb21lcyBuZWdhdGl2ZS5cbiAgcmVtID0gdGhpcztcbiAgd2hpbGUgKHJlbS5ndGUoZGl2aXNvcikpIHtcbiAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXG4gICAgLy8gc21hbGxlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXG4gICAgYXBwcm94ID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihyZW0udG9OdW1iZXIoKSAvIGRpdmlzb3IudG9OdW1iZXIoKSkpO1xuXG4gICAgLy8gV2Ugd2lsbCB0d2VhayB0aGUgYXBwcm94aW1hdGUgcmVzdWx0IGJ5IGNoYW5naW5nIGl0IGluIHRoZSA0OC10aCBkaWdpdCBvclxuICAgIC8vIHRoZSBzbWFsbGVzdCBub24tZnJhY3Rpb25hbCBkaWdpdCwgd2hpY2hldmVyIGlzIGxhcmdlci5cbiAgICB2YXIgbG9nMiA9IE1hdGguY2VpbChNYXRoLmxvZyhhcHByb3gpIC8gTWF0aC5MTjIpLFxuICAgICAgZGVsdGEgPSBsb2cyIDw9IDQ4ID8gMSA6IHBvd19kYmwoMiwgbG9nMiAtIDQ4KSxcbiAgICAgIC8vIERlY3JlYXNlIHRoZSBhcHByb3hpbWF0aW9uIHVudGlsIGl0IGlzIHNtYWxsZXIgdGhhbiB0aGUgcmVtYWluZGVyLiAgTm90ZVxuICAgICAgLy8gdGhhdCBpZiBpdCBpcyB0b28gbGFyZ2UsIHRoZSBwcm9kdWN0IG92ZXJmbG93cyBhbmQgaXMgbmVnYXRpdmUuXG4gICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCksXG4gICAgICBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsKGRpdmlzb3IpO1xuICAgIHdoaWxlIChhcHByb3hSZW0uaXNOZWdhdGl2ZSgpIHx8IGFwcHJveFJlbS5ndChyZW0pKSB7XG4gICAgICBhcHByb3ggLT0gZGVsdGE7XG4gICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCwgdGhpcy51bnNpZ25lZCk7XG4gICAgICBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsKGRpdmlzb3IpO1xuICAgIH1cblxuICAgIC8vIFdlIGtub3cgdGhlIGFuc3dlciBjYW4ndCBiZSB6ZXJvLi4uIGFuZCBhY3R1YWxseSwgemVybyB3b3VsZCBjYXVzZVxuICAgIC8vIGluZmluaXRlIHJlY3Vyc2lvbiBzaW5jZSB3ZSB3b3VsZCBtYWtlIG5vIHByb2dyZXNzLlxuICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpIGFwcHJveFJlcyA9IE9ORTtcblxuICAgIHJlcyA9IHJlcy5hZGQoYXBwcm94UmVzKTtcbiAgICByZW0gPSByZW0uc3ViKGFwcHJveFJlbSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2RpdmlkZX0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxuICogQHJldHVybnMgeyFMb25nfSBRdW90aWVudFxuICovXG5Mb25nUHJvdG90eXBlLmRpdiA9IExvbmdQcm90b3R5cGUuZGl2aWRlO1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gZGl2aXNvciBEaXZpc29yXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxuICovXG5Mb25nUHJvdG90eXBlLm1vZHVsbyA9IGZ1bmN0aW9uIG1vZHVsbyhkaXZpc29yKSB7XG4gIGlmICghaXNMb25nKGRpdmlzb3IpKSBkaXZpc29yID0gZnJvbVZhbHVlKGRpdmlzb3IpO1xuXG4gIC8vIHVzZSB3YXNtIHN1cHBvcnQgaWYgcHJlc2VudFxuICBpZiAod2FzbSkge1xuICAgIHZhciBsb3cgPSAodGhpcy51bnNpZ25lZCA/IHdhc21bXCJyZW1fdVwiXSA6IHdhc21bXCJyZW1fc1wiXSkoXG4gICAgICB0aGlzLmxvdyxcbiAgICAgIHRoaXMuaGlnaCxcbiAgICAgIGRpdmlzb3IubG93LFxuICAgICAgZGl2aXNvci5oaWdoLFxuICAgICk7XG4gICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbVtcImdldF9oaWdoXCJdKCksIHRoaXMudW5zaWduZWQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuc3ViKHRoaXMuZGl2KGRpdmlzb3IpLm11bChkaXZpc29yKSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI21vZHVsb30uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfGJpZ2ludHxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcbiAqL1xuTG9uZ1Byb3RvdHlwZS5tb2QgPSBMb25nUHJvdG90eXBlLm1vZHVsbztcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcbiAqIEByZXR1cm5zIHshTG9uZ30gUmVtYWluZGVyXG4gKi9cbkxvbmdQcm90b3R5cGUucmVtID0gTG9uZ1Byb3RvdHlwZS5tb2R1bG87XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZSBOT1Qgb2YgdGhpcyBMb25nLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMgeyFMb25nfVxuICovXG5Mb25nUHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uIG5vdCgpIHtcbiAgcmV0dXJuIGZyb21CaXRzKH50aGlzLmxvdywgfnRoaXMuaGlnaCwgdGhpcy51bnNpZ25lZCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgY291bnQgbGVhZGluZyB6ZXJvcyBvZiB0aGlzIExvbmcuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IW51bWJlcn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5jb3VudExlYWRpbmdaZXJvcyA9IGZ1bmN0aW9uIGNvdW50TGVhZGluZ1plcm9zKCkge1xuICByZXR1cm4gdGhpcy5oaWdoID8gTWF0aC5jbHozMih0aGlzLmhpZ2gpIDogTWF0aC5jbHozMih0aGlzLmxvdykgKyAzMjtcbn07XG5cbi8qKlxuICogUmV0dXJucyBjb3VudCBsZWFkaW5nIHplcm9zLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2NvdW50TGVhZGluZ1plcm9zfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ31cbiAqIEByZXR1cm5zIHshbnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLmNseiA9IExvbmdQcm90b3R5cGUuY291bnRMZWFkaW5nWmVyb3M7XG5cbi8qKlxuICogUmV0dXJucyBjb3VudCB0cmFpbGluZyB6ZXJvcyBvZiB0aGlzIExvbmcuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IW51bWJlcn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5jb3VudFRyYWlsaW5nWmVyb3MgPSBmdW5jdGlvbiBjb3VudFRyYWlsaW5nWmVyb3MoKSB7XG4gIHJldHVybiB0aGlzLmxvdyA/IGN0ejMyKHRoaXMubG93KSA6IGN0ejMyKHRoaXMuaGlnaCkgKyAzMjtcbn07XG5cbi8qKlxuICogUmV0dXJucyBjb3VudCB0cmFpbGluZyB6ZXJvcy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNjb3VudFRyYWlsaW5nWmVyb3N9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfVxuICogQHJldHVybnMgeyFudW1iZXJ9XG4gKi9cbkxvbmdQcm90b3R5cGUuY3R6ID0gTG9uZ1Byb3RvdHlwZS5jb3VudFRyYWlsaW5nWmVyb3M7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZSBBTkQgb2YgdGhpcyBMb25nIGFuZCB0aGUgc3BlY2lmaWVkLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xuICogQHJldHVybnMgeyFMb25nfVxuICovXG5Mb25nUHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZChvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93ICYgb3RoZXIubG93LCB0aGlzLmhpZ2ggJiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZSBPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxiaWdpbnR8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKi9cbkxvbmdQcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvcihvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IHwgb3RoZXIubG93LCB0aGlzLmhpZ2ggfCBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZSBYT1Igb2YgdGhpcyBMb25nIGFuZCB0aGUgZ2l2ZW4gb25lLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8YmlnaW50fHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xuICogQHJldHVybnMgeyFMb25nfVxuICovXG5Mb25nUHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvcihvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IF4gb3RoZXIubG93LCB0aGlzLmhpZ2ggXiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHNoaWZ0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnNoaWZ0TGVmdCA9IGZ1bmN0aW9uIHNoaWZ0TGVmdChudW1CaXRzKSB7XG4gIGlmIChpc0xvbmcobnVtQml0cykpIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XG4gIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApIHJldHVybiB0aGlzO1xuICBlbHNlIGlmIChudW1CaXRzIDwgMzIpXG4gICAgcmV0dXJuIGZyb21CaXRzKFxuICAgICAgdGhpcy5sb3cgPDwgbnVtQml0cyxcbiAgICAgICh0aGlzLmhpZ2ggPDwgbnVtQml0cykgfCAodGhpcy5sb3cgPj4+ICgzMiAtIG51bUJpdHMpKSxcbiAgICAgIHRoaXMudW5zaWduZWQsXG4gICAgKTtcbiAgZWxzZSByZXR1cm4gZnJvbUJpdHMoMCwgdGhpcy5sb3cgPDwgKG51bUJpdHMgLSAzMiksIHRoaXMudW5zaWduZWQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0TGVmdH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnNobCA9IExvbmdQcm90b3R5cGUuc2hpZnRMZWZ0O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUuc2hpZnRSaWdodCA9IGZ1bmN0aW9uIHNoaWZ0UmlnaHQobnVtQml0cykge1xuICBpZiAoaXNMb25nKG51bUJpdHMpKSBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xuICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKSByZXR1cm4gdGhpcztcbiAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxuICAgIHJldHVybiBmcm9tQml0cyhcbiAgICAgICh0aGlzLmxvdyA+Pj4gbnVtQml0cykgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG51bUJpdHMpKSxcbiAgICAgIHRoaXMuaGlnaCA+PiBudW1CaXRzLFxuICAgICAgdGhpcy51bnNpZ25lZCxcbiAgICApO1xuICBlbHNlXG4gICAgcmV0dXJuIGZyb21CaXRzKFxuICAgICAgdGhpcy5oaWdoID4+IChudW1CaXRzIC0gMzIpLFxuICAgICAgdGhpcy5oaWdoID49IDAgPyAwIDogLTEsXG4gICAgICB0aGlzLnVuc2lnbmVkLFxuICAgICk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0UmlnaHR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS5zaHIgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQ7XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkID0gZnVuY3Rpb24gc2hpZnRSaWdodFVuc2lnbmVkKG51bUJpdHMpIHtcbiAgaWYgKGlzTG9uZyhudW1CaXRzKSkgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcbiAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIGlmIChudW1CaXRzIDwgMzIpXG4gICAgcmV0dXJuIGZyb21CaXRzKFxuICAgICAgKHRoaXMubG93ID4+PiBudW1CaXRzKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLFxuICAgICAgdGhpcy5oaWdoID4+PiBudW1CaXRzLFxuICAgICAgdGhpcy51bnNpZ25lZCxcbiAgICApO1xuICBpZiAobnVtQml0cyA9PT0gMzIpIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2gsIDAsIHRoaXMudW5zaWduZWQpO1xuICByZXR1cm4gZnJvbUJpdHModGhpcy5oaWdoID4+PiAobnVtQml0cyAtIDMyKSwgMCwgdGhpcy51bnNpZ25lZCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0VW5zaWduZWR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS5zaHJ1ID0gTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQ7XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0UmlnaHRVbnNpZ25lZH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnNocl91ID0gTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQ7XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHJvdGF0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJvdGF0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnJvdGF0ZUxlZnQgPSBmdW5jdGlvbiByb3RhdGVMZWZ0KG51bUJpdHMpIHtcbiAgdmFyIGI7XG4gIGlmIChpc0xvbmcobnVtQml0cykpIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XG4gIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApIHJldHVybiB0aGlzO1xuICBpZiAobnVtQml0cyA9PT0gMzIpIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2gsIHRoaXMubG93LCB0aGlzLnVuc2lnbmVkKTtcbiAgaWYgKG51bUJpdHMgPCAzMikge1xuICAgIGIgPSAzMiAtIG51bUJpdHM7XG4gICAgcmV0dXJuIGZyb21CaXRzKFxuICAgICAgKHRoaXMubG93IDw8IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA+Pj4gYiksXG4gICAgICAodGhpcy5oaWdoIDw8IG51bUJpdHMpIHwgKHRoaXMubG93ID4+PiBiKSxcbiAgICAgIHRoaXMudW5zaWduZWQsXG4gICAgKTtcbiAgfVxuICBudW1CaXRzIC09IDMyO1xuICBiID0gMzIgLSBudW1CaXRzO1xuICByZXR1cm4gZnJvbUJpdHMoXG4gICAgKHRoaXMuaGlnaCA8PCBudW1CaXRzKSB8ICh0aGlzLmxvdyA+Pj4gYiksXG4gICAgKHRoaXMubG93IDw8IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA+Pj4gYiksXG4gICAgdGhpcy51bnNpZ25lZCxcbiAgKTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyByb3RhdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjcm90YXRlTGVmdH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJvdGF0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnJvdGwgPSBMb25nUHJvdG90eXBlLnJvdGF0ZUxlZnQ7XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHJvdGF0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xuICogQHJldHVybnMgeyFMb25nfSBSb3RhdGVkIExvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS5yb3RhdGVSaWdodCA9IGZ1bmN0aW9uIHJvdGF0ZVJpZ2h0KG51bUJpdHMpIHtcbiAgdmFyIGI7XG4gIGlmIChpc0xvbmcobnVtQml0cykpIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XG4gIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApIHJldHVybiB0aGlzO1xuICBpZiAobnVtQml0cyA9PT0gMzIpIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2gsIHRoaXMubG93LCB0aGlzLnVuc2lnbmVkKTtcbiAgaWYgKG51bUJpdHMgPCAzMikge1xuICAgIGIgPSAzMiAtIG51bUJpdHM7XG4gICAgcmV0dXJuIGZyb21CaXRzKFxuICAgICAgKHRoaXMuaGlnaCA8PCBiKSB8ICh0aGlzLmxvdyA+Pj4gbnVtQml0cyksXG4gICAgICAodGhpcy5sb3cgPDwgYikgfCAodGhpcy5oaWdoID4+PiBudW1CaXRzKSxcbiAgICAgIHRoaXMudW5zaWduZWQsXG4gICAgKTtcbiAgfVxuICBudW1CaXRzIC09IDMyO1xuICBiID0gMzIgLSBudW1CaXRzO1xuICByZXR1cm4gZnJvbUJpdHMoXG4gICAgKHRoaXMubG93IDw8IGIpIHwgKHRoaXMuaGlnaCA+Pj4gbnVtQml0cyksXG4gICAgKHRoaXMuaGlnaCA8PCBiKSB8ICh0aGlzLmxvdyA+Pj4gbnVtQml0cyksXG4gICAgdGhpcy51bnNpZ25lZCxcbiAgKTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyByb3RhdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3JvdGF0ZVJpZ2h0fS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gUm90YXRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUucm90ciA9IExvbmdQcm90b3R5cGUucm90YXRlUmlnaHQ7XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIHNpZ25lZC5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshTG9uZ30gU2lnbmVkIGxvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS50b1NpZ25lZCA9IGZ1bmN0aW9uIHRvU2lnbmVkKCkge1xuICBpZiAoIXRoaXMudW5zaWduZWQpIHJldHVybiB0aGlzO1xuICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gdW5zaWduZWQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IUxvbmd9IFVuc2lnbmVkIGxvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS50b1Vuc2lnbmVkID0gZnVuY3Rpb24gdG9VbnNpZ25lZCgpIHtcbiAgaWYgKHRoaXMudW5zaWduZWQpIHJldHVybiB0aGlzO1xuICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGxlIFdoZXRoZXIgbGl0dGxlIG9yIGJpZyBlbmRpYW4sIGRlZmF1bHRzIHRvIGJpZyBlbmRpYW5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJ5dGUgcmVwcmVzZW50YXRpb25cbiAqL1xuTG9uZ1Byb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcyhsZSkge1xuICByZXR1cm4gbGUgPyB0aGlzLnRvQnl0ZXNMRSgpIDogdGhpcy50b0J5dGVzQkUoKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBsaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cbiAqL1xuTG9uZ1Byb3RvdHlwZS50b0J5dGVzTEUgPSBmdW5jdGlvbiB0b0J5dGVzTEUoKSB7XG4gIHZhciBoaSA9IHRoaXMuaGlnaCxcbiAgICBsbyA9IHRoaXMubG93O1xuICByZXR1cm4gW1xuICAgIGxvICYgMHhmZixcbiAgICAobG8gPj4+IDgpICYgMHhmZixcbiAgICAobG8gPj4+IDE2KSAmIDB4ZmYsXG4gICAgbG8gPj4+IDI0LFxuICAgIGhpICYgMHhmZixcbiAgICAoaGkgPj4+IDgpICYgMHhmZixcbiAgICAoaGkgPj4+IDE2KSAmIDB4ZmYsXG4gICAgaGkgPj4+IDI0LFxuICBdO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvblxuICovXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXNCRSA9IGZ1bmN0aW9uIHRvQnl0ZXNCRSgpIHtcbiAgdmFyIGhpID0gdGhpcy5oaWdoLFxuICAgIGxvID0gdGhpcy5sb3c7XG4gIHJldHVybiBbXG4gICAgaGkgPj4+IDI0LFxuICAgIChoaSA+Pj4gMTYpICYgMHhmZixcbiAgICAoaGkgPj4+IDgpICYgMHhmZixcbiAgICBoaSAmIDB4ZmYsXG4gICAgbG8gPj4+IDI0LFxuICAgIChsbyA+Pj4gMTYpICYgMHhmZixcbiAgICAobG8gPj4+IDgpICYgMHhmZixcbiAgICBsbyAmIDB4ZmYsXG4gIF07XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBMb25nIGZyb20gaXRzIGJ5dGUgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgQnl0ZSByZXByZXNlbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxuICogQHBhcmFtIHtib29sZWFuPX0gbGUgV2hldGhlciBsaXR0bGUgb3IgYmlnIGVuZGlhbiwgZGVmYXVsdHMgdG8gYmlnIGVuZGlhblxuICogQHJldHVybnMge0xvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tQnl0ZXMgPSBmdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMsIHVuc2lnbmVkLCBsZSkge1xuICByZXR1cm4gbGVcbiAgICA/IExvbmcuZnJvbUJ5dGVzTEUoYnl0ZXMsIHVuc2lnbmVkKVxuICAgIDogTG9uZy5mcm9tQnl0ZXNCRShieXRlcywgdW5zaWduZWQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBsaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgTGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7TG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxuICovXG5Mb25nLmZyb21CeXRlc0xFID0gZnVuY3Rpb24gZnJvbUJ5dGVzTEUoYnl0ZXMsIHVuc2lnbmVkKSB7XG4gIHJldHVybiBuZXcgTG9uZyhcbiAgICBieXRlc1swXSB8IChieXRlc1sxXSA8PCA4KSB8IChieXRlc1syXSA8PCAxNikgfCAoYnl0ZXNbM10gPDwgMjQpLFxuICAgIGJ5dGVzWzRdIHwgKGJ5dGVzWzVdIDw8IDgpIHwgKGJ5dGVzWzZdIDw8IDE2KSB8IChieXRlc1s3XSA8PCAyNCksXG4gICAgdW5zaWduZWQsXG4gICk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBMb25nIGZyb20gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBieXRlcyBCaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcbiAqIEByZXR1cm5zIHtMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXG4gKi9cbkxvbmcuZnJvbUJ5dGVzQkUgPSBmdW5jdGlvbiBmcm9tQnl0ZXNCRShieXRlcywgdW5zaWduZWQpIHtcbiAgcmV0dXJuIG5ldyBMb25nKFxuICAgIChieXRlc1s0XSA8PCAyNCkgfCAoYnl0ZXNbNV0gPDwgMTYpIHwgKGJ5dGVzWzZdIDw8IDgpIHwgYnl0ZXNbN10sXG4gICAgKGJ5dGVzWzBdIDw8IDI0KSB8IChieXRlc1sxXSA8PCAxNikgfCAoYnl0ZXNbMl0gPDwgOCkgfCBieXRlc1szXSxcbiAgICB1bnNpZ25lZCxcbiAgKTtcbn07XG5cbi8vIFN1cHBvcnQgY29udmVyc2lvbiB0by9mcm9tIEJpZ0ludCB3aGVyZSBhdmFpbGFibGVcbmlmICh0eXBlb2YgQmlnSW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gYmlnIGludGVnZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIGJpZyBpbnRlZ2VyIHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcbiAgICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXG4gICAqL1xuICBMb25nLmZyb21CaWdJbnQgPSBmdW5jdGlvbiBmcm9tQmlnSW50KHZhbHVlLCB1bnNpZ25lZCkge1xuICAgIHZhciBsb3dCaXRzID0gTnVtYmVyKEJpZ0ludC5hc0ludE4oMzIsIHZhbHVlKSk7XG4gICAgdmFyIGhpZ2hCaXRzID0gTnVtYmVyKEJpZ0ludC5hc0ludE4oMzIsIHZhbHVlID4+IEJpZ0ludCgzMikpKTtcbiAgICByZXR1cm4gZnJvbUJpdHMobG93Qml0cywgaGlnaEJpdHMsIHVuc2lnbmVkKTtcbiAgfTtcblxuICAvLyBPdmVycmlkZVxuICBMb25nLmZyb21WYWx1ZSA9IGZ1bmN0aW9uIGZyb21WYWx1ZVdpdGhCaWdJbnQodmFsdWUsIHVuc2lnbmVkKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikgcmV0dXJuIExvbmcuZnJvbUJpZ0ludCh2YWx1ZSwgdW5zaWduZWQpO1xuICAgIHJldHVybiBmcm9tVmFsdWUodmFsdWUsIHVuc2lnbmVkKTtcbiAgfTtcblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIExvbmcgdG8gaXRzIGJpZyBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uLlxuICAgKiBAdGhpcyB7IUxvbmd9XG4gICAqIEByZXR1cm5zIHtiaWdpbnR9XG4gICAqL1xuICBMb25nUHJvdG90eXBlLnRvQmlnSW50ID0gZnVuY3Rpb24gdG9CaWdJbnQoKSB7XG4gICAgdmFyIGxvd0JpZ0ludCA9IEJpZ0ludCh0aGlzLmxvdyA+Pj4gMCk7XG4gICAgdmFyIGhpZ2hCaWdJbnQgPSBCaWdJbnQodGhpcy51bnNpZ25lZCA/IHRoaXMuaGlnaCA+Pj4gMCA6IHRoaXMuaGlnaCk7XG4gICAgcmV0dXJuIChoaWdoQmlnSW50IDw8IEJpZ0ludCgzMikpIHwgbG93QmlnSW50O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBMb25nO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBDb2xvcjMgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NvbG9ycy5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdmF0YXJTaGFwZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogXCJcIixcbiAgICAgICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICAgICBib2R5U2hhcGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc2tpbkNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgIGhhaXJDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICBleWVDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICBleHByZXNzaW9uVHJpZ2dlcklkOiB1bmRlZmluZWQsXG4gICAgICAgIGV4cHJlc3Npb25UcmlnZ2VyVGltZXN0YW1wOiB1bmRlZmluZWQsXG4gICAgICAgIHRhbGtpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgd2VhcmFibGVzOiBbXSxcbiAgICAgICAgZW1vdGVzOiBbXSxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJBdmF0YXJTaGFwZTtcbihmdW5jdGlvbiAoUEJBdmF0YXJTaGFwZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmlkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib2R5U2hhcGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UuYm9keVNoYXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5za2luQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29sb3IzLmVuY29kZShtZXNzYWdlLnNraW5Db2xvciwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oYWlyQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29sb3IzLmVuY29kZShtZXNzYWdlLmhhaXJDb2xvciwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5leWVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2UuZXllQ29sb3IsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXhwcmVzc2lvblRyaWdnZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU4KS5zdHJpbmcobWVzc2FnZS5leHByZXNzaW9uVHJpZ2dlcklkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5leHByZXNzaW9uVHJpZ2dlclRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDY0KS5pbnQ2NChtZXNzYWdlLmV4cHJlc3Npb25UcmlnZ2VyVGltZXN0YW1wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50YWxraW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNzIpLmJvb2wobWVzc2FnZS50YWxraW5nKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS53ZWFyYWJsZXMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoODIpLnN0cmluZyh2KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5lbW90ZXMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOTApLnN0cmluZyh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQkF2YXRhclNoYXBlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJBdmF0YXJTaGFwZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keVNoYXBlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNraW5Db2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhhaXJDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV5ZUNvbG9yID0gQ29sb3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXhwcmVzc2lvblRyaWdnZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA2NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5leHByZXNzaW9uVHJpZ2dlclRpbWVzdGFtcCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGFsa2luZyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLndlYXJhYmxlcy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDkwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVtb3Rlcy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJBdmF0YXJTaGFwZS5kZWNvZGUgPSBkZWNvZGU7XG59KShQQkF2YXRhclNoYXBlIHx8IChQQkF2YXRhclNoYXBlID0ge30pKTtcbmNvbnN0IHRzUHJvdG9HbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5mdW5jdGlvbiBsb25nVG9OdW1iZXIobG9uZykge1xuICAgIGlmIChsb25nLmd0KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkge1xuICAgICAgICB0aHJvdyBuZXcgdHNQcm90b0dsb2JhbFRoaXMuRXJyb3IoXCJWYWx1ZSBpcyBsYXJnZXIgdGhhbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvbmcudG9OdW1iZXIoKTtcbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuIiwgImltcG9ydCB7IFBCQXZhdGFyU2hhcGUgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdmF0YXJfc2hhcGUuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBBdmF0YXJTaGFwZVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwODAsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQXZhdGFyU2hhcGUuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJBdmF0YXJTaGFwZS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJBdmF0YXJTaGFwZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJBdmF0YXJTaGFwZVwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuLyoqXG4gKiBCaWxsYm9hcmRNb2RlIGluZGljYXRlcyBvbmUgb3IgbW9yZSBheGlzIGZvciBhdXRvbWF0aWMgcm90YXRpb24sIGluIE9SLWFibGUgYml0IGZsYWcgZm9ybS5cbiAqIE9ubHkgdGhlIHZhbHVlcyBiZWxvdyBhbmQgdGhlIChCTV9YIHwgQk1fWSkgY29tYmluYXRpb24gYXJlIHZhbGlkLlxuICovXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBCaWxsYm9hcmRNb2RlO1xuKGZ1bmN0aW9uIChCaWxsYm9hcmRNb2RlKSB7XG4gICAgQmlsbGJvYXJkTW9kZVtCaWxsYm9hcmRNb2RlW1wiQk1fTk9ORVwiXSA9IDBdID0gXCJCTV9OT05FXCI7XG4gICAgQmlsbGJvYXJkTW9kZVtCaWxsYm9hcmRNb2RlW1wiQk1fWFwiXSA9IDFdID0gXCJCTV9YXCI7XG4gICAgQmlsbGJvYXJkTW9kZVtCaWxsYm9hcmRNb2RlW1wiQk1fWVwiXSA9IDJdID0gXCJCTV9ZXCI7XG4gICAgQmlsbGJvYXJkTW9kZVtCaWxsYm9hcmRNb2RlW1wiQk1fWlwiXSA9IDRdID0gXCJCTV9aXCI7XG4gICAgLyoqIEJNX0FMTCAtIGJpdHdpc2UgY29tYmluYXRpb24gQk1fWCB8IEJNX1kgfCBCTV9aICovXG4gICAgQmlsbGJvYXJkTW9kZVtCaWxsYm9hcmRNb2RlW1wiQk1fQUxMXCJdID0gN10gPSBcIkJNX0FMTFwiO1xufSkoQmlsbGJvYXJkTW9kZSB8fCAoQmlsbGJvYXJkTW9kZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJCaWxsYm9hcmQoKSB7XG4gICAgcmV0dXJuIHsgYmlsbGJvYXJkTW9kZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQkJpbGxib2FyZDtcbihmdW5jdGlvbiAoUEJCaWxsYm9hcmQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5iaWxsYm9hcmRNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5iaWxsYm9hcmRNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQkJpbGxib2FyZC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQmlsbGJvYXJkKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5iaWxsYm9hcmRNb2RlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJCaWxsYm9hcmQuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJCaWxsYm9hcmQgfHwgKFBCQmlsbGJvYXJkID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQkJpbGxib2FyZCB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2JpbGxib2FyZC5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEJpbGxib2FyZFNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwOTAsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCQmlsbGJvYXJkLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQmlsbGJvYXJkLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQkJpbGxib2FyZC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJCaWxsYm9hcmRcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkNhbWVyYU1vZGUoKSB7XG4gICAgcmV0dXJuIHsgbW9kZTogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJDYW1lcmFNb2RlO1xuKGZ1bmN0aW9uIChQQkNhbWVyYU1vZGUpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5tb2RlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2UubW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJDYW1lcmFNb2RlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJDYW1lcmFNb2RlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tb2RlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJDYW1lcmFNb2RlLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCQ2FtZXJhTW9kZSB8fCAoUEJDYW1lcmFNb2RlID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQkNhbWVyYU1vZGUgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9jYW1lcmFfbW9kZS5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENhbWVyYU1vZGVTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDcyLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQkNhbWVyYU1vZGUuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJDYW1lcmFNb2RlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQkNhbWVyYU1vZGUuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCQ2FtZXJhTW9kZVwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi92ZWN0b3JzLmdlblwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkNhbWVyYU1vZGVBcmVhKCkge1xuICAgIHJldHVybiB7IGFyZWE6IHVuZGVmaW5lZCwgbW9kZTogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJDYW1lcmFNb2RlQXJlYTtcbihmdW5jdGlvbiAoUEJDYW1lcmFNb2RlQXJlYSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmFyZWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5hcmVhLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1vZGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UubW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJDYW1lcmFNb2RlQXJlYS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQ2FtZXJhTW9kZUFyZWEoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hcmVhID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1vZGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQkNhbWVyYU1vZGVBcmVhLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCQ2FtZXJhTW9kZUFyZWEgfHwgKFBCQ2FtZXJhTW9kZUFyZWEgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCQ2FtZXJhTW9kZUFyZWEgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9jYW1lcmFfbW9kZV9hcmVhLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ2FtZXJhTW9kZUFyZWFTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDcxLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQkNhbWVyYU1vZGVBcmVhLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCQ2FtZXJhTW9kZUFyZWEuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCQ2FtZXJhTW9kZUFyZWEuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCQ2FtZXJhTW9kZUFyZWFcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkVuZ2luZUluZm8oKSB7XG4gICAgcmV0dXJuIHsgZnJhbWVOdW1iZXI6IDAsIHRvdGFsUnVudGltZTogMCwgdGlja051bWJlcjogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJFbmdpbmVJbmZvO1xuKGZ1bmN0aW9uIChQQkVuZ2luZUluZm8pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5mcmFtZU51bWJlciAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50MzIobWVzc2FnZS5mcmFtZU51bWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudG90YWxSdW50aW1lICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLnRvdGFsUnVudGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGlja051bWJlciAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDMyKG1lc3NhZ2UudGlja051bWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJFbmdpbmVJbmZvLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJFbmdpbmVJbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mcmFtZU51bWJlciA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50b3RhbFJ1bnRpbWUgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aWNrTnVtYmVyID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCRW5naW5lSW5mby5kZWNvZGUgPSBkZWNvZGU7XG59KShQQkVuZ2luZUluZm8gfHwgKFBCRW5naW5lSW5mbyA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJFbmdpbmVJbmZvIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvZW5naW5lX2luZm8uZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBFbmdpbmVJbmZvU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA0OCxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJFbmdpbmVJbmZvLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCRW5naW5lSW5mby5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJFbmdpbmVJbmZvLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQkVuZ2luZUluZm9cIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkdsdGZDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIHsgc3JjOiBcIlwiLCB2aXNpYmxlTWVzaGVzQ29sbGlzaW9uTWFzazogdW5kZWZpbmVkLCBpbnZpc2libGVNZXNoZXNDb2xsaXNpb25NYXNrOiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCR2x0ZkNvbnRhaW5lcjtcbihmdW5jdGlvbiAoUEJHbHRmQ29udGFpbmVyKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3JjICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5zcmMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnZpc2libGVNZXNoZXNDb2xsaXNpb25NYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLnVpbnQzMihtZXNzYWdlLnZpc2libGVNZXNoZXNDb2xsaXNpb25NYXNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbnZpc2libGVNZXNoZXNDb2xsaXNpb25NYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLnVpbnQzMihtZXNzYWdlLmludmlzaWJsZU1lc2hlc0NvbGxpc2lvbk1hc2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCR2x0ZkNvbnRhaW5lci5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCR2x0ZkNvbnRhaW5lcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNyYyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52aXNpYmxlTWVzaGVzQ29sbGlzaW9uTWFzayA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbnZpc2libGVNZXNoZXNDb2xsaXNpb25NYXNrID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCR2x0ZkNvbnRhaW5lci5kZWNvZGUgPSBkZWNvZGU7XG59KShQQkdsdGZDb250YWluZXIgfHwgKFBCR2x0ZkNvbnRhaW5lciA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJHbHRmQ29udGFpbmVyIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvZ2x0Zl9jb250YWluZXIuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBHbHRmQ29udGFpbmVyU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA0MSxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJHbHRmQ29udGFpbmVyLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCR2x0ZkNvbnRhaW5lci5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJHbHRmQ29udGFpbmVyLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQkdsdGZDb250YWluZXJcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGUoKSB7XG4gICAgcmV0dXJuIHsgY3VycmVudFN0YXRlOiAwIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGU7XG4oZnVuY3Rpb24gKFBCR2x0ZkNvbnRhaW5lckxvYWRpbmdTdGF0ZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmN1cnJlbnRTdGF0ZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLmN1cnJlbnRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jdXJyZW50U3RhdGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGUuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlIHx8IChQQkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGUgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCR2x0ZkNvbnRhaW5lckxvYWRpbmdTdGF0ZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2dsdGZfY29udGFpbmVyX2xvYWRpbmdfc3RhdGUuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA0OSxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCR2x0ZkNvbnRhaW5lckxvYWRpbmdTdGF0ZS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGVcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQklucHV0TW9kaWZpZXIoKSB7XG4gICAgcmV0dXJuIHsgbW9kZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQklucHV0TW9kaWZpZXI7XG4oZnVuY3Rpb24gKFBCSW5wdXRNb2RpZmllcikge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5tb2RlPy4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcInN0YW5kYXJkXCI6XG4gICAgICAgICAgICAgICAgUEJJbnB1dE1vZGlmaWVyX1N0YW5kYXJkSW5wdXQuZW5jb2RlKG1lc3NhZ2UubW9kZS5zdGFuZGFyZCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQklucHV0TW9kaWZpZXIuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQklucHV0TW9kaWZpZXIoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tb2RlID0geyAkY2FzZTogXCJzdGFuZGFyZFwiLCBzdGFuZGFyZDogUEJJbnB1dE1vZGlmaWVyX1N0YW5kYXJkSW5wdXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCSW5wdXRNb2RpZmllci5kZWNvZGUgPSBkZWNvZGU7XG59KShQQklucHV0TW9kaWZpZXIgfHwgKFBCSW5wdXRNb2RpZmllciA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJJbnB1dE1vZGlmaWVyX1N0YW5kYXJkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzYWJsZUFsbDogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlV2FsazogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlSm9nOiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVSdW46IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZUp1bXA6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZUVtb3RlOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCSW5wdXRNb2RpZmllcl9TdGFuZGFyZElucHV0O1xuKGZ1bmN0aW9uIChQQklucHV0TW9kaWZpZXJfU3RhbmRhcmRJbnB1dCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRpc2FibGVBbGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5ib29sKG1lc3NhZ2UuZGlzYWJsZUFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGlzYWJsZVdhbGsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLmRpc2FibGVXYWxrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlSm9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS5kaXNhYmxlSm9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlUnVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLmJvb2wobWVzc2FnZS5kaXNhYmxlUnVuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlSnVtcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5ib29sKG1lc3NhZ2UuZGlzYWJsZUp1bXApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRpc2FibGVFbW90ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ4KS5ib29sKG1lc3NhZ2UuZGlzYWJsZUVtb3RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQklucHV0TW9kaWZpZXJfU3RhbmRhcmRJbnB1dC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCSW5wdXRNb2RpZmllcl9TdGFuZGFyZElucHV0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kaXNhYmxlQWxsID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kaXNhYmxlV2FsayA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZUpvZyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZVJ1biA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZUp1bXAgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQ4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRpc2FibGVFbW90ZSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJJbnB1dE1vZGlmaWVyX1N0YW5kYXJkSW5wdXQuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJJbnB1dE1vZGlmaWVyX1N0YW5kYXJkSW5wdXQgfHwgKFBCSW5wdXRNb2RpZmllcl9TdGFuZGFyZElucHV0ID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQklucHV0TW9kaWZpZXIgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9pbnB1dF9tb2RpZmllci5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IElucHV0TW9kaWZpZXJTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDc4LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQklucHV0TW9kaWZpZXIuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJJbnB1dE1vZGlmaWVyLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQklucHV0TW9kaWZpZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCSW5wdXRNb2RpZmllclwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWFpbkNhbWVyYSgpIHtcbiAgICByZXR1cm4geyB2aXJ0dWFsQ2FtZXJhRW50aXR5OiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCTWFpbkNhbWVyYTtcbihmdW5jdGlvbiAoUEJNYWluQ2FtZXJhKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudmlydHVhbENhbWVyYUVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLnZpcnR1YWxDYW1lcmFFbnRpdHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCTWFpbkNhbWVyYS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWFpbkNhbWVyYSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmlydHVhbENhbWVyYUVudGl0eSA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQk1haW5DYW1lcmEuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJNYWluQ2FtZXJhIHx8IChQQk1haW5DYW1lcmEgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCTWFpbkNhbWVyYSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL21haW5fY2FtZXJhLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgTWFpbkNhbWVyYVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwNzUsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCTWFpbkNhbWVyYS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQk1haW5DYW1lcmEuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCTWFpbkNhbWVyYS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJNYWluQ2FtZXJhXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IENvbG9yMywgQ29sb3I0IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb2xvcnMuZ2VuXCI7XG5pbXBvcnQgeyBUZXh0dXJlVW5pb24gfSBmcm9tIFwiLi4vLi4vY29tbW9uL3RleHR1cmUuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlO1xuKGZ1bmN0aW9uIChNYXRlcmlhbFRyYW5zcGFyZW5jeU1vZGUpIHtcbiAgICBNYXRlcmlhbFRyYW5zcGFyZW5jeU1vZGVbTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlW1wiTVRNX09QQVFVRVwiXSA9IDBdID0gXCJNVE1fT1BBUVVFXCI7XG4gICAgTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlW01hdGVyaWFsVHJhbnNwYXJlbmN5TW9kZVtcIk1UTV9BTFBIQV9URVNUXCJdID0gMV0gPSBcIk1UTV9BTFBIQV9URVNUXCI7XG4gICAgTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlW01hdGVyaWFsVHJhbnNwYXJlbmN5TW9kZVtcIk1UTV9BTFBIQV9CTEVORFwiXSA9IDJdID0gXCJNVE1fQUxQSEFfQkxFTkRcIjtcbiAgICBNYXRlcmlhbFRyYW5zcGFyZW5jeU1vZGVbTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlW1wiTVRNX0FMUEhBX1RFU1RfQU5EX0FMUEhBX0JMRU5EXCJdID0gM10gPSBcIk1UTV9BTFBIQV9URVNUX0FORF9BTFBIQV9CTEVORFwiO1xuICAgIE1hdGVyaWFsVHJhbnNwYXJlbmN5TW9kZVtNYXRlcmlhbFRyYW5zcGFyZW5jeU1vZGVbXCJNVE1fQVVUT1wiXSA9IDRdID0gXCJNVE1fQVVUT1wiO1xufSkoTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlIHx8IChNYXRlcmlhbFRyYW5zcGFyZW5jeU1vZGUgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWF0ZXJpYWwoKSB7XG4gICAgcmV0dXJuIHsgbWF0ZXJpYWw6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJNYXRlcmlhbDtcbihmdW5jdGlvbiAoUEJNYXRlcmlhbCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5tYXRlcmlhbD8uJGNhc2UpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ1bmxpdFwiOlxuICAgICAgICAgICAgICAgIFBCTWF0ZXJpYWxfVW5saXRNYXRlcmlhbC5lbmNvZGUobWVzc2FnZS5tYXRlcmlhbC51bmxpdCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwYnJcIjpcbiAgICAgICAgICAgICAgICBQQk1hdGVyaWFsX1Bick1hdGVyaWFsLmVuY29kZShtZXNzYWdlLm1hdGVyaWFsLnBiciwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQk1hdGVyaWFsLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJNYXRlcmlhbCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1hdGVyaWFsID0geyAkY2FzZTogXCJ1bmxpdFwiLCB1bmxpdDogUEJNYXRlcmlhbF9VbmxpdE1hdGVyaWFsLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXRlcmlhbCA9IHsgJGNhc2U6IFwicGJyXCIsIHBicjogUEJNYXRlcmlhbF9QYnJNYXRlcmlhbC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJNYXRlcmlhbC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQk1hdGVyaWFsIHx8IChQQk1hdGVyaWFsID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1hdGVyaWFsX1VubGl0TWF0ZXJpYWwoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dHVyZTogdW5kZWZpbmVkLFxuICAgICAgICBhbHBoYVRlc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgY2FzdFNoYWRvd3M6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlmZnVzZUNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgIGFscGhhVGV4dHVyZTogdW5kZWZpbmVkLFxuICAgIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQk1hdGVyaWFsX1VubGl0TWF0ZXJpYWw7XG4oZnVuY3Rpb24gKFBCTWF0ZXJpYWxfVW5saXRNYXRlcmlhbCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnRleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVGV4dHVyZVVuaW9uLmVuY29kZShtZXNzYWdlLnRleHR1cmUsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxwaGFUZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UuYWxwaGFUZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jYXN0U2hhZG93cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UuY2FzdFNoYWRvd3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRpZmZ1c2VDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjQuZW5jb2RlKG1lc3NhZ2UuZGlmZnVzZUNvbG9yLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFscGhhVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUZXh0dXJlVW5pb24uZW5jb2RlKG1lc3NhZ2UuYWxwaGFUZXh0dXJlLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCTWF0ZXJpYWxfVW5saXRNYXRlcmlhbC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWF0ZXJpYWxfVW5saXRNYXRlcmlhbCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRleHR1cmUgPSBUZXh0dXJlVW5pb24uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hbHBoYVRlc3QgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jYXN0U2hhZG93cyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlmZnVzZUNvbG9yID0gQ29sb3I0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxwaGFUZXh0dXJlID0gVGV4dHVyZVVuaW9uLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJNYXRlcmlhbF9VbmxpdE1hdGVyaWFsLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCTWF0ZXJpYWxfVW5saXRNYXRlcmlhbCB8fCAoUEJNYXRlcmlhbF9VbmxpdE1hdGVyaWFsID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1hdGVyaWFsX1Bick1hdGVyaWFsKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRleHR1cmU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxwaGFUZXN0OiB1bmRlZmluZWQsXG4gICAgICAgIGNhc3RTaGFkb3dzOiB1bmRlZmluZWQsXG4gICAgICAgIGFscGhhVGV4dHVyZTogdW5kZWZpbmVkLFxuICAgICAgICBlbWlzc2l2ZVRleHR1cmU6IHVuZGVmaW5lZCxcbiAgICAgICAgYnVtcFRleHR1cmU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxiZWRvQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgZW1pc3NpdmVDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICByZWZsZWN0aXZpdHlDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICB0cmFuc3BhcmVuY3lNb2RlOiB1bmRlZmluZWQsXG4gICAgICAgIG1ldGFsbGljOiB1bmRlZmluZWQsXG4gICAgICAgIHJvdWdobmVzczogdW5kZWZpbmVkLFxuICAgICAgICBzcGVjdWxhckludGVuc2l0eTogdW5kZWZpbmVkLFxuICAgICAgICBlbWlzc2l2ZUludGVuc2l0eTogdW5kZWZpbmVkLFxuICAgICAgICBkaXJlY3RJbnRlbnNpdHk6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJNYXRlcmlhbF9QYnJNYXRlcmlhbDtcbihmdW5jdGlvbiAoUEJNYXRlcmlhbF9QYnJNYXRlcmlhbCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnRleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVGV4dHVyZVVuaW9uLmVuY29kZShtZXNzYWdlLnRleHR1cmUsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxwaGFUZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UuYWxwaGFUZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jYXN0U2hhZG93cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UuY2FzdFNoYWRvd3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFscGhhVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUZXh0dXJlVW5pb24uZW5jb2RlKG1lc3NhZ2UuYWxwaGFUZXh0dXJlLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVtaXNzaXZlVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUZXh0dXJlVW5pb24uZW5jb2RlKG1lc3NhZ2UuZW1pc3NpdmVUZXh0dXJlLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJ1bXBUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFRleHR1cmVVbmlvbi5lbmNvZGUobWVzc2FnZS5idW1wVGV4dHVyZSwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hbGJlZG9Db2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjQuZW5jb2RlKG1lc3NhZ2UuYWxiZWRvQ29sb3IsIHdyaXRlci51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW1pc3NpdmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2UuZW1pc3NpdmVDb2xvciwgd3JpdGVyLnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZWZsZWN0aXZpdHlDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2UucmVmbGVjdGl2aXR5Q29sb3IsIHdyaXRlci51aW50MzIoNzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudHJhbnNwYXJlbmN5TW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgwKS5pbnQzMihtZXNzYWdlLnRyYW5zcGFyZW5jeU1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1ldGFsbGljICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOTMpLmZsb2F0KG1lc3NhZ2UubWV0YWxsaWMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwMSkuZmxvYXQobWVzc2FnZS5yb3VnaG5lc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTE3KS5mbG9hdChtZXNzYWdlLnNwZWN1bGFySW50ZW5zaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEyNSkuZmxvYXQobWVzc2FnZS5lbWlzc2l2ZUludGVuc2l0eSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGlyZWN0SW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTMzKS5mbG9hdChtZXNzYWdlLmRpcmVjdEludGVuc2l0eSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNYXRlcmlhbF9QYnJNYXRlcmlhbC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWF0ZXJpYWxfUGJyTWF0ZXJpYWwoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50ZXh0dXJlID0gVGV4dHVyZVVuaW9uLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxwaGFUZXN0ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FzdFNoYWRvd3MgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFscGhhVGV4dHVyZSA9IFRleHR1cmVVbmlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVtaXNzaXZlVGV4dHVyZSA9IFRleHR1cmVVbmlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJ1bXBUZXh0dXJlID0gVGV4dHVyZVVuaW9uLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxiZWRvQ29sb3IgPSBDb2xvcjQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA2Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbWlzc2l2ZUNvbG9yID0gQ29sb3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVmbGVjdGl2aXR5Q29sb3IgPSBDb2xvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gODApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHJhbnNwYXJlbmN5TW9kZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA5Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZXRhbGxpYyA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm91Z2huZXNzID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDExNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zcGVjdWxhckludGVuc2l0eSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW1pc3NpdmVJbnRlbnNpdHkgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRpcmVjdEludGVuc2l0eSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCTWF0ZXJpYWxfUGJyTWF0ZXJpYWwuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJNYXRlcmlhbF9QYnJNYXRlcmlhbCB8fCAoUEJNYXRlcmlhbF9QYnJNYXRlcmlhbCA9IHt9KSk7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcnMuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5jb21tb25cIjtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFRleHR1cmVXcmFwTW9kZTtcbihmdW5jdGlvbiAoVGV4dHVyZVdyYXBNb2RlKSB7XG4gICAgVGV4dHVyZVdyYXBNb2RlW1RleHR1cmVXcmFwTW9kZVtcIlRXTV9SRVBFQVRcIl0gPSAwXSA9IFwiVFdNX1JFUEVBVFwiO1xuICAgIFRleHR1cmVXcmFwTW9kZVtUZXh0dXJlV3JhcE1vZGVbXCJUV01fQ0xBTVBcIl0gPSAxXSA9IFwiVFdNX0NMQU1QXCI7XG4gICAgVGV4dHVyZVdyYXBNb2RlW1RleHR1cmVXcmFwTW9kZVtcIlRXTV9NSVJST1JcIl0gPSAyXSA9IFwiVFdNX01JUlJPUlwiO1xufSkoVGV4dHVyZVdyYXBNb2RlIHx8IChUZXh0dXJlV3JhcE1vZGUgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgVGV4dHVyZUZpbHRlck1vZGU7XG4oZnVuY3Rpb24gKFRleHR1cmVGaWx0ZXJNb2RlKSB7XG4gICAgVGV4dHVyZUZpbHRlck1vZGVbVGV4dHVyZUZpbHRlck1vZGVbXCJURk1fUE9JTlRcIl0gPSAwXSA9IFwiVEZNX1BPSU5UXCI7XG4gICAgVGV4dHVyZUZpbHRlck1vZGVbVGV4dHVyZUZpbHRlck1vZGVbXCJURk1fQklMSU5FQVJcIl0gPSAxXSA9IFwiVEZNX0JJTElORUFSXCI7XG4gICAgVGV4dHVyZUZpbHRlck1vZGVbVGV4dHVyZUZpbHRlck1vZGVbXCJURk1fVFJJTElORUFSXCJdID0gMl0gPSBcIlRGTV9UUklMSU5FQVJcIjtcbn0pKFRleHR1cmVGaWx0ZXJNb2RlIHx8IChUZXh0dXJlRmlsdGVyTW9kZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlVGV4dHVyZSgpIHtcbiAgICByZXR1cm4geyBzcmM6IFwiXCIsIHdyYXBNb2RlOiB1bmRlZmluZWQsIGZpbHRlck1vZGU6IHVuZGVmaW5lZCwgb2Zmc2V0OiB1bmRlZmluZWQsIHRpbGluZzogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBUZXh0dXJlO1xuKGZ1bmN0aW9uIChUZXh0dXJlKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3JjICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5zcmMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLndyYXBNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2Uud3JhcE1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbHRlck1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS5maWx0ZXJNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5vZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVmVjdG9yMi5lbmNvZGUobWVzc2FnZS5vZmZzZXQsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGlsaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZlY3RvcjIuZW5jb2RlKG1lc3NhZ2UudGlsaW5nLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFRleHR1cmUuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUZXh0dXJlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3JjID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLndyYXBNb2RlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmlsdGVyTW9kZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm9mZnNldCA9IFZlY3RvcjIuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aWxpbmcgPSBWZWN0b3IyLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgVGV4dHVyZS5kZWNvZGUgPSBkZWNvZGU7XG59KShUZXh0dXJlIHx8IChUZXh0dXJlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VBdmF0YXJUZXh0dXJlKCkge1xuICAgIHJldHVybiB7IHVzZXJJZDogXCJcIiwgd3JhcE1vZGU6IHVuZGVmaW5lZCwgZmlsdGVyTW9kZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBBdmF0YXJUZXh0dXJlO1xuKGZ1bmN0aW9uIChBdmF0YXJUZXh0dXJlKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS51c2VySWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLndyYXBNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2Uud3JhcE1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZpbHRlck1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS5maWx0ZXJNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBBdmF0YXJUZXh0dXJlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXZhdGFyVGV4dHVyZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVzZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53cmFwTW9kZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbHRlck1vZGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBBdmF0YXJUZXh0dXJlLmRlY29kZSA9IGRlY29kZTtcbn0pKEF2YXRhclRleHR1cmUgfHwgKEF2YXRhclRleHR1cmUgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZpZGVvVGV4dHVyZSgpIHtcbiAgICByZXR1cm4geyB2aWRlb1BsYXllckVudGl0eTogMCwgd3JhcE1vZGU6IHVuZGVmaW5lZCwgZmlsdGVyTW9kZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBWaWRlb1RleHR1cmU7XG4oZnVuY3Rpb24gKFZpZGVvVGV4dHVyZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnZpZGVvUGxheWVyRW50aXR5ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLnZpZGVvUGxheWVyRW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS53cmFwTW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLndyYXBNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5maWx0ZXJNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2UuZmlsdGVyTW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgVmlkZW9UZXh0dXJlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVmlkZW9UZXh0dXJlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52aWRlb1BsYXllckVudGl0eSA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53cmFwTW9kZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZpbHRlck1vZGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBWaWRlb1RleHR1cmUuZGVjb2RlID0gZGVjb2RlO1xufSkoVmlkZW9UZXh0dXJlIHx8IChWaWRlb1RleHR1cmUgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVRleHR1cmVVbmlvbigpIHtcbiAgICByZXR1cm4geyB0ZXg6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgVGV4dHVyZVVuaW9uO1xuKGZ1bmN0aW9uIChUZXh0dXJlVW5pb24pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudGV4Py4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHR1cmVcIjpcbiAgICAgICAgICAgICAgICBUZXh0dXJlLmVuY29kZShtZXNzYWdlLnRleC50ZXh0dXJlLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImF2YXRhclRleHR1cmVcIjpcbiAgICAgICAgICAgICAgICBBdmF0YXJUZXh0dXJlLmVuY29kZShtZXNzYWdlLnRleC5hdmF0YXJUZXh0dXJlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZpZGVvVGV4dHVyZVwiOlxuICAgICAgICAgICAgICAgIFZpZGVvVGV4dHVyZS5lbmNvZGUobWVzc2FnZS50ZXgudmlkZW9UZXh0dXJlLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFRleHR1cmVVbmlvbi5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVRleHR1cmVVbmlvbigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRleCA9IHsgJGNhc2U6IFwidGV4dHVyZVwiLCB0ZXh0dXJlOiBUZXh0dXJlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50ZXggPSB7ICRjYXNlOiBcImF2YXRhclRleHR1cmVcIiwgYXZhdGFyVGV4dHVyZTogQXZhdGFyVGV4dHVyZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGV4ID0geyAkY2FzZTogXCJ2aWRlb1RleHR1cmVcIiwgdmlkZW9UZXh0dXJlOiBWaWRlb1RleHR1cmUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFRleHR1cmVVbmlvbi5kZWNvZGUgPSBkZWNvZGU7XG59KShUZXh0dXJlVW5pb24gfHwgKFRleHR1cmVVbmlvbiA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJNYXRlcmlhbCB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL21hdGVyaWFsLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgTWF0ZXJpYWxTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDE3LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQk1hdGVyaWFsLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCTWF0ZXJpYWwuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCTWF0ZXJpYWwuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCTWF0ZXJpYWxcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbi8qKiBDb2xsaWRlckxheWVyIGRldGVybWluZXMgdGhlIGtpbmQgb2YgY29sbGlzaW9uIHRvIGRldGVjdCwgaW4gT1ItYWJsZSBiaXQgZmxhZyBmb3JtLiAqL1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQ29sbGlkZXJMYXllcjtcbihmdW5jdGlvbiAoQ29sbGlkZXJMYXllcikge1xuICAgIC8qKiBDTF9OT05FIC0gbm8gY29sbGlzaW9ucyAqL1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX05PTkVcIl0gPSAwXSA9IFwiQ0xfTk9ORVwiO1xuICAgIC8qKiBDTF9QT0lOVEVSIC0gY29sbGlzaW9ucyB3aXRoIHRoZSBwbGF5ZXIncyBwb2ludGVyIHJheSAoZS5nLiBtb3VzZSBjdXJzb3IgaG92ZXJpbmcpICovXG4gICAgQ29sbGlkZXJMYXllcltDb2xsaWRlckxheWVyW1wiQ0xfUE9JTlRFUlwiXSA9IDFdID0gXCJDTF9QT0lOVEVSXCI7XG4gICAgLyoqIENMX1BIWVNJQ1MgLSBjb2xsaXNpb24gYWZmZWN0aW5nIHlvdXIgcGxheWVyJ3MgcGh5c2ljcyBpLmUuIHdhbGxzLCBmbG9vciwgbW92aW5nIHBsYXRmcm9tcyAqL1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX1BIWVNJQ1NcIl0gPSAyXSA9IFwiQ0xfUEhZU0lDU1wiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX1JFU0VSVkVEMVwiXSA9IDRdID0gXCJDTF9SRVNFUlZFRDFcIjtcbiAgICBDb2xsaWRlckxheWVyW0NvbGxpZGVyTGF5ZXJbXCJDTF9SRVNFUlZFRDJcIl0gPSA4XSA9IFwiQ0xfUkVTRVJWRUQyXCI7XG4gICAgQ29sbGlkZXJMYXllcltDb2xsaWRlckxheWVyW1wiQ0xfUkVTRVJWRUQzXCJdID0gMTZdID0gXCJDTF9SRVNFUlZFRDNcIjtcbiAgICBDb2xsaWRlckxheWVyW0NvbGxpZGVyTGF5ZXJbXCJDTF9SRVNFUlZFRDRcIl0gPSAzMl0gPSBcIkNMX1JFU0VSVkVENFwiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX1JFU0VSVkVENVwiXSA9IDY0XSA9IFwiQ0xfUkVTRVJWRUQ1XCI7XG4gICAgQ29sbGlkZXJMYXllcltDb2xsaWRlckxheWVyW1wiQ0xfUkVTRVJWRUQ2XCJdID0gMTI4XSA9IFwiQ0xfUkVTRVJWRUQ2XCI7XG4gICAgQ29sbGlkZXJMYXllcltDb2xsaWRlckxheWVyW1wiQ0xfQ1VTVE9NMVwiXSA9IDI1Nl0gPSBcIkNMX0NVU1RPTTFcIjtcbiAgICBDb2xsaWRlckxheWVyW0NvbGxpZGVyTGF5ZXJbXCJDTF9DVVNUT00yXCJdID0gNTEyXSA9IFwiQ0xfQ1VTVE9NMlwiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX0NVU1RPTTNcIl0gPSAxMDI0XSA9IFwiQ0xfQ1VTVE9NM1wiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX0NVU1RPTTRcIl0gPSAyMDQ4XSA9IFwiQ0xfQ1VTVE9NNFwiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX0NVU1RPTTVcIl0gPSA0MDk2XSA9IFwiQ0xfQ1VTVE9NNVwiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX0NVU1RPTTZcIl0gPSA4MTkyXSA9IFwiQ0xfQ1VTVE9NNlwiO1xuICAgIENvbGxpZGVyTGF5ZXJbQ29sbGlkZXJMYXllcltcIkNMX0NVU1RPTTdcIl0gPSAxNjM4NF0gPSBcIkNMX0NVU1RPTTdcIjtcbiAgICBDb2xsaWRlckxheWVyW0NvbGxpZGVyTGF5ZXJbXCJDTF9DVVNUT004XCJdID0gMzI3NjhdID0gXCJDTF9DVVNUT004XCI7XG59KShDb2xsaWRlckxheWVyIHx8IChDb2xsaWRlckxheWVyID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1lc2hDb2xsaWRlcigpIHtcbiAgICByZXR1cm4geyBjb2xsaXNpb25NYXNrOiB1bmRlZmluZWQsIG1lc2g6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJNZXNoQ29sbGlkZXI7XG4oZnVuY3Rpb24gKFBCTWVzaENvbGxpZGVyKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29sbGlzaW9uTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLmNvbGxpc2lvbk1hc2spO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5tZXNoPy4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcImJveFwiOlxuICAgICAgICAgICAgICAgIFBCTWVzaENvbGxpZGVyX0JveE1lc2guZW5jb2RlKG1lc3NhZ2UubWVzaC5ib3gsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3BoZXJlXCI6XG4gICAgICAgICAgICAgICAgUEJNZXNoQ29sbGlkZXJfU3BoZXJlTWVzaC5lbmNvZGUobWVzc2FnZS5tZXNoLnNwaGVyZSwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjeWxpbmRlclwiOlxuICAgICAgICAgICAgICAgIFBCTWVzaENvbGxpZGVyX0N5bGluZGVyTWVzaC5lbmNvZGUobWVzc2FnZS5tZXNoLmN5bGluZGVyLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBsYW5lXCI6XG4gICAgICAgICAgICAgICAgUEJNZXNoQ29sbGlkZXJfUGxhbmVNZXNoLmVuY29kZShtZXNzYWdlLm1lc2gucGxhbmUsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNZXNoQ29sbGlkZXIuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hDb2xsaWRlcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29sbGlzaW9uTWFzayA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZXNoID0geyAkY2FzZTogXCJib3hcIiwgYm94OiBQQk1lc2hDb2xsaWRlcl9Cb3hNZXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZXNoID0geyAkY2FzZTogXCJzcGhlcmVcIiwgc3BoZXJlOiBQQk1lc2hDb2xsaWRlcl9TcGhlcmVNZXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZXNoID0geyAkY2FzZTogXCJjeWxpbmRlclwiLCBjeWxpbmRlcjogUEJNZXNoQ29sbGlkZXJfQ3lsaW5kZXJNZXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZXNoID0geyAkY2FzZTogXCJwbGFuZVwiLCBwbGFuZTogUEJNZXNoQ29sbGlkZXJfUGxhbmVNZXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQk1lc2hDb2xsaWRlci5kZWNvZGUgPSBkZWNvZGU7XG59KShQQk1lc2hDb2xsaWRlciB8fCAoUEJNZXNoQ29sbGlkZXIgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWVzaENvbGxpZGVyX0JveE1lc2goKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJNZXNoQ29sbGlkZXJfQm94TWVzaDtcbihmdW5jdGlvbiAoUEJNZXNoQ29sbGlkZXJfQm94TWVzaCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShfLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCTWVzaENvbGxpZGVyX0JveE1lc2guZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hDb2xsaWRlcl9Cb3hNZXNoKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJNZXNoQ29sbGlkZXJfQm94TWVzaC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQk1lc2hDb2xsaWRlcl9Cb3hNZXNoIHx8IChQQk1lc2hDb2xsaWRlcl9Cb3hNZXNoID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1lc2hDb2xsaWRlcl9DeWxpbmRlck1lc2goKSB7XG4gICAgcmV0dXJuIHsgcmFkaXVzVG9wOiB1bmRlZmluZWQsIHJhZGl1c0JvdHRvbTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQk1lc2hDb2xsaWRlcl9DeWxpbmRlck1lc2g7XG4oZnVuY3Rpb24gKFBCTWVzaENvbGxpZGVyX0N5bGluZGVyTWVzaCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLnJhZGl1c1RvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmFkaXVzQm90dG9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UucmFkaXVzQm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQk1lc2hDb2xsaWRlcl9DeWxpbmRlck1lc2guZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hDb2xsaWRlcl9DeWxpbmRlck1lc2goKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yYWRpdXNUb3AgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yYWRpdXNCb3R0b20gPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQk1lc2hDb2xsaWRlcl9DeWxpbmRlck1lc2guZGVjb2RlID0gZGVjb2RlO1xufSkoUEJNZXNoQ29sbGlkZXJfQ3lsaW5kZXJNZXNoIHx8IChQQk1lc2hDb2xsaWRlcl9DeWxpbmRlck1lc2ggPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWVzaENvbGxpZGVyX1BsYW5lTWVzaCgpIHtcbiAgICByZXR1cm4ge307XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQk1lc2hDb2xsaWRlcl9QbGFuZU1lc2g7XG4oZnVuY3Rpb24gKFBCTWVzaENvbGxpZGVyX1BsYW5lTWVzaCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShfLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCTWVzaENvbGxpZGVyX1BsYW5lTWVzaC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWVzaENvbGxpZGVyX1BsYW5lTWVzaCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCTWVzaENvbGxpZGVyX1BsYW5lTWVzaC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQk1lc2hDb2xsaWRlcl9QbGFuZU1lc2ggfHwgKFBCTWVzaENvbGxpZGVyX1BsYW5lTWVzaCA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNZXNoQ29sbGlkZXJfU3BoZXJlTWVzaCgpIHtcbiAgICByZXR1cm4ge307XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQk1lc2hDb2xsaWRlcl9TcGhlcmVNZXNoO1xuKGZ1bmN0aW9uIChQQk1lc2hDb2xsaWRlcl9TcGhlcmVNZXNoKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKF8sIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNZXNoQ29sbGlkZXJfU3BoZXJlTWVzaC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWVzaENvbGxpZGVyX1NwaGVyZU1lc2goKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQk1lc2hDb2xsaWRlcl9TcGhlcmVNZXNoLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCTWVzaENvbGxpZGVyX1NwaGVyZU1lc2ggfHwgKFBCTWVzaENvbGxpZGVyX1NwaGVyZU1lc2ggPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCTWVzaENvbGxpZGVyIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbWVzaF9jb2xsaWRlci5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE1lc2hDb2xsaWRlclNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwMTksXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCTWVzaENvbGxpZGVyLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCTWVzaENvbGxpZGVyLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQk1lc2hDb2xsaWRlci5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJNZXNoQ29sbGlkZXJcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1lc2hSZW5kZXJlcigpIHtcbiAgICByZXR1cm4geyBtZXNoOiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCTWVzaFJlbmRlcmVyO1xuKGZ1bmN0aW9uIChQQk1lc2hSZW5kZXJlcikge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5tZXNoPy4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcImJveFwiOlxuICAgICAgICAgICAgICAgIFBCTWVzaFJlbmRlcmVyX0JveE1lc2guZW5jb2RlKG1lc3NhZ2UubWVzaC5ib3gsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3BoZXJlXCI6XG4gICAgICAgICAgICAgICAgUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaC5lbmNvZGUobWVzc2FnZS5tZXNoLnNwaGVyZSwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjeWxpbmRlclwiOlxuICAgICAgICAgICAgICAgIFBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaC5lbmNvZGUobWVzc2FnZS5tZXNoLmN5bGluZGVyLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBsYW5lXCI6XG4gICAgICAgICAgICAgICAgUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoLmVuY29kZShtZXNzYWdlLm1lc2gucGxhbmUsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNZXNoUmVuZGVyZXIuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hSZW5kZXJlcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lc2ggPSB7ICRjYXNlOiBcImJveFwiLCBib3g6IFBCTWVzaFJlbmRlcmVyX0JveE1lc2guZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lc2ggPSB7ICRjYXNlOiBcInNwaGVyZVwiLCBzcGhlcmU6IFBCTWVzaFJlbmRlcmVyX1NwaGVyZU1lc2guZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lc2ggPSB7ICRjYXNlOiBcImN5bGluZGVyXCIsIGN5bGluZGVyOiBQQk1lc2hSZW5kZXJlcl9DeWxpbmRlck1lc2guZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lc2ggPSB7ICRjYXNlOiBcInBsYW5lXCIsIHBsYW5lOiBQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2guZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCTWVzaFJlbmRlcmVyLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCTWVzaFJlbmRlcmVyIHx8IChQQk1lc2hSZW5kZXJlciA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfQm94TWVzaCgpIHtcbiAgICByZXR1cm4geyB1dnM6IFtdIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoO1xuKGZ1bmN0aW9uIChQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpO1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS51dnMpIHtcbiAgICAgICAgICAgIHdyaXRlci5mbG9hdCh2KTtcbiAgICAgICAgfVxuICAgICAgICB3cml0ZXIubGRlbGltKCk7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCTWVzaFJlbmRlcmVyX0JveE1lc2guZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXZzLnB1c2gocmVhZGVyLmZsb2F0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51dnMucHVzaChyZWFkZXIuZmxvYXQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCTWVzaFJlbmRlcmVyX0JveE1lc2guZGVjb2RlID0gZGVjb2RlO1xufSkoUEJNZXNoUmVuZGVyZXJfQm94TWVzaCB8fCAoUEJNZXNoUmVuZGVyZXJfQm94TWVzaCA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoKCkge1xuICAgIHJldHVybiB7IHJhZGl1c1RvcDogdW5kZWZpbmVkLCByYWRpdXNCb3R0b206IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoO1xuKGZ1bmN0aW9uIChQQk1lc2hSZW5kZXJlcl9DeWxpbmRlck1lc2gpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5yYWRpdXNUb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMykuZmxvYXQobWVzc2FnZS5yYWRpdXNUb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJhZGl1c0JvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLnJhZGl1c0JvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmFkaXVzVG9wID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmFkaXVzQm90dG9tID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaCB8fCAoUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2goKSB7XG4gICAgcmV0dXJuIHsgdXZzOiBbXSB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoO1xuKGZ1bmN0aW9uIChQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2gpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICB3cml0ZXIudWludDMyKDEwKS5mb3JrKCk7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnV2cykge1xuICAgICAgICAgICAgd3JpdGVyLmZsb2F0KHYpO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlci5sZGVsaW0oKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXZzLnB1c2gocmVhZGVyLmZsb2F0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51dnMucHVzaChyZWFkZXIuZmxvYXQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCTWVzaFJlbmRlcmVyX1BsYW5lTWVzaC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2ggfHwgKFBCTWVzaFJlbmRlcmVyX1BsYW5lTWVzaCA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaCgpIHtcbiAgICByZXR1cm4ge307XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoO1xuKGZ1bmN0aW9uIChQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKF8sIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWVzaFJlbmRlcmVyX1NwaGVyZU1lc2goKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCTWVzaFJlbmRlcmVyX1NwaGVyZU1lc2ggfHwgKFBCTWVzaFJlbmRlcmVyX1NwaGVyZU1lc2ggPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCTWVzaFJlbmRlcmVyIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbWVzaF9yZW5kZXJlci5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE1lc2hSZW5kZXJlclNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwMTgsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCTWVzaFJlbmRlcmVyLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCTWVzaFJlbmRlcmVyLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQk1lc2hSZW5kZXJlci5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJNZXNoUmVuZGVyZXJcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgQ29sb3IzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb2xvcnMuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuLyoqIE5mdEZyYW1lVHlwZSBpcyBhIHByZWRlZmluZWQgZnJhbWluZyBzdHlsZSBmb3IgdGhlIGltYWdlLiAqL1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgTmZ0RnJhbWVUeXBlO1xuKGZ1bmN0aW9uIChOZnRGcmFtZVR5cGUpIHtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0NMQVNTSUNcIl0gPSAwXSA9IFwiTkZUX0NMQVNTSUNcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0JBUk9RVUVfT1JOQU1FTlRcIl0gPSAxXSA9IFwiTkZUX0JBUk9RVUVfT1JOQU1FTlRcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0RJQU1PTkRfT1JOQU1FTlRcIl0gPSAyXSA9IFwiTkZUX0RJQU1PTkRfT1JOQU1FTlRcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX01JTklNQUxfV0lERVwiXSA9IDNdID0gXCJORlRfTUlOSU1BTF9XSURFXCI7XG4gICAgTmZ0RnJhbWVUeXBlW05mdEZyYW1lVHlwZVtcIk5GVF9NSU5JTUFMX0dSRVlcIl0gPSA0XSA9IFwiTkZUX01JTklNQUxfR1JFWVwiO1xuICAgIE5mdEZyYW1lVHlwZVtOZnRGcmFtZVR5cGVbXCJORlRfQkxPQ0tZXCJdID0gNV0gPSBcIk5GVF9CTE9DS1lcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0dPTERfRURHRVNcIl0gPSA2XSA9IFwiTkZUX0dPTERfRURHRVNcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0dPTERfQ0FSVkVEXCJdID0gN10gPSBcIk5GVF9HT0xEX0NBUlZFRFwiO1xuICAgIE5mdEZyYW1lVHlwZVtOZnRGcmFtZVR5cGVbXCJORlRfR09MRF9XSURFXCJdID0gOF0gPSBcIk5GVF9HT0xEX1dJREVcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0dPTERfUk9VTkRFRFwiXSA9IDldID0gXCJORlRfR09MRF9ST1VOREVEXCI7XG4gICAgTmZ0RnJhbWVUeXBlW05mdEZyYW1lVHlwZVtcIk5GVF9NRVRBTF9NRURJVU1cIl0gPSAxMF0gPSBcIk5GVF9NRVRBTF9NRURJVU1cIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX01FVEFMX1dJREVcIl0gPSAxMV0gPSBcIk5GVF9NRVRBTF9XSURFXCI7XG4gICAgTmZ0RnJhbWVUeXBlW05mdEZyYW1lVHlwZVtcIk5GVF9NRVRBTF9TTElNXCJdID0gMTJdID0gXCJORlRfTUVUQUxfU0xJTVwiO1xuICAgIE5mdEZyYW1lVHlwZVtOZnRGcmFtZVR5cGVbXCJORlRfTUVUQUxfUk9VTkRFRFwiXSA9IDEzXSA9IFwiTkZUX01FVEFMX1JPVU5ERURcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX1BJTlNcIl0gPSAxNF0gPSBcIk5GVF9QSU5TXCI7XG4gICAgTmZ0RnJhbWVUeXBlW05mdEZyYW1lVHlwZVtcIk5GVF9NSU5JTUFMX0JMQUNLXCJdID0gMTVdID0gXCJORlRfTUlOSU1BTF9CTEFDS1wiO1xuICAgIE5mdEZyYW1lVHlwZVtOZnRGcmFtZVR5cGVbXCJORlRfTUlOSU1BTF9XSElURVwiXSA9IDE2XSA9IFwiTkZUX01JTklNQUxfV0hJVEVcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX1RBUEVcIl0gPSAxN10gPSBcIk5GVF9UQVBFXCI7XG4gICAgTmZ0RnJhbWVUeXBlW05mdEZyYW1lVHlwZVtcIk5GVF9XT09EX1NMSU1cIl0gPSAxOF0gPSBcIk5GVF9XT09EX1NMSU1cIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX1dPT0RfV0lERVwiXSA9IDE5XSA9IFwiTkZUX1dPT0RfV0lERVwiO1xuICAgIE5mdEZyYW1lVHlwZVtOZnRGcmFtZVR5cGVbXCJORlRfV09PRF9UV0lHU1wiXSA9IDIwXSA9IFwiTkZUX1dPT0RfVFdJR1NcIjtcbiAgICBOZnRGcmFtZVR5cGVbTmZ0RnJhbWVUeXBlW1wiTkZUX0NBTlZBU1wiXSA9IDIxXSA9IFwiTkZUX0NBTlZBU1wiO1xuICAgIE5mdEZyYW1lVHlwZVtOZnRGcmFtZVR5cGVbXCJORlRfTk9ORVwiXSA9IDIyXSA9IFwiTkZUX05PTkVcIjtcbn0pKE5mdEZyYW1lVHlwZSB8fCAoTmZ0RnJhbWVUeXBlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk5mdFNoYXBlKCkge1xuICAgIHJldHVybiB7IHVybjogXCJcIiwgc3R5bGU6IHVuZGVmaW5lZCwgY29sb3I6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJOZnRTaGFwZTtcbihmdW5jdGlvbiAoUEJOZnRTaGFwZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnVybiAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UudXJuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLnN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2UuY29sb3IsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJOZnRTaGFwZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTmZ0U2hhcGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51cm4gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3R5bGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCTmZ0U2hhcGUuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJOZnRTaGFwZSB8fCAoUEJOZnRTaGFwZSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJOZnRTaGFwZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL25mdF9zaGFwZS5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE5mdFNoYXBlU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA0MCxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJOZnRTaGFwZS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQk5mdFNoYXBlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQk5mdFNoYXBlLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQk5mdFNoYXBlXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJQbGF5ZXJJZGVudGl0eURhdGEoKSB7XG4gICAgcmV0dXJuIHsgYWRkcmVzczogXCJcIiwgaXNHdWVzdDogZmFsc2UgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCUGxheWVySWRlbnRpdHlEYXRhO1xuKGZ1bmN0aW9uIChQQlBsYXllcklkZW50aXR5RGF0YSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmFkZHJlc3MgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmlzR3Vlc3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS5pc0d1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlBsYXllcklkZW50aXR5RGF0YS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCUGxheWVySWRlbnRpdHlEYXRhKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pc0d1ZXN0ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlBsYXllcklkZW50aXR5RGF0YS5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlBsYXllcklkZW50aXR5RGF0YSB8fCAoUEJQbGF5ZXJJZGVudGl0eURhdGEgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCUGxheWVySWRlbnRpdHlEYXRhIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvcGxheWVyX2lkZW50aXR5X2RhdGEuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQbGF5ZXJJZGVudGl0eURhdGFTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDg5LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlBsYXllcklkZW50aXR5RGF0YS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlBsYXllcklkZW50aXR5RGF0YS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJQbGF5ZXJJZGVudGl0eURhdGEuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCUGxheWVySWRlbnRpdHlEYXRhXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJQb2ludGVyRXZlbnRzKCkge1xuICAgIHJldHVybiB7IHBvaW50ZXJFdmVudHM6IFtdIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQlBvaW50ZXJFdmVudHM7XG4oZnVuY3Rpb24gKFBCUG9pbnRlckV2ZW50cykge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICAgIFBCUG9pbnRlckV2ZW50c19FbnRyeS5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlBvaW50ZXJFdmVudHMuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlBvaW50ZXJFdmVudHMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wb2ludGVyRXZlbnRzLnB1c2goUEJQb2ludGVyRXZlbnRzX0VudHJ5LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCUG9pbnRlckV2ZW50cy5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlBvaW50ZXJFdmVudHMgfHwgKFBCUG9pbnRlckV2ZW50cyA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJQb2ludGVyRXZlbnRzX0luZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYnV0dG9uOiB1bmRlZmluZWQsXG4gICAgICAgIGhvdmVyVGV4dDogdW5kZWZpbmVkLFxuICAgICAgICBtYXhEaXN0YW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBzaG93RmVlZGJhY2s6IHVuZGVmaW5lZCxcbiAgICAgICAgc2hvd0hpZ2hsaWdodDogdW5kZWZpbmVkLFxuICAgIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQlBvaW50ZXJFdmVudHNfSW5mbztcbihmdW5jdGlvbiAoUEJQb2ludGVyRXZlbnRzX0luZm8pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5idXR0b24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLmJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaG92ZXJUZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmhvdmVyVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubWF4RGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS5tYXhEaXN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2hvd0ZlZWRiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLmJvb2wobWVzc2FnZS5zaG93RmVlZGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNob3dIaWdobGlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0MCkuYm9vbChtZXNzYWdlLnNob3dIaWdobGlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCUG9pbnRlckV2ZW50c19JbmZvLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJQb2ludGVyRXZlbnRzX0luZm8oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJ1dHRvbiA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhvdmVyVGV4dCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXhEaXN0YW5jZSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNob3dGZWVkYmFjayA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2hvd0hpZ2hsaWdodCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJQb2ludGVyRXZlbnRzX0luZm8uZGVjb2RlID0gZGVjb2RlO1xufSkoUEJQb2ludGVyRXZlbnRzX0luZm8gfHwgKFBCUG9pbnRlckV2ZW50c19JbmZvID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlBvaW50ZXJFdmVudHNfRW50cnkoKSB7XG4gICAgcmV0dXJuIHsgZXZlbnRUeXBlOiAwLCBldmVudEluZm86IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJQb2ludGVyRXZlbnRzX0VudHJ5O1xuKGZ1bmN0aW9uIChQQlBvaW50ZXJFdmVudHNfRW50cnkpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFR5cGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5ldmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50SW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBQQlBvaW50ZXJFdmVudHNfSW5mby5lbmNvZGUobWVzc2FnZS5ldmVudEluZm8sIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJQb2ludGVyRXZlbnRzX0VudHJ5LmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJQb2ludGVyRXZlbnRzX0VudHJ5KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFR5cGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudEluZm8gPSBQQlBvaW50ZXJFdmVudHNfSW5mby5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCUG9pbnRlckV2ZW50c19FbnRyeS5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlBvaW50ZXJFdmVudHNfRW50cnkgfHwgKFBCUG9pbnRlckV2ZW50c19FbnRyeSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJQb2ludGVyRXZlbnRzIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvcG9pbnRlcl9ldmVudHMuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQb2ludGVyRXZlbnRzU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA2MixcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJQb2ludGVyRXZlbnRzLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCUG9pbnRlckV2ZW50cy5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJQb2ludGVyRXZlbnRzLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlBvaW50ZXJFdmVudHNcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgUmF5Y2FzdEhpdCB9IGZyb20gXCIuL2NvbW1vbi9yYXljYXN0X2hpdC5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJQb2ludGVyRXZlbnRzUmVzdWx0KCkge1xuICAgIHJldHVybiB7IGJ1dHRvbjogMCwgaGl0OiB1bmRlZmluZWQsIHN0YXRlOiAwLCB0aW1lc3RhbXA6IDAsIGFuYWxvZzogdW5kZWZpbmVkLCB0aWNrTnVtYmVyOiAwIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQlBvaW50ZXJFdmVudHNSZXN1bHQ7XG4oZnVuY3Rpb24gKFBCUG9pbnRlckV2ZW50c1Jlc3VsdCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLmJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFJheWNhc3RIaXQuZW5jb2RlKG1lc3NhZ2UuaGl0LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXRlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMyKS5pbnQzMihtZXNzYWdlLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLnVpbnQzMihtZXNzYWdlLnRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYW5hbG9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTMpLmZsb2F0KG1lc3NhZ2UuYW5hbG9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aWNrTnVtYmVyICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU2KS51aW50MzIobWVzc2FnZS50aWNrTnVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlBvaW50ZXJFdmVudHNSZXN1bHQuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlBvaW50ZXJFdmVudHNSZXN1bHQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJ1dHRvbiA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhpdCA9IFJheWNhc3RIaXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGF0ZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hbmFsb2cgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50aWNrTnVtYmVyID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCUG9pbnRlckV2ZW50c1Jlc3VsdC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlBvaW50ZXJFdmVudHNSZXN1bHQgfHwgKFBCUG9pbnRlckV2ZW50c1Jlc3VsdCA9IHt9KSk7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdmVjdG9ycy5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzLmNvbW1vblwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVJheWNhc3RIaXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9zaXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZ2xvYmFsT3JpZ2luOiB1bmRlZmluZWQsXG4gICAgICAgIGRpcmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBub3JtYWxIaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICBtZXNoTmFtZTogdW5kZWZpbmVkLFxuICAgICAgICBlbnRpdHlJZDogdW5kZWZpbmVkLFxuICAgIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBSYXljYXN0SGl0O1xuKGZ1bmN0aW9uIChSYXljYXN0SGl0KSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5wb3NpdGlvbiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5nbG9iYWxPcmlnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5nbG9iYWxPcmlnaW4sIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGlyZWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2UuZGlyZWN0aW9uLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm5vcm1hbEhpdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLm5vcm1hbEhpdCwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDUpLmZsb2F0KG1lc3NhZ2UubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tZXNoTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDUwKS5zdHJpbmcobWVzc2FnZS5tZXNoTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW50aXR5SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig1NikudWludDMyKG1lc3NhZ2UuZW50aXR5SWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFJheWNhc3RIaXQuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSYXljYXN0SGl0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG9zaXRpb24gPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2xvYmFsT3JpZ2luID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRpcmVjdGlvbiA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ub3JtYWxIaXQgPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGVuZ3RoID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVzaE5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW50aXR5SWQgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUmF5Y2FzdEhpdC5kZWNvZGUgPSBkZWNvZGU7XG59KShSYXljYXN0SGl0IHx8IChSYXljYXN0SGl0ID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlBvaW50ZXJFdmVudHNSZXN1bHQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9wb2ludGVyX2V2ZW50c19yZXN1bHQuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQb2ludGVyRXZlbnRzUmVzdWx0U2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA2MyxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJQb2ludGVyRXZlbnRzUmVzdWx0LmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCUG9pbnRlckV2ZW50c1Jlc3VsdC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJQb2ludGVyRXZlbnRzUmVzdWx0LmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlBvaW50ZXJFdmVudHNSZXN1bHRcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlBvaW50ZXJMb2NrKCkge1xuICAgIHJldHVybiB7IGlzUG9pbnRlckxvY2tlZDogZmFsc2UgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCUG9pbnRlckxvY2s7XG4oZnVuY3Rpb24gKFBCUG9pbnRlckxvY2spIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5pc1BvaW50ZXJMb2NrZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLmlzUG9pbnRlckxvY2tlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJQb2ludGVyTG9jay5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCUG9pbnRlckxvY2soKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlzUG9pbnRlckxvY2tlZCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJQb2ludGVyTG9jay5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlBvaW50ZXJMb2NrIHx8IChQQlBvaW50ZXJMb2NrID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlBvaW50ZXJMb2NrIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvcG9pbnRlcl9sb2NrLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUG9pbnRlckxvY2tTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDc0LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlBvaW50ZXJMb2NrLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCUG9pbnRlckxvY2suZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCUG9pbnRlckxvY2suZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCUG9pbnRlckxvY2tcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi8uLi9jb21tb24vdmVjdG9ycy5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG4vKiogUmF5Y2FzdFF1ZXJ5VHlwZSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcmF5IHNob3VsZCBzdG9wIG9uIHRoZSBmaXJzdCBjb2xsaXRpb24sIG9yIGNvbnRpbnVlLiAqL1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUmF5Y2FzdFF1ZXJ5VHlwZTtcbihmdW5jdGlvbiAoUmF5Y2FzdFF1ZXJ5VHlwZSkge1xuICAgIC8qKiBSUVRfSElUX0ZJUlNUIC0gUGljayB0aGUgZmlyc3QgKG5vdCBuZWNlc3NhcmlseSB0aGUgY2xvc2VzdCkgaGl0IHdpdGhpbiB0aGUgcmFuZ2UgKi9cbiAgICBSYXljYXN0UXVlcnlUeXBlW1JheWNhc3RRdWVyeVR5cGVbXCJSUVRfSElUX0ZJUlNUXCJdID0gMF0gPSBcIlJRVF9ISVRfRklSU1RcIjtcbiAgICAvKiogUlFUX1FVRVJZX0FMTCAtIFBpY2sgYWxsIGhpdHMgd2l0aGluIHRoZSByYW5nZSAqL1xuICAgIFJheWNhc3RRdWVyeVR5cGVbUmF5Y2FzdFF1ZXJ5VHlwZVtcIlJRVF9RVUVSWV9BTExcIl0gPSAxXSA9IFwiUlFUX1FVRVJZX0FMTFwiO1xuICAgIC8qKiBSUVRfTk9ORSAtIERvIG5vdCBwZXJmb3JtIHRoZSByYXljYXN0LCBvbmx5IHNldCB0aGUgcmF5Y2FzdCByZXN1bHQgd2l0aCBlbXB0eSBoaXRzICovXG4gICAgUmF5Y2FzdFF1ZXJ5VHlwZVtSYXljYXN0UXVlcnlUeXBlW1wiUlFUX05PTkVcIl0gPSAyXSA9IFwiUlFUX05PTkVcIjtcbn0pKFJheWNhc3RRdWVyeVR5cGUgfHwgKFJheWNhc3RRdWVyeVR5cGUgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCUmF5Y2FzdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0aW1lc3RhbXA6IHVuZGVmaW5lZCxcbiAgICAgICAgb3JpZ2luT2Zmc2V0OiB1bmRlZmluZWQsXG4gICAgICAgIGRpcmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBtYXhEaXN0YW5jZTogMCxcbiAgICAgICAgcXVlcnlUeXBlOiAwLFxuICAgICAgICBjb250aW51b3VzOiB1bmRlZmluZWQsXG4gICAgICAgIGNvbGxpc2lvbk1hc2s6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJSYXljYXN0O1xuKGZ1bmN0aW9uIChQQlJheWNhc3QpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50MzIobWVzc2FnZS50aW1lc3RhbXApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm9yaWdpbk9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLm9yaWdpbk9mZnNldCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UuZGlyZWN0aW9uPy4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcImxvY2FsRGlyZWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5kaXJlY3Rpb24ubG9jYWxEaXJlY3Rpb24sIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ2xvYmFsRGlyZWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5kaXJlY3Rpb24uZ2xvYmFsRGlyZWN0aW9uLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImdsb2JhbFRhcmdldFwiOlxuICAgICAgICAgICAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2UuZGlyZWN0aW9uLmdsb2JhbFRhcmdldCwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ0YXJnZXRFbnRpdHlcIjpcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKDgwKS51aW50MzIobWVzc2FnZS5kaXJlY3Rpb24udGFyZ2V0RW50aXR5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXhEaXN0YW5jZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS5tYXhEaXN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucXVlcnlUeXBlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQzMihtZXNzYWdlLnF1ZXJ5VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29udGludW91cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDY0KS5ib29sKG1lc3NhZ2UuY29udGludW91cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29sbGlzaW9uTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDcyKS51aW50MzIobWVzc2FnZS5jb2xsaXNpb25NYXNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlJheWNhc3QuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlJheWNhc3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5vcmlnaW5PZmZzZXQgPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlyZWN0aW9uID0geyAkY2FzZTogXCJsb2NhbERpcmVjdGlvblwiLCBsb2NhbERpcmVjdGlvbjogVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlyZWN0aW9uID0geyAkY2FzZTogXCJnbG9iYWxEaXJlY3Rpb25cIiwgZ2xvYmFsRGlyZWN0aW9uOiBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1OCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kaXJlY3Rpb24gPSB7ICRjYXNlOiBcImdsb2JhbFRhcmdldFwiLCBnbG9iYWxUYXJnZXQ6IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kaXJlY3Rpb24gPSB7ICRjYXNlOiBcInRhcmdldEVudGl0eVwiLCB0YXJnZXRFbnRpdHk6IHJlYWRlci51aW50MzIoKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1heERpc3RhbmNlID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucXVlcnlUeXBlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29udGludW91cyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29sbGlzaW9uTWFzayA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlJheWNhc3QuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJSYXljYXN0IHx8IChQQlJheWNhc3QgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCUmF5Y2FzdCB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3JheWNhc3QuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBSYXljYXN0U2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA2NyxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJSYXljYXN0LmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCUmF5Y2FzdC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJSYXljYXN0LmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlJheWNhc3RcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi8uLi9jb21tb24vdmVjdG9ycy5nZW5cIjtcbmltcG9ydCB7IFJheWNhc3RIaXQgfSBmcm9tIFwiLi9jb21tb24vcmF5Y2FzdF9oaXQuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCUmF5Y2FzdFJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB0aW1lc3RhbXA6IHVuZGVmaW5lZCwgZ2xvYmFsT3JpZ2luOiB1bmRlZmluZWQsIGRpcmVjdGlvbjogdW5kZWZpbmVkLCBoaXRzOiBbXSwgdGlja051bWJlcjogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJSYXljYXN0UmVzdWx0O1xuKGZ1bmN0aW9uIChQQlJheWNhc3RSZXN1bHQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS51aW50MzIobWVzc2FnZS50aW1lc3RhbXApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmdsb2JhbE9yaWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLmdsb2JhbE9yaWdpbiwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5kaXJlY3Rpb24sIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuaGl0cykge1xuICAgICAgICAgICAgUmF5Y2FzdEhpdC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50aWNrTnVtYmVyICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS51aW50MzIobWVzc2FnZS50aWNrTnVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlJheWNhc3RSZXN1bHQuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlJheWNhc3RSZXN1bHQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nbG9iYWxPcmlnaW4gPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlyZWN0aW9uID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhpdHMucHVzaChSYXljYXN0SGl0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpY2tOdW1iZXIgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJSYXljYXN0UmVzdWx0LmRlY29kZSA9IGRlY29kZTtcbn0pKFBCUmF5Y2FzdFJlc3VsdCB8fCAoUEJSYXljYXN0UmVzdWx0ID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlJheWNhc3RSZXN1bHQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9yYXljYXN0X3Jlc3VsdC5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFJheWNhc3RSZXN1bHRTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDY4LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlJheWNhc3RSZXN1bHQuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJSYXljYXN0UmVzdWx0LmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQlJheWNhc3RSZXN1bHQuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCUmF5Y2FzdFJlc3VsdFwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCUmVhbG1JbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VVcmw6IFwiXCIsXG4gICAgICAgIHJlYWxtTmFtZTogXCJcIixcbiAgICAgICAgbmV0d29ya0lkOiAwLFxuICAgICAgICBjb21tc0FkYXB0ZXI6IFwiXCIsXG4gICAgICAgIGlzUHJldmlldzogZmFsc2UsXG4gICAgICAgIHJvb206IHVuZGVmaW5lZCxcbiAgICAgICAgaXNDb25uZWN0ZWRTY2VuZVJvb206IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJSZWFsbUluZm87XG4oZnVuY3Rpb24gKFBCUmVhbG1JbmZvKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmFzZVVybCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYmFzZVVybCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVhbG1OYW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5yZWFsbU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm5ldHdvcmtJZCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS5uZXR3b3JrSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbW1zQWRhcHRlciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNCkuc3RyaW5nKG1lc3NhZ2UuY29tbXNBZGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pc1ByZXZpZXcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmJvb2wobWVzc2FnZS5pc1ByZXZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJvb20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig1MCkuc3RyaW5nKG1lc3NhZ2Uucm9vbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaXNDb25uZWN0ZWRTY2VuZVJvb20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig1NikuYm9vbChtZXNzYWdlLmlzQ29ubmVjdGVkU2NlbmVSb29tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlJlYWxtSW5mby5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCUmVhbG1JbmZvKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmFzZVVybCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZWFsbU5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmV0d29ya0lkID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29tbXNBZGFwdGVyID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlzUHJldmlldyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uucm9vbSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pc0Nvbm5lY3RlZFNjZW5lUm9vbSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJSZWFsbUluZm8uZGVjb2RlID0gZGVjb2RlO1xufSkoUEJSZWFsbUluZm8gfHwgKFBCUmVhbG1JbmZvID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlJlYWxtSW5mbyB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3JlYWxtX2luZm8uZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBSZWFsbUluZm9TY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMTA2LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlJlYWxtSW5mby5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlJlYWxtSW5mby5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJSZWFsbUluZm8uZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCUmVhbG1JbmZvXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IENvbG9yMywgQ29sb3I0IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb2xvcnMuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVGV4dFNoYXBlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgIGZvbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9udFNpemU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9udEF1dG9TaXplOiB1bmRlZmluZWQsXG4gICAgICAgIHRleHRBbGlnbjogdW5kZWZpbmVkLFxuICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgcGFkZGluZ1RvcDogdW5kZWZpbmVkLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogdW5kZWZpbmVkLFxuICAgICAgICBwYWRkaW5nTGVmdDogdW5kZWZpbmVkLFxuICAgICAgICBsaW5lU3BhY2luZzogdW5kZWZpbmVkLFxuICAgICAgICBsaW5lQ291bnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgdGV4dFdyYXBwaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHNoYWRvd0JsdXI6IHVuZGVmaW5lZCxcbiAgICAgICAgc2hhZG93T2Zmc2V0WDogdW5kZWZpbmVkLFxuICAgICAgICBzaGFkb3dPZmZzZXRZOiB1bmRlZmluZWQsXG4gICAgICAgIG91dGxpbmVXaWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBzaGFkb3dDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICBvdXRsaW5lQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgdGV4dENvbG9yOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCVGV4dFNoYXBlO1xuKGZ1bmN0aW9uIChQQlRleHRTaGFwZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnRleHQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZvbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS5mb250KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mb250U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI5KS5mbG9hdChtZXNzYWdlLmZvbnRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mb250QXV0b1NpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuYm9vbChtZXNzYWdlLmZvbnRBdXRvU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGV4dEFsaWduICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmludDMyKG1lc3NhZ2UudGV4dEFsaWduKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDUzKS5mbG9hdChtZXNzYWdlLndpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig2MSkuZmxvYXQobWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZGRpbmdUb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig2OSkuZmxvYXQobWVzc2FnZS5wYWRkaW5nVG9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYWRkaW5nUmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig3NykuZmxvYXQobWVzc2FnZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZGRpbmdCb3R0b20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4NSkuZmxvYXQobWVzc2FnZS5wYWRkaW5nQm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYWRkaW5nTGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDkzKS5mbG9hdChtZXNzYWdlLnBhZGRpbmdMZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5saW5lU3BhY2luZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwMSkuZmxvYXQobWVzc2FnZS5saW5lU3BhY2luZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGluZUNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTA0KS5pbnQzMihtZXNzYWdlLmxpbmVDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGV4dFdyYXBwaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTEyKS5ib29sKG1lc3NhZ2UudGV4dFdyYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaGFkb3dCbHVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTI1KS5mbG9hdChtZXNzYWdlLnNoYWRvd0JsdXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNoYWRvd09mZnNldFggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMzMpLmZsb2F0KG1lc3NhZ2Uuc2hhZG93T2Zmc2V0WCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2hhZG93T2Zmc2V0WSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE0MSkuZmxvYXQobWVzc2FnZS5zaGFkb3dPZmZzZXRZKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5vdXRsaW5lV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNDkpLmZsb2F0KG1lc3NhZ2Uub3V0bGluZVdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaGFkb3dDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2Uuc2hhZG93Q29sb3IsIHdyaXRlci51aW50MzIoMTU0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm91dGxpbmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2Uub3V0bGluZUNvbG9yLCB3cml0ZXIudWludDMyKDE2MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50ZXh0Q29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29sb3I0LmVuY29kZShtZXNzYWdlLnRleHRDb2xvciwgd3JpdGVyLnVpbnQzMigxNzApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJUZXh0U2hhcGUuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlRleHRTaGFwZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRleHQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZm9udCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZvbnRTaXplID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZm9udEF1dG9TaXplID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50ZXh0QWxpZ24gPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53aWR0aCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDYxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDY5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhZGRpbmdUb3AgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA3Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWRkaW5nUmlnaHQgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gODUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFkZGluZ0JvdHRvbSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA5Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWRkaW5nTGVmdCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGluZVNwYWNpbmcgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxpbmVDb3VudCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGV4dFdyYXBwaW5nID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNoYWRvd0JsdXIgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNoYWRvd09mZnNldFggPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTQxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNoYWRvd09mZnNldFkgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTQ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm91dGxpbmVXaWR0aCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNTQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2hhZG93Q29sb3IgPSBDb2xvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTYyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm91dGxpbmVDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNzApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGV4dENvbG9yID0gQ29sb3I0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJUZXh0U2hhcGUuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJUZXh0U2hhcGUgfHwgKFBCVGV4dFNoYXBlID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlRleHRTaGFwZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3RleHRfc2hhcGUuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBUZXh0U2hhcGVTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDMwLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlRleHRTaGFwZS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlRleHRTaGFwZS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJUZXh0U2hhcGUuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCVGV4dFNoYXBlXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IFF1YXRlcm5pb24sIFZlY3RvcjIsIFZlY3RvcjMgfSBmcm9tIFwiLi4vLi4vY29tbW9uL3ZlY3RvcnMuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgVGV4dHVyZU1vdmVtZW50VHlwZTtcbihmdW5jdGlvbiAoVGV4dHVyZU1vdmVtZW50VHlwZSkge1xuICAgIC8qKiBUTVRfT0ZGU0VUIC0gZGVmYXVsdCA9IFRleHR1cmVNb3ZlbWVudFR5cGUuVE1UX09GRlNFVCAqL1xuICAgIFRleHR1cmVNb3ZlbWVudFR5cGVbVGV4dHVyZU1vdmVtZW50VHlwZVtcIlRNVF9PRkZTRVRcIl0gPSAwXSA9IFwiVE1UX09GRlNFVFwiO1xuICAgIFRleHR1cmVNb3ZlbWVudFR5cGVbVGV4dHVyZU1vdmVtZW50VHlwZVtcIlRNVF9USUxJTkdcIl0gPSAxXSA9IFwiVE1UX1RJTElOR1wiO1xufSkoVGV4dHVyZU1vdmVtZW50VHlwZSB8fCAoVGV4dHVyZU1vdmVtZW50VHlwZSA9IHt9KSk7XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIGd1aWRlbGluZXMgZm9yIHRoZXNlIGVhc2luZyBmdW5jdGlvbnMgY2FuIGJlIGZvdW5kXG4gKiBhdCBodHRwczovL2dpdGh1Yi5jb20vYWkvZWFzaW5ncy5uZXQvYmxvYi82ZmNkNWY4NTJhNDcwYmYxYTc4OTBlODE3OGFmYTBmNDcxZDVmMmVjL3NyYy9lYXNpbmdzL2Vhc2luZ3NGdW5jdGlvbnMudHNcbiAqL1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgRWFzaW5nRnVuY3Rpb247XG4oZnVuY3Rpb24gKEVhc2luZ0Z1bmN0aW9uKSB7XG4gICAgLyoqIEVGX0xJTkVBUiAtIGRlZmF1bHQgKi9cbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0xJTkVBUlwiXSA9IDBdID0gXCJFRl9MSU5FQVJcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VJTlFVQURcIl0gPSAxXSA9IFwiRUZfRUFTRUlOUVVBRFwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRU9VVFFVQURcIl0gPSAyXSA9IFwiRUZfRUFTRU9VVFFVQURcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VRVUFEXCJdID0gM10gPSBcIkVGX0VBU0VRVUFEXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFSU5TSU5FXCJdID0gNF0gPSBcIkVGX0VBU0VJTlNJTkVcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VPVVRTSU5FXCJdID0gNV0gPSBcIkVGX0VBU0VPVVRTSU5FXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFU0lORVwiXSA9IDZdID0gXCJFRl9FQVNFU0lORVwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUlORVhQT1wiXSA9IDddID0gXCJFRl9FQVNFSU5FWFBPXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFT1VURVhQT1wiXSA9IDhdID0gXCJFRl9FQVNFT1VURVhQT1wiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUVYUE9cIl0gPSA5XSA9IFwiRUZfRUFTRUVYUE9cIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VJTkVMQVNUSUNcIl0gPSAxMF0gPSBcIkVGX0VBU0VJTkVMQVNUSUNcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VPVVRFTEFTVElDXCJdID0gMTFdID0gXCJFRl9FQVNFT1VURUxBU1RJQ1wiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUVMQVNUSUNcIl0gPSAxMl0gPSBcIkVGX0VBU0VFTEFTVElDXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFSU5CT1VOQ0VcIl0gPSAxM10gPSBcIkVGX0VBU0VJTkJPVU5DRVwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRU9VVEJPVU5DRVwiXSA9IDE0XSA9IFwiRUZfRUFTRU9VVEJPVU5DRVwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUJPVU5DRVwiXSA9IDE1XSA9IFwiRUZfRUFTRUJPVU5DRVwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUlOQ1VCSUNcIl0gPSAxNl0gPSBcIkVGX0VBU0VJTkNVQklDXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFT1VUQ1VCSUNcIl0gPSAxN10gPSBcIkVGX0VBU0VPVVRDVUJJQ1wiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUNVQklDXCJdID0gMThdID0gXCJFRl9FQVNFQ1VCSUNcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VJTlFVQVJUXCJdID0gMTldID0gXCJFRl9FQVNFSU5RVUFSVFwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRU9VVFFVQVJUXCJdID0gMjBdID0gXCJFRl9FQVNFT1VUUVVBUlRcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VRVUFSVFwiXSA9IDIxXSA9IFwiRUZfRUFTRVFVQVJUXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFSU5RVUlOVFwiXSA9IDIyXSA9IFwiRUZfRUFTRUlOUVVJTlRcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VPVVRRVUlOVFwiXSA9IDIzXSA9IFwiRUZfRUFTRU9VVFFVSU5UXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFUVVJTlRcIl0gPSAyNF0gPSBcIkVGX0VBU0VRVUlOVFwiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUlOQ0lSQ1wiXSA9IDI1XSA9IFwiRUZfRUFTRUlOQ0lSQ1wiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRU9VVENJUkNcIl0gPSAyNl0gPSBcIkVGX0VBU0VPVVRDSVJDXCI7XG4gICAgRWFzaW5nRnVuY3Rpb25bRWFzaW5nRnVuY3Rpb25bXCJFRl9FQVNFQ0lSQ1wiXSA9IDI3XSA9IFwiRUZfRUFTRUNJUkNcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VJTkJBQ0tcIl0gPSAyOF0gPSBcIkVGX0VBU0VJTkJBQ0tcIjtcbiAgICBFYXNpbmdGdW5jdGlvbltFYXNpbmdGdW5jdGlvbltcIkVGX0VBU0VPVVRCQUNLXCJdID0gMjldID0gXCJFRl9FQVNFT1VUQkFDS1wiO1xuICAgIEVhc2luZ0Z1bmN0aW9uW0Vhc2luZ0Z1bmN0aW9uW1wiRUZfRUFTRUJBQ0tcIl0gPSAzMF0gPSBcIkVGX0VBU0VCQUNLXCI7XG59KShFYXNpbmdGdW5jdGlvbiB8fCAoRWFzaW5nRnVuY3Rpb24gPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVHdlZW4oKSB7XG4gICAgcmV0dXJuIHsgZHVyYXRpb246IDAsIGVhc2luZ0Z1bmN0aW9uOiAwLCBtb2RlOiB1bmRlZmluZWQsIHBsYXlpbmc6IHVuZGVmaW5lZCwgY3VycmVudFRpbWU6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJUd2VlbjtcbihmdW5jdGlvbiAoUEJUd2Vlbikge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lYXNpbmdGdW5jdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS5lYXNpbmdGdW5jdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLm1vZGU/LiRjYXNlKSB7XG4gICAgICAgICAgICBjYXNlIFwibW92ZVwiOlxuICAgICAgICAgICAgICAgIE1vdmUuZW5jb2RlKG1lc3NhZ2UubW9kZS5tb3ZlLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJvdGF0ZVwiOlxuICAgICAgICAgICAgICAgIFJvdGF0ZS5lbmNvZGUobWVzc2FnZS5tb2RlLnJvdGF0ZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsZVwiOlxuICAgICAgICAgICAgICAgIFNjYWxlLmVuY29kZShtZXNzYWdlLm1vZGUuc2NhbGUsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidGV4dHVyZU1vdmVcIjpcbiAgICAgICAgICAgICAgICBUZXh0dXJlTW92ZS5lbmNvZGUobWVzc2FnZS5tb2RlLnRleHR1cmVNb3ZlLCB3cml0ZXIudWludDMyKDY2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBsYXlpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0OCkuYm9vbChtZXNzYWdlLnBsYXlpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmN1cnJlbnRUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNjEpLmZsb2F0KG1lc3NhZ2UuY3VycmVudFRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVHdlZW4uZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlR3ZWVuKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZHVyYXRpb24gPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lYXNpbmdGdW5jdGlvbiA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1vZGUgPSB7ICRjYXNlOiBcIm1vdmVcIiwgbW92ZTogTW92ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubW9kZSA9IHsgJGNhc2U6IFwicm90YXRlXCIsIHJvdGF0ZTogUm90YXRlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tb2RlID0geyAkY2FzZTogXCJzY2FsZVwiLCBzY2FsZTogU2NhbGUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDY2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1vZGUgPSB7ICRjYXNlOiBcInRleHR1cmVNb3ZlXCIsIHRleHR1cmVNb3ZlOiBUZXh0dXJlTW92ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGxheWluZyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VycmVudFRpbWUgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlR3ZWVuLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCVHdlZW4gfHwgKFBCVHdlZW4gPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1vdmUoKSB7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHVuZGVmaW5lZCwgZW5kOiB1bmRlZmluZWQsIGZhY2VEaXJlY3Rpb246IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgTW92ZTtcbihmdW5jdGlvbiAoTW92ZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2Uuc3RhcnQsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2UuZW5kLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZhY2VEaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuYm9vbChtZXNzYWdlLmZhY2VEaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIE1vdmUuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNb3ZlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhcnQgPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZhY2VEaXJlY3Rpb24gPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIE1vdmUuZGVjb2RlID0gZGVjb2RlO1xufSkoTW92ZSB8fCAoTW92ZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUm90YXRlKCkge1xuICAgIHJldHVybiB7IHN0YXJ0OiB1bmRlZmluZWQsIGVuZDogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBSb3RhdGU7XG4oZnVuY3Rpb24gKFJvdGF0ZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFF1YXRlcm5pb24uZW5jb2RlKG1lc3NhZ2Uuc3RhcnQsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFF1YXRlcm5pb24uZW5jb2RlKG1lc3NhZ2UuZW5kLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFJvdGF0ZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVJvdGF0ZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXJ0ID0gUXVhdGVybmlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVuZCA9IFF1YXRlcm5pb24uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBSb3RhdGUuZGVjb2RlID0gZGVjb2RlO1xufSkoUm90YXRlIHx8IChSb3RhdGUgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVNjYWxlKCkge1xuICAgIHJldHVybiB7IHN0YXJ0OiB1bmRlZmluZWQsIGVuZDogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBTY2FsZTtcbihmdW5jdGlvbiAoU2NhbGUpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLnN0YXJ0LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLmVuZCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBTY2FsZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNjYWxlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhcnQgPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFNjYWxlLmRlY29kZSA9IGRlY29kZTtcbn0pKFNjYWxlIHx8IChTY2FsZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlVGV4dHVyZU1vdmUoKSB7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHVuZGVmaW5lZCwgZW5kOiB1bmRlZmluZWQsIG1vdmVtZW50VHlwZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBUZXh0dXJlTW92ZTtcbihmdW5jdGlvbiAoVGV4dHVyZU1vdmUpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IyLmVuY29kZShtZXNzYWdlLnN0YXJ0LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWZWN0b3IyLmVuY29kZShtZXNzYWdlLmVuZCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tb3ZlbWVudFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS5tb3ZlbWVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFRleHR1cmVNb3ZlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVGV4dHVyZU1vdmUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGFydCA9IFZlY3RvcjIuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbmQgPSBWZWN0b3IyLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubW92ZW1lbnRUeXBlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgVGV4dHVyZU1vdmUuZGVjb2RlID0gZGVjb2RlO1xufSkoVGV4dHVyZU1vdmUgfHwgKFRleHR1cmVNb3ZlID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlR3ZWVuIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdHdlZW4uZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBUd2VlblNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDExMDIsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCVHdlZW4uZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJUd2Vlbi5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJUd2Vlbi5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJUd2VlblwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBQQlR3ZWVuIH0gZnJvbSBcIi4vdHdlZW4uZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgVHdlZW5Mb29wO1xuKGZ1bmN0aW9uIChUd2Vlbkxvb3ApIHtcbiAgICBUd2Vlbkxvb3BbVHdlZW5Mb29wW1wiVExfUkVTVEFSVFwiXSA9IDBdID0gXCJUTF9SRVNUQVJUXCI7XG4gICAgVHdlZW5Mb29wW1R3ZWVuTG9vcFtcIlRMX1lPWU9cIl0gPSAxXSA9IFwiVExfWU9ZT1wiO1xufSkoVHdlZW5Mb29wIHx8IChUd2Vlbkxvb3AgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVHdlZW5TZXF1ZW5jZSgpIHtcbiAgICByZXR1cm4geyBzZXF1ZW5jZTogW10sIGxvb3A6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJUd2VlblNlcXVlbmNlO1xuKGZ1bmN0aW9uIChQQlR3ZWVuU2VxdWVuY2UpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zZXF1ZW5jZSkge1xuICAgICAgICAgICAgUEJUd2Vlbi5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sb29wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UubG9vcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJUd2VlblNlcXVlbmNlLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJUd2VlblNlcXVlbmNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VxdWVuY2UucHVzaChQQlR3ZWVuLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxvb3AgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlR3ZWVuU2VxdWVuY2UuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJUd2VlblNlcXVlbmNlIHx8IChQQlR3ZWVuU2VxdWVuY2UgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCVHdlZW5TZXF1ZW5jZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3R3ZWVuX3NlcXVlbmNlLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVHdlZW5TZXF1ZW5jZVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDExMDQsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCVHdlZW5TZXF1ZW5jZS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlR3ZWVuU2VxdWVuY2UuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVHdlZW5TZXF1ZW5jZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJUd2VlblNlcXVlbmNlXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBUd2VlblN0YXRlU3RhdHVzO1xuKGZ1bmN0aW9uIChUd2VlblN0YXRlU3RhdHVzKSB7XG4gICAgVHdlZW5TdGF0ZVN0YXR1c1tUd2VlblN0YXRlU3RhdHVzW1wiVFNfQUNUSVZFXCJdID0gMF0gPSBcIlRTX0FDVElWRVwiO1xuICAgIFR3ZWVuU3RhdGVTdGF0dXNbVHdlZW5TdGF0ZVN0YXR1c1tcIlRTX0NPTVBMRVRFRFwiXSA9IDFdID0gXCJUU19DT01QTEVURURcIjtcbiAgICBUd2VlblN0YXRlU3RhdHVzW1R3ZWVuU3RhdGVTdGF0dXNbXCJUU19QQVVTRURcIl0gPSAyXSA9IFwiVFNfUEFVU0VEXCI7XG59KShUd2VlblN0YXRlU3RhdHVzIHx8IChUd2VlblN0YXRlU3RhdHVzID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlR3ZWVuU3RhdGUoKSB7XG4gICAgcmV0dXJuIHsgc3RhdGU6IDAsIGN1cnJlbnRUaW1lOiAwIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQlR3ZWVuU3RhdGU7XG4oZnVuY3Rpb24gKFBCVHdlZW5TdGF0ZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXRlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2Uuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmN1cnJlbnRUaW1lICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLmN1cnJlbnRUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlR3ZWVuU3RhdGUuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlR3ZWVuU3RhdGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXRlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VycmVudFRpbWUgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlR3ZWVuU3RhdGUuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJUd2VlblN0YXRlIHx8IChQQlR3ZWVuU3RhdGUgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCVHdlZW5TdGF0ZSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3R3ZWVuX3N0YXRlLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVHdlZW5TdGF0ZVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDExMDMsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCVHdlZW5TdGF0ZS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlR3ZWVuU3RhdGUuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVHdlZW5TdGF0ZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJUd2VlblN0YXRlXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IEJvcmRlclJlY3QgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2JvcmRlcl9yZWN0LmdlblwiO1xuaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb2xvcnMuZ2VuXCI7XG5pbXBvcnQgeyBUZXh0dXJlVW5pb24gfSBmcm9tIFwiLi4vLi4vY29tbW9uL3RleHR1cmUuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQmFja2dyb3VuZFRleHR1cmVNb2RlO1xuKGZ1bmN0aW9uIChCYWNrZ3JvdW5kVGV4dHVyZU1vZGUpIHtcbiAgICAvKipcbiAgICAgKiBOSU5FX1NMSUNFUyAtIGh0dHBzOi8vZG9jcy51bml0eTNkLmNvbS9NYW51YWwvVUlFLVVTUy1TdXBwb3J0ZWRQcm9wZXJ0aWVzLmh0bWwgKFNsaWNpbmcgc2VjdGlvbilcbiAgICAgKiBodHRwczovL2ZvcnVtLnVuaXR5LmNvbS90aHJlYWRzL2hvdy1kb2VzLXNsaWNpbmctaW4tdWktdG9va2tpdC13b3Jrcy4xMjM1ODYzL1xuICAgICAqIGh0dHBzOi8vZG9jcy51bml0eTNkLmNvbS9NYW51YWwvOVNsaWNlU3ByaXRlcy5odG1sXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1pbWFnZS1zbGljZVxuICAgICAqL1xuICAgIEJhY2tncm91bmRUZXh0dXJlTW9kZVtCYWNrZ3JvdW5kVGV4dHVyZU1vZGVbXCJOSU5FX1NMSUNFU1wiXSA9IDBdID0gXCJOSU5FX1NMSUNFU1wiO1xuICAgIC8qKlxuICAgICAqIENFTlRFUiAtIENFTlRFUiBlbmFibGVzIHRoZSB0ZXh0dXJlIHRvIGJlIHJlbmRlcmVkIGNlbnRlcmVkIGluIHJlbGF0aW9uIHRvIHRoZVxuICAgICAqIGVsZW1lbnQuIElmIHRoZSBlbGVtZW50IGlzIHNtYWxsZXIgdGhhbiB0aGUgdGV4dHVyZSB0aGVuIHRoZSBiYWNrZ3JvdW5kXG4gICAgICogc2hvdWxkIHVzZSB0aGUgZWxlbWVudCBhcyBzdGVuY2lsIHRvIGN1dCBvZmYgdGhlIG91dC1vZi1ib3VuZHMgYXJlYVxuICAgICAqL1xuICAgIEJhY2tncm91bmRUZXh0dXJlTW9kZVtCYWNrZ3JvdW5kVGV4dHVyZU1vZGVbXCJDRU5URVJcIl0gPSAxXSA9IFwiQ0VOVEVSXCI7XG4gICAgLyoqXG4gICAgICogU1RSRVRDSCAtIFNUUkVUQ0ggZW5hYmxlcyB0aGUgdGV4dHVyZSB0byBjb3ZlciBhbGwgdGhlIGFyZWEgb2YgdGhlIGNvbnRhaW5lcixcbiAgICAgKiBhZG9wdGluZyBpdHMgYXNwZWN0IHJhdGlvLlxuICAgICAqL1xuICAgIEJhY2tncm91bmRUZXh0dXJlTW9kZVtCYWNrZ3JvdW5kVGV4dHVyZU1vZGVbXCJTVFJFVENIXCJdID0gMl0gPSBcIlNUUkVUQ0hcIjtcbn0pKEJhY2tncm91bmRUZXh0dXJlTW9kZSB8fCAoQmFja2dyb3VuZFRleHR1cmVNb2RlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlVpQmFja2dyb3VuZCgpIHtcbiAgICByZXR1cm4geyBjb2xvcjogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQsIHRleHR1cmVNb2RlOiAwLCB0ZXh0dXJlU2xpY2VzOiB1bmRlZmluZWQsIHV2czogW10gfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCVWlCYWNrZ3JvdW5kO1xuKGZ1bmN0aW9uIChQQlVpQmFja2dyb3VuZCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yNC5lbmNvZGUobWVzc2FnZS5jb2xvciwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50ZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFRleHR1cmVVbmlvbi5lbmNvZGUobWVzc2FnZS50ZXh0dXJlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnRleHR1cmVNb2RlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQzMihtZXNzYWdlLnRleHR1cmVNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50ZXh0dXJlU2xpY2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEJvcmRlclJlY3QuZW5jb2RlKG1lc3NhZ2UudGV4dHVyZVNsaWNlcywgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICB3cml0ZXIudWludDMyKDQyKS5mb3JrKCk7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnV2cykge1xuICAgICAgICAgICAgd3JpdGVyLmZsb2F0KHYpO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlci5sZGVsaW0oKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJVaUJhY2tncm91bmQuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlVpQmFja2dyb3VuZCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbG9yID0gQ29sb3I0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGV4dHVyZSA9IFRleHR1cmVVbmlvbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRleHR1cmVNb2RlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGV4dHVyZVNsaWNlcyA9IEJvcmRlclJlY3QuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnID09PSA0NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51dnMucHVzaChyZWFkZXIuZmxvYXQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnID09PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnV2cy5wdXNoKHJlYWRlci5mbG9hdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJVaUJhY2tncm91bmQuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJVaUJhY2tncm91bmQgfHwgKFBCVWlCYWNrZ3JvdW5kID0ge30pKTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5jb21tb25cIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VCb3JkZXJSZWN0KCkge1xuICAgIHJldHVybiB7IHRvcDogMCwgbGVmdDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQm9yZGVyUmVjdDtcbihmdW5jdGlvbiAoQm9yZGVyUmVjdCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnRvcCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMykuZmxvYXQobWVzc2FnZS50b3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxlZnQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UubGVmdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmlnaHQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjkpLmZsb2F0KG1lc3NhZ2UucmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvdHRvbSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS5ib3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIEJvcmRlclJlY3QuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VCb3JkZXJSZWN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudG9wID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGVmdCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJpZ2h0ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm90dG9tID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgQm9yZGVyUmVjdC5kZWNvZGUgPSBkZWNvZGU7XG59KShCb3JkZXJSZWN0IHx8IChCb3JkZXJSZWN0ID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VSZWN0KCkge1xuICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFJlY3Q7XG4oZnVuY3Rpb24gKFJlY3QpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS54ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLngpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnkgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UueSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uud2lkdGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjkpLmZsb2F0KG1lc3NhZ2Uud2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFJlY3QuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VSZWN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UueCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnkgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53aWR0aCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhlaWdodCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFJlY3QuZGVjb2RlID0gZGVjb2RlO1xufSkoUmVjdCB8fCAoUmVjdCA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJVaUJhY2tncm91bmQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9iYWNrZ3JvdW5kLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVWlCYWNrZ3JvdW5kU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA1MyxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJVaUJhY2tncm91bmQuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJVaUJhY2tncm91bmQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVWlCYWNrZ3JvdW5kLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlVpQmFja2dyb3VuZFwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBCb3JkZXJSZWN0IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9ib3JkZXJfcmVjdC5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJVaUNhbnZhc0luZm9ybWF0aW9uKCkge1xuICAgIHJldHVybiB7IGRldmljZVBpeGVsUmF0aW86IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAsIGludGVyYWN0YWJsZUFyZWE6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJVaUNhbnZhc0luZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChQQlVpQ2FudmFzSW5mb3JtYXRpb24pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kZXZpY2VQaXhlbFJhdGlvICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLndpZHRoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLndpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbnRlcmFjdGFibGVBcmVhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEJvcmRlclJlY3QuZW5jb2RlKG1lc3NhZ2UuaW50ZXJhY3RhYmxlQXJlYSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlVpQ2FudmFzSW5mb3JtYXRpb24uZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlVpQ2FudmFzSW5mb3JtYXRpb24oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kZXZpY2VQaXhlbFJhdGlvID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uud2lkdGggPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbnRlcmFjdGFibGVBcmVhID0gQm9yZGVyUmVjdC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCVWlDYW52YXNJbmZvcm1hdGlvbi5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlVpQ2FudmFzSW5mb3JtYXRpb24gfHwgKFBCVWlDYW52YXNJbmZvcm1hdGlvbiA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJVaUNhbnZhc0luZm9ybWF0aW9uIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdWlfY2FudmFzX2luZm9ybWF0aW9uLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVWlDYW52YXNJbmZvcm1hdGlvblNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwNTQsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCVWlDYW52YXNJbmZvcm1hdGlvbi5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlVpQ2FudmFzSW5mb3JtYXRpb24uZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVWlDYW52YXNJbmZvcm1hdGlvbi5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJVaUNhbnZhc0luZm9ybWF0aW9uXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IENvbG9yNCB9IGZyb20gXCIuLi8uLi9jb21tb24vY29sb3JzLmdlblwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlVpRHJvcGRvd24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWNjZXB0RW1wdHk6IGZhbHNlLFxuICAgICAgICBlbXB0eUxhYmVsOiB1bmRlZmluZWQsXG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICBzZWxlY3RlZEluZGV4OiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgdGV4dEFsaWduOiB1bmRlZmluZWQsXG4gICAgICAgIGZvbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9udFNpemU6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJVaURyb3Bkb3duO1xuKGZ1bmN0aW9uIChQQlVpRHJvcGRvd24pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5hY2NlcHRFbXB0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5ib29sKG1lc3NhZ2UuYWNjZXB0RW1wdHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVtcHR5TGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UuZW1wdHlMYWJlbCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2Uub3B0aW9ucykge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKHYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNlbGVjdGVkSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50MzIobWVzc2FnZS5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0MCkuYm9vbChtZXNzYWdlLmRpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjQuZW5jb2RlKG1lc3NhZ2UuY29sb3IsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGV4dEFsaWduICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoODApLmludDMyKG1lc3NhZ2UudGV4dEFsaWduKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mb250ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoODgpLmludDMyKG1lc3NhZ2UuZm9udCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZm9udFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig5NikuaW50MzIobWVzc2FnZS5mb250U2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJVaURyb3Bkb3duLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJVaURyb3Bkb3duKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hY2NlcHRFbXB0eSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW1wdHlMYWJlbCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5vcHRpb25zLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWxlY3RlZEluZGV4ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzYWJsZWQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbG9yID0gQ29sb3I0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRleHRBbGlnbiA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4OCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mb250ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDk2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZvbnRTaXplID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJVaURyb3Bkb3duLmRlY29kZSA9IGRlY29kZTtcbn0pKFBCVWlEcm9wZG93biB8fCAoUEJVaURyb3Bkb3duID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlVpRHJvcGRvd24gfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9kcm9wZG93bi5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFVpRHJvcGRvd25TY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDk0LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlVpRHJvcGRvd24uZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJVaURyb3Bkb3duLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQlVpRHJvcGRvd24uZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCVWlEcm9wZG93blwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVWlEcm9wZG93blJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogMCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJVaURyb3Bkb3duUmVzdWx0O1xuKGZ1bmN0aW9uIChQQlVpRHJvcGRvd25SZXN1bHQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlVpRHJvcGRvd25SZXN1bHQuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlVpRHJvcGRvd25SZXN1bHQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJVaURyb3Bkb3duUmVzdWx0LmRlY29kZSA9IGRlY29kZTtcbn0pKFBCVWlEcm9wZG93blJlc3VsdCB8fCAoUEJVaURyb3Bkb3duUmVzdWx0ID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlVpRHJvcGRvd25SZXN1bHQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9kcm9wZG93bl9yZXN1bHQuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBVaURyb3Bkb3duUmVzdWx0U2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA5NixcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJVaURyb3Bkb3duUmVzdWx0LmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCVWlEcm9wZG93blJlc3VsdC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJVaURyb3Bkb3duUmVzdWx0LmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlVpRHJvcGRvd25SZXN1bHRcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb2xvcnMuZ2VuXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVWlJbnB1dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZWhvbGRlcjogXCJcIixcbiAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgcGxhY2Vob2xkZXJDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIHRleHRBbGlnbjogdW5kZWZpbmVkLFxuICAgICAgICBmb250OiB1bmRlZmluZWQsXG4gICAgICAgIGZvbnRTaXplOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCVWlJbnB1dDtcbihmdW5jdGlvbiAoUEJVaUlucHV0KSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGxhY2Vob2xkZXIgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjQuZW5jb2RlKG1lc3NhZ2UuY29sb3IsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGxhY2Vob2xkZXJDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjQuZW5jb2RlKG1lc3NhZ2UucGxhY2Vob2xkZXJDb2xvciwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuYm9vbChtZXNzYWdlLmRpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50ZXh0QWxpZ24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4MCkuaW50MzIobWVzc2FnZS50ZXh0QWxpZ24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZvbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4OCkuaW50MzIobWVzc2FnZS5mb250KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mb250U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDk2KS5pbnQzMihtZXNzYWdlLmZvbnRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwNikuc3RyaW5nKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVWlJbnB1dC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCVWlJbnB1dCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBsYWNlaG9sZGVyID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbG9yID0gQ29sb3I0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGxhY2Vob2xkZXJDb2xvciA9IENvbG9yNC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRpc2FibGVkID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gODApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGV4dEFsaWduID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDg4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZvbnQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZm9udFNpemUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCVWlJbnB1dC5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlVpSW5wdXQgfHwgKFBCVWlJbnB1dCA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJVaUlucHV0IH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdWlfaW5wdXQuZ2VuJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBVaUlucHV0U2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA5MyxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJVaUlucHV0LmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCVWlJbnB1dC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgICAgICByZXR1cm4gUEJVaUlucHV0LmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlVpSW5wdXRcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlVpSW5wdXRSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IFwiXCIsIGlzU3VibWl0OiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCVWlJbnB1dFJlc3VsdDtcbihmdW5jdGlvbiAoUEJVaUlucHV0UmVzdWx0KSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudmFsdWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pc1N1Ym1pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2UuaXNTdWJtaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVWlJbnB1dFJlc3VsdC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCVWlJbnB1dFJlc3VsdCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlzU3VibWl0ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlVpSW5wdXRSZXN1bHQuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJVaUlucHV0UmVzdWx0IHx8IChQQlVpSW5wdXRSZXN1bHQgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCVWlJbnB1dFJlc3VsdCB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX2lucHV0X3Jlc3VsdC5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFVpSW5wdXRSZXN1bHRTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDk1LFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlVpSW5wdXRSZXN1bHQuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJVaUlucHV0UmVzdWx0LmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQlVpSW5wdXRSZXN1bHQuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCVWlJbnB1dFJlc3VsdFwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NvbG9ycy5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBUZXh0V3JhcDtcbihmdW5jdGlvbiAoVGV4dFdyYXApIHtcbiAgICBUZXh0V3JhcFtUZXh0V3JhcFtcIlRXX1dSQVBcIl0gPSAwXSA9IFwiVFdfV1JBUFwiO1xuICAgIFRleHRXcmFwW1RleHRXcmFwW1wiVFdfTk9fV1JBUFwiXSA9IDFdID0gXCJUV19OT19XUkFQXCI7XG59KShUZXh0V3JhcCB8fCAoVGV4dFdyYXAgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVWlUZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBcIlwiLFxuICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICB0ZXh0QWxpZ246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9udDogdW5kZWZpbmVkLFxuICAgICAgICBmb250U2l6ZTogdW5kZWZpbmVkLFxuICAgICAgICB0ZXh0V3JhcDogdW5kZWZpbmVkLFxuICAgIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQlVpVGV4dDtcbihmdW5jdGlvbiAoUEJVaVRleHQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yNC5lbmNvZGUobWVzc2FnZS5jb2xvciwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50ZXh0QWxpZ24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS50ZXh0QWxpZ24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZvbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50MzIobWVzc2FnZS5mb250KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mb250U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQzMihtZXNzYWdlLmZvbnRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50ZXh0V3JhcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ4KS5pbnQzMihtZXNzYWdlLnRleHRXcmFwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBQQlVpVGV4dC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCVWlUZXh0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFsdWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29sb3IgPSBDb2xvcjQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50ZXh0QWxpZ24gPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mb250ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZm9udFNpemUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0OCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50ZXh0V3JhcCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCVWlUZXh0LmRlY29kZSA9IGRlY29kZTtcbn0pKFBCVWlUZXh0IHx8IChQQlVpVGV4dCA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJVaVRleHQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV90ZXh0Lmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVWlUZXh0U2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA1MixcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJVaVRleHQuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJVaVRleHQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVWlUZXh0LmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlVpVGV4dFwiXG4gICAgfVxufTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NvbG9ycy5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBZR1Bvc2l0aW9uVHlwZTtcbihmdW5jdGlvbiAoWUdQb3NpdGlvblR5cGUpIHtcbiAgICBZR1Bvc2l0aW9uVHlwZVtZR1Bvc2l0aW9uVHlwZVtcIllHUFRfUkVMQVRJVkVcIl0gPSAwXSA9IFwiWUdQVF9SRUxBVElWRVwiO1xuICAgIFlHUG9zaXRpb25UeXBlW1lHUG9zaXRpb25UeXBlW1wiWUdQVF9BQlNPTFVURVwiXSA9IDFdID0gXCJZR1BUX0FCU09MVVRFXCI7XG59KShZR1Bvc2l0aW9uVHlwZSB8fCAoWUdQb3NpdGlvblR5cGUgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgWUdBbGlnbjtcbihmdW5jdGlvbiAoWUdBbGlnbikge1xuICAgIFlHQWxpZ25bWUdBbGlnbltcIllHQV9BVVRPXCJdID0gMF0gPSBcIllHQV9BVVRPXCI7XG4gICAgWUdBbGlnbltZR0FsaWduW1wiWUdBX0ZMRVhfU1RBUlRcIl0gPSAxXSA9IFwiWUdBX0ZMRVhfU1RBUlRcIjtcbiAgICBZR0FsaWduW1lHQWxpZ25bXCJZR0FfQ0VOVEVSXCJdID0gMl0gPSBcIllHQV9DRU5URVJcIjtcbiAgICBZR0FsaWduW1lHQWxpZ25bXCJZR0FfRkxFWF9FTkRcIl0gPSAzXSA9IFwiWUdBX0ZMRVhfRU5EXCI7XG4gICAgWUdBbGlnbltZR0FsaWduW1wiWUdBX1NUUkVUQ0hcIl0gPSA0XSA9IFwiWUdBX1NUUkVUQ0hcIjtcbiAgICBZR0FsaWduW1lHQWxpZ25bXCJZR0FfQkFTRUxJTkVcIl0gPSA1XSA9IFwiWUdBX0JBU0VMSU5FXCI7XG4gICAgWUdBbGlnbltZR0FsaWduW1wiWUdBX1NQQUNFX0JFVFdFRU5cIl0gPSA2XSA9IFwiWUdBX1NQQUNFX0JFVFdFRU5cIjtcbiAgICBZR0FsaWduW1lHQWxpZ25bXCJZR0FfU1BBQ0VfQVJPVU5EXCJdID0gN10gPSBcIllHQV9TUEFDRV9BUk9VTkRcIjtcbn0pKFlHQWxpZ24gfHwgKFlHQWxpZ24gPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgWUdVbml0O1xuKGZ1bmN0aW9uIChZR1VuaXQpIHtcbiAgICBZR1VuaXRbWUdVbml0W1wiWUdVX1VOREVGSU5FRFwiXSA9IDBdID0gXCJZR1VfVU5ERUZJTkVEXCI7XG4gICAgWUdVbml0W1lHVW5pdFtcIllHVV9QT0lOVFwiXSA9IDFdID0gXCJZR1VfUE9JTlRcIjtcbiAgICBZR1VuaXRbWUdVbml0W1wiWUdVX1BFUkNFTlRcIl0gPSAyXSA9IFwiWUdVX1BFUkNFTlRcIjtcbiAgICBZR1VuaXRbWUdVbml0W1wiWUdVX0FVVE9cIl0gPSAzXSA9IFwiWUdVX0FVVE9cIjtcbn0pKFlHVW5pdCB8fCAoWUdVbml0ID0ge30pKTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFlHRmxleERpcmVjdGlvbjtcbihmdW5jdGlvbiAoWUdGbGV4RGlyZWN0aW9uKSB7XG4gICAgWUdGbGV4RGlyZWN0aW9uW1lHRmxleERpcmVjdGlvbltcIllHRkRfUk9XXCJdID0gMF0gPSBcIllHRkRfUk9XXCI7XG4gICAgWUdGbGV4RGlyZWN0aW9uW1lHRmxleERpcmVjdGlvbltcIllHRkRfQ09MVU1OXCJdID0gMV0gPSBcIllHRkRfQ09MVU1OXCI7XG4gICAgWUdGbGV4RGlyZWN0aW9uW1lHRmxleERpcmVjdGlvbltcIllHRkRfQ09MVU1OX1JFVkVSU0VcIl0gPSAyXSA9IFwiWUdGRF9DT0xVTU5fUkVWRVJTRVwiO1xuICAgIFlHRmxleERpcmVjdGlvbltZR0ZsZXhEaXJlY3Rpb25bXCJZR0ZEX1JPV19SRVZFUlNFXCJdID0gM10gPSBcIllHRkRfUk9XX1JFVkVSU0VcIjtcbn0pKFlHRmxleERpcmVjdGlvbiB8fCAoWUdGbGV4RGlyZWN0aW9uID0ge30pKTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFlHV3JhcDtcbihmdW5jdGlvbiAoWUdXcmFwKSB7XG4gICAgWUdXcmFwW1lHV3JhcFtcIllHV19OT19XUkFQXCJdID0gMF0gPSBcIllHV19OT19XUkFQXCI7XG4gICAgWUdXcmFwW1lHV3JhcFtcIllHV19XUkFQXCJdID0gMV0gPSBcIllHV19XUkFQXCI7XG4gICAgWUdXcmFwW1lHV3JhcFtcIllHV19XUkFQX1JFVkVSU0VcIl0gPSAyXSA9IFwiWUdXX1dSQVBfUkVWRVJTRVwiO1xufSkoWUdXcmFwIHx8IChZR1dyYXAgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgWUdKdXN0aWZ5O1xuKGZ1bmN0aW9uIChZR0p1c3RpZnkpIHtcbiAgICBZR0p1c3RpZnlbWUdKdXN0aWZ5W1wiWUdKX0ZMRVhfU1RBUlRcIl0gPSAwXSA9IFwiWUdKX0ZMRVhfU1RBUlRcIjtcbiAgICBZR0p1c3RpZnlbWUdKdXN0aWZ5W1wiWUdKX0NFTlRFUlwiXSA9IDFdID0gXCJZR0pfQ0VOVEVSXCI7XG4gICAgWUdKdXN0aWZ5W1lHSnVzdGlmeVtcIllHSl9GTEVYX0VORFwiXSA9IDJdID0gXCJZR0pfRkxFWF9FTkRcIjtcbiAgICBZR0p1c3RpZnlbWUdKdXN0aWZ5W1wiWUdKX1NQQUNFX0JFVFdFRU5cIl0gPSAzXSA9IFwiWUdKX1NQQUNFX0JFVFdFRU5cIjtcbiAgICBZR0p1c3RpZnlbWUdKdXN0aWZ5W1wiWUdKX1NQQUNFX0FST1VORFwiXSA9IDRdID0gXCJZR0pfU1BBQ0VfQVJPVU5EXCI7XG4gICAgWUdKdXN0aWZ5W1lHSnVzdGlmeVtcIllHSl9TUEFDRV9FVkVOTFlcIl0gPSA1XSA9IFwiWUdKX1NQQUNFX0VWRU5MWVwiO1xufSkoWUdKdXN0aWZ5IHx8IChZR0p1c3RpZnkgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgWUdPdmVyZmxvdztcbihmdW5jdGlvbiAoWUdPdmVyZmxvdykge1xuICAgIFlHT3ZlcmZsb3dbWUdPdmVyZmxvd1tcIllHT19WSVNJQkxFXCJdID0gMF0gPSBcIllHT19WSVNJQkxFXCI7XG4gICAgWUdPdmVyZmxvd1tZR092ZXJmbG93W1wiWUdPX0hJRERFTlwiXSA9IDFdID0gXCJZR09fSElEREVOXCI7XG4gICAgWUdPdmVyZmxvd1tZR092ZXJmbG93W1wiWUdPX1NDUk9MTFwiXSA9IDJdID0gXCJZR09fU0NST0xMXCI7XG59KShZR092ZXJmbG93IHx8IChZR092ZXJmbG93ID0ge30pKTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFlHRGlzcGxheTtcbihmdW5jdGlvbiAoWUdEaXNwbGF5KSB7XG4gICAgWUdEaXNwbGF5W1lHRGlzcGxheVtcIllHRF9GTEVYXCJdID0gMF0gPSBcIllHRF9GTEVYXCI7XG4gICAgWUdEaXNwbGF5W1lHRGlzcGxheVtcIllHRF9OT05FXCJdID0gMV0gPSBcIllHRF9OT05FXCI7XG59KShZR0Rpc3BsYXkgfHwgKFlHRGlzcGxheSA9IHt9KSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBZR0VkZ2U7XG4oZnVuY3Rpb24gKFlHRWRnZSkge1xuICAgIFlHRWRnZVtZR0VkZ2VbXCJZR0VfTEVGVFwiXSA9IDBdID0gXCJZR0VfTEVGVFwiO1xuICAgIFlHRWRnZVtZR0VkZ2VbXCJZR0VfVE9QXCJdID0gMV0gPSBcIllHRV9UT1BcIjtcbiAgICBZR0VkZ2VbWUdFZGdlW1wiWUdFX1JJR0hUXCJdID0gMl0gPSBcIllHRV9SSUdIVFwiO1xuICAgIFlHRWRnZVtZR0VkZ2VbXCJZR0VfQk9UVE9NXCJdID0gM10gPSBcIllHRV9CT1RUT01cIjtcbiAgICBZR0VkZ2VbWUdFZGdlW1wiWUdFX1NUQVJUXCJdID0gNF0gPSBcIllHRV9TVEFSVFwiO1xuICAgIFlHRWRnZVtZR0VkZ2VbXCJZR0VfRU5EXCJdID0gNV0gPSBcIllHRV9FTkRcIjtcbiAgICBZR0VkZ2VbWUdFZGdlW1wiWUdFX0hPUklaT05UQUxcIl0gPSA2XSA9IFwiWUdFX0hPUklaT05UQUxcIjtcbiAgICBZR0VkZ2VbWUdFZGdlW1wiWUdFX1ZFUlRJQ0FMXCJdID0gN10gPSBcIllHRV9WRVJUSUNBTFwiO1xuICAgIFlHRWRnZVtZR0VkZ2VbXCJZR0VfQUxMXCJdID0gOF0gPSBcIllHRV9BTExcIjtcbn0pKFlHRWRnZSB8fCAoWUdFZGdlID0ge30pKTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBvaW50ZXJGaWx0ZXJNb2RlO1xuKGZ1bmN0aW9uIChQb2ludGVyRmlsdGVyTW9kZSkge1xuICAgIFBvaW50ZXJGaWx0ZXJNb2RlW1BvaW50ZXJGaWx0ZXJNb2RlW1wiUEZNX05PTkVcIl0gPSAwXSA9IFwiUEZNX05PTkVcIjtcbiAgICBQb2ludGVyRmlsdGVyTW9kZVtQb2ludGVyRmlsdGVyTW9kZVtcIlBGTV9CTE9DS1wiXSA9IDFdID0gXCJQRk1fQkxPQ0tcIjtcbn0pKFBvaW50ZXJGaWx0ZXJNb2RlIHx8IChQb2ludGVyRmlsdGVyTW9kZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJVaVRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IDAsXG4gICAgICAgIHJpZ2h0T2Y6IDAsXG4gICAgICAgIGFsaWduQ29udGVudDogdW5kZWZpbmVkLFxuICAgICAgICBhbGlnbkl0ZW1zOiB1bmRlZmluZWQsXG4gICAgICAgIGZsZXhXcmFwOiB1bmRlZmluZWQsXG4gICAgICAgIGZsZXhTaHJpbms6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9zaXRpb25UeXBlOiAwLFxuICAgICAgICBhbGlnblNlbGY6IDAsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IDAsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAwLFxuICAgICAgICBvdmVyZmxvdzogMCxcbiAgICAgICAgZGlzcGxheTogMCxcbiAgICAgICAgZmxleEJhc2lzVW5pdDogMCxcbiAgICAgICAgZmxleEJhc2lzOiAwLFxuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgd2lkdGhVbml0OiAwLFxuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0VW5pdDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBtaW5XaWR0aFVuaXQ6IDAsXG4gICAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgICBtaW5IZWlnaHRVbml0OiAwLFxuICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgIG1heFdpZHRoVW5pdDogMCxcbiAgICAgICAgbWF4V2lkdGg6IDAsXG4gICAgICAgIG1heEhlaWdodFVuaXQ6IDAsXG4gICAgICAgIG1heEhlaWdodDogMCxcbiAgICAgICAgcG9zaXRpb25MZWZ0VW5pdDogMCxcbiAgICAgICAgcG9zaXRpb25MZWZ0OiAwLFxuICAgICAgICBwb3NpdGlvblRvcFVuaXQ6IDAsXG4gICAgICAgIHBvc2l0aW9uVG9wOiAwLFxuICAgICAgICBwb3NpdGlvblJpZ2h0VW5pdDogMCxcbiAgICAgICAgcG9zaXRpb25SaWdodDogMCxcbiAgICAgICAgcG9zaXRpb25Cb3R0b21Vbml0OiAwLFxuICAgICAgICBwb3NpdGlvbkJvdHRvbTogMCxcbiAgICAgICAgbWFyZ2luTGVmdFVuaXQ6IDAsXG4gICAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICAgIG1hcmdpblRvcFVuaXQ6IDAsXG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgbWFyZ2luUmlnaHRVbml0OiAwLFxuICAgICAgICBtYXJnaW5SaWdodDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tVW5pdDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICBwYWRkaW5nTGVmdFVuaXQ6IDAsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAwLFxuICAgICAgICBwYWRkaW5nVG9wVW5pdDogMCxcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0VW5pdDogMCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tVW5pdDogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMCxcbiAgICAgICAgcG9pbnRlckZpbHRlcjogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJMZWZ0V2lkdGhVbml0OiB1bmRlZmluZWQsXG4gICAgICAgIGJvcmRlckxlZnRXaWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJUb3BXaWR0aFVuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyVG9wV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyUmlnaHRXaWR0aFVuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyUmlnaHRXaWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJCb3R0b21XaWR0aFVuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1c1VuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1c1VuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1c1VuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1c1VuaXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyVG9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyTGVmdENvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgIGJvcmRlclJpZ2h0Q29sb3I6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJVaVRyYW5zZm9ybTtcbihmdW5jdGlvbiAoUEJVaVRyYW5zZm9ybSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnBhcmVudCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLnBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmlnaHRPZiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS5yaWdodE9mKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hbGlnbkNvbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS5hbGlnbkNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmFsaWduSXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50MzIobWVzc2FnZS5hbGlnbkl0ZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mbGV4V3JhcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwKS5pbnQzMihtZXNzYWdlLmZsZXhXcmFwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5mbGV4U2hyaW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTMpLmZsb2F0KG1lc3NhZ2UuZmxleFNocmluayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb25UeXBlICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDU2KS5pbnQzMihtZXNzYWdlLnBvc2l0aW9uVHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxpZ25TZWxmICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDY0KS5pbnQzMihtZXNzYWdlLmFsaWduU2VsZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmxleERpcmVjdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig3MikuaW50MzIobWVzc2FnZS5mbGV4RGlyZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5qdXN0aWZ5Q29udGVudCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig4MCkuaW50MzIobWVzc2FnZS5qdXN0aWZ5Q29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uub3ZlcmZsb3cgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoODgpLmludDMyKG1lc3NhZ2Uub3ZlcmZsb3cpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmRpc3BsYXkgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOTYpLmludDMyKG1lc3NhZ2UuZGlzcGxheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmxleEJhc2lzVW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMDQpLmludDMyKG1lc3NhZ2UuZmxleEJhc2lzVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmxleEJhc2lzICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDExNykuZmxvYXQobWVzc2FnZS5mbGV4QmFzaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmZsZXhHcm93ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEyNSkuZmxvYXQobWVzc2FnZS5mbGV4R3Jvdyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uud2lkdGhVbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEyOCkuaW50MzIobWVzc2FnZS53aWR0aFVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLndpZHRoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE0MSkuZmxvYXQobWVzc2FnZS53aWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGVpZ2h0VW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNDQpLmludDMyKG1lc3NhZ2UuaGVpZ2h0VW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaGVpZ2h0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE1NykuZmxvYXQobWVzc2FnZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1pbldpZHRoVW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNjApLmludDMyKG1lc3NhZ2UubWluV2lkdGhVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5taW5XaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNzMpLmZsb2F0KG1lc3NhZ2UubWluV2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1pbkhlaWdodFVuaXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTc2KS5pbnQzMihtZXNzYWdlLm1pbkhlaWdodFVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1pbkhlaWdodCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxODkpLmZsb2F0KG1lc3NhZ2UubWluSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXhXaWR0aFVuaXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTkyKS5pbnQzMihtZXNzYWdlLm1heFdpZHRoVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubWF4V2lkdGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjA1KS5mbG9hdChtZXNzYWdlLm1heFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXhIZWlnaHRVbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIwOCkuaW50MzIobWVzc2FnZS5tYXhIZWlnaHRVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXhIZWlnaHQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjIxKS5mbG9hdChtZXNzYWdlLm1heEhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb25MZWZ0VW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyMjQpLmludDMyKG1lc3NhZ2UucG9zaXRpb25MZWZ0VW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb25MZWZ0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDIzNykuZmxvYXQobWVzc2FnZS5wb3NpdGlvbkxlZnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBvc2l0aW9uVG9wVW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNDApLmludDMyKG1lc3NhZ2UucG9zaXRpb25Ub3BVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wb3NpdGlvblRvcCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNTMpLmZsb2F0KG1lc3NhZ2UucG9zaXRpb25Ub3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBvc2l0aW9uUmlnaHRVbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI1NikuaW50MzIobWVzc2FnZS5wb3NpdGlvblJpZ2h0VW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb25SaWdodCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNjkpLmZsb2F0KG1lc3NhZ2UucG9zaXRpb25SaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb25Cb3R0b21Vbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI3MikuaW50MzIobWVzc2FnZS5wb3NpdGlvbkJvdHRvbVVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBvc2l0aW9uQm90dG9tICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI4NSkuZmxvYXQobWVzc2FnZS5wb3NpdGlvbkJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubWFyZ2luTGVmdFVuaXQgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjg4KS5pbnQzMihtZXNzYWdlLm1hcmdpbkxlZnRVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXJnaW5MZWZ0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMwMSkuZmxvYXQobWVzc2FnZS5tYXJnaW5MZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXJnaW5Ub3BVbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMwNCkuaW50MzIobWVzc2FnZS5tYXJnaW5Ub3BVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tYXJnaW5Ub3AgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzE3KS5mbG9hdChtZXNzYWdlLm1hcmdpblRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubWFyZ2luUmlnaHRVbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMyMCkuaW50MzIobWVzc2FnZS5tYXJnaW5SaWdodFVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1hcmdpblJpZ2h0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDMzMykuZmxvYXQobWVzc2FnZS5tYXJnaW5SaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubWFyZ2luQm90dG9tVW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzMzYpLmludDMyKG1lc3NhZ2UubWFyZ2luQm90dG9tVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubWFyZ2luQm90dG9tICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0OSkuZmxvYXQobWVzc2FnZS5tYXJnaW5Cb3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZGRpbmdMZWZ0VW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNTIpLmludDMyKG1lc3NhZ2UucGFkZGluZ0xlZnRVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wYWRkaW5nTGVmdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNjUpLmZsb2F0KG1lc3NhZ2UucGFkZGluZ0xlZnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZGRpbmdUb3BVbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM2OCkuaW50MzIobWVzc2FnZS5wYWRkaW5nVG9wVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFkZGluZ1RvcCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzODEpLmZsb2F0KG1lc3NhZ2UucGFkZGluZ1RvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFkZGluZ1JpZ2h0VW5pdCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzODQpLmludDMyKG1lc3NhZ2UucGFkZGluZ1JpZ2h0VW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFkZGluZ1JpZ2h0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM5NykuZmxvYXQobWVzc2FnZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBhZGRpbmdCb3R0b21Vbml0ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQwMCkuaW50MzIobWVzc2FnZS5wYWRkaW5nQm90dG9tVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFkZGluZ0JvdHRvbSAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0MTMpLmZsb2F0KG1lc3NhZ2UucGFkZGluZ0JvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9pbnRlckZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQxNikuaW50MzIobWVzc2FnZS5wb2ludGVyRmlsdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib3JkZXJMZWZ0V2lkdGhVbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDI0KS5pbnQzMihtZXNzYWdlLmJvcmRlckxlZnRXaWR0aFVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlckxlZnRXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQzNykuZmxvYXQobWVzc2FnZS5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlclRvcFdpZHRoVW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ0MCkuaW50MzIobWVzc2FnZS5ib3JkZXJUb3BXaWR0aFVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlclRvcFdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDUzKS5mbG9hdChtZXNzYWdlLmJvcmRlclRvcFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib3JkZXJSaWdodFdpZHRoVW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ1NikuaW50MzIobWVzc2FnZS5ib3JkZXJSaWdodFdpZHRoVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9yZGVyUmlnaHRXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ2OSkuZmxvYXQobWVzc2FnZS5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib3JkZXJCb3R0b21XaWR0aFVuaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0NzIpLmludDMyKG1lc3NhZ2UuYm9yZGVyQm90dG9tV2lkdGhVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib3JkZXJCb3R0b21XaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQ4NSkuZmxvYXQobWVzc2FnZS5ib3JkZXJCb3R0b21XaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9yZGVyVG9wTGVmdFJhZGl1c1VuaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0ODgpLmludDMyKG1lc3NhZ2UuYm9yZGVyVG9wTGVmdFJhZGl1c1VuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlclRvcExlZnRSYWRpdXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig1MDEpLmZsb2F0KG1lc3NhZ2UuYm9yZGVyVG9wTGVmdFJhZGl1cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9yZGVyVG9wUmlnaHRSYWRpdXNVbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTA0KS5pbnQzMihtZXNzYWdlLmJvcmRlclRvcFJpZ2h0UmFkaXVzVW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9yZGVyVG9wUmlnaHRSYWRpdXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig1MTcpLmZsb2F0KG1lc3NhZ2UuYm9yZGVyVG9wUmlnaHRSYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXNVbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTIwKS5pbnQzMihtZXNzYWdlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXNVbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTMzKS5mbG9hdChtZXNzYWdlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzVW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDUzNikuaW50MzIobWVzc2FnZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1c1VuaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNTQ5KS5mbG9hdChtZXNzYWdlLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5ib3JkZXJUb3BDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb2xvcjQuZW5jb2RlKG1lc3NhZ2UuYm9yZGVyVG9wQ29sb3IsIHdyaXRlci51aW50MzIoNTU0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlckJvdHRvbUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yNC5lbmNvZGUobWVzc2FnZS5ib3JkZXJCb3R0b21Db2xvciwgd3JpdGVyLnVpbnQzMig1NjIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYm9yZGVyTGVmdENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbG9yNC5lbmNvZGUobWVzc2FnZS5ib3JkZXJMZWZ0Q29sb3IsIHdyaXRlci51aW50MzIoNTcwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmJvcmRlclJpZ2h0Q29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29sb3I0LmVuY29kZShtZXNzYWdlLmJvcmRlclJpZ2h0Q29sb3IsIHdyaXRlci51aW50MzIoNTc4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVWlUcmFuc2Zvcm0uZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlVpVHJhbnNmb3JtKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJlbnQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yaWdodE9mID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxpZ25Db250ZW50ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWxpZ25JdGVtcyA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZsZXhXcmFwID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmxleFNocmluayA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDU2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBvc2l0aW9uVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDY0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFsaWduU2VsZiA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDcyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZsZXhEaXJlY3Rpb24gPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gODApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuanVzdGlmeUNvbnRlbnQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gODgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub3ZlcmZsb3cgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGlzcGxheSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmxleEJhc2lzVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmxleEJhc2lzID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mbGV4R3JvdyA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMjgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uud2lkdGhVbml0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE0MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53aWR0aCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0VW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxNTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5taW5XaWR0aFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTczKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1pbldpZHRoID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE3Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5taW5IZWlnaHRVbml0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4OSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5taW5IZWlnaHQgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTkyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1heFdpZHRoVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI1OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWF4V2lkdGggPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1heEhlaWdodFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1heEhlaWdodCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG9zaXRpb25MZWZ0VW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG9zaXRpb25MZWZ0ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI0MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wb3NpdGlvblRvcFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjUzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBvc2l0aW9uVG9wID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI1Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wb3NpdGlvblJpZ2h0VW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG9zaXRpb25SaWdodCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG9zaXRpb25Cb3R0b21Vbml0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI4NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wb3NpdGlvbkJvdHRvbSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM2OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyODgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWFyZ2luTGVmdFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1hcmdpbkxlZnQgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1hcmdpblRvcFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzE3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1hcmdpblRvcCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzMjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWFyZ2luUmlnaHRVbml0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDMzMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXJnaW5SaWdodCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzMzYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWFyZ2luQm90dG9tVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzNDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWFyZ2luQm90dG9tID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM1Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWRkaW5nTGVmdFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzY1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhZGRpbmdMZWZ0ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM2OCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWRkaW5nVG9wVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzODEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFkZGluZ1RvcCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ4OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzODQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFkZGluZ1JpZ2h0VW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAzOTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFkZGluZ1JpZ2h0ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYWRkaW5nQm90dG9tVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDUxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0MTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFkZGluZ0JvdHRvbSA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDUyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0MTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucG9pbnRlckZpbHRlciA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDUzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0MjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyTGVmdFdpZHRoVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0MzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyTGVmdFdpZHRoID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQ0MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib3JkZXJUb3BXaWR0aFVuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDUzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvcmRlclRvcFdpZHRoID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQ1Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib3JkZXJSaWdodFdpZHRoVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0NjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyUmlnaHRXaWR0aCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0NzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyQm90dG9tV2lkdGhVbml0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQ4NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib3JkZXJCb3R0b21XaWR0aCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDYxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA0ODgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyVG9wTGVmdFJhZGl1c1VuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvcmRlclRvcExlZnRSYWRpdXMgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2MzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvcmRlclRvcFJpZ2h0UmFkaXVzVW5pdCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1MTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyVG9wUmlnaHRSYWRpdXMgPSByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2NTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXNVbml0ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDUzMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDUzNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1c1VuaXQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA2ODpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTQ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjk6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDU1NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib3JkZXJUb3BDb2xvciA9IENvbG9yNC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDcwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1NjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyQm90dG9tQ29sb3IgPSBDb2xvcjQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3MTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNTcwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvcmRlckxlZnRDb2xvciA9IENvbG9yNC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDcyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSA1NzgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9yZGVyUmlnaHRDb2xvciA9IENvbG9yNC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCVWlUcmFuc2Zvcm0uZGVjb2RlID0gZGVjb2RlO1xufSkoUEJVaVRyYW5zZm9ybSB8fCAoUEJVaVRyYW5zZm9ybSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgUEJVaVRyYW5zZm9ybSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX3RyYW5zZm9ybS5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFVpVHJhbnNmb3JtU2NoZW1hID0ge1xuICAgIENPTVBPTkVOVF9JRDogMTA1MCxcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gUEJVaVRyYW5zZm9ybS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlVpVHJhbnNmb3JtLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQlVpVHJhbnNmb3JtLmRlY29kZShuZXcgVWludDhBcnJheSgpKTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBcInByb3RvY29sLWJ1ZmZlclwiLFxuICAgICAgICBwcm90b2NvbEJ1ZmZlcjogXCJQQlVpVHJhbnNmb3JtXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBWaWRlb1N0YXRlO1xuKGZ1bmN0aW9uIChWaWRlb1N0YXRlKSB7XG4gICAgVmlkZW9TdGF0ZVtWaWRlb1N0YXRlW1wiVlNfTk9ORVwiXSA9IDBdID0gXCJWU19OT05FXCI7XG4gICAgVmlkZW9TdGF0ZVtWaWRlb1N0YXRlW1wiVlNfRVJST1JcIl0gPSAxXSA9IFwiVlNfRVJST1JcIjtcbiAgICBWaWRlb1N0YXRlW1ZpZGVvU3RhdGVbXCJWU19MT0FESU5HXCJdID0gMl0gPSBcIlZTX0xPQURJTkdcIjtcbiAgICBWaWRlb1N0YXRlW1ZpZGVvU3RhdGVbXCJWU19SRUFEWVwiXSA9IDNdID0gXCJWU19SRUFEWVwiO1xuICAgIFZpZGVvU3RhdGVbVmlkZW9TdGF0ZVtcIlZTX1BMQVlJTkdcIl0gPSA0XSA9IFwiVlNfUExBWUlOR1wiO1xuICAgIFZpZGVvU3RhdGVbVmlkZW9TdGF0ZVtcIlZTX0JVRkZFUklOR1wiXSA9IDVdID0gXCJWU19CVUZGRVJJTkdcIjtcbiAgICBWaWRlb1N0YXRlW1ZpZGVvU3RhdGVbXCJWU19TRUVLSU5HXCJdID0gNl0gPSBcIlZTX1NFRUtJTkdcIjtcbiAgICBWaWRlb1N0YXRlW1ZpZGVvU3RhdGVbXCJWU19QQVVTRURcIl0gPSA3XSA9IFwiVlNfUEFVU0VEXCI7XG59KShWaWRlb1N0YXRlIHx8IChWaWRlb1N0YXRlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlZpZGVvRXZlbnQoKSB7XG4gICAgcmV0dXJuIHsgdGltZXN0YW1wOiAwLCB0aWNrTnVtYmVyOiAwLCBjdXJyZW50T2Zmc2V0OiAwLCB2aWRlb0xlbmd0aDogMCwgc3RhdGU6IDAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCVmlkZW9FdmVudDtcbihmdW5jdGlvbiAoUEJWaWRlb0V2ZW50KSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudGltZXN0YW1wICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQzMihtZXNzYWdlLnRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudGlja051bWJlciAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikudWludDMyKG1lc3NhZ2UudGlja051bWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY3VycmVudE9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS5jdXJyZW50T2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52aWRlb0xlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS52aWRlb0xlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdGUgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoNDApLmludDMyKG1lc3NhZ2Uuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVmlkZW9FdmVudC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCVmlkZW9FdmVudCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGltZXN0YW1wID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpY2tOdW1iZXIgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VycmVudE9mZnNldCA9IHJlYWRlci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZpZGVvTGVuZ3RoID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhdGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBQQlZpZGVvRXZlbnQuZGVjb2RlID0gZGVjb2RlO1xufSkoUEJWaWRlb0V2ZW50IHx8IChQQlZpZGVvRXZlbnQgPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCVmlkZW9FdmVudCB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3ZpZGVvX2V2ZW50Lmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVmlkZW9FdmVudFNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwNDQsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCVmlkZW9FdmVudC5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlZpZGVvRXZlbnQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVmlkZW9FdmVudC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJWaWRlb0V2ZW50XCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJWaWRlb1BsYXllcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzcmM6IFwiXCIsXG4gICAgICAgIHBsYXlpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9zaXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgdm9sdW1lOiB1bmRlZmluZWQsXG4gICAgICAgIHBsYXliYWNrUmF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBsb29wOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBCVmlkZW9QbGF5ZXI7XG4oZnVuY3Rpb24gKFBCVmlkZW9QbGF5ZXIpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5zcmMgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnNyYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGxheWluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2UucGxheWluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uudm9sdW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzcpLmZsb2F0KG1lc3NhZ2Uudm9sdW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wbGF5YmFja1JhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0NSkuZmxvYXQobWVzc2FnZS5wbGF5YmFja1JhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmxvb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMig0OCkuYm9vbChtZXNzYWdlLmxvb3ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVmlkZW9QbGF5ZXIuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlZpZGVvUGxheWVyKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3JjID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBsYXlpbmcgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDI5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBvc2l0aW9uID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uudm9sdW1lID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGxheWJhY2tSYXRlID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gNDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9vcCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJWaWRlb1BsYXllci5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlZpZGVvUGxheWVyIHx8IChQQlZpZGVvUGxheWVyID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlZpZGVvUGxheWVyIH0gZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdmlkZW9fcGxheWVyLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVmlkZW9QbGF5ZXJTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDQzLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlZpZGVvUGxheWVyLmVuY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIFBCVmlkZW9QbGF5ZXIuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVmlkZW9QbGF5ZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCVmlkZW9QbGF5ZXJcIlxuICAgIH1cbn07XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgQ2FtZXJhVHJhbnNpdGlvbiB9IGZyb20gXCIuL2NvbW1vbi9jYW1lcmFfdHJhbnNpdGlvbi5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJWaXJ0dWFsQ2FtZXJhKCkge1xuICAgIHJldHVybiB7IGRlZmF1bHRUcmFuc2l0aW9uOiB1bmRlZmluZWQsIGxvb2tBdEVudGl0eTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQQlZpcnR1YWxDYW1lcmE7XG4oZnVuY3Rpb24gKFBCVmlydHVhbENhbWVyYSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRlZmF1bHRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENhbWVyYVRyYW5zaXRpb24uZW5jb2RlKG1lc3NhZ2UuZGVmYXVsdFRyYW5zaXRpb24sIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubG9va0F0RW50aXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLnVpbnQzMihtZXNzYWdlLmxvb2tBdEVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgUEJWaXJ0dWFsQ2FtZXJhLmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJWaXJ0dWFsQ2FtZXJhKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVmYXVsdFRyYW5zaXRpb24gPSBDYW1lcmFUcmFuc2l0aW9uLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9va0F0RW50aXR5ID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIFBCVmlydHVhbENhbWVyYS5kZWNvZGUgPSBkZWNvZGU7XG59KShQQlZpcnR1YWxDYW1lcmEgfHwgKFBCVmlydHVhbENhbWVyYSA9IHt9KSk7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuY29tbW9uXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ2FtZXJhVHJhbnNpdGlvbigpIHtcbiAgICByZXR1cm4geyB0cmFuc2l0aW9uTW9kZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBDYW1lcmFUcmFuc2l0aW9uO1xuKGZ1bmN0aW9uIChDYW1lcmFUcmFuc2l0aW9uKSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnRyYW5zaXRpb25Nb2RlPy4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcInRpbWVcIjpcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLnRyYW5zaXRpb25Nb2RlLnRpbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNwZWVkXCI6XG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyMSkuZmxvYXQobWVzc2FnZS50cmFuc2l0aW9uTW9kZS5zcGVlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgQ2FtZXJhVHJhbnNpdGlvbi5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNhbWVyYVRyYW5zaXRpb24oKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFuc2l0aW9uTW9kZSA9IHsgJGNhc2U6IFwidGltZVwiLCB0aW1lOiByZWFkZXIuZmxvYXQoKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYW5zaXRpb25Nb2RlID0geyAkY2FzZTogXCJzcGVlZFwiLCBzcGVlZDogcmVhZGVyLmZsb2F0KCkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBDYW1lcmFUcmFuc2l0aW9uLmRlY29kZSA9IGRlY29kZTtcbn0pKENhbWVyYVRyYW5zaXRpb24gfHwgKENhbWVyYVRyYW5zaXRpb24gPSB7fSkpO1xuIiwgImltcG9ydCB7IFBCVmlydHVhbENhbWVyYSB9IGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3ZpcnR1YWxfY2FtZXJhLmdlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVmlydHVhbENhbWVyYVNjaGVtYSA9IHtcbiAgICBDT01QT05FTlRfSUQ6IDEwNzYsXG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IFBCVmlydHVhbENhbWVyYS5lbmNvZGUodmFsdWUpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pO1xuICAgICAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBQQlZpcnR1YWxDYW1lcmEuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICAgICAgcmV0dXJuIFBCVmlydHVhbENhbWVyYS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogXCJwcm90b2NvbC1idWZmZXJcIixcbiAgICAgICAgcHJvdG9jb2xCdWZmZXI6IFwiUEJWaXJ0dWFsQ2FtZXJhXCJcbiAgICB9XG59O1xuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJWaXNpYmlsaXR5Q29tcG9uZW50KCkge1xuICAgIHJldHVybiB7IHZpc2libGU6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUEJWaXNpYmlsaXR5Q29tcG9uZW50O1xuKGZ1bmN0aW9uIChQQlZpc2liaWxpdHlDb21wb25lbnQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS52aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLnZpc2libGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIFBCVmlzaWJpbGl0eUNvbXBvbmVudC5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCVmlzaWJpbGl0eUNvbXBvbmVudCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmlzaWJsZSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgUEJWaXNpYmlsaXR5Q29tcG9uZW50LmRlY29kZSA9IGRlY29kZTtcbn0pKFBCVmlzaWJpbGl0eUNvbXBvbmVudCB8fCAoUEJWaXNpYmlsaXR5Q29tcG9uZW50ID0ge30pKTtcbiIsICJpbXBvcnQgeyBQQlZpc2liaWxpdHlDb21wb25lbnQgfSBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy92aXNpYmlsaXR5X2NvbXBvbmVudC5nZW4nO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFZpc2liaWxpdHlDb21wb25lbnRTY2hlbWEgPSB7XG4gICAgQ09NUE9ORU5UX0lEOiAxMDgxLFxuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBQQlZpc2liaWxpdHlDb21wb25lbnQuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gUEJWaXNpYmlsaXR5Q29tcG9uZW50LmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgICAgIHJldHVybiBQQlZpc2liaWxpdHlDb21wb25lbnQuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6IFwicHJvdG9jb2wtYnVmZmVyXCIsXG4gICAgICAgIHByb3RvY29sQnVmZmVyOiBcIlBCVmlzaWJpbGl0eUNvbXBvbmVudFwiXG4gICAgfVxufTtcbiIsICJpbXBvcnQgeyBBbmltYXRvclNjaGVtYSB9IGZyb20gJy4vQW5pbWF0b3IuZ2VuJztcbmltcG9ydCB7IEF1ZGlvRXZlbnRTY2hlbWEgfSBmcm9tICcuL0F1ZGlvRXZlbnQuZ2VuJztcbmltcG9ydCB7IEF1ZGlvU291cmNlU2NoZW1hIH0gZnJvbSAnLi9BdWRpb1NvdXJjZS5nZW4nO1xuaW1wb3J0IHsgQXVkaW9TdHJlYW1TY2hlbWEgfSBmcm9tICcuL0F1ZGlvU3RyZWFtLmdlbic7XG5pbXBvcnQgeyBBdmF0YXJBdHRhY2hTY2hlbWEgfSBmcm9tICcuL0F2YXRhckF0dGFjaC5nZW4nO1xuaW1wb3J0IHsgQXZhdGFyQmFzZVNjaGVtYSB9IGZyb20gJy4vQXZhdGFyQmFzZS5nZW4nO1xuaW1wb3J0IHsgQXZhdGFyRW1vdGVDb21tYW5kU2NoZW1hIH0gZnJvbSAnLi9BdmF0YXJFbW90ZUNvbW1hbmQuZ2VuJztcbmltcG9ydCB7IEF2YXRhckVxdWlwcGVkRGF0YVNjaGVtYSB9IGZyb20gJy4vQXZhdGFyRXF1aXBwZWREYXRhLmdlbic7XG5pbXBvcnQgeyBBdmF0YXJNb2RpZmllckFyZWFTY2hlbWEgfSBmcm9tICcuL0F2YXRhck1vZGlmaWVyQXJlYS5nZW4nO1xuaW1wb3J0IHsgQXZhdGFyU2hhcGVTY2hlbWEgfSBmcm9tICcuL0F2YXRhclNoYXBlLmdlbic7XG5pbXBvcnQgeyBCaWxsYm9hcmRTY2hlbWEgfSBmcm9tICcuL0JpbGxib2FyZC5nZW4nO1xuaW1wb3J0IHsgQ2FtZXJhTW9kZVNjaGVtYSB9IGZyb20gJy4vQ2FtZXJhTW9kZS5nZW4nO1xuaW1wb3J0IHsgQ2FtZXJhTW9kZUFyZWFTY2hlbWEgfSBmcm9tICcuL0NhbWVyYU1vZGVBcmVhLmdlbic7XG5pbXBvcnQgeyBFbmdpbmVJbmZvU2NoZW1hIH0gZnJvbSAnLi9FbmdpbmVJbmZvLmdlbic7XG5pbXBvcnQgeyBHbHRmQ29udGFpbmVyU2NoZW1hIH0gZnJvbSAnLi9HbHRmQ29udGFpbmVyLmdlbic7XG5pbXBvcnQgeyBHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlU2NoZW1hIH0gZnJvbSAnLi9HbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlLmdlbic7XG5pbXBvcnQgeyBJbnB1dE1vZGlmaWVyU2NoZW1hIH0gZnJvbSAnLi9JbnB1dE1vZGlmaWVyLmdlbic7XG5pbXBvcnQgeyBNYWluQ2FtZXJhU2NoZW1hIH0gZnJvbSAnLi9NYWluQ2FtZXJhLmdlbic7XG5pbXBvcnQgeyBNYXRlcmlhbFNjaGVtYSB9IGZyb20gJy4vTWF0ZXJpYWwuZ2VuJztcbmltcG9ydCB7IE1lc2hDb2xsaWRlclNjaGVtYSB9IGZyb20gJy4vTWVzaENvbGxpZGVyLmdlbic7XG5pbXBvcnQgeyBNZXNoUmVuZGVyZXJTY2hlbWEgfSBmcm9tICcuL01lc2hSZW5kZXJlci5nZW4nO1xuaW1wb3J0IHsgTmZ0U2hhcGVTY2hlbWEgfSBmcm9tICcuL05mdFNoYXBlLmdlbic7XG5pbXBvcnQgeyBQbGF5ZXJJZGVudGl0eURhdGFTY2hlbWEgfSBmcm9tICcuL1BsYXllcklkZW50aXR5RGF0YS5nZW4nO1xuaW1wb3J0IHsgUG9pbnRlckV2ZW50c1NjaGVtYSB9IGZyb20gJy4vUG9pbnRlckV2ZW50cy5nZW4nO1xuaW1wb3J0IHsgUG9pbnRlckV2ZW50c1Jlc3VsdFNjaGVtYSB9IGZyb20gJy4vUG9pbnRlckV2ZW50c1Jlc3VsdC5nZW4nO1xuaW1wb3J0IHsgUG9pbnRlckxvY2tTY2hlbWEgfSBmcm9tICcuL1BvaW50ZXJMb2NrLmdlbic7XG5pbXBvcnQgeyBSYXljYXN0U2NoZW1hIH0gZnJvbSAnLi9SYXljYXN0Lmdlbic7XG5pbXBvcnQgeyBSYXljYXN0UmVzdWx0U2NoZW1hIH0gZnJvbSAnLi9SYXljYXN0UmVzdWx0Lmdlbic7XG5pbXBvcnQgeyBSZWFsbUluZm9TY2hlbWEgfSBmcm9tICcuL1JlYWxtSW5mby5nZW4nO1xuaW1wb3J0IHsgVGV4dFNoYXBlU2NoZW1hIH0gZnJvbSAnLi9UZXh0U2hhcGUuZ2VuJztcbmltcG9ydCB7IFR3ZWVuU2NoZW1hIH0gZnJvbSAnLi9Ud2Vlbi5nZW4nO1xuaW1wb3J0IHsgVHdlZW5TZXF1ZW5jZVNjaGVtYSB9IGZyb20gJy4vVHdlZW5TZXF1ZW5jZS5nZW4nO1xuaW1wb3J0IHsgVHdlZW5TdGF0ZVNjaGVtYSB9IGZyb20gJy4vVHdlZW5TdGF0ZS5nZW4nO1xuaW1wb3J0IHsgVWlCYWNrZ3JvdW5kU2NoZW1hIH0gZnJvbSAnLi9VaUJhY2tncm91bmQuZ2VuJztcbmltcG9ydCB7IFVpQ2FudmFzSW5mb3JtYXRpb25TY2hlbWEgfSBmcm9tICcuL1VpQ2FudmFzSW5mb3JtYXRpb24uZ2VuJztcbmltcG9ydCB7IFVpRHJvcGRvd25TY2hlbWEgfSBmcm9tICcuL1VpRHJvcGRvd24uZ2VuJztcbmltcG9ydCB7IFVpRHJvcGRvd25SZXN1bHRTY2hlbWEgfSBmcm9tICcuL1VpRHJvcGRvd25SZXN1bHQuZ2VuJztcbmltcG9ydCB7IFVpSW5wdXRTY2hlbWEgfSBmcm9tICcuL1VpSW5wdXQuZ2VuJztcbmltcG9ydCB7IFVpSW5wdXRSZXN1bHRTY2hlbWEgfSBmcm9tICcuL1VpSW5wdXRSZXN1bHQuZ2VuJztcbmltcG9ydCB7IFVpVGV4dFNjaGVtYSB9IGZyb20gJy4vVWlUZXh0Lmdlbic7XG5pbXBvcnQgeyBVaVRyYW5zZm9ybVNjaGVtYSB9IGZyb20gJy4vVWlUcmFuc2Zvcm0uZ2VuJztcbmltcG9ydCB7IFZpZGVvRXZlbnRTY2hlbWEgfSBmcm9tICcuL1ZpZGVvRXZlbnQuZ2VuJztcbmltcG9ydCB7IFZpZGVvUGxheWVyU2NoZW1hIH0gZnJvbSAnLi9WaWRlb1BsYXllci5nZW4nO1xuaW1wb3J0IHsgVmlydHVhbENhbWVyYVNjaGVtYSB9IGZyb20gJy4vVmlydHVhbENhbWVyYS5nZW4nO1xuaW1wb3J0IHsgVmlzaWJpbGl0eUNvbXBvbmVudFNjaGVtYSB9IGZyb20gJy4vVmlzaWJpbGl0eUNvbXBvbmVudC5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYW5pbWF0b3IuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F1ZGlvX2V2ZW50Lmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdWRpb19zb3VyY2UuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F1ZGlvX3N0cmVhbS5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXZhdGFyX2F0dGFjaC5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXZhdGFyX2Jhc2UuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9lbW90ZV9jb21tYW5kLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9hdmF0YXJfZXF1aXBwZWRfZGF0YS5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYXZhdGFyX21vZGlmaWVyX2FyZWEuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2F2YXRhcl9zaGFwZS5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvYmlsbGJvYXJkLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9jYW1lcmFfbW9kZS5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvY2FtZXJhX21vZGVfYXJlYS5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvZW5naW5lX2luZm8uZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL2dsdGZfY29udGFpbmVyLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9nbHRmX2NvbnRhaW5lcl9sb2FkaW5nX3N0YXRlLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9pbnB1dF9tb2RpZmllci5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbWFpbl9jYW1lcmEuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL21hdGVyaWFsLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9tZXNoX2NvbGxpZGVyLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9tZXNoX3JlbmRlcmVyLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9uZnRfc2hhcGUuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3BsYXllcl9pZGVudGl0eV9kYXRhLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9wb2ludGVyX2V2ZW50cy5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvcG9pbnRlcl9ldmVudHNfcmVzdWx0Lmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9wb2ludGVyX2xvY2suZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3JheWNhc3QuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3JheWNhc3RfcmVzdWx0Lmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9yZWFsbV9pbmZvLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy90ZXh0X3NoYXBlLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy90d2Vlbi5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdHdlZW5fc2VxdWVuY2UuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3R3ZWVuX3N0YXRlLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9iYWNrZ3JvdW5kLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9jYW52YXNfaW5mb3JtYXRpb24uZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX2Ryb3Bkb3duLmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9kcm9wZG93bl9yZXN1bHQuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX2lucHV0Lmdlbic7XG5leHBvcnQgKiBmcm9tICcuL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy91aV9pbnB1dF9yZXN1bHQuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX3RleHQuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3VpX3RyYW5zZm9ybS5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdmlkZW9fZXZlbnQuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3ZpZGVvX3BsYXllci5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9wYi9kZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvdmlydHVhbF9jYW1lcmEuZ2VuJztcbmV4cG9ydCAqIGZyb20gJy4vcGIvZGVjZW50cmFsYW5kL3Nkay9jb21wb25lbnRzL3Zpc2liaWxpdHlfY29tcG9uZW50Lmdlbic7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgQW5pbWF0b3IgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpBbmltYXRvclwiLCBBbmltYXRvclNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgQXVkaW9FdmVudCA9IChlbmdpbmUpID0+IC8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lVmFsdWVTZXRDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6QXVkaW9FdmVudFwiLCBBdWRpb0V2ZW50U2NoZW1hLCB7XG4gICAgdGltZXN0YW1wRnVuY3Rpb246ICh0KSA9PiB0LnRpbWVzdGFtcCxcbiAgICBtYXhFbGVtZW50czogMTAwXG59KTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdWRpb1NvdXJjZSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OkF1ZGlvU291cmNlXCIsIEF1ZGlvU291cmNlU2NoZW1hKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdWRpb1N0cmVhbSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OkF1ZGlvU3RyZWFtXCIsIEF1ZGlvU3RyZWFtU2NoZW1hKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdmF0YXJBdHRhY2ggPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpBdmF0YXJBdHRhY2hcIiwgQXZhdGFyQXR0YWNoU2NoZW1hKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdmF0YXJCYXNlID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6QXZhdGFyQmFzZVwiLCBBdmF0YXJCYXNlU2NoZW1hKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdmF0YXJFbW90ZUNvbW1hbmQgPSAoZW5naW5lKSA9PiAvKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZVZhbHVlU2V0Q29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OkF2YXRhckVtb3RlQ29tbWFuZFwiLCBBdmF0YXJFbW90ZUNvbW1hbmRTY2hlbWEsIHtcbiAgICB0aW1lc3RhbXBGdW5jdGlvbjogKHQpID0+IHQudGltZXN0YW1wLFxuICAgIG1heEVsZW1lbnRzOiAxMDBcbn0pO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhckVxdWlwcGVkRGF0YSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OkF2YXRhckVxdWlwcGVkRGF0YVwiLCBBdmF0YXJFcXVpcHBlZERhdGFTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhck1vZGlmaWVyQXJlYSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OkF2YXRhck1vZGlmaWVyQXJlYVwiLCBBdmF0YXJNb2RpZmllckFyZWFTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhclNoYXBlID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6QXZhdGFyU2hhcGVcIiwgQXZhdGFyU2hhcGVTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEJpbGxib2FyZCA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OkJpbGxib2FyZFwiLCBCaWxsYm9hcmRTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IENhbWVyYU1vZGUgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpDYW1lcmFNb2RlXCIsIENhbWVyYU1vZGVTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IENhbWVyYU1vZGVBcmVhID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6Q2FtZXJhTW9kZUFyZWFcIiwgQ2FtZXJhTW9kZUFyZWFTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEVuZ2luZUluZm8gPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpFbmdpbmVJbmZvXCIsIEVuZ2luZUluZm9TY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEdsdGZDb250YWluZXIgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpHbHRmQ29udGFpbmVyXCIsIEdsdGZDb250YWluZXJTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEdsdGZDb250YWluZXJMb2FkaW5nU3RhdGUgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlXCIsIEdsdGZDb250YWluZXJMb2FkaW5nU3RhdGVTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IElucHV0TW9kaWZpZXIgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpJbnB1dE1vZGlmaWVyXCIsIElucHV0TW9kaWZpZXJTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IE1haW5DYW1lcmEgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpNYWluQ2FtZXJhXCIsIE1haW5DYW1lcmFTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IE1hdGVyaWFsID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6TWF0ZXJpYWxcIiwgTWF0ZXJpYWxTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IE1lc2hDb2xsaWRlciA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6Ok1lc2hDb2xsaWRlclwiLCBNZXNoQ29sbGlkZXJTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IE1lc2hSZW5kZXJlciA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6Ok1lc2hSZW5kZXJlclwiLCBNZXNoUmVuZGVyZXJTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IE5mdFNoYXBlID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6TmZ0U2hhcGVcIiwgTmZ0U2hhcGVTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFBsYXllcklkZW50aXR5RGF0YSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlBsYXllcklkZW50aXR5RGF0YVwiLCBQbGF5ZXJJZGVudGl0eURhdGFTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFBvaW50ZXJFdmVudHMgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpQb2ludGVyRXZlbnRzXCIsIFBvaW50ZXJFdmVudHNTY2hlbWEpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFBvaW50ZXJFdmVudHNSZXN1bHQgPSAoZW5naW5lKSA9PiAvKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZVZhbHVlU2V0Q29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlBvaW50ZXJFdmVudHNSZXN1bHRcIiwgUG9pbnRlckV2ZW50c1Jlc3VsdFNjaGVtYSwge1xuICAgIHRpbWVzdGFtcEZ1bmN0aW9uOiAodCkgPT4gdC50aW1lc3RhbXAsXG4gICAgbWF4RWxlbWVudHM6IDEwMFxufSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgUG9pbnRlckxvY2sgPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpQb2ludGVyTG9ja1wiLCBQb2ludGVyTG9ja1NjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgUmF5Y2FzdCA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlJheWNhc3RcIiwgUmF5Y2FzdFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgUmF5Y2FzdFJlc3VsdCA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlJheWNhc3RSZXN1bHRcIiwgUmF5Y2FzdFJlc3VsdFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgUmVhbG1JbmZvID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6UmVhbG1JbmZvXCIsIFJlYWxtSW5mb1NjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVGV4dFNoYXBlID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6VGV4dFNoYXBlXCIsIFRleHRTaGFwZVNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVHdlZW4gPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpUd2VlblwiLCBUd2VlblNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVHdlZW5TZXF1ZW5jZSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlR3ZWVuU2VxdWVuY2VcIiwgVHdlZW5TZXF1ZW5jZVNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVHdlZW5TdGF0ZSA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlR3ZWVuU3RhdGVcIiwgVHdlZW5TdGF0ZVNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlCYWNrZ3JvdW5kID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6VWlCYWNrZ3JvdW5kXCIsIFVpQmFja2dyb3VuZFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlDYW52YXNJbmZvcm1hdGlvbiA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlVpQ2FudmFzSW5mb3JtYXRpb25cIiwgVWlDYW52YXNJbmZvcm1hdGlvblNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlEcm9wZG93biA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlVpRHJvcGRvd25cIiwgVWlEcm9wZG93blNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlEcm9wZG93blJlc3VsdCA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlVpRHJvcGRvd25SZXN1bHRcIiwgVWlEcm9wZG93blJlc3VsdFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlJbnB1dCA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlVpSW5wdXRcIiwgVWlJbnB1dFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlJbnB1dFJlc3VsdCA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlVpSW5wdXRSZXN1bHRcIiwgVWlJbnB1dFJlc3VsdFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlUZXh0ID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6VWlUZXh0XCIsIFVpVGV4dFNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlUcmFuc2Zvcm0gPSBlbmdpbmUgPT4gXG4vKiBAX19QVVJFX18gKi8gZW5naW5lLmRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoXCJjb3JlOjpVaVRyYW5zZm9ybVwiLCBVaVRyYW5zZm9ybVNjaGVtYSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVmlkZW9FdmVudCA9IChlbmdpbmUpID0+IC8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lVmFsdWVTZXRDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6VmlkZW9FdmVudFwiLCBWaWRlb0V2ZW50U2NoZW1hLCB7XG4gICAgdGltZXN0YW1wRnVuY3Rpb246ICh0KSA9PiB0LnRpbWVzdGFtcCxcbiAgICBtYXhFbGVtZW50czogMTAwXG59KTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBWaWRlb1BsYXllciA9IGVuZ2luZSA9PiBcbi8qIEBfX1BVUkVfXyAqLyBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShcImNvcmU6OlZpZGVvUGxheWVyXCIsIFZpZGVvUGxheWVyU2NoZW1hKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBWaXJ0dWFsQ2FtZXJhID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6VmlydHVhbENhbWVyYVwiLCBWaXJ0dWFsQ2FtZXJhU2NoZW1hKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBWaXNpYmlsaXR5Q29tcG9uZW50ID0gZW5naW5lID0+IFxuLyogQF9fUFVSRV9fICovIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFwiY29yZTo6VmlzaWJpbGl0eUNvbXBvbmVudFwiLCBWaXNpYmlsaXR5Q29tcG9uZW50U2NoZW1hKTtcbi8qKiBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBjb21wb25lbnREZWZpbml0aW9uQnlOYW1lID0gLyogQF9fUFVSRV9fICovIHtcbiAgICBcImNvcmU6OkFuaW1hdG9yXCI6IEFuaW1hdG9yLFxuICAgIFwiY29yZTo6QXVkaW9FdmVudFwiOiBBdWRpb0V2ZW50LFxuICAgIFwiY29yZTo6QXVkaW9Tb3VyY2VcIjogQXVkaW9Tb3VyY2UsXG4gICAgXCJjb3JlOjpBdWRpb1N0cmVhbVwiOiBBdWRpb1N0cmVhbSxcbiAgICBcImNvcmU6OkF2YXRhckF0dGFjaFwiOiBBdmF0YXJBdHRhY2gsXG4gICAgXCJjb3JlOjpBdmF0YXJCYXNlXCI6IEF2YXRhckJhc2UsXG4gICAgXCJjb3JlOjpBdmF0YXJFbW90ZUNvbW1hbmRcIjogQXZhdGFyRW1vdGVDb21tYW5kLFxuICAgIFwiY29yZTo6QXZhdGFyRXF1aXBwZWREYXRhXCI6IEF2YXRhckVxdWlwcGVkRGF0YSxcbiAgICBcImNvcmU6OkF2YXRhck1vZGlmaWVyQXJlYVwiOiBBdmF0YXJNb2RpZmllckFyZWEsXG4gICAgXCJjb3JlOjpBdmF0YXJTaGFwZVwiOiBBdmF0YXJTaGFwZSxcbiAgICBcImNvcmU6OkJpbGxib2FyZFwiOiBCaWxsYm9hcmQsXG4gICAgXCJjb3JlOjpDYW1lcmFNb2RlXCI6IENhbWVyYU1vZGUsXG4gICAgXCJjb3JlOjpDYW1lcmFNb2RlQXJlYVwiOiBDYW1lcmFNb2RlQXJlYSxcbiAgICBcImNvcmU6OkVuZ2luZUluZm9cIjogRW5naW5lSW5mbyxcbiAgICBcImNvcmU6OkdsdGZDb250YWluZXJcIjogR2x0ZkNvbnRhaW5lcixcbiAgICBcImNvcmU6OkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGVcIjogR2x0ZkNvbnRhaW5lckxvYWRpbmdTdGF0ZSxcbiAgICBcImNvcmU6OklucHV0TW9kaWZpZXJcIjogSW5wdXRNb2RpZmllcixcbiAgICBcImNvcmU6Ok1haW5DYW1lcmFcIjogTWFpbkNhbWVyYSxcbiAgICBcImNvcmU6Ok1hdGVyaWFsXCI6IE1hdGVyaWFsLFxuICAgIFwiY29yZTo6TWVzaENvbGxpZGVyXCI6IE1lc2hDb2xsaWRlcixcbiAgICBcImNvcmU6Ok1lc2hSZW5kZXJlclwiOiBNZXNoUmVuZGVyZXIsXG4gICAgXCJjb3JlOjpOZnRTaGFwZVwiOiBOZnRTaGFwZSxcbiAgICBcImNvcmU6OlBsYXllcklkZW50aXR5RGF0YVwiOiBQbGF5ZXJJZGVudGl0eURhdGEsXG4gICAgXCJjb3JlOjpQb2ludGVyRXZlbnRzXCI6IFBvaW50ZXJFdmVudHMsXG4gICAgXCJjb3JlOjpQb2ludGVyRXZlbnRzUmVzdWx0XCI6IFBvaW50ZXJFdmVudHNSZXN1bHQsXG4gICAgXCJjb3JlOjpQb2ludGVyTG9ja1wiOiBQb2ludGVyTG9jayxcbiAgICBcImNvcmU6OlJheWNhc3RcIjogUmF5Y2FzdCxcbiAgICBcImNvcmU6OlJheWNhc3RSZXN1bHRcIjogUmF5Y2FzdFJlc3VsdCxcbiAgICBcImNvcmU6OlJlYWxtSW5mb1wiOiBSZWFsbUluZm8sXG4gICAgXCJjb3JlOjpUZXh0U2hhcGVcIjogVGV4dFNoYXBlLFxuICAgIFwiY29yZTo6VHdlZW5cIjogVHdlZW4sXG4gICAgXCJjb3JlOjpUd2VlblNlcXVlbmNlXCI6IFR3ZWVuU2VxdWVuY2UsXG4gICAgXCJjb3JlOjpUd2VlblN0YXRlXCI6IFR3ZWVuU3RhdGUsXG4gICAgXCJjb3JlOjpVaUJhY2tncm91bmRcIjogVWlCYWNrZ3JvdW5kLFxuICAgIFwiY29yZTo6VWlDYW52YXNJbmZvcm1hdGlvblwiOiBVaUNhbnZhc0luZm9ybWF0aW9uLFxuICAgIFwiY29yZTo6VWlEcm9wZG93blwiOiBVaURyb3Bkb3duLFxuICAgIFwiY29yZTo6VWlEcm9wZG93blJlc3VsdFwiOiBVaURyb3Bkb3duUmVzdWx0LFxuICAgIFwiY29yZTo6VWlJbnB1dFwiOiBVaUlucHV0LFxuICAgIFwiY29yZTo6VWlJbnB1dFJlc3VsdFwiOiBVaUlucHV0UmVzdWx0LFxuICAgIFwiY29yZTo6VWlUZXh0XCI6IFVpVGV4dCxcbiAgICBcImNvcmU6OlVpVHJhbnNmb3JtXCI6IFVpVHJhbnNmb3JtLFxuICAgIFwiY29yZTo6VmlkZW9FdmVudFwiOiBWaWRlb0V2ZW50LFxuICAgIFwiY29yZTo6VmlkZW9QbGF5ZXJcIjogVmlkZW9QbGF5ZXIsXG4gICAgXCJjb3JlOjpWaXJ0dWFsQ2FtZXJhXCI6IFZpcnR1YWxDYW1lcmEsXG4gICAgXCJjb3JlOjpWaXNpYmlsaXR5Q29tcG9uZW50XCI6IFZpc2liaWxpdHlDb21wb25lbnQsXG59O1xuIiwgImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi4vZ2VuZXJhdGVkL2luZGV4Lmdlbic7XG5jb25zdCBUZXh0dXJlSGVscGVyID0ge1xuICAgIENvbW1vbih0ZXh0dXJlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXg6IHtcbiAgICAgICAgICAgICAgICAkY2FzZTogJ3RleHR1cmUnLFxuICAgICAgICAgICAgICAgIHRleHR1cmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIEF2YXRhcihhdmF0YXJUZXh0dXJlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXg6IHtcbiAgICAgICAgICAgICAgICAkY2FzZTogJ2F2YXRhclRleHR1cmUnLFxuICAgICAgICAgICAgICAgIGF2YXRhclRleHR1cmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIFZpZGVvKHZpZGVvVGV4dHVyZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4OiB7XG4gICAgICAgICAgICAgICAgJGNhc2U6ICd2aWRlb1RleHR1cmUnLFxuICAgICAgICAgICAgICAgIHZpZGVvVGV4dHVyZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lTWF0ZXJpYWxDb21wb25lbnQoZW5naW5lKSB7XG4gICAgY29uc3QgdGhlQ29tcG9uZW50ID0gTWF0ZXJpYWwoZW5naW5lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50aGVDb21wb25lbnQsXG4gICAgICAgIFRleHR1cmU6IFRleHR1cmVIZWxwZXIsXG4gICAgICAgIHNldEJhc2ljTWF0ZXJpYWwoZW50aXR5LCBtYXRlcmlhbCkge1xuICAgICAgICAgICAgdGhlQ29tcG9uZW50LmNyZWF0ZU9yUmVwbGFjZShlbnRpdHksIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbDoge1xuICAgICAgICAgICAgICAgICAgICAkY2FzZTogJ3VubGl0JyxcbiAgICAgICAgICAgICAgICAgICAgdW5saXQ6IG1hdGVyaWFsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFBick1hdGVyaWFsKGVudGl0eSwgbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIHRoZUNvbXBvbmVudC5jcmVhdGVPclJlcGxhY2UoZW50aXR5LCB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgJGNhc2U6ICdwYnInLFxuICAgICAgICAgICAgICAgICAgICBwYnI6IG1hdGVyaWFsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuIiwgImltcG9ydCB7IE1lc2hDb2xsaWRlciB9IGZyb20gJy4uL2dlbmVyYXRlZC9pbmRleC5nZW4nO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZU1lc2hDb2xsaWRlckNvbXBvbmVudChlbmdpbmUpIHtcbiAgICBjb25zdCB0aGVDb21wb25lbnQgPSBNZXNoQ29sbGlkZXIoZW5naW5lKTtcbiAgICBmdW5jdGlvbiBnZXRDb2xsaXNpb25NYXNrKGxheWVycykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsYXllcnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGF5ZXJzLm1hcCgoaXRlbSkgPT4gaXRlbSkucmVkdWNlKChwcmV2LCBpdGVtKSA9PiBwcmV2IHwgaXRlbSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGF5ZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gbGF5ZXJzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRoZUNvbXBvbmVudCxcbiAgICAgICAgc2V0Qm94KGVudGl0eSwgY29sbGlkZXJMYXllcnMpIHtcbiAgICAgICAgICAgIHRoZUNvbXBvbmVudC5jcmVhdGVPclJlcGxhY2UoZW50aXR5LCB7XG4gICAgICAgICAgICAgICAgbWVzaDogeyAkY2FzZTogJ2JveCcsIGJveDoge30gfSxcbiAgICAgICAgICAgICAgICBjb2xsaXNpb25NYXNrOiBnZXRDb2xsaXNpb25NYXNrKGNvbGxpZGVyTGF5ZXJzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFBsYW5lKGVudGl0eSwgY29sbGlkZXJMYXllcnMpIHtcbiAgICAgICAgICAgIHRoZUNvbXBvbmVudC5jcmVhdGVPclJlcGxhY2UoZW50aXR5LCB7XG4gICAgICAgICAgICAgICAgbWVzaDogeyAkY2FzZTogJ3BsYW5lJywgcGxhbmU6IHt9IH0sXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uTWFzazogZ2V0Q29sbGlzaW9uTWFzayhjb2xsaWRlckxheWVycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRDeWxpbmRlcihlbnRpdHksIHJhZGl1c0JvdHRvbSwgcmFkaXVzVG9wLCBjb2xsaWRlckxheWVycykge1xuICAgICAgICAgICAgdGhlQ29tcG9uZW50LmNyZWF0ZU9yUmVwbGFjZShlbnRpdHksIHtcbiAgICAgICAgICAgICAgICBtZXNoOiB7ICRjYXNlOiAnY3lsaW5kZXInLCBjeWxpbmRlcjogeyByYWRpdXNCb3R0b20sIHJhZGl1c1RvcCB9IH0sXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uTWFzazogZ2V0Q29sbGlzaW9uTWFzayhjb2xsaWRlckxheWVycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRTcGhlcmUoZW50aXR5LCBjb2xsaWRlckxheWVycykge1xuICAgICAgICAgICAgdGhlQ29tcG9uZW50LmNyZWF0ZU9yUmVwbGFjZShlbnRpdHksIHtcbiAgICAgICAgICAgICAgICBtZXNoOiB7ICRjYXNlOiAnc3BoZXJlJywgc3BoZXJlOiB7fSB9LFxuICAgICAgICAgICAgICAgIGNvbGxpc2lvbk1hc2s6IGdldENvbGxpc2lvbk1hc2soY29sbGlkZXJMYXllcnMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4iLCAiaW1wb3J0IHsgTWVzaFJlbmRlcmVyIH0gZnJvbSAnLi4vZ2VuZXJhdGVkL2luZGV4Lmdlbic7XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lTWVzaFJlbmRlcmVyQ29tcG9uZW50KGVuZ2luZSkge1xuICAgIGNvbnN0IHRoZUNvbXBvbmVudCA9IE1lc2hSZW5kZXJlcihlbmdpbmUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRoZUNvbXBvbmVudCxcbiAgICAgICAgc2V0Qm94KGVudGl0eSwgdXZzKSB7XG4gICAgICAgICAgICB0aGVDb21wb25lbnQuY3JlYXRlT3JSZXBsYWNlKGVudGl0eSwge1xuICAgICAgICAgICAgICAgIG1lc2g6IHsgJGNhc2U6ICdib3gnLCBib3g6IHsgdXZzOiB1dnMgfHwgW10gfSB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0UGxhbmUoZW50aXR5LCB1dnMpIHtcbiAgICAgICAgICAgIHRoZUNvbXBvbmVudC5jcmVhdGVPclJlcGxhY2UoZW50aXR5LCB7XG4gICAgICAgICAgICAgICAgbWVzaDogeyAkY2FzZTogJ3BsYW5lJywgcGxhbmU6IHsgdXZzOiB1dnMgfHwgW10gfSB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q3lsaW5kZXIoZW50aXR5LCByYWRpdXNCb3R0b20sIHJhZGl1c1RvcCkge1xuICAgICAgICAgICAgdGhlQ29tcG9uZW50LmNyZWF0ZU9yUmVwbGFjZShlbnRpdHksIHtcbiAgICAgICAgICAgICAgICBtZXNoOiB7ICRjYXNlOiAnY3lsaW5kZXInLCBjeWxpbmRlcjogeyByYWRpdXNCb3R0b20sIHJhZGl1c1RvcCB9IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRTcGhlcmUoZW50aXR5KSB7XG4gICAgICAgICAgICB0aGVDb21wb25lbnQuY3JlYXRlT3JSZXBsYWNlKGVudGl0eSwge1xuICAgICAgICAgICAgICAgIG1lc2g6IHsgJGNhc2U6ICdzcGhlcmUnLCBzcGhlcmU6IHt9IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiIsICJpbXBvcnQgeyBUd2VlbiB9IGZyb20gJy4uL2dlbmVyYXRlZC9pbmRleC5nZW4nO1xuY29uc3QgVHdlZW5IZWxwZXIgPSB7XG4gICAgTW92ZShtb3ZlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkY2FzZTogJ21vdmUnLFxuICAgICAgICAgICAgbW92ZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgUm90YXRlKHJvdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJGNhc2U6ICdyb3RhdGUnLFxuICAgICAgICAgICAgcm90YXRlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBTY2FsZShzY2FsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJGNhc2U6ICdzY2FsZScsXG4gICAgICAgICAgICBzY2FsZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgVGV4dHVyZU1vdmUodGV4dHVyZU1vdmUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICRjYXNlOiAndGV4dHVyZU1vdmUnLFxuICAgICAgICAgICAgdGV4dHVyZU1vdmVcbiAgICAgICAgfTtcbiAgICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVR3ZWVuQ29tcG9uZW50KGVuZ2luZSkge1xuICAgIGNvbnN0IHRoZUNvbXBvbmVudCA9IFR3ZWVuKGVuZ2luZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4udGhlQ29tcG9uZW50LFxuICAgICAgICBNb2RlOiBUd2VlbkhlbHBlclxuICAgIH07XG59XG4iLCAiLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IElBcnJheSA9ICh0eXBlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgICAgICBidWlsZGVyLndyaXRlVWludDMyKHZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0eXBlLnNlcmlhbGl6ZShpdGVtLCBidWlsZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcmVhZGVyLnJlYWRVaW50MzIoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBuZXdBcnJheS5wdXNoKHR5cGUuZGVzZXJpYWxpemUocmVhZGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3QXJyYXk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSxcbiAgICAgICAganNvblNjaGVtYToge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGl0ZW1zOiB0eXBlLmpzb25TY2hlbWEsXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ2FycmF5J1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEJvb2wgPSB7XG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVJbnQ4KHZhbHVlID8gMSA6IDApO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZEludDgoKSA9PT0gMTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiAnYm9vbGVhbidcbiAgICB9XG59O1xuIiwgIi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBJbnQ2NCA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZUludDY0KEJpZ0ludCh2YWx1ZSkpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6ICdpbnQ2NCdcbiAgICB9XG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEludDMyID0ge1xuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBidWlsZGVyLndyaXRlSW50MzIodmFsdWUpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZEludDMyKCk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiAnaW50ZWdlcicsXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiAnaW50MzInXG4gICAgfVxufTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgSW50MTYgPSB7XG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVJbnQxNih2YWx1ZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkSW50MTYoKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6ICdpbnQxNidcbiAgICB9XG59O1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBJbnQ4ID0ge1xuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBidWlsZGVyLndyaXRlSW50OCh2YWx1ZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkSW50OCgpO1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ2ludDgnXG4gICAgfVxufTtcbiIsICIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgRmxhdFN0cmluZyA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZVV0ZjhTdHJpbmcodmFsdWUpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZFV0ZjhTdHJpbmcoKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6ICd1dGY4LXN0cmluZydcbiAgICB9XG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEVjc1N0cmluZyA9IEZsYXRTdHJpbmc7XG4iLCAiaW1wb3J0IHsgSW50MzIgfSBmcm9tICcuL0ludGVnZXInO1xuaW1wb3J0IHsgRmxhdFN0cmluZyB9IGZyb20gJy4vU3RyaW5nJztcbi8qKlxuICogVmFsaWRhdGVzIHRoZSBlbnVtIHRvIGVuc3VyZSBhbGwgbWVtYmVyIHZhbHVlcyBhcmUgbnVtYmVycyBhbmQgd2l0aGluIHRoZSByYW5nZSBvZiBJbnQzMi5cbiAqIEBwYXJhbSBlbnVtVmFsdWUgVGhlIGVudW0gdG8gYmUgY2hlY2tlZC5cbiAqIEB0aHJvd3MgSWYgYW55IG1lbWJlciB2YWx1ZSBpcyBub3QgYSBudW1iZXIgb3IgaXMgb3V0c2lkZSB0aGUgcmFuZ2Ugb2YgSW50MzIuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTWVtYmVyVmFsdWVzQXJlTnVtYmVyc0FuZEluUmFuZ2VJbnQzMihlbnVtVmFsdWUpIHtcbiAgICBjb25zdCBNSU5fVkFMVUUgPSAtKDIgKiogMzEpLCBNQVhfVkFMVUUgPSAyICoqIDMxIC0gMTtcbiAgICBsZXQgdmFsdWVDb3VudCA9IDAsIHRvdGFsQ291bnQgPSAwO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGVudW1WYWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudW1WYWx1ZVtrZXldID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGVudW1WYWx1ZVtrZXldID4gTUFYX1ZBTFVFIHx8IGVudW1WYWx1ZVtrZXldIDwgTUlOX1ZBTFVFKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbnVtIG1lbWJlciB2YWx1ZXMgbXVzdCBiZSBudW1iZXJzIHdpdGhpbiB0aGUgcmFuZ2Ugb2YgJHtNSU5fVkFMVUV9IHRvICR7TUFYX1ZBTFVFfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICB0b3RhbENvdW50Kys7XG4gICAgfVxuICAgIGlmICh0b3RhbENvdW50ICE9PSB2YWx1ZUNvdW50ICogMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FsbCBlbnVtIG1lbWJlciB2YWx1ZXMgbXVzdCBiZSBvZiBudW1lcmljIHR5cGUuJyk7XG4gICAgfVxufVxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIGVudW0gdG8gZW5zdXJlIGFsbCBtZW1iZXIgdmFsdWVzIGFyZSBvZiBzdHJpbmcgdHlwZS5cbiAqIEBwYXJhbSBlbnVtVmFsdWUgVGhlIGVudW0gdG8gYmUgY2hlY2tlZC5cbiAqIEB0aHJvd3MgSWYgYW55IG1lbWJlciB2YWx1ZSBpcyBub3Qgb2Ygc3RyaW5nIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTWVtYmVyVmFsdWVzQXJlU3RyaW5ncyhlbnVtVmFsdWUpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBlbnVtVmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnVtVmFsdWVba2V5XSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQWxsIGVudW0gbWVtYmVyIHZhbHVlcyBtdXN0IGJlIG9mIHN0cmluZyB0eXBlLicpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEludEVudW1SZWZsZWN0aW9uVHlwZSA9ICdlbnVtLWludCc7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgSW50RW51bSA9IChlbnVtT2JqZWN0LCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgICB2YWxpZGF0ZU1lbWJlclZhbHVlc0FyZU51bWJlcnNBbmRJblJhbmdlSW50MzIoZW51bU9iamVjdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgICAgICBJbnQzMi5zZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpO1xuICAgICAgICB9LFxuICAgICAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnQzMi5kZXNlcmlhbGl6ZShyZWFkZXIpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgICAgICAvLyBKU09OLXNjaGVtYVxuICAgICAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICAgICAgZW51bTogT2JqZWN0LnZhbHVlcyhlbnVtT2JqZWN0KS5maWx0ZXIoKGl0ZW0pID0+IE51bWJlci5pc0ludGVnZXIoaXRlbSkpLFxuICAgICAgICAgICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgLy8gQGRjbC9lY3MgU2NoZW1hIFNwZWNcbiAgICAgICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBJbnRFbnVtUmVmbGVjdGlvblR5cGUsXG4gICAgICAgICAgICBlbnVtT2JqZWN0XG4gICAgICAgIH1cbiAgICB9O1xufTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJpbmdFbnVtUmVmbGVjdGlvblR5cGUgPSAnZW51bS1zdHJpbmcnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmluZ0VudW0gPSAoZW51bU9iamVjdCwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gICAgdmFsaWRhdGVNZW1iZXJWYWx1ZXNBcmVTdHJpbmdzKGVudW1PYmplY3QpO1xuICAgIC8vIFN0cmluZyBlbnVtIGhhcyB0aGUgZXhhY3QgbWFwcGluZyBmcm9tIGtleSAob3VyIHJlZmVyZW5jZSBpbiBjb2RlKSB0byB2YWx1ZXNcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgICAgIEZsYXRTdHJpbmcuc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gRmxhdFN0cmluZy5kZXNlcmlhbGl6ZShyZWFkZXIpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgICAgICAvLyBKU09OLXNjaGVtYVxuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBlbnVtOiBPYmplY3QudmFsdWVzKGVudW1PYmplY3QpLFxuICAgICAgICAgICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgLy8gQGRjbC9lY3MgU2NoZW1hIFNwZWNcbiAgICAgICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiBTdHJpbmdFbnVtUmVmbGVjdGlvblR5cGUsXG4gICAgICAgICAgICBlbnVtT2JqZWN0XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgRmxvYXQzMiA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZEZsb2F0MzIoKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiAnZmxvYXQzMidcbiAgICB9XG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEZsb2F0NjQgPSB7XG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVGbG9hdDY0KHZhbHVlKTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRGbG9hdDY0KCk7XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiAwLjA7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ2Zsb2F0NjQnXG4gICAgfVxufTtcbiIsICIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ29sb3IzU2NoZW1hID0ge1xuICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICBidWlsZGVyLndyaXRlRmxvYXQzMih2YWx1ZS5yKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUuZyk7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVGbG9hdDMyKHZhbHVlLmIpO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiByZWFkZXIucmVhZEZsb2F0MzIoKSxcbiAgICAgICAgICAgIGc6IHJlYWRlci5yZWFkRmxvYXQzMigpLFxuICAgICAgICAgICAgYjogcmVhZGVyLnJlYWRGbG9hdDMyKClcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogMCwgZzogMCwgYjogMCB9O1xuICAgIH0sXG4gICAganNvblNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgcjogeyB0eXBlOiAnbnVtYmVyJyB9LFxuICAgICAgICAgICAgZzogeyB0eXBlOiAnbnVtYmVyJyB9LFxuICAgICAgICAgICAgYjogeyB0eXBlOiAnbnVtYmVyJyB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiAnY29sb3IzJ1xuICAgIH1cbn07XG4iLCAiLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENvbG9yNFNjaGVtYSA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUucik7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVGbG9hdDMyKHZhbHVlLmcpO1xuICAgICAgICBidWlsZGVyLndyaXRlRmxvYXQzMih2YWx1ZS5iKTtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUuYSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHJlYWRlci5yZWFkRmxvYXQzMigpLFxuICAgICAgICAgICAgZzogcmVhZGVyLnJlYWRGbG9hdDMyKCksXG4gICAgICAgICAgICBiOiByZWFkZXIucmVhZEZsb2F0MzIoKSxcbiAgICAgICAgICAgIGE6IHJlYWRlci5yZWFkRmxvYXQzMigpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAgfTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHI6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIGc6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIGI6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIGE6IHsgdHlwZTogJ251bWJlcicgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ2NvbG9yNCdcbiAgICB9XG59O1xuIiwgIi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBFbnRpdHlTY2hlbWEgPSB7XG4gICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVJbnQzMih2YWx1ZSk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkSW50MzIoKTtcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgc2VyaWFsaXphdGlvblR5cGU6ICdlbnRpdHknXG4gICAgfVxufTtcbiIsICIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUXVhdGVybmlvblNjaGVtYSA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUueCk7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVGbG9hdDMyKHZhbHVlLnkpO1xuICAgICAgICBidWlsZGVyLndyaXRlRmxvYXQzMih2YWx1ZS56KTtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUudyk7XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHJlYWRlci5yZWFkRmxvYXQzMigpLFxuICAgICAgICAgICAgeTogcmVhZGVyLnJlYWRGbG9hdDMyKCksXG4gICAgICAgICAgICB6OiByZWFkZXIucmVhZEZsb2F0MzIoKSxcbiAgICAgICAgICAgIHc6IHJlYWRlci5yZWFkRmxvYXQzMigpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHo6IDAsIHc6IDAgfTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHg6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIHk6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIHo6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIHc6IHsgdHlwZTogJ251bWJlcicgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ3F1YXRlcm5pb24nXG4gICAgfVxufTtcbiIsICIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVmVjdG9yM1NjaGVtYSA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZUZsb2F0MzIodmFsdWUueCk7XG4gICAgICAgIGJ1aWxkZXIud3JpdGVGbG9hdDMyKHZhbHVlLnkpO1xuICAgICAgICBidWlsZGVyLndyaXRlRmxvYXQzMih2YWx1ZS56KTtcbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogcmVhZGVyLnJlYWRGbG9hdDMyKCksXG4gICAgICAgICAgICB5OiByZWFkZXIucmVhZEZsb2F0MzIoKSxcbiAgICAgICAgICAgIHo6IHJlYWRlci5yZWFkRmxvYXQzMigpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHo6IDAgfTtcbiAgICB9LFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHg6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIHk6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIHo6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgIHc6IHsgdHlwZTogJ251bWJlcicgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ3ZlY3RvcjMnXG4gICAgfVxufTtcbiIsICIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgSU1hcCA9IChzcGVjLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgICBjb25zdCBzcGVjUmVmbGVjdGlvbiA9IE9iamVjdC5rZXlzKHNwZWMpLnJlZHVjZSgoc3BlY1JlZmxlY3Rpb24sIGN1cnJlbnRLZXkpID0+IHtcbiAgICAgICAgc3BlY1JlZmxlY3Rpb25bY3VycmVudEtleV0gPSBzcGVjW2N1cnJlbnRLZXldLmpzb25TY2hlbWE7XG4gICAgICAgIHJldHVybiBzcGVjUmVmbGVjdGlvbjtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzcGVjKSB7XG4gICAgICAgICAgICAgICAgc3BlY1trZXldLnNlcmlhbGl6ZSh2YWx1ZVtrZXldLCBidWlsZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc3BlYykge1xuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVtrZXldID0gc3BlY1trZXldLmRlc2VyaWFsaXplKHJlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzcGVjKSB7XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW2tleV0gPSBzcGVjW2tleV0uY3JlYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyAuLi5uZXdWYWx1ZSwgLi4uZGVmYXVsdFZhbHVlIH07XG4gICAgICAgIH0sXG4gICAgICAgIGV4dGVuZDogKGJhc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzcGVjKSB7XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW2tleV0gPSBzcGVjW2tleV0uY3JlYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyAuLi5uZXdWYWx1ZSwgLi4uZGVmYXVsdFZhbHVlLCAuLi5iYXNlIH07XG4gICAgICAgIH0sXG4gICAgICAgIGpzb25TY2hlbWE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgcHJvcGVydGllczogc3BlY1JlZmxlY3Rpb24sXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ21hcCdcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwgIi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBJT3B0aW9uYWwgPSAoc3BlYykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgYnVpbGRlcikge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci53cml0ZUludDgoMSk7XG4gICAgICAgICAgICAgICAgc3BlYy5zZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci53cml0ZUludDgoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplKHJlYWRlcikge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gcmVhZGVyLnJlYWRJbnQ4KCk7XG4gICAgICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwZWMuZGVzZXJpYWxpemUocmVhZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAganNvblNjaGVtYToge1xuICAgICAgICAgICAgdHlwZTogc3BlYy5qc29uU2NoZW1hLnR5cGUsXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ29wdGlvbmFsJyxcbiAgICAgICAgICAgIG9wdGlvbmFsSnNvblNjaGVtYTogc3BlYy5qc29uU2NoZW1hXG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICJleHBvcnQgY29uc3QgSU9uZU9mID0gKHNwZWNzKSA9PiB7XG4gICAgY29uc3Qgc3BlY0tleXMgPSBPYmplY3Qua2V5cyhzcGVjcyk7XG4gICAgY29uc3Qga2V5VG9JbmRleCA9IHNwZWNLZXlzLnJlZHVjZSgoZGljdCwga2V5LCBpbmRleCkgPT4ge1xuICAgICAgICBkaWN0W2tleV0gPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIGRpY3Q7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IHNwZWNSZWZsZWN0aW9uID0gc3BlY0tleXMucmVkdWNlKChzcGVjUmVmbGVjdGlvbiwgY3VycmVudEtleSkgPT4ge1xuICAgICAgICBzcGVjUmVmbGVjdGlvbltjdXJyZW50S2V5XSA9IHNwZWNzW2N1cnJlbnRLZXldLmpzb25TY2hlbWE7XG4gICAgICAgIHJldHVybiBzcGVjUmVmbGVjdGlvbjtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VyaWFsaXplKHsgJGNhc2UsIHZhbHVlIH0sIGJ1aWxkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IF92YWx1ZSA9IGtleVRvSW5kZXhbJGNhc2UudG9TdHJpbmcoKV0gKyAxO1xuICAgICAgICAgICAgYnVpbGRlci53cml0ZVVpbnQ4KF92YWx1ZSk7XG4gICAgICAgICAgICBzcGVjc1skY2FzZV0uc2VyaWFsaXplKHZhbHVlLCBidWlsZGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgICAgICBjb25zdCAkY2FzZSA9IHNwZWNLZXlzW3JlYWRlci5yZWFkSW50OCgpIC0gMV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNwZWNzWyRjYXNlXS5kZXNlcmlhbGl6ZShyZWFkZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgJGNhc2UsIHZhbHVlIH07XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgICAganNvblNjaGVtYToge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBzcGVjUmVmbGVjdGlvbixcbiAgICAgICAgICAgIHNlcmlhbGl6YXRpb25UeXBlOiAnb25lLW9mJ1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiZXhwb3J0IGNvbnN0IGlzU2NoZW1hVHlwZSA9ICh2YWx1ZSwgdHlwZXMpID0+IHR5cGVzLmluY2x1ZGVzKHZhbHVlLnNlcmlhbGl6YXRpb25UeXBlKTtcbmV4cG9ydCBjb25zdCBpc09uZU9mSnNvblNjaGVtYSA9ICh0eXBlKSA9PiBpc1NjaGVtYVR5cGUodHlwZSwgWydvbmUtb2YnXSk7XG5leHBvcnQgY29uc3QgZ2V0VW5rbm93blNjaGVtYSA9ICgpID0+ICh7XG4gICAgdHlwZTogeyB0eXBlOiAnb2JqZWN0Jywgc2VyaWFsaXphdGlvblR5cGU6ICd1bmtub3duJyB9LFxuICAgIHZhbHVlOiB1bmRlZmluZWRcbn0pO1xuZXhwb3J0IGNvbnN0IGlzQ29tcG91bmRUeXBlID0gKHR5cGUpID0+IGlzU2NoZW1hVHlwZSh0eXBlLCBbJ2FycmF5JywgJ21hcCddKTtcbmV4cG9ydCBjb25zdCBnZXRUeXBlQW5kVmFsdWUgPSAocHJvcGVydGllcywgdmFsdWUsIGtleSkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgY29uc3QgdmFsdWVLZXkgPSB2YWx1ZVtrZXldO1xuICAgIGlmIChpc09uZU9mSnNvblNjaGVtYSh0eXBlKSkge1xuICAgICAgICBjb25zdCB0eXBlZE1hcFZhbHVlID0gdmFsdWVLZXk7XG4gICAgICAgIGlmICghdHlwZWRNYXBWYWx1ZS4kY2FzZSlcbiAgICAgICAgICAgIHJldHVybiBnZXRVbmtub3duU2NoZW1hKCk7XG4gICAgICAgIGNvbnN0IHByb3BUeXBlID0gdHlwZS5wcm9wZXJ0aWVzW3R5cGVkTWFwVmFsdWUuJGNhc2VdO1xuICAgICAgICAvLyB0cmFuc2Zvcm0geyAkY2FzZTogc3RyaW5nOyB2YWx1ZTogdW5rbm93biB9ID0+IHsgWyRjYXNlXTogdmFsdWUgfVxuICAgICAgICBpZiAoaXNDb21wb3VuZFR5cGUocHJvcFR5cGUpKVxuICAgICAgICAgICAgdmFsdWVba2V5XSA9IHsgW3R5cGVkTWFwVmFsdWUuJGNhc2VdOiB0eXBlZE1hcFZhbHVlLnZhbHVlIH07XG4gICAgICAgIHJldHVybiB7IHR5cGU6IHByb3BUeXBlLCB2YWx1ZTogdHlwZWRNYXBWYWx1ZS52YWx1ZSB9O1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlLCB2YWx1ZTogdmFsdWVLZXkgfTtcbn07XG4iLCAiaW1wb3J0IHsgSUFycmF5IH0gZnJvbSAnLi4vQXJyYXknO1xuaW1wb3J0IHsgQm9vbCB9IGZyb20gJy4uL2Jhc2ljL0Jvb2xlYW4nO1xuaW1wb3J0IHsgSW50RW51bSwgU3RyaW5nRW51bSB9IGZyb20gJy4uL2Jhc2ljL0VudW0nO1xuaW1wb3J0IHsgRmxvYXQzMiwgRmxvYXQ2NCB9IGZyb20gJy4uL2Jhc2ljL0Zsb2F0JztcbmltcG9ydCB7IEludDE2LCBJbnQzMiwgSW50NjQsIEludDggfSBmcm9tICcuLi9iYXNpYy9JbnRlZ2VyJztcbmltcG9ydCB7IEVjc1N0cmluZyB9IGZyb20gJy4uL2Jhc2ljL1N0cmluZyc7XG5pbXBvcnQgeyBDb2xvcjNTY2hlbWEgfSBmcm9tICcuLi9jdXN0b20vQ29sb3IzJztcbmltcG9ydCB7IENvbG9yNFNjaGVtYSB9IGZyb20gJy4uL2N1c3RvbS9Db2xvcjQnO1xuaW1wb3J0IHsgRW50aXR5U2NoZW1hIH0gZnJvbSAnLi4vY3VzdG9tL0VudGl0eSc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uU2NoZW1hIH0gZnJvbSAnLi4vY3VzdG9tL1F1YXRlcm5pb24nO1xuaW1wb3J0IHsgVmVjdG9yM1NjaGVtYSB9IGZyb20gJy4uL2N1c3RvbS9WZWN0b3IzJztcbmltcG9ydCB7IElNYXAgfSBmcm9tICcuLi9NYXAnO1xuaW1wb3J0IHsgSU9uZU9mIH0gZnJvbSAnLi4vT25lT2YnO1xuaW1wb3J0IHsgSU9wdGlvbmFsIH0gZnJvbSAnLi4vT3B0aW9uYWwnO1xuaW1wb3J0IHsgZ2V0VHlwZUFuZFZhbHVlLCBpc0NvbXBvdW5kVHlwZSB9IGZyb20gJy4vdXRpbHMnO1xuY29uc3QgcHJpbWl0aXZlU2NoZW1hcyA9IHtcbiAgICBbQm9vbC5qc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlXTogQm9vbCxcbiAgICBbRWNzU3RyaW5nLmpzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGVdOiBFY3NTdHJpbmcsXG4gICAgW0Zsb2F0MzIuanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IEZsb2F0MzIsXG4gICAgW0Zsb2F0NjQuanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IEZsb2F0NjQsXG4gICAgW0ludDguanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IEludDgsXG4gICAgW0ludDE2Lmpzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGVdOiBJbnQxNixcbiAgICBbSW50MzIuanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IEludDMyLFxuICAgIFtJbnQ2NC5qc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlXTogSW50NjQsXG4gICAgW1ZlY3RvcjNTY2hlbWEuanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IFZlY3RvcjNTY2hlbWEsXG4gICAgW1F1YXRlcm5pb25TY2hlbWEuanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IFF1YXRlcm5pb25TY2hlbWEsXG4gICAgW0NvbG9yM1NjaGVtYS5qc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlXTogQ29sb3IzU2NoZW1hLFxuICAgIFtDb2xvcjRTY2hlbWEuanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZV06IENvbG9yNFNjaGVtYSxcbiAgICBbRW50aXR5U2NoZW1hLmpzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGVdOiBFbnRpdHlTY2hlbWFcbn07XG4vKipcbiAqIENyZWF0ZSBhbiBJU2NoZW1hIG9iamVjdCBmcm9tIHRoZSBqc29uLXNjaGVtYVxuICogQHBhcmFtIGpzb25TY2hlbWFcbiAqIEByZXR1cm5zIGEgSVNjaGVtYSBvciBmYWlsIGZvciB1bnN1cHBvcnRlZCBqc29uLXNjaGVtYVxuICovXG5leHBvcnQgZnVuY3Rpb24ganNvblNjaGVtYVRvU2NoZW1hKGpzb25TY2hlbWEpIHtcbiAgICBpZiAocHJpbWl0aXZlU2NoZW1hc1tqc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlXSkge1xuICAgICAgICByZXR1cm4gcHJpbWl0aXZlU2NoZW1hc1tqc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlXTtcbiAgICB9XG4gICAgaWYgKGpzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGUgPT09ICdtYXAnKSB7XG4gICAgICAgIGNvbnN0IG1hcEpzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICAgICAgICBjb25zdCBzcGVjID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1hcEpzb25TY2hlbWEucHJvcGVydGllcykge1xuICAgICAgICAgICAgc3BlY1trZXldID0ganNvblNjaGVtYVRvU2NoZW1hKG1hcEpzb25TY2hlbWEucHJvcGVydGllc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSU1hcChzcGVjKTtcbiAgICB9XG4gICAgaWYgKGpzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGUgPT09ICdvcHRpb25hbCcpIHtcbiAgICAgICAgY29uc3Qgd2l0aEl0ZW1zSnNvblNjaGVtYSA9IGpzb25TY2hlbWE7XG4gICAgICAgIHJldHVybiBJT3B0aW9uYWwoanNvblNjaGVtYVRvU2NoZW1hKHdpdGhJdGVtc0pzb25TY2hlbWEub3B0aW9uYWxKc29uU2NoZW1hKSk7XG4gICAgfVxuICAgIGlmIChqc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlID09PSAnYXJyYXknKSB7XG4gICAgICAgIGNvbnN0IHdpdGhJdGVtc0pzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICAgICAgICByZXR1cm4gSUFycmF5KGpzb25TY2hlbWFUb1NjaGVtYSh3aXRoSXRlbXNKc29uU2NoZW1hLml0ZW1zKSk7XG4gICAgfVxuICAgIGlmIChqc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlID09PSAnZW51bS1pbnQnKSB7XG4gICAgICAgIGNvbnN0IGVudW1Kc29uU2NoZW1hID0ganNvblNjaGVtYTtcbiAgICAgICAgcmV0dXJuIEludEVudW0oZW51bUpzb25TY2hlbWEuZW51bU9iamVjdCwgZW51bUpzb25TY2hlbWEuZGVmYXVsdCk7XG4gICAgfVxuICAgIGlmIChqc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlID09PSAnZW51bS1zdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IGVudW1Kc29uU2NoZW1hID0ganNvblNjaGVtYTtcbiAgICAgICAgcmV0dXJuIFN0cmluZ0VudW0oZW51bUpzb25TY2hlbWEuZW51bU9iamVjdCwgZW51bUpzb25TY2hlbWEuZGVmYXVsdCk7XG4gICAgfVxuICAgIGlmIChqc29uU2NoZW1hLnNlcmlhbGl6YXRpb25UeXBlID09PSAnb25lLW9mJykge1xuICAgICAgICBjb25zdCBvbmVPZkpzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICAgICAgICBjb25zdCBzcGVjID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9uZU9mSnNvblNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBzcGVjW2tleV0gPSBqc29uU2NoZW1hVG9TY2hlbWEob25lT2ZKc29uU2NoZW1hLnByb3BlcnRpZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIElPbmVPZihzcGVjKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2pzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGV9IGlzIG5vdCBzdXBwb3J0ZWQgYXMgcmV2ZXJzZSBzY2hlbWEgZ2VuZXJhdGlvbi5gKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtdXRhdGVWYWx1ZXMoanNvblNjaGVtYSwgdmFsdWUsIG11dGF0ZUZuKSB7XG4gICAgaWYgKGpzb25TY2hlbWEuc2VyaWFsaXphdGlvblR5cGUgPT09ICdtYXAnKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0ganNvblNjaGVtYTtcbiAgICAgICAgY29uc3QgdHlwZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCB7IHR5cGUsIHZhbHVlOiBtYXBWYWx1ZSB9ID0gZ2V0VHlwZUFuZFZhbHVlKHByb3BlcnRpZXMsIHR5cGVkVmFsdWUsIGtleSk7XG4gICAgICAgICAgICBpZiAodHlwZS5zZXJpYWxpemF0aW9uVHlwZSA9PT0gJ3Vua25vd24nKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGlzQ29tcG91bmRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbXV0YXRlVmFsdWVzKHR5cGUsIG1hcFZhbHVlLCBtdXRhdGVGbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IG11dGF0ZUZuKG1hcFZhbHVlLCB0eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlZFZhbHVlW2tleV0gPSBuZXdWYWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoanNvblNjaGVtYS5zZXJpYWxpemF0aW9uVHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSBqc29uU2NoZW1hO1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gdmFsdWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBuID0gYXJyYXlWYWx1ZS5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdHlwZSwgdmFsdWUgfSA9IGdldFR5cGVBbmRWYWx1ZSh7IGl0ZW1zOiBpdGVtcyB9LCB7IGl0ZW1zOiBhcnJheVZhbHVlW2ldIH0sICdpdGVtcycpO1xuICAgICAgICAgICAgaWYgKGlzQ29tcG91bmRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbXV0YXRlVmFsdWVzKHR5cGUsIHZhbHVlLCBtdXRhdGVGbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IG11dGF0ZUZuKHZhbHVlLCB0eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBhcnJheVZhbHVlW2ldID0gbmV3VmFsdWUudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB7IElBcnJheSB9IGZyb20gJy4vQXJyYXknO1xuaW1wb3J0IHsgQm9vbCB9IGZyb20gJy4vYmFzaWMvQm9vbGVhbic7XG5pbXBvcnQgeyBJbnRFbnVtIGFzIEludEVudW1TY2hlbWEsIFN0cmluZ0VudW0gYXMgU3RyaW5nRW51bVNjaGVtYSB9IGZyb20gJy4vYmFzaWMvRW51bSc7XG5pbXBvcnQgeyBGbG9hdDMyLCBGbG9hdDY0IH0gZnJvbSAnLi9iYXNpYy9GbG9hdCc7XG5pbXBvcnQgeyBJbnQxNiwgSW50MzIsIEludDgsIEludDY0IGFzIGlJbnQ2NCB9IGZyb20gJy4vYmFzaWMvSW50ZWdlcic7XG5pbXBvcnQgeyBFY3NTdHJpbmcgfSBmcm9tICcuL2Jhc2ljL1N0cmluZyc7XG5pbXBvcnQgeyBDb2xvcjNTY2hlbWEgfSBmcm9tICcuL2N1c3RvbS9Db2xvcjMnO1xuaW1wb3J0IHsgQ29sb3I0U2NoZW1hIH0gZnJvbSAnLi9jdXN0b20vQ29sb3I0JztcbmltcG9ydCB7IEVudGl0eVNjaGVtYSB9IGZyb20gJy4vY3VzdG9tL0VudGl0eSc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uU2NoZW1hIH0gZnJvbSAnLi9jdXN0b20vUXVhdGVybmlvbic7XG5pbXBvcnQgeyBWZWN0b3IzU2NoZW1hIH0gZnJvbSAnLi9jdXN0b20vVmVjdG9yMyc7XG5pbXBvcnQgeyBJTWFwIH0gZnJvbSAnLi9NYXAnO1xuaW1wb3J0IHsgSU9wdGlvbmFsIH0gZnJvbSAnLi9PcHRpb25hbCc7XG5pbXBvcnQgeyBJT25lT2YgfSBmcm9tICcuL09uZU9mJztcbmltcG9ydCB7IGpzb25TY2hlbWFUb1NjaGVtYSwgbXV0YXRlVmFsdWVzIH0gZnJvbSAnLi9idWlsZFNjaGVtYSc7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBTY2hlbWFzO1xuKGZ1bmN0aW9uIChTY2hlbWFzKSB7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLkJvb2xlYW4gPSBCb29sO1xuICAgIC8qKiBAcHVibGljICovXG4gICAgU2NoZW1hcy5TdHJpbmcgPSBFY3NTdHJpbmc7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLkZsb2F0ID0gRmxvYXQzMjtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuRG91YmxlID0gRmxvYXQ2NDtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuQnl0ZSA9IEludDg7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLlNob3J0ID0gSW50MTY7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLkludCA9IEludDMyO1xuICAgIC8qKiBAcHVibGljICovXG4gICAgU2NoZW1hcy5JbnQ2NCA9IGlJbnQ2NDtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuTnVtYmVyID0gRmxvYXQzMjtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuVmVjdG9yMyA9IFZlY3RvcjNTY2hlbWE7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLlF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uU2NoZW1hO1xuICAgIC8qKiBAcHVibGljICovXG4gICAgU2NoZW1hcy5Db2xvcjMgPSBDb2xvcjNTY2hlbWE7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLkNvbG9yNCA9IENvbG9yNFNjaGVtYTtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuRW50aXR5ID0gRW50aXR5U2NoZW1hO1xuICAgIC8qKiBAcHVibGljICovXG4gICAgU2NoZW1hcy5FbnVtTnVtYmVyID0gSW50RW51bVNjaGVtYTtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuRW51bVN0cmluZyA9IFN0cmluZ0VudW1TY2hlbWE7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBTY2hlbWFzLkFycmF5ID0gSUFycmF5O1xuICAgIC8qKiBAcHVibGljICovXG4gICAgU2NoZW1hcy5NYXAgPSBJTWFwO1xuICAgIC8qKiBAcHVibGljICovXG4gICAgU2NoZW1hcy5PcHRpb25hbCA9IElPcHRpb25hbDtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIFNjaGVtYXMuT25lT2YgPSBJT25lT2Y7XG4gICAgLyoqXG4gICAgICogQHB1YmxpYyBDcmVhdGUgYW4gSVNjaGVtYSBvYmplY3QgZnJvbSB0aGUganNvbi1zY2hlbWFcbiAgICAgKiBAcGFyYW0ganNvblNjaGVtYVxuICAgICAqIEByZXR1cm5zIGEgSVNjaGVtYSBvciBmYWlsIGZvciB1bnN1cHBvcnRlZCBqc29uLXNjaGVtYVxuICAgICAqL1xuICAgIFNjaGVtYXMuZnJvbUpzb24gPSBqc29uU2NoZW1hVG9TY2hlbWE7XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqXG4gICAgICogVHJhdmVyc2VzIGFuZCBtdXRhdGVzIHZhbHVlcyBpbiBhIEpTT04gc2NoZW1hLWJhc2VkIHN0cnVjdHVyZSwgYXBwbHlpbmcgdGhlIGdpdmVuIG11dGF0aW9uIGZ1bmN0aW9uIHRvIGVhY2ggdmFsdWUuXG4gICAgICogVGhlIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIHdvcmsgd2l0aCBuZXN0ZWQgbWFwcyBhbmQgYXJyYXlzLCByZWN1cnNpdmVseSBwcm9jZXNzaW5nIGVhY2ggZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBqc29uU2NoZW1hIC0gVGhlIEpTT04gc2NoZW1hIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSB2YWx1ZS5cbiAgICAgKiAgICAgICAgICAgICAgICAgICBJdCBtdXN0IGhhdmUgYSBzZXJpYWxpemF0aW9uVHlwZSBvZiAnbWFwJywgJ2FycmF5Jywgb3Igb3RoZXIgY3VzdG9tIHR5cGVzIGxpa2UgJ2VudGl0eScuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIG11dGF0ZWQsIHdoaWNoIHNob3VsZCBjb25mb3JtIHRvIHRoZSBwcm92aWRlZCBKU09OIHNjaGVtYS5cbiAgICAgKiBAcGFyYW0gbXV0YXRlRm4gLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgaXRzIGNvcnJlc3BvbmRpbmcgdmFsdWVUeXBlIChKc29uU2NoZW1hRXh0ZW5kZWQpIGFzIGFyZ3VtZW50c1xuICAgICAqICAgICAgICAgICAgICAgICAgIGFuZCByZXR1cm5zIGEgdHVwbGUgW2Jvb2xlYW4sIGFueV0uIFRoZSBib29sZWFuIGluZGljYXRlcyB3aGV0aGVyIHRoZSBtdXRhdGlvbiBzaG91bGQgYmUgYXBwbGllZCxcbiAgICAgKiAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHNlY29uZCBlbGVtZW50IGlzIHRoZSBtdXRhdGVkIHZhbHVlLlxuICAgICAqL1xuICAgIFNjaGVtYXMubXV0YXRlTmVzdGVkVmFsdWVzID0gbXV0YXRlVmFsdWVzO1xufSkoU2NoZW1hcyB8fCAoU2NoZW1hcyA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgU2NoZW1hcyB9IGZyb20gJy4uLy4uL3NjaGVtYXMnO1xuZnVuY3Rpb24gZGVmaW5lTmFtZUNvbXBvbmVudChlbmdpbmUpIHtcbiAgICBjb25zdCBOYW1lID0gZW5naW5lLmRlZmluZUNvbXBvbmVudCgnY29yZS1zY2hlbWE6Ok5hbWUnLCB7XG4gICAgICAgIHZhbHVlOiBTY2hlbWFzLlN0cmluZ1xuICAgIH0pO1xuICAgIHJldHVybiBOYW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lTmFtZUNvbXBvbmVudDtcbiIsICJpbXBvcnQgeyBTY2hlbWFzIH0gZnJvbSAnLi4vLi4vc2NoZW1hcyc7XG5mdW5jdGlvbiBkZWZpbmVOZXR3b3JrRW50aXR5Q29tcG9uZW50KGVuZ2luZSkge1xuICAgIGNvbnN0IEVudGl0eU5ldHdvcmsgPSBlbmdpbmUuZGVmaW5lQ29tcG9uZW50KCdjb3JlLXNjaGVtYTo6TmV0d29yay1FbnRpdHknLCB7XG4gICAgICAgIG5ldHdvcmtJZDogU2NoZW1hcy5JbnQ2NCxcbiAgICAgICAgZW50aXR5SWQ6IFNjaGVtYXMuRW50aXR5XG4gICAgfSk7XG4gICAgcmV0dXJuIEVudGl0eU5ldHdvcms7XG59XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVOZXR3b3JrRW50aXR5Q29tcG9uZW50O1xuIiwgImltcG9ydCB7IFNjaGVtYXMgfSBmcm9tICcuLi8uLi9zY2hlbWFzJztcbmZ1bmN0aW9uIGRlZmluZU5ldHdvcmtQYXJlbnRDb21wb25lbnQoZW5naW5lKSB7XG4gICAgY29uc3QgRW50aXR5TmV0d29yayA9IGVuZ2luZS5kZWZpbmVDb21wb25lbnQoJ2NvcmUtc2NoZW1hOjpOZXR3b3JrLVBhcmVudCcsIHtcbiAgICAgICAgbmV0d29ya0lkOiBTY2hlbWFzLkludDY0LFxuICAgICAgICBlbnRpdHlJZDogU2NoZW1hcy5FbnRpdHlcbiAgICB9KTtcbiAgICByZXR1cm4gRW50aXR5TmV0d29yaztcbn1cbmV4cG9ydCBkZWZhdWx0IGRlZmluZU5ldHdvcmtQYXJlbnRDb21wb25lbnQ7XG4iLCAiLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDE7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgVFJBTlNGT1JNX0xFTkdUSCA9IDQ0O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFRyYW5zZm9ybVNjaGVtYSA9IHtcbiAgICBzZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpIHtcbiAgICAgICAgY29uc3QgcHRyID0gYnVpbGRlci5pbmNyZW1lbnRXcml0ZU9mZnNldChUUkFOU0ZPUk1fTEVOR1RIKTtcbiAgICAgICAgYnVpbGRlci5zZXRGbG9hdDMyKHB0ciwgdmFsdWUucG9zaXRpb24ueCk7XG4gICAgICAgIGJ1aWxkZXIuc2V0RmxvYXQzMihwdHIgKyA0LCB2YWx1ZS5wb3NpdGlvbi55KTtcbiAgICAgICAgYnVpbGRlci5zZXRGbG9hdDMyKHB0ciArIDgsIHZhbHVlLnBvc2l0aW9uLnopO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMTIsIHZhbHVlLnJvdGF0aW9uLngpO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMTYsIHZhbHVlLnJvdGF0aW9uLnkpO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMjAsIHZhbHVlLnJvdGF0aW9uLnopO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMjQsIHZhbHVlLnJvdGF0aW9uLncpO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMjgsIHZhbHVlLnNjYWxlLngpO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMzIsIHZhbHVlLnNjYWxlLnkpO1xuICAgICAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMzYsIHZhbHVlLnNjYWxlLnopO1xuICAgICAgICBidWlsZGVyLnNldFVpbnQzMihwdHIgKyA0MCwgdmFsdWUucGFyZW50IHx8IDApO1xuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyKSB7XG4gICAgICAgIGNvbnN0IHB0ciA9IHJlYWRlci5pbmNyZW1lbnRSZWFkT2Zmc2V0KFRSQU5TRk9STV9MRU5HVEgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIpLFxuICAgICAgICAgICAgICAgIHk6IHJlYWRlci5nZXRGbG9hdDMyKHB0ciArIDQpLFxuICAgICAgICAgICAgICAgIHo6IHJlYWRlci5nZXRGbG9hdDMyKHB0ciArIDgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm90YXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyAxMiksXG4gICAgICAgICAgICAgICAgeTogcmVhZGVyLmdldEZsb2F0MzIocHRyICsgMTYpLFxuICAgICAgICAgICAgICAgIHo6IHJlYWRlci5nZXRGbG9hdDMyKHB0ciArIDIwKSxcbiAgICAgICAgICAgICAgICB3OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyAyNClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHg6IHJlYWRlci5nZXRGbG9hdDMyKHB0ciArIDI4KSxcbiAgICAgICAgICAgICAgICB5OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyAzMiksXG4gICAgICAgICAgICAgICAgejogcmVhZGVyLmdldEZsb2F0MzIocHRyICsgMzYpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyZW50OiByZWFkZXIuZ2V0VWludDMyKHB0ciArIDQwKVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMCwgejogMCB9LFxuICAgICAgICAgICAgc2NhbGU6IHsgeDogMSwgeTogMSwgejogMSB9LFxuICAgICAgICAgICAgcm90YXRpb246IHsgeDogMCwgeTogMCwgejogMCwgdzogMSB9LFxuICAgICAgICAgICAgcGFyZW50OiAwXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBleHRlbmQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAsIHo6IDAgfSxcbiAgICAgICAgICAgIHNjYWxlOiB7IHg6IDEsIHk6IDEsIHo6IDEgfSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiB7IHg6IDAsIHk6IDAsIHo6IDAsIHc6IDEgfSxcbiAgICAgICAgICAgIHBhcmVudDogMCxcbiAgICAgICAgICAgIC4uLnZhbHVlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDogeyB0eXBlOiAnbnVtYmVyJyB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7IHR5cGU6ICdudW1iZXInIH0sXG4gICAgICAgICAgICAgICAgICAgIHo6IHsgdHlwZTogJ251bWJlcicgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDogeyB0eXBlOiAnbnVtYmVyJyB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7IHR5cGU6ICdudW1iZXInIH0sXG4gICAgICAgICAgICAgICAgICAgIHo6IHsgdHlwZTogJ251bWJlcicgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3RhdGlvbjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDogeyB0eXBlOiAnbnVtYmVyJyB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7IHR5cGU6ICdudW1iZXInIH0sXG4gICAgICAgICAgICAgICAgICAgIHo6IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgICAgICAgICAgICAgdzogeyB0eXBlOiAnbnVtYmVyJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmVudDogeyB0eXBlOiAnaW50ZWdlcicgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemF0aW9uVHlwZTogJ3RyYW5zZm9ybSdcbiAgICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVRyYW5zZm9ybUNvbXBvbmVudChlbmdpbmUpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1EZWYgPSBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYSgnY29yZTo6VHJhbnNmb3JtJywgVHJhbnNmb3JtU2NoZW1hKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50cmFuc2Zvcm1EZWYsXG4gICAgICAgIGNyZWF0ZShlbnRpdHksIHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybURlZi5jcmVhdGUoZW50aXR5LCBUcmFuc2Zvcm1TY2hlbWEuZXh0ZW5kKHZhbCkpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVPclJlcGxhY2UoZW50aXR5LCB2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1EZWYuY3JlYXRlT3JSZXBsYWNlKGVudGl0eSwgVHJhbnNmb3JtU2NoZW1hLmV4dGVuZCh2YWwpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzLmNvbW1vblwiO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgTWVkaWFTdGF0ZTtcbihmdW5jdGlvbiAoTWVkaWFTdGF0ZSkge1xuICAgIE1lZGlhU3RhdGVbTWVkaWFTdGF0ZVtcIk1TX05PTkVcIl0gPSAwXSA9IFwiTVNfTk9ORVwiO1xuICAgIE1lZGlhU3RhdGVbTWVkaWFTdGF0ZVtcIk1TX0VSUk9SXCJdID0gMV0gPSBcIk1TX0VSUk9SXCI7XG4gICAgTWVkaWFTdGF0ZVtNZWRpYVN0YXRlW1wiTVNfTE9BRElOR1wiXSA9IDJdID0gXCJNU19MT0FESU5HXCI7XG4gICAgTWVkaWFTdGF0ZVtNZWRpYVN0YXRlW1wiTVNfUkVBRFlcIl0gPSAzXSA9IFwiTVNfUkVBRFlcIjtcbiAgICBNZWRpYVN0YXRlW01lZGlhU3RhdGVbXCJNU19QTEFZSU5HXCJdID0gNF0gPSBcIk1TX1BMQVlJTkdcIjtcbiAgICBNZWRpYVN0YXRlW01lZGlhU3RhdGVbXCJNU19CVUZGRVJJTkdcIl0gPSA1XSA9IFwiTVNfQlVGRkVSSU5HXCI7XG4gICAgTWVkaWFTdGF0ZVtNZWRpYVN0YXRlW1wiTVNfU0VFS0lOR1wiXSA9IDZdID0gXCJNU19TRUVLSU5HXCI7XG4gICAgTWVkaWFTdGF0ZVtNZWRpYVN0YXRlW1wiTVNfUEFVU0VEXCJdID0gN10gPSBcIk1TX1BBVVNFRFwiO1xufSkoTWVkaWFTdGF0ZSB8fCAoTWVkaWFTdGF0ZSA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgZGVmaW5lQW5pbWF0b3JDb21wb25lbnQgfSBmcm9tICcuL2V4dGVuZGVkL0FuaW1hdG9yJztcbmltcG9ydCB7IGRlZmluZUF1ZGlvU291cmNlQ29tcG9uZW50IH0gZnJvbSAnLi9leHRlbmRlZC9BdWRpb1NvdXJjZSc7XG5pbXBvcnQgeyBkZWZpbmVNYXRlcmlhbENvbXBvbmVudCB9IGZyb20gJy4vZXh0ZW5kZWQvTWF0ZXJpYWwnO1xuaW1wb3J0IHsgZGVmaW5lTWVzaENvbGxpZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9leHRlbmRlZC9NZXNoQ29sbGlkZXInO1xuaW1wb3J0IHsgZGVmaW5lTWVzaFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9leHRlbmRlZC9NZXNoUmVuZGVyZXInO1xuaW1wb3J0IHsgZGVmaW5lVHdlZW5Db21wb25lbnQgfSBmcm9tICcuL2V4dGVuZGVkL1R3ZWVuJztcbmltcG9ydCBkZWZpbmVOYW1lQ29tcG9uZW50IGZyb20gJy4vbWFudWFsL05hbWUnO1xuaW1wb3J0IGRlZmluZVN5bmNDb21wb25lbnQgZnJvbSAnLi9tYW51YWwvU3luY0NvbXBvbmVudHMnO1xuaW1wb3J0IGRlZmluZU5ldHdvcmtFbnRpdHkgZnJvbSAnLi9tYW51YWwvTmV0d29ya0VudGl0eSc7XG5pbXBvcnQgZGVmaW5lTmV0d29ya1BhcmVudCBmcm9tICcuL21hbnVhbC9OZXR3b3JrUGFyZW50JztcbmltcG9ydCB7IGRlZmluZVRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4vbWFudWFsL1RyYW5zZm9ybSc7XG5pbXBvcnQgeyBkZWZpbmVBdWRpb1N0cmVhbUNvbXBvbmVudCB9IGZyb20gJy4vZXh0ZW5kZWQvQXVkaW9TdHJlYW0nO1xuaW1wb3J0IHsgTWVkaWFTdGF0ZSB9IGZyb20gJy4vZ2VuZXJhdGVkL3BiL2RlY2VudHJhbGFuZC9zZGsvY29tcG9uZW50cy9jb21tb24vbWVkaWFfc3RhdGUuZ2VuJztcbmltcG9ydCB7IGRlZmluZVZpcnR1YWxDYW1lcmFDb21wb25lbnQgfSBmcm9tICcuL2V4dGVuZGVkL1ZpcnR1YWxDYW1lcmEnO1xuaW1wb3J0IHsgZGVmaW5lSW5wdXRNb2RpZmllckNvbXBvbmVudCB9IGZyb20gJy4vZXh0ZW5kZWQvSW5wdXRNb2RpZmllcic7XG5leHBvcnQgKiBmcm9tICcuL2dlbmVyYXRlZC9pbmRleC5nZW4nO1xuLyogQF9fUFVSRV9fICovXG5leHBvcnQgY29uc3QgVHJhbnNmb3JtID0gKGVuZ2luZSkgPT4gZGVmaW5lVHJhbnNmb3JtQ29tcG9uZW50KGVuZ2luZSk7XG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBNYXRlcmlhbCA9IChlbmdpbmUpID0+IGRlZmluZU1hdGVyaWFsQ29tcG9uZW50KGVuZ2luZSk7XG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBBbmltYXRvciA9IChlbmdpbmUpID0+IGRlZmluZUFuaW1hdG9yQ29tcG9uZW50KGVuZ2luZSk7XG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBBdWRpb1NvdXJjZSA9IChlbmdpbmUpID0+IGRlZmluZUF1ZGlvU291cmNlQ29tcG9uZW50KGVuZ2luZSk7XG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBBdWRpb1N0cmVhbSA9IChlbmdpbmUpID0+IGRlZmluZUF1ZGlvU3RyZWFtQ29tcG9uZW50KGVuZ2luZSk7XG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBNZXNoUmVuZGVyZXIgPSAoZW5naW5lKSA9PiBkZWZpbmVNZXNoUmVuZGVyZXJDb21wb25lbnQoZW5naW5lKTtcbi8qIEBfX1BVUkVfXyAqL1xuZXhwb3J0IGNvbnN0IE1lc2hDb2xsaWRlciA9IChlbmdpbmUpID0+IGRlZmluZU1lc2hDb2xsaWRlckNvbXBvbmVudChlbmdpbmUpO1xuLyogQF9fUFVSRV9fICovXG5leHBvcnQgY29uc3QgVHdlZW4gPSAoZW5naW5lKSA9PiBkZWZpbmVUd2VlbkNvbXBvbmVudChlbmdpbmUpO1xuLyogQF9fUFVSRV9fICovXG5leHBvcnQgY29uc3QgVmlydHVhbENhbWVyYSA9IChlbmdpbmUpID0+IGRlZmluZVZpcnR1YWxDYW1lcmFDb21wb25lbnQoZW5naW5lKTtcbi8qIEBfX1BVUkVfXyovXG5leHBvcnQgY29uc3QgSW5wdXRNb2RpZmllciA9IChlbmdpbmUpID0+IGRlZmluZUlucHV0TW9kaWZpZXJDb21wb25lbnQoZW5naW5lKTtcbi8qKlxuICogQGFscGhhXG4gKi9cbi8qIEBfX1BVUkVfXyAqL1xuZXhwb3J0IGNvbnN0IE5hbWUgPSAoZW5naW5lKSA9PiBkZWZpbmVOYW1lQ29tcG9uZW50KGVuZ2luZSk7XG4vKipcbiAqIEBhbHBoYVxuICovXG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBTeW5jQ29tcG9uZW50cyA9IChlbmdpbmUpID0+IGRlZmluZVN5bmNDb21wb25lbnQoZW5naW5lKTtcbi8qKlxuICogQGFscGhhXG4gKi9cbi8qIEBfX1BVUkVfXyAqL1xuZXhwb3J0IGNvbnN0IE5ldHdvcmtFbnRpdHkgPSAoZW5naW5lKSA9PiBkZWZpbmVOZXR3b3JrRW50aXR5KGVuZ2luZSk7XG4vKipcbiAqIEBhbHBoYVxuICovXG4vKiBAX19QVVJFX18gKi9cbmV4cG9ydCBjb25zdCBOZXR3b3JrUGFyZW50ID0gKGVuZ2luZSkgPT4gZGVmaW5lTmV0d29ya1BhcmVudChlbmdpbmUpO1xuZXhwb3J0IHsgTWVkaWFTdGF0ZSB9O1xuIiwgIi8qKlxuICogQXV0b2dlbmVyYXRlZCBtYXBwaW5nIG9mIGNvcmUgY29tcG9uZW50cyB0byB0aGVpciBjb21wb25lbnQgbnVtYmVyc1xuICovXG5leHBvcnQgY29uc3QgY29yZUNvbXBvbmVudE1hcHBpbmdzID0ge1xuICAgIFwiY29yZTo6VHJhbnNmb3JtXCI6IDEsXG4gICAgXCJjb3JlOjpBbmltYXRvclwiOiAxMDQyLFxuICAgIFwiY29yZTo6QXVkaW9FdmVudFwiOiAxMTA1LFxuICAgIFwiY29yZTo6QXVkaW9Tb3VyY2VcIjogMTAyMCxcbiAgICBcImNvcmU6OkF1ZGlvU3RyZWFtXCI6IDEwMjEsXG4gICAgXCJjb3JlOjpBdmF0YXJBdHRhY2hcIjogMTA3MyxcbiAgICBcImNvcmU6OkF2YXRhckJhc2VcIjogMTA4NyxcbiAgICBcImNvcmU6OkF2YXRhckVtb3RlQ29tbWFuZFwiOiAxMDg4LFxuICAgIFwiY29yZTo6QXZhdGFyRXF1aXBwZWREYXRhXCI6IDEwOTEsXG4gICAgXCJjb3JlOjpBdmF0YXJNb2RpZmllckFyZWFcIjogMTA3MCxcbiAgICBcImNvcmU6OkF2YXRhclNoYXBlXCI6IDEwODAsXG4gICAgXCJjb3JlOjpCaWxsYm9hcmRcIjogMTA5MCxcbiAgICBcImNvcmU6OkNhbWVyYU1vZGVcIjogMTA3MixcbiAgICBcImNvcmU6OkNhbWVyYU1vZGVBcmVhXCI6IDEwNzEsXG4gICAgXCJjb3JlOjpFbmdpbmVJbmZvXCI6IDEwNDgsXG4gICAgXCJjb3JlOjpHbHRmQ29udGFpbmVyXCI6IDEwNDEsXG4gICAgXCJjb3JlOjpHbHRmQ29udGFpbmVyTG9hZGluZ1N0YXRlXCI6IDEwNDksXG4gICAgXCJjb3JlOjpJbnB1dE1vZGlmaWVyXCI6IDEwNzgsXG4gICAgXCJjb3JlOjpNYWluQ2FtZXJhXCI6IDEwNzUsXG4gICAgXCJjb3JlOjpNYXBQaW5cIjogMTA5NyxcbiAgICBcImNvcmU6Ok1hdGVyaWFsXCI6IDEwMTcsXG4gICAgXCJjb3JlOjpNZXNoQ29sbGlkZXJcIjogMTAxOSxcbiAgICBcImNvcmU6Ok1lc2hSZW5kZXJlclwiOiAxMDE4LFxuICAgIFwiY29yZTo6TmZ0U2hhcGVcIjogMTA0MCxcbiAgICBcImNvcmU6OlBsYXllcklkZW50aXR5RGF0YVwiOiAxMDg5LFxuICAgIFwiY29yZTo6UG9pbnRlckV2ZW50c1wiOiAxMDYyLFxuICAgIFwiY29yZTo6UG9pbnRlckV2ZW50c1Jlc3VsdFwiOiAxMDYzLFxuICAgIFwiY29yZTo6UG9pbnRlckxvY2tcIjogMTA3NCxcbiAgICBcImNvcmU6OlJheWNhc3RcIjogMTA2NyxcbiAgICBcImNvcmU6OlJheWNhc3RSZXN1bHRcIjogMTA2OCxcbiAgICBcImNvcmU6OlJlYWxtSW5mb1wiOiAxMTA2LFxuICAgIFwiY29yZTo6VGV4dFNoYXBlXCI6IDEwMzAsXG4gICAgXCJjb3JlOjpUd2VlblwiOiAxMTAyLFxuICAgIFwiY29yZTo6VHdlZW5TZXF1ZW5jZVwiOiAxMTA0LFxuICAgIFwiY29yZTo6VHdlZW5TdGF0ZVwiOiAxMTAzLFxuICAgIFwiY29yZTo6VWlCYWNrZ3JvdW5kXCI6IDEwNTMsXG4gICAgXCJjb3JlOjpVaUNhbnZhc0luZm9ybWF0aW9uXCI6IDEwNTQsXG4gICAgXCJjb3JlOjpVaURyb3Bkb3duXCI6IDEwOTQsXG4gICAgXCJjb3JlOjpVaURyb3Bkb3duUmVzdWx0XCI6IDEwOTYsXG4gICAgXCJjb3JlOjpVaUlucHV0XCI6IDEwOTMsXG4gICAgXCJjb3JlOjpVaUlucHV0UmVzdWx0XCI6IDEwOTUsXG4gICAgXCJjb3JlOjpVaVRleHRcIjogMTA1MixcbiAgICBcImNvcmU6OlVpVHJhbnNmb3JtXCI6IDEwNTAsXG4gICAgXCJjb3JlOjpWaWRlb0V2ZW50XCI6IDEwNDQsXG4gICAgXCJjb3JlOjpWaWRlb1BsYXllclwiOiAxMDQzLFxuICAgIFwiY29yZTo6VmlydHVhbENhbWVyYVwiOiAxMDc2LFxuICAgIFwiY29yZTo6VmlzaWJpbGl0eUNvbXBvbmVudFwiOiAxMDgxXG59O1xuIiwgImltcG9ydCB7IGNvcmVDb21wb25lbnRNYXBwaW5ncyB9IGZyb20gJy4vZ2VuZXJhdGVkL2NvbXBvbmVudC1uYW1lcy5nZW4nO1xuaW1wb3J0ICogYXMgdXRmOCBmcm9tICdAcHJvdG9idWZqcy91dGY4JztcbmltcG9ydCB7IHVuc2lnbmVkQ1JDMzIgfSBmcm9tICcuLi9ydW50aW1lL2NyYyc7XG4vLyBNYXggcG9zc2libGUgcHJlLWRlZmluZWQgKHN0YXRpYykgY29tcG9uZW50LlxuZXhwb3J0IGNvbnN0IE1BWF9TVEFUSUNfQ09NUE9ORU5UID0gMSA8PCAxMTsgLy8gMjA0OFxuLyoqXG4gKiBBbGwgY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcGFydCBvZiB0aGUgY29yZUNvbXBvbmVudE1hcHBpbmdzIE1VU1QgeWllbGRcbiAqIGEgY29tcG9uZW50TnVtYmVyIChjb21wb25lbnRJZCkgZ3JlYXRoZXIgdGhhbiBNQVhfU1RBVElDX0NPTVBPTkVOVC5cbiAqIEZvciB0aGF0IHJlYXNvbiwgd2Ugc2ltcGx5IGFkZCBNQVhfU1RBVElDX0NPTVBPTkVOVCBhbmQgdHJpbSB0byB0aGUgZG9tYWluIDJeMzJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudE51bWJlckZyb21OYW1lKGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoY29yZUNvbXBvbmVudE1hcHBpbmdzW2NvbXBvbmVudE5hbWVdKVxuICAgICAgICByZXR1cm4gY29yZUNvbXBvbmVudE1hcHBpbmdzW2NvbXBvbmVudE5hbWVdO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTI4KTtcbiAgICB1dGY4LndyaXRlKGNvbXBvbmVudE5hbWUsIGJ5dGVzLCAwKTtcbiAgICByZXR1cm4gKCh1bnNpZ25lZENSQzMyKGJ5dGVzKSArIE1BWF9TVEFUSUNfQ09NUE9ORU5UKSAmIDQyOTQ5NjcyOTUpID4+PiAwO1xufVxuIiwgImNvbnN0IENSQ19UQUJMRSA9IG5ldyBJbnQzMkFycmF5KFtcbiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweGVlMGU2MTJjLCAweDk5MDk1MWJhLCAweDA3NmRjNDE5LCAweDcwNmFmNDhmLCAweGU5NjNhNTM1LCAweDllNjQ5NWEzLCAweDBlZGI4ODMyLFxuICAgIDB4NzlkY2I4YTQsIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsIDB4OTBiZjFkOTEsIDB4MWRiNzEwNjQsIDB4NmFiMDIwZjIsXG4gICAgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSwgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNywgMHgxMzZjOTg1NiwgMHg2NDZiYThjMCwgMHhmZDYyZjk3YSxcbiAgICAweDhhNjVjOWVjLCAweDE0MDE1YzRmLCAweDYzMDY2Y2Q5LCAweGZhMGYzZDYzLCAweDhkMDgwZGY1LCAweDNiNmUyMGM4LCAweDRjNjkxMDVlLCAweGQ1NjA0MWU0LCAweGEyNjc3MTcyLFxuICAgIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsIDB4MzViNWE4ZmEsIDB4NDJiMjk4NmMsIDB4ZGJiYmM5ZDYsIDB4YWNiY2Y5NDAsIDB4MzJkODZjZTMsXG4gICAgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSwgMHgyNmQ5MzBhYywgMHg1MWRlMDAzYSwgMHhjOGQ3NTE4MCwgMHhiZmQwNjExNiwgMHgyMWI0ZjRiNSwgMHg1NmIzYzQyMyxcbiAgICAweGNmYmE5NTk5LCAweGI4YmRhNTBmLCAweDI4MDJiODllLCAweDVmMDU4ODA4LCAweGM2MGNkOWIyLCAweGIxMGJlOTI0LCAweDJmNmY3Yzg3LCAweDU4Njg0YzExLCAweGMxNjExZGFiLFxuICAgIDB4YjY2NjJkM2QsIDB4NzZkYzQxOTAsIDB4MDFkYjcxMDYsIDB4OThkMjIwYmMsIDB4ZWZkNTEwMmEsIDB4NzFiMTg1ODksIDB4MDZiNmI1MWYsIDB4OWZiZmU0YTUsIDB4ZThiOGQ0MzMsXG4gICAgMHg3ODA3YzlhMiwgMHgwZjAwZjkzNCwgMHg5NjA5YTg4ZSwgMHhlMTBlOTgxOCwgMHg3ZjZhMGRiYiwgMHgwODZkM2QyZCwgMHg5MTY0NmM5NywgMHhlNjYzNWMwMSwgMHg2YjZiNTFmNCxcbiAgICAweDFjNmM2MTYyLCAweDg1NjUzMGQ4LCAweGYyNjIwMDRlLCAweDZjMDY5NWVkLCAweDFiMDFhNTdiLCAweDgyMDhmNGMxLCAweGY1MGZjNDU3LCAweDY1YjBkOWM2LCAweDEyYjdlOTUwLFxuICAgIDB4OGJiZWI4ZWEsIDB4ZmNiOTg4N2MsIDB4NjJkZDFkZGYsIDB4MTVkYTJkNDksIDB4OGNkMzdjZjMsIDB4ZmJkNDRjNjUsIDB4NGRiMjYxNTgsIDB4M2FiNTUxY2UsIDB4YTNiYzAwNzQsXG4gICAgMHhkNGJiMzBlMiwgMHg0YWRmYTU0MSwgMHgzZGQ4OTVkNywgMHhhNGQxYzQ2ZCwgMHhkM2Q2ZjRmYiwgMHg0MzY5ZTk2YSwgMHgzNDZlZDlmYywgMHhhZDY3ODg0NiwgMHhkYTYwYjhkMCxcbiAgICAweDQ0MDQyZDczLCAweDMzMDMxZGU1LCAweGFhMGE0YzVmLCAweGRkMGQ3Y2M5LCAweDUwMDU3MTNjLCAweDI3MDI0MWFhLCAweGJlMGIxMDEwLCAweGM5MGMyMDg2LCAweDU3NjhiNTI1LFxuICAgIDB4MjA2Zjg1YjMsIDB4Yjk2NmQ0MDksIDB4Y2U2MWU0OWYsIDB4NWVkZWY5MGUsIDB4MjlkOWM5OTgsIDB4YjBkMDk4MjIsIDB4YzdkN2E4YjQsIDB4NTliMzNkMTcsIDB4MmViNDBkODEsXG4gICAgMHhiN2JkNWMzYiwgMHhjMGJhNmNhZCwgMHhlZGI4ODMyMCwgMHg5YWJmYjNiNiwgMHgwM2I2ZTIwYywgMHg3NGIxZDI5YSwgMHhlYWQ1NDczOSwgMHg5ZGQyNzdhZiwgMHgwNGRiMjYxNSxcbiAgICAweDczZGMxNjgzLCAweGUzNjMwYjEyLCAweDk0NjQzYjg0LCAweDBkNmQ2YTNlLCAweDdhNmE1YWE4LCAweGU0MGVjZjBiLCAweDkzMDlmZjlkLCAweDBhMDBhZTI3LCAweDdkMDc5ZWIxLFxuICAgIDB4ZjAwZjkzNDQsIDB4ODcwOGEzZDIsIDB4MWUwMWYyNjgsIDB4NjkwNmMyZmUsIDB4Zjc2MjU3NWQsIDB4ODA2NTY3Y2IsIDB4MTk2YzM2NzEsIDB4NmU2YjA2ZTcsIDB4ZmVkNDFiNzYsXG4gICAgMHg4OWQzMmJlMCwgMHgxMGRhN2E1YSwgMHg2N2RkNGFjYywgMHhmOWI5ZGY2ZiwgMHg4ZWJlZWZmOSwgMHgxN2I3YmU0MywgMHg2MGIwOGVkNSwgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSxcbiAgICAweDM4ZDhjMmM0LCAweDRmZGZmMjUyLCAweGQxYmI2N2YxLCAweGE2YmM1NzY3LCAweDNmYjUwNmRkLCAweDQ4YjIzNjRiLCAweGQ4MGQyYmRhLCAweGFmMGExYjRjLCAweDM2MDM0YWY2LFxuICAgIDB4NDEwNDdhNjAsIDB4ZGY2MGVmYzMsIDB4YTg2N2RmNTUsIDB4MzE2ZThlZWYsIDB4NDY2OWJlNzksIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsXG4gICAgMHhjYzBjNzc5NSwgMHhiYjBiNDcwMywgMHgyMjAyMTZiOSwgMHg1NTA1MjYyZiwgMHhjNWJhM2JiZSwgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNyxcbiAgICAweGI1ZDBjZjMxLCAweDJjZDk5ZThiLCAweDViZGVhZTFkLCAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLCAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLFxuICAgIDB4NzIwNzY3ODUsIDB4MDUwMDU3MTMsIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsXG4gICAgMHgwYmRiZGYyMSwgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MiwgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSwgMHgxOGI3NDc3NyxcbiAgICAweDg4MDg1YWU2LCAweGZmMGY2YTcwLCAweDY2MDYzYmNhLCAweDExMDEwYjVjLCAweDhmNjU5ZWZmLCAweGY4NjJhZTY5LCAweDYxNmJmZmQzLCAweDE2NmNjZjQ1LCAweGEwMGFlMjc4LFxuICAgIDB4ZDcwZGQyZWUsIDB4NGUwNDgzNTQsIDB4MzkwM2IzYzIsIDB4YTc2NzI2NjEsIDB4ZDA2MDE2ZjcsIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsIDB4YWVkMTZhNGEsIDB4ZDlkNjVhZGMsXG4gICAgMHg0MGRmMGI2NiwgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSwgMHhiZGJkZjIxYywgMHhjYWJhYzI4YSwgMHg1M2IzOTMzMCxcbiAgICAweDI0YjRhM2E2LCAweGJhZDAzNjA1LCAweGNkZDcwNjkzLCAweDU0ZGU1NzI5LCAweDIzZDk2N2JmLCAweGIzNjY3YTJlLCAweGM0NjE0YWI4LCAweDVkNjgxYjAyLCAweDJhNmYyYjk0LFxuICAgIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsIDB4MmQwMmVmOGRcbl0pO1xuZnVuY3Rpb24gX2NyYzMyKGJ1ZiwgcHJldmlvdXMpIHtcbiAgICBsZXQgY3JjID0gfn5wcmV2aW91cyBeIC0xO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgYnVmLmxlbmd0aDsgbisrKSB7XG4gICAgICAgIGNyYyA9IENSQ19UQUJMRVsoY3JjIF4gYnVmW25dKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiBjcmMgXiAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1bnNpZ25lZENSQzMyKGRhdGEsIHByZXYgPSAwKSB7XG4gICAgcmV0dXJuIF9jcmMzMihkYXRhLCBwcmV2KSA+Pj4gMDtcbn1cbiIsICIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuZXhwb3J0IGNvbnN0IF9fREVWX18gPSAodHlwZW9mIERFQlVHID09PSAnYm9vbGVhbicgJiYgREVCVUcpIHx8XG4gICAgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAocHJvY2Vzcy5lbnY/Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgfHwgcHJvY2Vzcy5lbnY/Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSkgfHxcbiAgICBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBjaGVja05vdFRoZW5hYmxlKHQsIGVycm9yKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKHQgJiYgdHlwZW9mIHQgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59XG4iLCAiLyoqXG4gKlxuICogQHJldHVybnMgYSBuZXcgR1NldFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmVyc2lvbkdTZXQoKSB7XG4gICAgY29uc3QgbGFzdFZlcnNpb24gPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBudW1iZXJcbiAgICAgICAgICogQHBhcmFtIHZlcnNpb25cbiAgICAgICAgICogQHJldHVybnNcbiAgICAgICAgICovXG4gICAgICAgIGFkZFRvKG51bWJlciwgdmVyc2lvbikge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgIGlmICh2ZXJzaW9uIDwgMCkge1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gbGFzdFZlcnNpb24uZ2V0KG51bWJlcik7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdmVyc2lvbiBpcyA+PSwgaXQgbWVhbnMgdGhlIHZhbHVlIGl0J3MgYWxyZWFkeSBpbiB0aGUgc2V0XG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlICE9PSB1bmRlZmluZWQgJiYgY3VycmVudFZhbHVlID49IHZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RWZXJzaW9uLnNldChudW1iZXIsIHZlcnNpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJucyB0aGUgc2V0IHdpdGggW251bWJlciwgdmVyc2lvbl0gb2YgZWFjaCB2YWx1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzKG4sIHYpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGxhc3RWZXJzaW9uLmdldChuKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSB2ZXJzaW9uIGlzID49LCBpdCBtZWFucyB0aGUgdmFsdWUgaXQncyBhbHJlYWR5IGluIHRoZSBzZXRcbiAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50VmFsdWUgPj0gdikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogV2FybmluZzogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZWZlcmVuY2UgdG8gdGhlIGludGVybmFsIG1hcCxcbiAgICAgICAgICogIGlmIHlvdSBuZWVkIHRvIG11dGF0ZSBzb21lIHZhbHVlLCBtYWtlIGEgY29weS5cbiAgICAgICAgICogRm9yIG9wdGltaXphdGlvbiBwdXJwb3NlIHRoZSBjb3B5IGlzbid0IG1hZGUgaGVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMgdGhlIG1hcCBvZiBudW1iZXIgdG8gdmVyc2lvblxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TWFwKCkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RWZXJzaW9uO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVWZXJzaW9uR1NldCB9IGZyb20gJy4uL3N5c3RlbXMvY3JkdC9nc2V0Jztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVTE2ID0gMHhmZmZmO1xuY29uc3QgTUFTS19VUFBFUl8xNl9PTl8zMiA9IDB4ZmZmZjAwMDA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQU1PVU5UX1ZFUlNJT05fQVZBSUxBQkxFID0gTUFYX1UxNiArIDE7XG4vLyBUaGlzIHR5cGUgbWF0Y2hlcyB3aXRoIEBkY2wvY3JkdCBlbnRpdHkgdHlwZS5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfRU5USVRZX05VTUJFUiA9IE1BWF9VMTY7XG4vKipcbiAqIFRoaXMgZmlyc3QgNTEyIGVudGl0aWVzIGFyZSByZXNlcnZlZCBieSB0aGUgcmVuZGVyZXJcbiAqL1xuZXhwb3J0IGNvbnN0IFJFU0VSVkVEX1NUQVRJQ19FTlRJVElFUyA9IDUxMjtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIEVudGl0eVV0aWxzO1xuKGZ1bmN0aW9uIChFbnRpdHlVdGlscykge1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFtlbnRpdHlOdW1iZXIsIGVudGl0eVZlcnNpb25dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUVudGl0eUlkKGVudGl0eUlkKSB7XG4gICAgICAgIHJldHVybiBbKGVudGl0eUlkICYgTUFYX1UxNikgPj4+IDAsICgoKGVudGl0eUlkICYgTUFTS19VUFBFUl8xNl9PTl8zMikgPj4gMTYpICYgTUFYX1UxNikgPj4+IDBdO1xuICAgIH1cbiAgICBFbnRpdHlVdGlscy5mcm9tRW50aXR5SWQgPSBmcm9tRW50aXR5SWQ7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgY29tcG91bmQgbnVtYmVyIGZyb20gZW50aXR5TnVtYmVyIGFuZCBlbnRpdHlWZXJpc29uXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9FbnRpdHlJZChlbnRpdHlOdW1iZXIsIGVudGl0eVZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuICgoKGVudGl0eU51bWJlciAmIE1BWF9VMTYpIHwgKChlbnRpdHlWZXJzaW9uICYgTUFYX1UxNikgPDwgMTYpKSA+Pj4gMCk7XG4gICAgfVxuICAgIEVudGl0eVV0aWxzLnRvRW50aXR5SWQgPSB0b0VudGl0eUlkO1xufSkoRW50aXR5VXRpbHMgfHwgKEVudGl0eVV0aWxzID0ge30pKTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIEVudGl0eVN0YXRlO1xuKGZ1bmN0aW9uIChFbnRpdHlTdGF0ZSkge1xuICAgIEVudGl0eVN0YXRlW0VudGl0eVN0YXRlW1wiVW5rbm93blwiXSA9IDBdID0gXCJVbmtub3duXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGVudGl0eSB3YXMgZ2VuZXJhdGVkIGFuZCBhZGRlZCB0byB0aGUgdXNlZEVudGl0aWVzIHNldFxuICAgICAqL1xuICAgIEVudGl0eVN0YXRlW0VudGl0eVN0YXRlW1wiVXNlZEVudGl0eVwiXSA9IDFdID0gXCJVc2VkRW50aXR5XCI7XG4gICAgLyoqXG4gICAgICogVGhlIGVudGl0eSB3YXMgcmVtb3ZlZCBmcm9tIGN1cnJlbnQgZW5naW5lIG9yIHJlbW90ZWx5XG4gICAgICovXG4gICAgRW50aXR5U3RhdGVbRW50aXR5U3RhdGVbXCJSZW1vdmVkXCJdID0gMl0gPSBcIlJlbW92ZWRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgZW50aXR5IGlzIHJlc2VydmVkIG51bWJlci5cbiAgICAgKi9cbiAgICBFbnRpdHlTdGF0ZVtFbnRpdHlTdGF0ZVtcIlJlc2VydmVkXCJdID0gM10gPSBcIlJlc2VydmVkXCI7XG59KShFbnRpdHlTdGF0ZSB8fCAoRW50aXR5U3RhdGUgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnRpdHlDb250YWluZXIob3B0cykge1xuICAgIGNvbnN0IHJlc2VydmVkU3RhdGljRW50aXRpZXMgPSBvcHRzPy5yZXNlcnZlZFN0YXRpY0VudGl0aWVzID8/IFJFU0VSVkVEX1NUQVRJQ19FTlRJVElFUztcbiAgICAvLyBMb2NhbCBlbnRpdGllcyBjb3VudGVyXG4gICAgbGV0IGVudGl0eUNvdW50ZXIgPSByZXNlcnZlZFN0YXRpY0VudGl0aWVzO1xuICAgIGNvbnN0IHVzZWRFbnRpdGllcyA9IG5ldyBTZXQoKTtcbiAgICBsZXQgdG9SZW1vdmVFbnRpdGllcyA9IFtdO1xuICAgIGNvbnN0IHJlbW92ZWRFbnRpdGllcyA9IGNyZWF0ZVZlcnNpb25HU2V0KCk7XG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVOZXdFbnRpdHkoKSB7XG4gICAgICAgIGlmIChlbnRpdHlDb3VudGVyID4gTUFYX0VOVElUWV9OVU1CRVIgLSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEl0IGZhaWxzIHRyeWluZyB0byBnZW5lcmF0ZSBhbiBlbnRpdHkgb3V0IG9mIHJhbmdlICR7TUFYX0VOVElUWV9OVU1CRVJ9LmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVudGl0eU51bWJlciA9IGVudGl0eUNvdW50ZXIrKztcbiAgICAgICAgY29uc3QgZW50aXR5VmVyc2lvbiA9IHJlbW92ZWRFbnRpdGllcy5nZXRNYXAoKS5oYXMoZW50aXR5TnVtYmVyKVxuICAgICAgICAgICAgPyByZW1vdmVkRW50aXRpZXMuZ2V0TWFwKCkuZ2V0KGVudGl0eU51bWJlcikgKyAxXG4gICAgICAgICAgICA6IDA7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IEVudGl0eVV0aWxzLnRvRW50aXR5SWQoZW50aXR5TnVtYmVyLCBlbnRpdHlWZXJzaW9uKTtcbiAgICAgICAgaWYgKHVzZWRFbnRpdGllcy5oYXMoZW50aXR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlTmV3RW50aXR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlZEVudGl0aWVzLmFkZChlbnRpdHkpO1xuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUVudGl0eSgpIHtcbiAgICAgICAgY29uc3QgdXNlZFNpemUgPSB1c2VkRW50aXRpZXMuc2l6ZTtcbiAgICAgICAgLy8gSWYgYWxsIGVudGl0aWVzIHVudGlsIGBlbnRpdHlDb3VudGVyYCBhcmUgYmVpbmcgdXNlZCwgd2UgbmVlZCB0byBnZW5lcmF0ZSBhbm90aGVyIG9uZVxuICAgICAgICBpZiAodXNlZFNpemUgKyByZXNlcnZlZFN0YXRpY0VudGl0aWVzID49IGVudGl0eUNvdW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZU5ld0VudGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW251bWJlciwgdmVyc2lvbl0gb2YgcmVtb3ZlZEVudGl0aWVzLmdldE1hcCgpKSB7XG4gICAgICAgICAgICBpZiAodmVyc2lvbiA8IE1BWF9VMTYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHkgPSBFbnRpdHlVdGlscy50b0VudGl0eUlkKG51bWJlciwgdmVyc2lvbiArIDEpO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBlbnRpdHkgaXMgbm90IGJlaW5nIHVzZWQsIHdlIGNhbiByZS11c2UgaXRcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZW50aXR5IHdhcyByZW1vdmVkIGluIHRoaXMgdGljaywgd2UncmUgbm90IGNvdW50aW5nIGZvciB0aGUgdXNlZEVudGl0aWVzLCBidXQgd2UgaGF2ZSBpdCBpbiB0aGUgdG9SZW1vdmVFbnRpdHlBcnJheVxuICAgICAgICAgICAgICAgIGlmICghdXNlZEVudGl0aWVzLmhhcyhlbnRpdHkpICYmICF0b1JlbW92ZUVudGl0aWVzLmluY2x1ZGVzKGVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlZEVudGl0aWVzLmFkZChlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVOZXdFbnRpdHkoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlRW50aXR5KGVudGl0eSkge1xuICAgICAgICBpZiAoZW50aXR5IDwgcmVzZXJ2ZWRTdGF0aWNFbnRpdGllcylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHVzZWRFbnRpdGllcy5oYXMoZW50aXR5KSkge1xuICAgICAgICAgICAgdXNlZEVudGl0aWVzLmRlbGV0ZShlbnRpdHkpO1xuICAgICAgICAgICAgdG9SZW1vdmVFbnRpdGllcy5wdXNoKGVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVSZW1vdmVkRW50aXR5KGVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGVhc2VSZW1vdmVkRW50aXRpZXMoKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRvUmVtb3ZlRW50aXRpZXM7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0b1JlbW92ZUVudGl0aWVzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBhcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbbiwgdl0gPSBFbnRpdHlVdGlscy5mcm9tRW50aXR5SWQoZW50aXR5KTtcbiAgICAgICAgICAgICAgICByZW1vdmVkRW50aXRpZXMuYWRkVG8obiwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlUmVtb3ZlZEVudGl0eShlbnRpdHkpIHtcbiAgICAgICAgY29uc3QgW24sIHZdID0gRW50aXR5VXRpbHMuZnJvbUVudGl0eUlkKGVudGl0eSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtb3ZlZCBlbnRpdGllcyBtYXBcbiAgICAgICAgcmVtb3ZlZEVudGl0aWVzLmFkZFRvKG4sIHYpO1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHVzZWRFbnRpdGllcyBpZiBleGlzdFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSB2OyBpKyspIHtcbiAgICAgICAgICAgIHVzZWRFbnRpdGllcy5kZWxldGUoRW50aXR5VXRpbHMudG9FbnRpdHlJZChuLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVVzZWRFbnRpdHkoZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IFtuLCB2XSA9IEVudGl0eVV0aWxzLmZyb21FbnRpdHlJZChlbnRpdHkpO1xuICAgICAgICAvLyBpZiB0aGUgZW50aXR5IHdhcyByZW1vdmVkIHRoZW4gYWJvcnQgZmFzdFxuICAgICAgICBpZiAocmVtb3ZlZEVudGl0aWVzLmhhcyhuLCB2KSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gVXBkYXRlXG4gICAgICAgIGlmICh2ID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdiAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIHVzZWRFbnRpdGllcy5kZWxldGUoRW50aXR5VXRpbHMudG9FbnRpdHlJZChuLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVkRW50aXRpZXMuYWRkVG8obiwgdiAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHVzZWRFbnRpdGllcy5hZGQoZW50aXR5KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEVudGl0eVN0YXRlKGVudGl0eSkge1xuICAgICAgICBjb25zdCBbbiwgdl0gPSBFbnRpdHlVdGlscy5mcm9tRW50aXR5SWQoZW50aXR5KTtcbiAgICAgICAgaWYgKG4gPCByZXNlcnZlZFN0YXRpY0VudGl0aWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuUmVzZXJ2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZWRFbnRpdGllcy5oYXMoZW50aXR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIEVudGl0eVN0YXRlLlVzZWRFbnRpdHk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtb3ZlZFZlcnNpb24gPSByZW1vdmVkRW50aXRpZXMuZ2V0TWFwKCkuZ2V0KG4pO1xuICAgICAgICBpZiAocmVtb3ZlZFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZW1vdmVkVmVyc2lvbiA+PSB2KSB7XG4gICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuUmVtb3ZlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuVW5rbm93bjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2VuZXJhdGVFbnRpdHksXG4gICAgICAgIHJlbW92ZUVudGl0eSxcbiAgICAgICAgZ2V0RXhpc3RpbmdFbnRpdGllcygpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2V0KHVzZWRFbnRpdGllcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEVudGl0eVN0YXRlLFxuICAgICAgICByZWxlYXNlUmVtb3ZlZEVudGl0aWVzLFxuICAgICAgICB1cGRhdGVSZW1vdmVkRW50aXR5LFxuICAgICAgICB1cGRhdGVVc2VkRW50aXR5XG4gICAgfTtcbn1cbiIsICJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3dvQWRkLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZDtcbmltcG9ydCAqIGFzIHV0ZjggZnJvbSAnQHByb3RvYnVmanMvdXRmOCc7XG4vKipcbiAqIFRha2UgdGhlIG1heCBiZXR3ZWVuIGN1cnJlbnRTaXplIGFuZCBpbnRlbmRlZFNpemUgYW5kIHRoZW4gcGx1cyAxMDI0LiBUaGVuLFxuICogIGZpbmQgdGhlIG5leHQgbmVhcmVyIG11bHRpcGxlIG9mIDEwMjQuXG4gKiBAcGFyYW0gY3VycmVudFNpemUgLSBudW1iZXJcbiAqIEBwYXJhbSBpbnRlbmRlZFNpemUgLSBudW1iZXJcbiAqIEByZXR1cm5zIHRoZSBjYWxjdWxhdGVkIG51bWJlclxuICovXG5mdW5jdGlvbiBnZXROZXh0U2l6ZShjdXJyZW50U2l6ZSwgaW50ZW5kZWRTaXplKSB7XG4gICAgY29uc3QgbWluTmV3U2l6ZSA9IE1hdGgubWF4KGN1cnJlbnRTaXplLCBpbnRlbmRlZFNpemUpICsgMTAyNDtcbiAgICByZXR1cm4gTWF0aC5jZWlsKG1pbk5ld1NpemUgLyAxMDI0KSAqIDEwMjQ7XG59XG5jb25zdCBkZWZhdWx0SW5pdGlhbENhcGFjaXR5ID0gMTAyNDA7XG4vKipcbiAqIEJ5dGVCdWZmZXIgaXMgYSB3cmFwcGVyIG9mIERhdGFWaWV3IHdoaWNoIGFsc28gYWRkcyBhIHJlYWQgYW5kIHdyaXRlIG9mZnNldC5cbiAqICBBbHNvIGluIGEgd3JpdGUgb3BlcmF0aW9uIGl0IHJlc2l6ZXMgdGhlIGJ1ZmZlciBpcyBiZWluZyB1c2VkIGlmIGl0IG5lZWRzLlxuICpcbiAqIC0gVXNlIHJlYWQgYW5kIHdyaXRlIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIG9yIGNvbnN1bWUgZGF0YS5cbiAqIC0gVXNlIHNldCBhbmQgZ2V0IG9ubHkgaWYgeW91IGFyZSBzdXJlIHRoYXQgeW91J3JlIGRvaW5nLlxuICpcbiAqIEl0IGFsd2F5cyBwYXNzZXMgbGl0dGxlRW5kaWFuIHBhcmFtIGFzIHRydWVcbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWRXcml0ZUJ5dGVCdWZmZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBidWZmZXIgLSBUaGUgaW5pdGlhbCBidWZmZXIsIHByb3ZpZGUgYSBidWZmZXIgaWYgeW91IG5lZWQgdG8gc2V0IFwiaW5pdGlhbCBjYXBhY2l0eVwiXG4gICAgICogQHBhcmFtIHJlYWRpbmdPZmZzZXQgLSBTZXQgdGhlIGN1cnNvciB3aGVyZSBiZWdpbnMgdG8gcmVhZC4gRGVmYXVsdCAwXG4gICAgICogQHBhcmFtIHdyaXRpbmdPZmZzZXQgLSBTZXQgdGhlIGN1cnNvciB0byBub3Qgc3RhcnQgd3JpdGluZyBmcm9tIHRoZSBiZWdpbiBvZiBpdC4gRGVmYXVsdHMgdG8gdGhlIGJ1ZmZlciBzaXplXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYnVmZmVyLCByZWFkaW5nT2Zmc2V0LCB3cml0aW5nT2Zmc2V0KSB7XG4gICAgICAgIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlciB8fCBuZXcgVWludDhBcnJheShkZWZhdWx0SW5pdGlhbENhcGFjaXR5KTtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J1ZmZlci5idWZmZXIsIHRoaXMuX2J1ZmZlci5ieXRlT2Zmc2V0KTtcbiAgICAgICAgdGhpcy53b2Zmc2V0ID0gd3JpdGluZ09mZnNldCA/PyAoYnVmZmVyID8gdGhpcy5fYnVmZmVyLmxlbmd0aCA6IG51bGwpID8/IDA7XG4gICAgICAgIHRoaXMucm9mZnNldCA9IHJlYWRpbmdPZmZzZXQgPz8gMDtcbiAgICB9XG4gICAgYnVmZmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyO1xuICAgIH1cbiAgICBidWZmZXJMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICByZXNldEJ1ZmZlcigpIHtcbiAgICAgICAgdGhpcy5yb2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy53b2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgY3VycmVudFJlYWRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvZmZzZXQ7XG4gICAgfVxuICAgIGN1cnJlbnRXcml0ZU9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud29mZnNldDtcbiAgICB9XG4gICAgaW5jcmVtZW50UmVhZE9mZnNldChhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgYW1vdW50KTtcbiAgICB9XG4gICAgcmVtYWluaW5nQnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndvZmZzZXQgLSB0aGlzLnJvZmZzZXQ7XG4gICAgfVxuICAgIHJlYWRGbG9hdDMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldEZsb2F0MzIoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZCkuY2FsbCh0aGlzLCA0KSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgcmVhZEZsb2F0NjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0RmxvYXQ2NChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3JvQWRkKS5jYWxsKHRoaXMsIDgpLCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICByZWFkSW50OCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRJbnQ4KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgMSkpO1xuICAgIH1cbiAgICByZWFkSW50MTYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0SW50MTYoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZCkuY2FsbCh0aGlzLCAyKSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgcmVhZEludDMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldEludDMyKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgNCksIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHJlYWRJbnQ2NCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRCaWdJbnQ2NChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3JvQWRkKS5jYWxsKHRoaXMsIDgpLCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICByZWFkVWludDgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDgoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZCkuY2FsbCh0aGlzLCAxKSk7XG4gICAgfVxuICAgIHJlYWRVaW50MTYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDE2KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgMiksIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHJlYWRVaW50MzIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDMyKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgNCksIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHJlYWRVaW50NjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0QmlnVWludDY0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgOCksIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHJlYWRCdWZmZXIoKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMudmlldy5nZXRVaW50MzIoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZCkuY2FsbCh0aGlzLCA0KSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5zdWJhcnJheShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3JvQWRkKS5jYWxsKHRoaXMsIGxlbmd0aCksIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQpLmNhbGwodGhpcywgMCkpO1xuICAgIH1cbiAgICByZWFkVXRmOFN0cmluZygpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy52aWV3LmdldFVpbnQzMihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3JvQWRkKS5jYWxsKHRoaXMsIDQpLCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgICAgICByZXR1cm4gdXRmOC5yZWFkKHRoaXMuX2J1ZmZlciwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZCkuY2FsbCh0aGlzLCBsZW5ndGgpLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3JvQWRkKS5jYWxsKHRoaXMsIDApKTtcbiAgICB9XG4gICAgaW5jcmVtZW50V3JpdGVPZmZzZXQoYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3dvQWRkKS5jYWxsKHRoaXMsIGFtb3VudCk7XG4gICAgfVxuICAgIHRvQmluYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLnN1YmFycmF5KDAsIHRoaXMud29mZnNldCk7XG4gICAgfVxuICAgIHRvQ29waWVkQmluYXJ5KCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy50b0JpbmFyeSgpKTtcbiAgICB9XG4gICAgd3JpdGVCdWZmZXIodmFsdWUsIHdyaXRlTGVuZ3RoID0gdHJ1ZSkge1xuICAgICAgICBpZiAod3JpdGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVVaW50MzIodmFsdWUuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfd29BZGQpLmNhbGwodGhpcywgdmFsdWUuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlci5zZXQodmFsdWUsIG8pO1xuICAgIH1cbiAgICB3cml0ZVV0ZjhTdHJpbmcodmFsdWUsIHdyaXRlTGVuZ3RoID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBieXRlTGVuZ3RoID0gdXRmOC5sZW5ndGgodmFsdWUpO1xuICAgICAgICBpZiAod3JpdGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVVaW50MzIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfd29BZGQpLmNhbGwodGhpcywgYnl0ZUxlbmd0aCk7XG4gICAgICAgIHV0Zjgud3JpdGUodmFsdWUsIHRoaXMuX2J1ZmZlciwgbyk7XG4gICAgfVxuICAgIHdyaXRlRmxvYXQzMih2YWx1ZSkge1xuICAgICAgICBjb25zdCBvID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl93b0FkZCkuY2FsbCh0aGlzLCA0KTtcbiAgICAgICAgdGhpcy52aWV3LnNldEZsb2F0MzIobywgdmFsdWUsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHdyaXRlRmxvYXQ2NCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl93b0FkZCkuY2FsbCh0aGlzLCA4KTtcbiAgICAgICAgdGhpcy52aWV3LnNldEZsb2F0NjQobywgdmFsdWUsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHdyaXRlSW50OCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl93b0FkZCkuY2FsbCh0aGlzLCAxKTtcbiAgICAgICAgdGhpcy52aWV3LnNldEludDgobywgdmFsdWUpO1xuICAgIH1cbiAgICB3cml0ZUludDE2KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG8gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3dvQWRkKS5jYWxsKHRoaXMsIDIpO1xuICAgICAgICB0aGlzLnZpZXcuc2V0SW50MTYobywgdmFsdWUsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHdyaXRlSW50MzIodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfd29BZGQpLmNhbGwodGhpcywgNCk7XG4gICAgICAgIHRoaXMudmlldy5zZXRJbnQzMihvLCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgd3JpdGVJbnQ2NCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl93b0FkZCkuY2FsbCh0aGlzLCA4KTtcbiAgICAgICAgdGhpcy52aWV3LnNldEJpZ0ludDY0KG8sIHZhbHVlLCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICB3cml0ZVVpbnQ4KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG8gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3dvQWRkKS5jYWxsKHRoaXMsIDEpO1xuICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgobywgdmFsdWUpO1xuICAgIH1cbiAgICB3cml0ZVVpbnQxNih2YWx1ZSkge1xuICAgICAgICBjb25zdCBvID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl93b0FkZCkuY2FsbCh0aGlzLCAyKTtcbiAgICAgICAgdGhpcy52aWV3LnNldFVpbnQxNihvLCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgd3JpdGVVaW50MzIodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfd29BZGQpLmNhbGwodGhpcywgNCk7XG4gICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIobywgdmFsdWUsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHdyaXRlVWludDY0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG8gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX2luc3RhbmNlcywgXCJtXCIsIF9SZWFkV3JpdGVCeXRlQnVmZmVyX3dvQWRkKS5jYWxsKHRoaXMsIDgpO1xuICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KG8sIHZhbHVlLCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICAvLyBEYXRhVmlldyBQcm94eVxuICAgIGdldEZsb2F0MzIob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0RmxvYXQzMihvZmZzZXQsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIGdldEZsb2F0NjQob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0RmxvYXQ2NChvZmZzZXQsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIGdldEludDgob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0SW50OChvZmZzZXQpO1xuICAgIH1cbiAgICBnZXRJbnQxNihvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRJbnQxNihvZmZzZXQsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIGdldEludDMyKG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldEludDMyKG9mZnNldCwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgZ2V0SW50NjQob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0QmlnSW50NjQob2Zmc2V0LCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICBnZXRVaW50OChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50OChvZmZzZXQpO1xuICAgIH1cbiAgICBnZXRVaW50MTYob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDE2KG9mZnNldCwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgZ2V0VWludDMyKG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldFVpbnQzMihvZmZzZXQsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlID4+PiAwXG4gICAgfVxuICAgIGdldFVpbnQ2NChvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRCaWdVaW50NjQob2Zmc2V0LCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICBzZXRGbG9hdDMyKG9mZnNldCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy52aWV3LnNldEZsb2F0MzIob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgc2V0RmxvYXQ2NChvZmZzZXQsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmlldy5zZXRGbG9hdDY0KG9mZnNldCwgdmFsdWUsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxuICAgIHNldEludDgob2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcuc2V0SW50OChvZmZzZXQsIHZhbHVlKTtcbiAgICB9XG4gICAgc2V0SW50MTYob2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcuc2V0SW50MTYob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgc2V0SW50MzIob2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcuc2V0SW50MzIob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgc2V0SW50NjQob2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcuc2V0QmlnSW50NjQob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgc2V0VWludDgob2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0LCB2YWx1ZSk7XG4gICAgfVxuICAgIHNldFVpbnQxNihvZmZzZXQsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmlldy5zZXRVaW50MTYob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7IC8vIGxpdHRsZUVuZGlhbiA9IHRydWVcbiAgICB9XG4gICAgc2V0VWludDMyKG9mZnNldCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihvZmZzZXQsIHZhbHVlLCB0cnVlKTsgLy8gbGl0dGxlRW5kaWFuID0gdHJ1ZVxuICAgIH1cbiAgICBzZXRVaW50NjQob2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KG9mZnNldCwgdmFsdWUsIHRydWUpOyAvLyBsaXR0bGVFbmRpYW4gPSB0cnVlXG4gICAgfVxufVxuX1JlYWRXcml0ZUJ5dGVCdWZmZXJfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfd29BZGQgPSBmdW5jdGlvbiBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl93b0FkZChhbW91bnQpIHtcbiAgICBpZiAodGhpcy53b2Zmc2V0ICsgYW1vdW50ID4gdGhpcy5fYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbmV3c2l6ZSA9IGdldE5leHRTaXplKHRoaXMuX2J1ZmZlci5ieXRlTGVuZ3RoLCB0aGlzLndvZmZzZXQgKyBhbW91bnQpO1xuICAgICAgICBjb25zdCBuZXdCdWZmZXIgPSBuZXcgVWludDhBcnJheShuZXdzaXplKTtcbiAgICAgICAgbmV3QnVmZmVyLnNldCh0aGlzLl9idWZmZXIpO1xuICAgICAgICBjb25zdCBvbGRPZmZzZXQgPSB0aGlzLl9idWZmZXIuYnl0ZU9mZnNldDtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3QnVmZmVyO1xuICAgICAgICB0aGlzLnZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnVmZmVyLmJ1ZmZlciwgb2xkT2Zmc2V0KTtcbiAgICB9XG4gICAgdGhpcy53b2Zmc2V0ICs9IGFtb3VudDtcbiAgICByZXR1cm4gdGhpcy53b2Zmc2V0IC0gYW1vdW50O1xufSwgX1JlYWRXcml0ZUJ5dGVCdWZmZXJfcm9BZGQgPSBmdW5jdGlvbiBfUmVhZFdyaXRlQnl0ZUJ1ZmZlcl9yb0FkZChhbW91bnQpIHtcbiAgICBpZiAodGhpcy5yb2Zmc2V0ICsgYW1vdW50ID4gdGhpcy53b2Zmc2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignT3V0c2lkZSBvZiB0aGUgYm91bmRzIG9mIHdyaXRlbiBkYXRhLicpO1xuICAgIH1cbiAgICB0aGlzLnJvZmZzZXQgKz0gYW1vdW50O1xuICAgIHJldHVybiB0aGlzLnJvZmZzZXQgLSBhbW91bnQ7XG59O1xuIiwgIi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIENyZHRNZXNzYWdlVHlwZTtcbihmdW5jdGlvbiAoQ3JkdE1lc3NhZ2VUeXBlKSB7XG4gICAgQ3JkdE1lc3NhZ2VUeXBlW0NyZHRNZXNzYWdlVHlwZVtcIlJFU0VSVkVEXCJdID0gMF0gPSBcIlJFU0VSVkVEXCI7XG4gICAgLy8gQ29tcG9uZW50IE9wZXJhdGlvblxuICAgIENyZHRNZXNzYWdlVHlwZVtDcmR0TWVzc2FnZVR5cGVbXCJQVVRfQ09NUE9ORU5UXCJdID0gMV0gPSBcIlBVVF9DT01QT05FTlRcIjtcbiAgICBDcmR0TWVzc2FnZVR5cGVbQ3JkdE1lc3NhZ2VUeXBlW1wiREVMRVRFX0NPTVBPTkVOVFwiXSA9IDJdID0gXCJERUxFVEVfQ09NUE9ORU5UXCI7XG4gICAgQ3JkdE1lc3NhZ2VUeXBlW0NyZHRNZXNzYWdlVHlwZVtcIkRFTEVURV9FTlRJVFlcIl0gPSAzXSA9IFwiREVMRVRFX0VOVElUWVwiO1xuICAgIENyZHRNZXNzYWdlVHlwZVtDcmR0TWVzc2FnZVR5cGVbXCJBUFBFTkRfVkFMVUVcIl0gPSA0XSA9IFwiQVBQRU5EX1ZBTFVFXCI7XG4gICAgLy8gTmV0d29yayBvcGVyYXRpb25zXG4gICAgQ3JkdE1lc3NhZ2VUeXBlW0NyZHRNZXNzYWdlVHlwZVtcIlBVVF9DT01QT05FTlRfTkVUV09SS1wiXSA9IDVdID0gXCJQVVRfQ09NUE9ORU5UX05FVFdPUktcIjtcbiAgICBDcmR0TWVzc2FnZVR5cGVbQ3JkdE1lc3NhZ2VUeXBlW1wiREVMRVRFX0NPTVBPTkVOVF9ORVRXT1JLXCJdID0gNl0gPSBcIkRFTEVURV9DT01QT05FTlRfTkVUV09SS1wiO1xuICAgIENyZHRNZXNzYWdlVHlwZVtDcmR0TWVzc2FnZVR5cGVbXCJERUxFVEVfRU5USVRZX05FVFdPUktcIl0gPSA3XSA9IFwiREVMRVRFX0VOVElUWV9ORVRXT1JLXCI7XG4gICAgQ3JkdE1lc3NhZ2VUeXBlW0NyZHRNZXNzYWdlVHlwZVtcIk1BWF9NRVNTQUdFX1RZUEVcIl0gPSA4XSA9IFwiTUFYX01FU1NBR0VfVFlQRVwiO1xufSkoQ3JkdE1lc3NhZ2VUeXBlIHx8IChDcmR0TWVzc2FnZVR5cGUgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCA9IDg7XG5leHBvcnQgdmFyIFByb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZTtcbihmdW5jdGlvbiAoUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlKSB7XG4gICAgLyoqXG4gICAgICogVHlwaWNhbCBtZXNzYWdlIGFuZCBuZXcgc3RhdGUgc2V0LlxuICAgICAqIEBzdGF0ZSBDSEFOR0VcbiAgICAgKiBAcmVhc29uIEluY29taW5nIG1lc3NhZ2UgaGFzIGEgdGltZXN0YW1wIGdyZWF0ZXJcbiAgICAgKi9cbiAgICBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGVbUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlW1wiU3RhdGVVcGRhdGVkVGltZXN0YW1wXCJdID0gMV0gPSBcIlN0YXRlVXBkYXRlZFRpbWVzdGFtcFwiO1xuICAgIC8qKlxuICAgICAqIFR5cGljYWwgbWVzc2FnZSB3aGVuIGl0IGlzIGNvbnNpZGVyZWQgb2xkLlxuICAgICAqIEBzdGF0ZSBpdCBkb2VzIE5PVCBDSEFOR0UuXG4gICAgICogQHJlYXNvbiBpbmNvbWluZyBtZXNzYWdlIGhhcyBhIHRpbWVzdGFtcCBsb3dlci5cbiAgICAgKi9cbiAgICBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGVbUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlW1wiU3RhdGVPdXRkYXRlZFRpbWVzdGFtcFwiXSA9IDJdID0gXCJTdGF0ZU91dGRhdGVkVGltZXN0YW1wXCI7XG4gICAgLyoqXG4gICAgICogV2VpcmQgbWVzc2FnZSwgc2FtZSB0aW1lc3RhbXAgYW5kIGRhdGEuXG4gICAgICogQHN0YXRlIGl0IGRvZXMgTk9UIENIQU5HRS5cbiAgICAgKiBAcmVhc29uIGNvbnNpc3RlbnQgc3RhdGUgYmV0d2VlbiBwZWVycy5cbiAgICAgKi9cbiAgICBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGVbUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlW1wiTm9DaGFuZ2VzXCJdID0gM10gPSBcIk5vQ2hhbmdlc1wiO1xuICAgIC8qKlxuICAgICAqIExlc3MgYnV0IHR5cGljYWwgbWVzc2FnZSwgc2FtZSB0aW1lc3RhbXAsIHJlc29sdXRpb24gYnkgZGF0YS5cbiAgICAgKiBAc3RhdGUgaXQgZG9lcyBOT1QgQ0hBTkdFLlxuICAgICAqIEByZWFzb24gaW5jb21pbmcgbWVzc2FnZSBoYXMgYSBMT1dFUiBkYXRhLlxuICAgICAqL1xuICAgIFByb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZVtQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGVbXCJTdGF0ZU91dGRhdGVkRGF0YVwiXSA9IDRdID0gXCJTdGF0ZU91dGRhdGVkRGF0YVwiO1xuICAgIC8qKlxuICAgICAqIExlc3MgYnV0IHR5cGljYWwgbWVzc2FnZSwgc2FtZSB0aW1lc3RhbXAsIHJlc29sdXRpb24gYnkgZGF0YS5cbiAgICAgKiBAc3RhdGUgQ0hBTkdFLlxuICAgICAqIEByZWFzb24gaW5jb21pbmcgbWVzc2FnZSBoYXMgYSBHUkVBVEVSIGRhdGEuXG4gICAgICovXG4gICAgUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlW1Byb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZVtcIlN0YXRlVXBkYXRlZERhdGFcIl0gPSA1XSA9IFwiU3RhdGVVcGRhdGVkRGF0YVwiO1xuICAgIC8qKlxuICAgICAqIEVudGl0eSB3YXMgcHJldmlvdXNseSBkZWxldGVkLlxuICAgICAqIEBzdGF0ZSBpdCBkb2VzIE5PVCBDSEFOR0UuXG4gICAgICogQHJlYXNvbiBUaGUgbWVzc2FnZSBpcyBjb25zaWRlcmVkIG9sZC5cbiAgICAgKi9cbiAgICBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGVbUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlW1wiRW50aXR5V2FzRGVsZXRlZFwiXSA9IDZdID0gXCJFbnRpdHlXYXNEZWxldGVkXCI7XG4gICAgLyoqXG4gICAgICogRW50aXR5IHNob3VsZCBiZSBkZWxldGVkLlxuICAgICAqIEBzdGF0ZSBDSEFOR0UuXG4gICAgICogQHJlYXNvbiB0aGUgc3RhdGUgaXMgc3RvcmluZyBvbGQgZW50aXRpZXNcbiAgICAgKi9cbiAgICBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGVbUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlW1wiRW50aXR5RGVsZXRlZFwiXSA9IDddID0gXCJFbnRpdHlEZWxldGVkXCI7XG59KShQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGUgfHwgKFByb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZSA9IHt9KSk7XG4vLyB3ZSByZWNlaXZlIExXVywgdj02LCB3ZSBoYXZlIHY9NSA9PiB3ZSByZWNlaXZlIHdpdGggZGVsYXkgdGhlIGRlbGV0ZUVudGl0eSh2PTUpXG4vLyAgID0+IHdlIHNob3VsZCBnZW5lcmF0ZSB0aGUgZGVsZXRlRW50aXR5IG1lc3NhZ2UgZWZmZWN0cyBpbnRlcm5hbGx5IHdpdGggZGVsZXRlRW50aXR5KHY9NSksXG4vLyAgICAgICBidXQgZG9uJ3QgcmVzZW5kIHRoZSBkZWxldGVFbnRpdHlcbi8vICAgICAgICAgIC0gKENSRFQpIGFkZERlbGV0ZWRFbnRpdHlTZXQgdj01ICh3aXRoIGNyZHQgc3RhdGUgY2xlYW5pbmcpIGFuZCB0aGVuIExXVyB2PTZcbi8vICAgICAgICAgIC0gKGVuZ2luZSkgZW5naW5lLmRlbGV0ZUVudGl0eSB2PTVcbi8vIHdlIHJlY2VpdmUgTFdXLCB2PTcsIHdlIGhhdmUgdj01ID0+IHdlIHJlY2VpdmUgd2l0aCBkZWxheSB0aGUgZGVsZXRlRW50aXR5KHY9NSksIGRlbGV0ZUVudGl0eSh2PTYpLCAuLi4sIE5cbi8vICAgPT4gd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZSBkZWxldGVFbnRpdHkgbWVzc2FnZSBlZmZlY3RzIGludGVybmFsbHkgd2l0aCBkZWxldGVFbnRpdHkodj01KSxcbi8vICAgICAgIGJ1dCBkb24ndCByZXNlbmQgdGhlIGRlbGV0ZUVudGl0eVxuLy8gICAgICAgICAgLSAoQ1JEVCkgYWRkRGVsZXRlZEVudGl0eVNldCB2PTUgKHdpdGggY3JkdCBzdGF0ZSBjbGVhbmluZykgYW5kIHRoZW4gTFdXIHY9NlxuLy8gICAgICAgICAgLSAoZW5naW5lKSBlbmdpbmUuZGVsZXRlRW50aXR5IHY9NVxuLy8gbXNnIGRlbGV0ZSBlbnRpdHk6IGl0IG9ubHkgc2hvdWxkIGJlIHNlbnQgYnkgZGVsZXRlclxuLy9cbiIsICJpbXBvcnQgeyBDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCB9IGZyb20gJy4vdHlwZXMnO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQ3JkdE1lc3NhZ2VQcm90b2NvbDtcbihmdW5jdGlvbiAoQ3JkdE1lc3NhZ2VQcm90b2NvbCkge1xuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGlmIHRoZSBtZXNzYWdlIGluY29taW5nIGlzIGNvbXBsZXRlZFxuICAgICAqIEBwYXJhbSBidWYgLSBCeXRlQnVmZmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUoYnVmKSB7XG4gICAgICAgIGNvbnN0IHJlbSA9IGJ1Zi5yZW1haW5pbmdCeXRlcygpO1xuICAgICAgICBpZiAocmVtIDwgQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlTGVuZ3RoID0gYnVmLmdldFVpbnQzMihidWYuY3VycmVudFJlYWRPZmZzZXQoKSk7XG4gICAgICAgIGlmIChyZW0gPCBtZXNzYWdlTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIENyZHRNZXNzYWdlUHJvdG9jb2wudmFsaWRhdGUgPSB2YWxpZGF0ZTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgaGVhZGVyLCBjb25zdW1pbmcgdGhlIGJ5dGVzIGludm9sdmVkLlxuICAgICAqIEBwYXJhbSBidWYgLSBCeXRlQnVmZmVyXG4gICAgICogQHJldHVybnMgaGVhZGVyIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gdmFsaWRhdGVkIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWFkSGVhZGVyKGJ1Zikge1xuICAgICAgICBpZiAoIXZhbGlkYXRlKGJ1ZikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZW5ndGg6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICB0eXBlOiBidWYucmVhZFVpbnQzMigpXG4gICAgICAgIH07XG4gICAgfVxuICAgIENyZHRNZXNzYWdlUHJvdG9jb2wucmVhZEhlYWRlciA9IHJlYWRIZWFkZXI7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGhlYWRlciwgd2l0aG91dCBjb25zdW1pbmcgdGhlIGJ5dGVzIGludm9sdmVkLlxuICAgICAqIEBwYXJhbSBidWYgLSBCeXRlQnVmZmVyXG4gICAgICogQHJldHVybnMgaGVhZGVyIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gdmFsaWRhdGVkIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIZWFkZXIoYnVmKSB7XG4gICAgICAgIGlmICghdmFsaWRhdGUoYnVmKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudE9mZnNldCA9IGJ1Zi5jdXJyZW50UmVhZE9mZnNldCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVuZ3RoOiBidWYuZ2V0VWludDMyKGN1cnJlbnRPZmZzZXQpLFxuICAgICAgICAgICAgdHlwZTogYnVmLmdldFVpbnQzMihjdXJyZW50T2Zmc2V0ICsgNClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgQ3JkdE1lc3NhZ2VQcm90b2NvbC5nZXRIZWFkZXIgPSBnZXRIZWFkZXI7XG4gICAgLyoqXG4gICAgICogQ29uc3VtZSB0aGUgaW5jb21pbmcgbWVzc2FnZSB3aXRob3V0IHByb2Nlc3NpbmcgaXQuXG4gICAgICogQHBhcmFtIGJ1ZiAtIEJ5dGVCdWZmZXJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGluIGNhc2Ugb2Ygc3VjY2VzcyBvciBmYWxzZSBpZiB0aGVyZSBpcyBubyB2YWxpZCBtZXNzYWdlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN1bWVNZXNzYWdlKGJ1Zikge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBnZXRIZWFkZXIoYnVmKTtcbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBidWYuaW5jcmVtZW50UmVhZE9mZnNldChoZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIENyZHRNZXNzYWdlUHJvdG9jb2wuY29uc3VtZU1lc3NhZ2UgPSBjb25zdW1lTWVzc2FnZTtcbn0pKENyZHRNZXNzYWdlUHJvdG9jb2wgfHwgKENyZHRNZXNzYWdlUHJvdG9jb2wgPSB7fSkpO1xuIiwgImltcG9ydCB7IENyZHRNZXNzYWdlUHJvdG9jb2wgfSBmcm9tICcuL2NyZHRNZXNzYWdlUHJvdG9jb2wnO1xuaW1wb3J0IHsgQ3JkdE1lc3NhZ2VUeXBlLCBDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCB9IGZyb20gJy4vdHlwZXMnO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgRGVsZXRlQ29tcG9uZW50O1xuKGZ1bmN0aW9uIChEZWxldGVDb21wb25lbnQpIHtcbiAgICBEZWxldGVDb21wb25lbnQuTUVTU0FHRV9IRUFERVJfTEVOR1RIID0gMTI7XG4gICAgLyoqXG4gICAgICogV3JpdGUgRGVsZXRlQ29tcG9uZW50IG1lc3NhZ2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cml0ZShlbnRpdHksIGNvbXBvbmVudElkLCB0aW1lc3RhbXAsIGJ1Zikge1xuICAgICAgICAvLyByZXNlcnZlIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IENSRFRfTUVTU0FHRV9IRUFERVJfTEVOR1RIICsgRGVsZXRlQ29tcG9uZW50Lk1FU1NBR0VfSEVBREVSX0xFTkdUSDtcbiAgICAgICAgY29uc3Qgc3RhcnRNZXNzYWdlT2Zmc2V0ID0gYnVmLmluY3JlbWVudFdyaXRlT2Zmc2V0KG1lc3NhZ2VMZW5ndGgpO1xuICAgICAgICAvLyBXcml0ZSBDcmR0TWVzc2FnZSBoZWFkZXJcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQsIG1lc3NhZ2VMZW5ndGgpO1xuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDQsIENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfQ09NUE9ORU5UKTtcbiAgICAgICAgLy8gV3JpdGUgQ29tcG9uZW50T3BlcmF0aW9uIGhlYWRlclxuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDgsIGVudGl0eSk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMTIsIGNvbXBvbmVudElkKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyAxNiwgdGltZXN0YW1wKTtcbiAgICB9XG4gICAgRGVsZXRlQ29tcG9uZW50LndyaXRlID0gd3JpdGU7XG4gICAgZnVuY3Rpb24gcmVhZChidWYpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gQ3JkdE1lc3NhZ2VQcm90b2NvbC5yZWFkSGVhZGVyKGJ1Zik7XG4gICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZGVyLnR5cGUgIT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfQ09NUE9ORU5UKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlbGV0ZUNvbXBvbmVudE9wZXJhdGlvbiB0cmllZCB0byByZWFkIGFub3RoZXIgbWVzc2FnZSB0eXBlLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1zZyA9IHtcbiAgICAgICAgICAgIC4uLmhlYWRlcixcbiAgICAgICAgICAgIGVudGl0eUlkOiBidWYucmVhZFVpbnQzMigpLFxuICAgICAgICAgICAgY29tcG9uZW50SWQ6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGJ1Zi5yZWFkVWludDMyKClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG1zZztcbiAgICB9XG4gICAgRGVsZXRlQ29tcG9uZW50LnJlYWQgPSByZWFkO1xufSkoRGVsZXRlQ29tcG9uZW50IHx8IChEZWxldGVDb21wb25lbnQgPSB7fSkpO1xuIiwgImltcG9ydCB7IENyZHRNZXNzYWdlUHJvdG9jb2wgfSBmcm9tICcuL2NyZHRNZXNzYWdlUHJvdG9jb2wnO1xuaW1wb3J0IHsgQ3JkdE1lc3NhZ2VUeXBlLCBDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCB9IGZyb20gJy4vdHlwZXMnO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQXBwZW5kVmFsdWVPcGVyYXRpb247XG4oZnVuY3Rpb24gKEFwcGVuZFZhbHVlT3BlcmF0aW9uKSB7XG4gICAgQXBwZW5kVmFsdWVPcGVyYXRpb24uTUVTU0FHRV9IRUFERVJfTEVOR1RIID0gMTY7XG4gICAgLyoqXG4gICAgICogQ2FsbCB0aGlzIGZ1bmN0aW9uIGZvciBhbiBvcHRpbWFsIHdyaXRpbmcgZGF0YSBwYXNzaW5nIHRoZSBCeXRlQnVmZmVyXG4gICAgICogIGFscmVhZHkgYWxsb2NhdGVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JpdGUoZW50aXR5LCB0aW1lc3RhbXAsIGNvbXBvbmVudElkLCBkYXRhLCBidWYpIHtcbiAgICAgICAgLy8gcmVzZXJ2ZSB0aGUgYmVnaW5uaW5nXG4gICAgICAgIGNvbnN0IHN0YXJ0TWVzc2FnZU9mZnNldCA9IGJ1Zi5pbmNyZW1lbnRXcml0ZU9mZnNldChDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCArIEFwcGVuZFZhbHVlT3BlcmF0aW9uLk1FU1NBR0VfSEVBREVSX0xFTkdUSCk7XG4gICAgICAgIC8vIHdyaXRlIGJvZHlcbiAgICAgICAgYnVmLndyaXRlQnVmZmVyKGRhdGEsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IGJ1Zi5jdXJyZW50V3JpdGVPZmZzZXQoKSAtIHN0YXJ0TWVzc2FnZU9mZnNldDtcbiAgICAgICAgLy8gV3JpdGUgQ3JkdE1lc3NhZ2UgaGVhZGVyXG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0LCBtZXNzYWdlTGVuZ3RoKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyA0LCBDcmR0TWVzc2FnZVR5cGUuQVBQRU5EX1ZBTFVFKTtcbiAgICAgICAgLy8gV3JpdGUgQ29tcG9uZW50T3BlcmF0aW9uIGhlYWRlclxuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDgsIGVudGl0eSk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMTIsIGNvbXBvbmVudElkKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyAxNiwgdGltZXN0YW1wKTtcbiAgICAgICAgY29uc3QgbmV3TG9jYWwgPSBtZXNzYWdlTGVuZ3RoIC0gQXBwZW5kVmFsdWVPcGVyYXRpb24uTUVTU0FHRV9IRUFERVJfTEVOR1RIIC0gQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEg7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMjAsIG5ld0xvY2FsKTtcbiAgICB9XG4gICAgQXBwZW5kVmFsdWVPcGVyYXRpb24ud3JpdGUgPSB3cml0ZTtcbiAgICBmdW5jdGlvbiByZWFkKGJ1Zikge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBDcmR0TWVzc2FnZVByb3RvY29sLnJlYWRIZWFkZXIoYnVmKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSBDcmR0TWVzc2FnZVR5cGUuQVBQRU5EX1ZBTFVFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FwcGVuZFZhbHVlT3BlcmF0aW9uIHRyaWVkIHRvIHJlYWQgYW5vdGhlciBtZXNzYWdlIHR5cGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmhlYWRlcixcbiAgICAgICAgICAgIGVudGl0eUlkOiBidWYucmVhZFVpbnQzMigpLFxuICAgICAgICAgICAgY29tcG9uZW50SWQ6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICBkYXRhOiBidWYucmVhZEJ1ZmZlcigpXG4gICAgICAgIH07XG4gICAgfVxuICAgIEFwcGVuZFZhbHVlT3BlcmF0aW9uLnJlYWQgPSByZWFkO1xufSkoQXBwZW5kVmFsdWVPcGVyYXRpb24gfHwgKEFwcGVuZFZhbHVlT3BlcmF0aW9uID0ge30pKTtcbiIsICJpbXBvcnQgeyBDcmR0TWVzc2FnZVByb3RvY29sIH0gZnJvbSAnLi9jcmR0TWVzc2FnZVByb3RvY29sJztcbmltcG9ydCB7IENyZHRNZXNzYWdlVHlwZSwgQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEggfSBmcm9tICcuL3R5cGVzJztcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIERlbGV0ZUVudGl0eTtcbihmdW5jdGlvbiAoRGVsZXRlRW50aXR5KSB7XG4gICAgRGVsZXRlRW50aXR5Lk1FU1NBR0VfSEVBREVSX0xFTkdUSCA9IDQ7XG4gICAgZnVuY3Rpb24gd3JpdGUoZW50aXR5LCBidWYpIHtcbiAgICAgICAgLy8gV3JpdGUgQ3JkdE1lc3NhZ2UgaGVhZGVyXG4gICAgICAgIGJ1Zi53cml0ZVVpbnQzMihDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCArIDQpO1xuICAgICAgICBidWYud3JpdGVVaW50MzIoQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFkpO1xuICAgICAgICAvLyBib2R5XG4gICAgICAgIGJ1Zi53cml0ZVVpbnQzMihlbnRpdHkpO1xuICAgIH1cbiAgICBEZWxldGVFbnRpdHkud3JpdGUgPSB3cml0ZTtcbiAgICBmdW5jdGlvbiByZWFkKGJ1Zikge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBDcmR0TWVzc2FnZVByb3RvY29sLnJlYWRIZWFkZXIoYnVmKTtcbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWFkZXIudHlwZSAhPT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGVsZXRlRW50aXR5IHRyaWVkIHRvIHJlYWQgYW5vdGhlciBtZXNzYWdlIHR5cGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmhlYWRlcixcbiAgICAgICAgICAgIGVudGl0eUlkOiBidWYucmVhZFVpbnQzMigpXG4gICAgICAgIH07XG4gICAgfVxuICAgIERlbGV0ZUVudGl0eS5yZWFkID0gcmVhZDtcbn0pKERlbGV0ZUVudGl0eSB8fCAoRGVsZXRlRW50aXR5ID0ge30pKTtcbiIsICJpbXBvcnQgeyBDcmR0TWVzc2FnZVByb3RvY29sIH0gZnJvbSAnLi9jcmR0TWVzc2FnZVByb3RvY29sJztcbmltcG9ydCB7IENyZHRNZXNzYWdlVHlwZSwgQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEggfSBmcm9tICcuL3R5cGVzJztcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFB1dENvbXBvbmVudE9wZXJhdGlvbjtcbihmdW5jdGlvbiAoUHV0Q29tcG9uZW50T3BlcmF0aW9uKSB7XG4gICAgUHV0Q29tcG9uZW50T3BlcmF0aW9uLk1FU1NBR0VfSEVBREVSX0xFTkdUSCA9IDE2O1xuICAgIC8qKlxuICAgICAqIENhbGwgdGhpcyBmdW5jdGlvbiBmb3IgYW4gb3B0aW1hbCB3cml0aW5nIGRhdGEgcGFzc2luZyB0aGUgQnl0ZUJ1ZmZlclxuICAgICAqICBhbHJlYWR5IGFsbG9jYXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyaXRlKGVudGl0eSwgdGltZXN0YW1wLCBjb21wb25lbnRJZCwgZGF0YSwgYnVmKSB7XG4gICAgICAgIC8vIHJlc2VydmUgdGhlIGJlZ2lubmluZ1xuICAgICAgICBjb25zdCBzdGFydE1lc3NhZ2VPZmZzZXQgPSBidWYuaW5jcmVtZW50V3JpdGVPZmZzZXQoQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEggKyBQdXRDb21wb25lbnRPcGVyYXRpb24uTUVTU0FHRV9IRUFERVJfTEVOR1RIKTtcbiAgICAgICAgLy8gd3JpdGUgYm9keVxuICAgICAgICBidWYud3JpdGVCdWZmZXIoZGF0YSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBtZXNzYWdlTGVuZ3RoID0gYnVmLmN1cnJlbnRXcml0ZU9mZnNldCgpIC0gc3RhcnRNZXNzYWdlT2Zmc2V0O1xuICAgICAgICAvLyBXcml0ZSBDcmR0TWVzc2FnZSBoZWFkZXJcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQsIG1lc3NhZ2VMZW5ndGgpO1xuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDQsIENyZHRNZXNzYWdlVHlwZS5QVVRfQ09NUE9ORU5UKTtcbiAgICAgICAgLy8gV3JpdGUgQ29tcG9uZW50T3BlcmF0aW9uIGhlYWRlclxuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDgsIGVudGl0eSk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMTIsIGNvbXBvbmVudElkKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyAxNiwgdGltZXN0YW1wKTtcbiAgICAgICAgY29uc3QgbmV3TG9jYWwgPSBtZXNzYWdlTGVuZ3RoIC0gUHV0Q29tcG9uZW50T3BlcmF0aW9uLk1FU1NBR0VfSEVBREVSX0xFTkdUSCAtIENSRFRfTUVTU0FHRV9IRUFERVJfTEVOR1RIO1xuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDIwLCBuZXdMb2NhbCk7XG4gICAgfVxuICAgIFB1dENvbXBvbmVudE9wZXJhdGlvbi53cml0ZSA9IHdyaXRlO1xuICAgIGZ1bmN0aW9uIHJlYWQoYnVmKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IENyZHRNZXNzYWdlUHJvdG9jb2wucmVhZEhlYWRlcihidWYpO1xuICAgICAgICBpZiAoIWhlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQdXRDb21wb25lbnRPcGVyYXRpb24gdHJpZWQgdG8gcmVhZCBhbm90aGVyIG1lc3NhZ2UgdHlwZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaGVhZGVyLFxuICAgICAgICAgICAgZW50aXR5SWQ6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICBjb21wb25lbnRJZDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIGRhdGE6IGJ1Zi5yZWFkQnVmZmVyKClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgUHV0Q29tcG9uZW50T3BlcmF0aW9uLnJlYWQgPSByZWFkO1xufSkoUHV0Q29tcG9uZW50T3BlcmF0aW9uIHx8IChQdXRDb21wb25lbnRPcGVyYXRpb24gPSB7fSkpO1xuIiwgImltcG9ydCB7IENyZHRNZXNzYWdlUHJvdG9jb2wgfSBmcm9tICcuLi9jcmR0TWVzc2FnZVByb3RvY29sJztcbmltcG9ydCB7IENyZHRNZXNzYWdlVHlwZSwgQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEggfSBmcm9tICcuLi90eXBlcyc7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBQdXROZXR3b3JrQ29tcG9uZW50T3BlcmF0aW9uO1xuKGZ1bmN0aW9uIChQdXROZXR3b3JrQ29tcG9uZW50T3BlcmF0aW9uKSB7XG4gICAgUHV0TmV0d29ya0NvbXBvbmVudE9wZXJhdGlvbi5NRVNTQUdFX0hFQURFUl9MRU5HVEggPSAyMDtcbiAgICAvKipcbiAgICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gZm9yIGFuIG9wdGltYWwgd3JpdGluZyBkYXRhIHBhc3NpbmcgdGhlIEJ5dGVCdWZmZXJcbiAgICAgKiAgYWxyZWFkeSBhbGxvY2F0ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cml0ZShlbnRpdHksIHRpbWVzdGFtcCwgY29tcG9uZW50SWQsIG5ldHdvcmtJZCwgZGF0YSwgYnVmKSB7XG4gICAgICAgIC8vIHJlc2VydmUgdGhlIGJlZ2lubmluZ1xuICAgICAgICBjb25zdCBzdGFydE1lc3NhZ2VPZmZzZXQgPSBidWYuaW5jcmVtZW50V3JpdGVPZmZzZXQoQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEggKyBQdXROZXR3b3JrQ29tcG9uZW50T3BlcmF0aW9uLk1FU1NBR0VfSEVBREVSX0xFTkdUSCk7XG4gICAgICAgIC8vIHdyaXRlIGJvZHlcbiAgICAgICAgYnVmLndyaXRlQnVmZmVyKGRhdGEsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IGJ1Zi5jdXJyZW50V3JpdGVPZmZzZXQoKSAtIHN0YXJ0TWVzc2FnZU9mZnNldDtcbiAgICAgICAgLy8gV3JpdGUgQ3JkdE1lc3NhZ2UgaGVhZGVyXG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0LCBtZXNzYWdlTGVuZ3RoKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyA0LCBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVF9ORVRXT1JLKTtcbiAgICAgICAgLy8gV3JpdGUgQ29tcG9uZW50T3BlcmF0aW9uIGhlYWRlclxuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDgsIGVudGl0eSk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMTIsIGNvbXBvbmVudElkKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyAxNiwgdGltZXN0YW1wKTtcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyAyMCwgbmV0d29ya0lkKTtcbiAgICAgICAgY29uc3QgZGF0YUxlbmd0aCA9IG1lc3NhZ2VMZW5ndGggLSBQdXROZXR3b3JrQ29tcG9uZW50T3BlcmF0aW9uLk1FU1NBR0VfSEVBREVSX0xFTkdUSCAtIENSRFRfTUVTU0FHRV9IRUFERVJfTEVOR1RIO1xuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDI0LCBkYXRhTGVuZ3RoKTtcbiAgICB9XG4gICAgUHV0TmV0d29ya0NvbXBvbmVudE9wZXJhdGlvbi53cml0ZSA9IHdyaXRlO1xuICAgIGZ1bmN0aW9uIHJlYWQoYnVmKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IENyZHRNZXNzYWdlUHJvdG9jb2wucmVhZEhlYWRlcihidWYpO1xuICAgICAgICBpZiAoIWhlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVF9ORVRXT1JLKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1B1dENvbXBvbmVudE5ldHdvcmtPcGVyYXRpb24gdHJpZWQgdG8gcmVhZCBhbm90aGVyIG1lc3NhZ2UgdHlwZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaGVhZGVyLFxuICAgICAgICAgICAgZW50aXR5SWQ6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICBjb21wb25lbnRJZDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIG5ldHdvcmtJZDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIGRhdGE6IGJ1Zi5yZWFkQnVmZmVyKClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgUHV0TmV0d29ya0NvbXBvbmVudE9wZXJhdGlvbi5yZWFkID0gcmVhZDtcbn0pKFB1dE5ldHdvcmtDb21wb25lbnRPcGVyYXRpb24gfHwgKFB1dE5ldHdvcmtDb21wb25lbnRPcGVyYXRpb24gPSB7fSkpO1xuIiwgImltcG9ydCB7IENyZHRNZXNzYWdlUHJvdG9jb2wgfSBmcm9tICcuLi9jcmR0TWVzc2FnZVByb3RvY29sJztcbmltcG9ydCB7IENyZHRNZXNzYWdlVHlwZSwgQ1JEVF9NRVNTQUdFX0hFQURFUl9MRU5HVEggfSBmcm9tICcuLi90eXBlcyc7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBEZWxldGVDb21wb25lbnROZXR3b3JrO1xuKGZ1bmN0aW9uIChEZWxldGVDb21wb25lbnROZXR3b3JrKSB7XG4gICAgRGVsZXRlQ29tcG9uZW50TmV0d29yay5NRVNTQUdFX0hFQURFUl9MRU5HVEggPSAxNjtcbiAgICAvKipcbiAgICAgKiBXcml0ZSBEZWxldGVDb21wb25lbnQgbWVzc2FnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyaXRlKGVudGl0eSwgY29tcG9uZW50SWQsIHRpbWVzdGFtcCwgbmV0d29ya0lkLCBidWYpIHtcbiAgICAgICAgLy8gcmVzZXJ2ZSB0aGUgYmVnaW5uaW5nXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VMZW5ndGggPSBDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCArIERlbGV0ZUNvbXBvbmVudE5ldHdvcmsuTUVTU0FHRV9IRUFERVJfTEVOR1RIO1xuICAgICAgICBjb25zdCBzdGFydE1lc3NhZ2VPZmZzZXQgPSBidWYuaW5jcmVtZW50V3JpdGVPZmZzZXQobWVzc2FnZUxlbmd0aCk7XG4gICAgICAgIC8vIFdyaXRlIENyZHRNZXNzYWdlIGhlYWRlclxuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCwgbWVzc2FnZUxlbmd0aCk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgNCwgQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9DT01QT05FTlRfTkVUV09SSyk7XG4gICAgICAgIC8vIFdyaXRlIENvbXBvbmVudE9wZXJhdGlvbiBoZWFkZXJcbiAgICAgICAgYnVmLnNldFVpbnQzMihzdGFydE1lc3NhZ2VPZmZzZXQgKyA4LCBlbnRpdHkpO1xuICAgICAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDEyLCBjb21wb25lbnRJZCk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMTYsIHRpbWVzdGFtcCk7XG4gICAgICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMjAsIG5ldHdvcmtJZCk7XG4gICAgfVxuICAgIERlbGV0ZUNvbXBvbmVudE5ldHdvcmsud3JpdGUgPSB3cml0ZTtcbiAgICBmdW5jdGlvbiByZWFkKGJ1Zikge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBDcmR0TWVzc2FnZVByb3RvY29sLnJlYWRIZWFkZXIoYnVmKTtcbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWFkZXIudHlwZSAhPT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9DT01QT05FTlRfTkVUV09SSykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWxldGVDb21wb25lbnRPcGVyYXRpb24gdHJpZWQgdG8gcmVhZCBhbm90aGVyIG1lc3NhZ2UgdHlwZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaGVhZGVyLFxuICAgICAgICAgICAgZW50aXR5SWQ6IGJ1Zi5yZWFkVWludDMyKCksXG4gICAgICAgICAgICBjb21wb25lbnRJZDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogYnVmLnJlYWRVaW50MzIoKSxcbiAgICAgICAgICAgIG5ldHdvcmtJZDogYnVmLnJlYWRVaW50MzIoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBEZWxldGVDb21wb25lbnROZXR3b3JrLnJlYWQgPSByZWFkO1xufSkoRGVsZXRlQ29tcG9uZW50TmV0d29yayB8fCAoRGVsZXRlQ29tcG9uZW50TmV0d29yayA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgQ3JkdE1lc3NhZ2VQcm90b2NvbCB9IGZyb20gJy4uL2NyZHRNZXNzYWdlUHJvdG9jb2wnO1xuaW1wb3J0IHsgQ3JkdE1lc3NhZ2VUeXBlLCBDUkRUX01FU1NBR0VfSEVBREVSX0xFTkdUSCB9IGZyb20gJy4uL3R5cGVzJztcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIERlbGV0ZUVudGl0eU5ldHdvcms7XG4oZnVuY3Rpb24gKERlbGV0ZUVudGl0eU5ldHdvcmspIHtcbiAgICBEZWxldGVFbnRpdHlOZXR3b3JrLk1FU1NBR0VfSEVBREVSX0xFTkdUSCA9IDg7XG4gICAgZnVuY3Rpb24gd3JpdGUoZW50aXR5LCBuZXR3b3JrSWQsIGJ1Zikge1xuICAgICAgICAvLyBXcml0ZSBDcmR0TWVzc2FnZSBoZWFkZXJcbiAgICAgICAgYnVmLndyaXRlVWludDMyKENSRFRfTUVTU0FHRV9IRUFERVJfTEVOR1RIICsgNCk7XG4gICAgICAgIGJ1Zi53cml0ZVVpbnQzMihDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWV9ORVRXT1JLKTtcbiAgICAgICAgLy8gYm9keVxuICAgICAgICBidWYud3JpdGVVaW50MzIoZW50aXR5KTtcbiAgICAgICAgYnVmLndyaXRlVWludDMyKG5ldHdvcmtJZCk7XG4gICAgfVxuICAgIERlbGV0ZUVudGl0eU5ldHdvcmsud3JpdGUgPSB3cml0ZTtcbiAgICBmdW5jdGlvbiByZWFkKGJ1Zikge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBDcmR0TWVzc2FnZVByb3RvY29sLnJlYWRIZWFkZXIoYnVmKTtcbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWFkZXIudHlwZSAhPT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFlfTkVUV09SSykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWxldGVFbnRpdHlOZXR3b3JrIHRyaWVkIHRvIHJlYWQgYW5vdGhlciBtZXNzYWdlIHR5cGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmhlYWRlcixcbiAgICAgICAgICAgIGVudGl0eUlkOiBidWYucmVhZFVpbnQzMigpLFxuICAgICAgICAgICAgbmV0d29ya0lkOiBidWYucmVhZFVpbnQzMigpXG4gICAgICAgIH07XG4gICAgfVxuICAgIERlbGV0ZUVudGl0eU5ldHdvcmsucmVhZCA9IHJlYWQ7XG59KShEZWxldGVFbnRpdHlOZXR3b3JrIHx8IChEZWxldGVFbnRpdHlOZXR3b3JrID0ge30pKTtcbiIsICJpbXBvcnQgeyBSZWFkV3JpdGVCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vQnl0ZUJ1ZmZlcic7XG5pbXBvcnQgeyBQdXRDb21wb25lbnRPcGVyYXRpb24gfSBmcm9tICcuLi9wdXRDb21wb25lbnQnO1xuaW1wb3J0IHsgQ3JkdE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRGVsZXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vZGVsZXRlQ29tcG9uZW50JztcbmltcG9ydCB7IERlbGV0ZUVudGl0eSB9IGZyb20gJy4uL2RlbGV0ZUVudGl0eSc7XG5pbXBvcnQgeyBQdXROZXR3b3JrQ29tcG9uZW50T3BlcmF0aW9uIH0gZnJvbSAnLi9wdXRDb21wb25lbnROZXR3b3JrJztcbmltcG9ydCB7IERlbGV0ZUNvbXBvbmVudE5ldHdvcmsgfSBmcm9tICcuL2RlbGV0ZUNvbXBvbmVudE5ldHdvcmsnO1xuaW1wb3J0IHsgRGVsZXRlRW50aXR5TmV0d29yayB9IGZyb20gJy4vZGVsZXRlRW50aXR5TmV0d29yayc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1TY2hlbWEgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL21hbnVhbC9UcmFuc2Zvcm0nO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05ldHdvcmtNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0NPTVBPTkVOVF9ORVRXT1JLLFxuICAgICAgICBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWV9ORVRXT1JLLFxuICAgICAgICBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVF9ORVRXT1JLXG4gICAgXS5pbmNsdWRlcyhtZXNzYWdlLnR5cGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXR3b3JrTWVzc2FnZVRvTG9jYWwobWVzc2FnZSwgbG9jYWxFbnRpdHlJZCwgYnVmZmVyLCBkZXN0aW5hdGlvbkJ1ZmZlcikge1xuICAgIGNvbnN0IG9mZnNldCA9IGJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKTtcbiAgICBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVF9ORVRXT1JLKSB7XG4gICAgICAgIFB1dENvbXBvbmVudE9wZXJhdGlvbi53cml0ZShsb2NhbEVudGl0eUlkLCBtZXNzYWdlLnRpbWVzdGFtcCwgbWVzc2FnZS5jb21wb25lbnRJZCwgbWVzc2FnZS5kYXRhLCBidWZmZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfQ09NUE9ORU5UX05FVFdPUkspIHtcbiAgICAgICAgRGVsZXRlQ29tcG9uZW50LndyaXRlKGxvY2FsRW50aXR5SWQsIG1lc3NhZ2UuY29tcG9uZW50SWQsIG1lc3NhZ2UudGltZXN0YW1wLCBidWZmZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfRU5USVRZX05FVFdPUkspIHtcbiAgICAgICAgRGVsZXRlRW50aXR5LndyaXRlKGxvY2FsRW50aXR5SWQsIGJ1ZmZlcik7XG4gICAgfVxuICAgIGRlc3RpbmF0aW9uQnVmZmVyLndyaXRlQnVmZmVyKGJ1ZmZlci5idWZmZXIoKS5zdWJhcnJheShvZmZzZXQsIGJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKSksIGZhbHNlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxNZXNzYWdlVG9OZXR3b3JrKG1lc3NhZ2UsIG5ldHdvcmssIGJ1ZmZlciwgZGVzdGluYXRpb25CdWZmZXIpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBidWZmZXIuY3VycmVudFdyaXRlT2Zmc2V0KCk7XG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLlBVVF9DT01QT05FTlQpIHtcbiAgICAgICAgUHV0TmV0d29ya0NvbXBvbmVudE9wZXJhdGlvbi53cml0ZShuZXR3b3JrLmVudGl0eUlkLCBtZXNzYWdlLnRpbWVzdGFtcCwgbWVzc2FnZS5jb21wb25lbnRJZCwgbmV0d29yay5uZXR3b3JrSWQsIG1lc3NhZ2UuZGF0YSwgYnVmZmVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0NPTVBPTkVOVCkge1xuICAgICAgICBEZWxldGVDb21wb25lbnROZXR3b3JrLndyaXRlKG5ldHdvcmsuZW50aXR5SWQsIG1lc3NhZ2UuY29tcG9uZW50SWQsIG1lc3NhZ2UudGltZXN0YW1wLCBuZXR3b3JrLm5ldHdvcmtJZCwgYnVmZmVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWSkge1xuICAgICAgICBEZWxldGVFbnRpdHlOZXR3b3JrLndyaXRlKG5ldHdvcmsuZW50aXR5SWQsIG5ldHdvcmsubmV0d29ya0lkLCBidWZmZXIpO1xuICAgIH1cbiAgICBkZXN0aW5hdGlvbkJ1ZmZlci53cml0ZUJ1ZmZlcihidWZmZXIuYnVmZmVyKCkuc3ViYXJyYXkob2Zmc2V0LCBidWZmZXIuY3VycmVudFdyaXRlT2Zmc2V0KCkpLCBmYWxzZSk7XG59XG5jb25zdCBidWZmZXIgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcigpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhUcmFuc2Zvcm1QYXJlbnQobWVzc2FnZSwgdHJhbnNmb3JtVmFsdWUsIHBhcmVudCkge1xuICAgIGJ1ZmZlci5yZXNldEJ1ZmZlcigpO1xuICAgIGxldCB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1WYWx1ZTtcbiAgICBpZiAoIXRyYW5zZm9ybSAmJiAnZGF0YScgaW4gbWVzc2FnZSkge1xuICAgICAgICB0cmFuc2Zvcm0gPSBUcmFuc2Zvcm1TY2hlbWEuZGVzZXJpYWxpemUobmV3IFJlYWRXcml0ZUJ5dGVCdWZmZXIobWVzc2FnZS5kYXRhKSk7XG4gICAgfVxuICAgIGlmICghdHJhbnNmb3JtKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFyZW50IHRyYW5zZm9ybScpO1xuICAgIC8vIEdlbmVyYXRlIG5ldyB0cmFuc2Zvcm0gcmF3IGRhdGEgd2l0aCB0aGUgcGFyZW50XG4gICAgY29uc3QgbmV3VHJhbnNmb3JtID0geyAuLi50cmFuc2Zvcm0sIHBhcmVudCB9O1xuICAgIFRyYW5zZm9ybVNjaGVtYS5zZXJpYWxpemUobmV3VHJhbnNmb3JtLCBidWZmZXIpO1xuICAgIHJldHVybiBidWZmZXIudG9CaW5hcnkoKTtcbn1cbiIsICJpbXBvcnQgeyBFbnRpdHlTdGF0ZSB9IGZyb20gJy4uLy4uL2VuZ2luZS9lbnRpdHknO1xuaW1wb3J0IHsgUmVhZFdyaXRlQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcic7XG5pbXBvcnQgeyBBcHBlbmRWYWx1ZU9wZXJhdGlvbiwgQ3JkdE1lc3NhZ2VQcm90b2NvbCwgRGVsZXRlQ29tcG9uZW50TmV0d29yaywgRGVsZXRlRW50aXR5TmV0d29yayB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vY3JkdCc7XG5pbXBvcnQgeyBEZWxldGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL2NyZHQvZGVsZXRlQ29tcG9uZW50JztcbmltcG9ydCB7IERlbGV0ZUVudGl0eSB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vY3JkdC9kZWxldGVFbnRpdHknO1xuaW1wb3J0IHsgUHV0Q29tcG9uZW50T3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9jcmR0L3B1dENvbXBvbmVudCc7XG5pbXBvcnQgeyBDcmR0TWVzc2FnZVR5cGUgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL2NyZHQvdHlwZXMnO1xuaW1wb3J0IHsgUHV0TmV0d29ya0NvbXBvbmVudE9wZXJhdGlvbiB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vY3JkdC9uZXR3b3JrL3B1dENvbXBvbmVudE5ldHdvcmsnO1xuaW1wb3J0IHsgTmV0d29ya0VudGl0eSBhcyBkZWZpbmVOZXR3b3JrRW50aXR5LCBOZXR3b3JrUGFyZW50IGFzIGRlZmluZU5ldHdvcmtQYXJlbnQsIFRyYW5zZm9ybSBhcyBkZWZpbmVUcmFuc2Zvcm0gfSBmcm9tICcuLi8uLi9jb21wb25lbnRzJztcbmltcG9ydCAqIGFzIG5ldHdvcmtVdGlscyBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL2NyZHQvbmV0d29yay91dGlscyc7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JkdFNjZW5lU3lzdGVtKGVuZ2luZSwgb25Qcm9jZXNzRW50aXR5Q29tcG9uZW50Q2hhbmdlKSB7XG4gICAgY29uc3QgdHJhbnNwb3J0cyA9IFtdO1xuICAgIC8vIENvbXBvbmVudHMgdGhhdCB3ZSB1c2VkIG9uIHRoaXMgc3lzdGVtXG4gICAgY29uc3QgTmV0d29ya0VudGl0eSA9IGRlZmluZU5ldHdvcmtFbnRpdHkoZW5naW5lKTtcbiAgICBjb25zdCBOZXR3b3JrUGFyZW50ID0gZGVmaW5lTmV0d29ya1BhcmVudChlbmdpbmUpO1xuICAgIGNvbnN0IFRyYW5zZm9ybSA9IGRlZmluZVRyYW5zZm9ybShlbmdpbmUpO1xuICAgIC8vIE1lc3NhZ2VzIHRoYXQgd2UgcmVjZWl2ZWQgYXQgdHJhbnNwb3J0Lm9uTWVzc2FnZSB3YWl0aW5nIHRvIGJlIHByb2Nlc3NlZFxuICAgIGNvbnN0IHJlY2VpdmVkTWVzc2FnZXMgPSBbXTtcbiAgICAvLyBNZXNzYWdlcyBhbHJlYWR5IHByb2Nlc3NlZCBieSB0aGUgZW5naW5lIGJ1dCB0aGF0IHdlIG5lZWQgdG8gYnJvYWRjYXN0IHRvIG90aGVyIHRyYW5zcG9ydHMuXG4gICAgY29uc3QgYnJvYWRjYXN0TWVzc2FnZXMgPSBbXTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc3BvcnRJZCB0cmFucG9ydCBpZCB0byBpZGVudGl5IG1lc3NhZ2VzXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byBwcm9jZXNzIHJlY2VpdmVkIG1lc3NhZ2VzXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VDaHVua01lc3NhZ2UodHJhbnNwb3J0SWQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlY2VpdmVzIGEgY2h1bmsgb2YgYmluYXJ5IG1lc3NhZ2VzIGFuZCBzdG9yZXMgYWxsIHRoZSB2YWxpZFxuICAgICAgICAgKiBDb21wb25lbnQgT3BlcmF0aW9uIE1lc3NhZ2VzIGF0IG1lc3NhZ2VzIHF1ZXVlXG4gICAgICAgICAqIEBwYXJhbSBjaHVua01lc3NhZ2UgQSBjaHVuayBvZiBiaW5hcnkgbWVzc2FnZXNcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXJzZUNodW5rTWVzc2FnZShjaHVua01lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBSZWFkV3JpdGVCeXRlQnVmZmVyKGNodW5rTWVzc2FnZSk7XG4gICAgICAgICAgICBsZXQgaGVhZGVyO1xuICAgICAgICAgICAgd2hpbGUgKChoZWFkZXIgPSBDcmR0TWVzc2FnZVByb3RvY29sLmdldEhlYWRlcihidWZmZXIpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGJ1ZmZlci5jdXJyZW50UmVhZE9mZnNldCgpO1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9DT01QT05FTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IERlbGV0ZUNvbXBvbmVudC5yZWFkKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhlYWRlci50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0NPTVBPTkVOVF9ORVRXT1JLKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBEZWxldGVDb21wb25lbnROZXR3b3JrLnJlYWQoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5QVVRfQ09NUE9ORU5UKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBQdXRDb21wb25lbnRPcGVyYXRpb24ucmVhZChidWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoZWFkZXIudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLlBVVF9DT01QT05FTlRfTkVUV09SSykge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gUHV0TmV0d29ya0NvbXBvbmVudE9wZXJhdGlvbi5yZWFkKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhlYWRlci50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gRGVsZXRlRW50aXR5LnJlYWQoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfRU5USVRZX05FVFdPUkspIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IERlbGV0ZUVudGl0eU5ldHdvcmsucmVhZChidWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoZWFkZXIudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkFQUEVORF9WQUxVRSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gQXBwZW5kVmFsdWVPcGVyYXRpb24ucmVhZChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBVbmtub3duIG1lc3NhZ2UsIHdlIHNraXAgaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN1bWUgdGhlIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLmluY3JlbWVudFJlYWRPZmZzZXQoaGVhZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkTWVzc2FnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQnVmZmVyOiBidWZmZXIuYnVmZmVyKCkuc3ViYXJyYXkob2Zmc2V0LCBidWZmZXIuY3VycmVudFJlYWRPZmZzZXQoKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYW5kIGNsZWFyIHRoZSBtZXNzYWVzIHF1ZXVlXG4gICAgICogQHJldHVybnMgbWVzc2FnZXMgcmVjaWV2ZWQgYnkgdGhlIHRyYW5zcG9ydCB0byBwcm9jZXNzIG9uIHRoZSBuZXh0IHRpY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNZXNzYWdlcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc1RvUHJvY2VzcyA9IHZhbHVlLnNwbGljZSgwLCB2YWx1ZS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZXNUb1Byb2Nlc3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIGxvY2FsIGVudGl0eUlkIGFzc29jaWF0ZWQgdG8gdGhlIG5ldHdvcmsgY29tcG9uZW50IG1lc3NhZ2UuXG4gICAgICogSXQncyBhIG1hcHBpbmcgTmV0d29yayAtPiB0byBMb2NhbFxuICAgICAqIElmIGl0J3Mgbm90IGEgbmV0d29yayBtZXNzYWdlLCByZXR1cm4gdGhlIGVudGl0eUlkIHJlY2VpdmVkIGJ5IHRoZSBtZXNzYWdlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZE5ldHdvcmtJZChtc2cpIHtcbiAgICAgICAgY29uc3QgaGFzTmV0d29ya0lkID0gJ25ldHdvcmtJZCcgaW4gbXNnO1xuICAgICAgICBpZiAoaGFzTmV0d29ya0lkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHlJZCwgbmV0d29ya10gb2YgZW5naW5lLmdldEVudGl0aWVzV2l0aChOZXR3b3JrRW50aXR5KSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrLm5ldHdvcmtJZCA9PT0gbXNnLm5ldHdvcmtJZCAmJiBuZXR3b3JrLmVudGl0eUlkID09PSBtc2cuZW50aXR5SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZW50aXR5SWQsIG5ldHdvcmsgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZW50aXR5SWQ6IG1zZy5lbnRpdHlJZCB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZuIHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5IHRpY2suXG4gICAgICogUHJvY2VzcyBhbGwgdGhlIG1lc3NhZ2VzIHF1ZXVlIHJlY2VpdmVkIGJ5IHRoZSB0cmFuc3BvcnRcbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZXMoKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzVG9Qcm9jZXNzID0gZ2V0TWVzc2FnZXMocmVjZWl2ZWRNZXNzYWdlcyk7XG4gICAgICAgIGNvbnN0IGVudGl0aWVzU2hvdWxkQmVDbGVhbmVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbXNnIG9mIG1lc3NhZ2VzVG9Qcm9jZXNzKSB7XG4gICAgICAgICAgICBsZXQgeyBlbnRpdHlJZCwgbmV0d29yayB9ID0gZmluZE5ldHdvcmtJZChtc2cpO1xuICAgICAgICAgICAgLy8gV2UgcmVjZWl2ZSBhIG5ldyBFbnRpdHkuIENyZWF0ZSB0aGUgbG9jYWxFbnRpdHkgYW5kIG1hcCBpdCB0byB0aGUgTmV0d29ya0VudGl0eSBjb21wb25lbnRcbiAgICAgICAgICAgIGlmIChuZXR3b3JrVXRpbHMuaXNOZXR3b3JrTWVzc2FnZShtc2cpICYmICFuZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5SWQgPSBlbmdpbmUuYWRkRW50aXR5KCk7XG4gICAgICAgICAgICAgICAgbmV0d29yayA9IHsgZW50aXR5SWQ6IG1zZy5lbnRpdHlJZCwgbmV0d29ya0lkOiBtc2cubmV0d29ya0lkIH07XG4gICAgICAgICAgICAgICAgTmV0d29ya0VudGl0eS5jcmVhdGVPclJlcGxhY2UoZW50aXR5SWQsIG5ldHdvcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1zZy50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWSB8fCBtc2cudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFlfTkVUV09SSykge1xuICAgICAgICAgICAgICAgIGVudGl0aWVzU2hvdWxkQmVDbGVhbmVkLnB1c2goZW50aXR5SWQpO1xuICAgICAgICAgICAgICAgIGJyb2FkY2FzdE1lc3NhZ2VzLnB1c2gobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudGl0eVN0YXRlID0gZW5naW5lLmVudGl0eUNvbnRhaW5lci5nZXRFbnRpdHlTdGF0ZShlbnRpdHlJZCk7XG4gICAgICAgICAgICAgICAgLy8gU2tpcCB1cGRhdGVzIGZyb20gcmVtb3ZlZCBlbnRpdHllc1xuICAgICAgICAgICAgICAgIGlmIChlbnRpdHlTdGF0ZSA9PT0gRW50aXR5U3RhdGUuUmVtb3ZlZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgLy8gRW50aXRpZXMgd2l0aCB1bmtub3duIGVudGl0aWVzIHNob3VsZCB1cGRhdGUgaXRzIGVudGl0eSBzdGF0ZVxuICAgICAgICAgICAgICAgIGlmIChlbnRpdHlTdGF0ZSA9PT0gRW50aXR5U3RhdGUuVW5rbm93bikge1xuICAgICAgICAgICAgICAgICAgICBlbmdpbmUuZW50aXR5Q29udGFpbmVyLnVwZGF0ZVVzZWRFbnRpdHkoZW50aXR5SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBlbmdpbmUuZ2V0Q29tcG9uZW50T3JOdWxsKG1zZy5jb21wb25lbnRJZCk7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLlBVVF9DT01QT05FTlQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRJZCA9PT0gVHJhbnNmb3JtLmNvbXBvbmVudElkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBOZXR3b3JrRW50aXR5LmhhcyhlbnRpdHlJZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtQYXJlbnQuaGFzKGVudGl0eUlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmRhdGEgPSBuZXR3b3JrVXRpbHMuZml4VHJhbnNmb3JtUGFyZW50KG1zZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW2NvbmZsaWN0TWVzc2FnZSwgdmFsdWVdID0gY29tcG9uZW50LnVwZGF0ZUZyb21DcmR0KHsgLi4ubXNnLCBlbnRpdHlJZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25mbGljdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBtZXNzYWdlIHRvIHRyYW5zcG9ydCBxdWV1ZSB0byBiZSBwcm9jZXNzZWQgYnkgb3RoZXJzIHRyYW5zcG9ydHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdE1lc3NhZ2VzLnB1c2gobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJvY2Vzc0VudGl0eUNvbXBvbmVudENoYW5nZSAmJiBvblByb2Nlc3NFbnRpdHlDb21wb25lbnRDaGFuZ2UoZW50aXR5SWQsIG1zZy50eXBlLCBjb21wb25lbnQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogdGVzdCB0aGlzIGxpbmUsIGl0IGlzIGZ1bmRhbW1lbnRhbCB0byBtYWtlIHRoZSBlZGl0b3Igd29ya1xuICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3RNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHRoZSBsYXN0IHN0YWdlIG9mIHRoZSBzeW5jcmhvbml6YXRpb24gaXMgdG8gZGVsZXRlIHRoZSBlbnRpdGllc1xuICAgICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdGllc1Nob3VsZEJlQ2xlYW5lZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBkZWZpbml0aW9uIG9mIGVuZ2luZS5jb21wb25lbnRzSXRlcigpKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgdGhpcyB3aXRoIHBhdG8vcHJhdnVzXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5lbnRpdHlEZWxldGVkKGVudGl0eSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmdpbmUuZW50aXR5Q29udGFpbmVyLnVwZGF0ZVJlbW92ZWRFbnRpdHkoZW50aXR5KTtcbiAgICAgICAgICAgIG9uUHJvY2Vzc0VudGl0eUNvbXBvbmVudENoYW5nZSAmJiBvblByb2Nlc3NFbnRpdHlDb21wb25lbnRDaGFuZ2UoZW50aXR5LCBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgdGhlIGRpcnR5IG1hcCBhbmQgZ2VuZXJhdGVzIGNyZHQgbWVzc2FnZXMgdG8gYmUgc2VuZFxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIHNlbmRNZXNzYWdlcyhlbnRpdGllc0RlbGV0ZWRUaGlzVGljaykge1xuICAgICAgICAvLyBDUkRUIE1lc3NhZ2VzIHdpbGwgYmUgdGhlIG1lcmdlIGJldHdlZW4gdGhlIHJlY2lldmVkIHRyYW5zcG9ydCBtZXNzYWdlcyBhbmQgdGhlIG5ldyBjcmR0IG1lc3NhZ2VzXG4gICAgICAgIGNvbnN0IGNyZHRNZXNzYWdlcyA9IGdldE1lc3NhZ2VzKGJyb2FkY2FzdE1lc3NhZ2VzKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFJlYWRXcml0ZUJ5dGVCdWZmZXIoKTtcbiAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgZW5naW5lLmNvbXBvbmVudHNJdGVyKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBjb21wb25lbnQuZ2V0Q3JkdFVwZGF0ZXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBjcmVhdGluZyBtZXNzYWdlcyBpZiB0aGVyZSBpcyBubyB0cmFuc3BvcnQgdGhhdCB3aWxsIGhhbmRsZSBpdFxuICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnRzLnNvbWUoKHQpID0+IHQuZmlsdGVyKG1lc3NhZ2UpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgUHV0Q29tcG9uZW50T3BlcmF0aW9uLndyaXRlKG1lc3NhZ2UuZW50aXR5SWQsIG1lc3NhZ2UudGltZXN0YW1wLCBtZXNzYWdlLmNvbXBvbmVudElkLCBtZXNzYWdlLmRhdGEsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0NPTVBPTkVOVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlQ29tcG9uZW50LndyaXRlKG1lc3NhZ2UuZW50aXR5SWQsIGNvbXBvbmVudC5jb21wb25lbnRJZCwgbWVzc2FnZS50aW1lc3RhbXAsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuQVBQRU5EX1ZBTFVFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBcHBlbmRWYWx1ZU9wZXJhdGlvbi53cml0ZShtZXNzYWdlLmVudGl0eUlkLCBtZXNzYWdlLnRpbWVzdGFtcCwgbWVzc2FnZS5jb21wb25lbnRJZCwgbWVzc2FnZS5kYXRhLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNyZHRNZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQnVmZmVyOiBidWZmZXIuYnVmZmVyKCkuc3ViYXJyYXkob2Zmc2V0LCBidWZmZXIuY3VycmVudFdyaXRlT2Zmc2V0KCkpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob25Qcm9jZXNzRW50aXR5Q29tcG9uZW50Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gbWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCB8fCBtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5BUFBFTkRfVkFMVUVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY29tcG9uZW50LmdldChtZXNzYWdlLmVudGl0eUlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIG9uUHJvY2Vzc0VudGl0eUNvbXBvbmVudENoYW5nZShtZXNzYWdlLmVudGl0eUlkLCBtZXNzYWdlLnR5cGUsIGNvbXBvbmVudCwgcmF3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBZnRlciBhbGwgdXBkYXRlcywgSSBleGVjdXRlIHRoZSBEZWxldGVkRW50aXR5IG1lc3NhZ2VzXG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5SWQgb2YgZW50aXRpZXNEZWxldGVkVGhpc1RpY2spIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKTtcbiAgICAgICAgICAgIERlbGV0ZUVudGl0eS53cml0ZShlbnRpdHlJZCwgYnVmZmVyKTtcbiAgICAgICAgICAgIGNyZHRNZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0VOVElUWSxcbiAgICAgICAgICAgICAgICBlbnRpdHlJZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlQnVmZmVyOiBidWZmZXIuYnVmZmVyKCkuc3ViYXJyYXkob2Zmc2V0LCBidWZmZXIuY3VycmVudFdyaXRlT2Zmc2V0KCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9uUHJvY2Vzc0VudGl0eUNvbXBvbmVudENoYW5nZSAmJiBvblByb2Nlc3NFbnRpdHlDb21wb25lbnRDaGFuZ2UoZW50aXR5SWQsIENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfRU5USVRZKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZW5kIENSRFQgbWVzc2FnZXMgdG8gdHJhbnNwb3J0c1xuICAgICAgICBjb25zdCB0cmFuc3BvcnRCdWZmZXIgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcigpO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IGluIHRyYW5zcG9ydHMpIHtcbiAgICAgICAgICAgIC8vIE5ldHdvcmtNZXNzYWdlcyBjYW4gb25seSBoYXZlIGEgTUFYX1NJWkUgb2YgMTNrYi4gU28gd2UgbmVlZCB0byBzZW5kIGl0IGluIGNodW5rcy5cbiAgICAgICAgICAgIGNvbnN0IExJVkVLSVRfTUFYX1NJWkUgPSAxMztcbiAgICAgICAgICAgIGNvbnN0IF9fTmV0d29ya01lc3NhZ2VzQnVmZmVyID0gW107XG4gICAgICAgICAgICBjb25zdCB0cmFuc3BvcnRJbmRleCA9IE51bWJlcihpbmRleCk7XG4gICAgICAgICAgICBjb25zdCB0cmFuc3BvcnQgPSB0cmFuc3BvcnRzW3RyYW5zcG9ydEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGlzUmVuZGVyZXJUcmFuc3BvcnQgPSB0cmFuc3BvcnQudHlwZSA9PT0gJ3JlbmRlcmVyJztcbiAgICAgICAgICAgIGNvbnN0IGlzTmV0d29ya1RyYW5zcG9ydCA9IHRyYW5zcG9ydC50eXBlID09PSAnbmV0d29yayc7XG4gICAgICAgICAgICAvLyBSZXNldCBCdWZmZXIgZm9yIGVhY2ggVHJhbnNwb3J0XG4gICAgICAgICAgICB0cmFuc3BvcnRCdWZmZXIucmVzZXRCdWZmZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBSZWFkV3JpdGVCeXRlQnVmZmVyKCk7XG4gICAgICAgICAgICAvLyBUaGVuIHdlIHNlbmQgYWxsIHRoZSBuZXcgY3JkdE1lc3NhZ2VzIHRoYXQgdGhlIHRyYW5zcG9ydCBuZWVkcyB0byBwcm9jZXNzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgY3JkdE1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmV0d29ya1RyYW5zcG9ydCAmJiB0cmFuc3BvcnRCdWZmZXIudG9CaW5hcnkoKS5ieXRlTGVuZ3RoIC8gMTAyNCA+IExJVkVLSVRfTUFYX1NJWkUpIHtcbiAgICAgICAgICAgICAgICAgICAgX19OZXR3b3JrTWVzc2FnZXNCdWZmZXIucHVzaCh0cmFuc3BvcnRCdWZmZXIudG9CaW5hcnkoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydEJ1ZmZlci5yZXNldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBlY2hvIG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHJhbnNwb3J0SWQgPT09IHRyYW5zcG9ydEluZGV4KVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAvLyBSZWR1bmRhbnQgbWVzc2FnZSBmb3IgdGhlIHRyYW5zcG9ydFxuICAgICAgICAgICAgICAgIGlmICghdHJhbnNwb3J0LmZpbHRlcihtZXNzYWdlKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbnRpdHlJZCB9ID0gZmluZE5ldHdvcmtJZChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1OZWVkc0ZpeCA9ICdjb21wb25lbnRJZCcgaW4gbWVzc2FnZSAmJlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbXBvbmVudElkID09PSBUcmFuc2Zvcm0uY29tcG9uZW50SWQgJiZcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtLmhhcyhlbnRpdHlJZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya1BhcmVudC5oYXMoZW50aXR5SWQpICYmXG4gICAgICAgICAgICAgICAgICAgIE5ldHdvcmtFbnRpdHkuaGFzKGVudGl0eUlkKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBMT0NBTCBjaGFuZ2UgaW4gdGhlIHRyYW5zZm9ybS4gQWRkIHRoZSBwYXJlbnQgdG8gdGhhdCB0cmFuc2Zvcm1cbiAgICAgICAgICAgICAgICBpZiAoaXNSZW5kZXJlclRyYW5zcG9ydCAmJiBtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5QVVRfQ09NUE9ORU5UICYmIHRyYW5zZm9ybU5lZWRzRml4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGZpbmROZXR3b3JrSWQoTmV0d29ya1BhcmVudC5nZXQoZW50aXR5SWQpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtRGF0YSA9IG5ldHdvcmtVdGlscy5maXhUcmFuc2Zvcm1QYXJlbnQobWVzc2FnZSwgVHJhbnNmb3JtLmdldChlbnRpdHlJZCksIHBhcmVudC5lbnRpdHlJZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgUHV0Q29tcG9uZW50T3BlcmF0aW9uLndyaXRlKGVudGl0eUlkLCBtZXNzYWdlLnRpbWVzdGFtcCwgbWVzc2FnZS5jb21wb25lbnRJZCwgdHJhbnNmb3JtRGF0YSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0QnVmZmVyLndyaXRlQnVmZmVyKGJ1ZmZlci5idWZmZXIoKS5zdWJhcnJheShvZmZzZXQsIGJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKSksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc1JlbmRlcmVyVHJhbnNwb3J0ICYmIG5ldHdvcmtVdGlscy5pc05ldHdvcmtNZXNzYWdlKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgdGhlIHJlbmRlcmVyIHRyYW5zcG9ydCBhbmQgaXRzIGEgTmV0d29ya01lc3NhZ2UsIHdlIG5lZWQgdG8gZml4IHRoZSBlbnRpdHlJZCBmaWVsZCBhbmQgY29udmVydCBpdCB0byBhIGtub3duIE1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFBVVF9ORVRXT1JLX0NPTVBPTkVOVCAtPiBQVVRfQ09NUE9ORU5UXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1EYXRhID0gJ2RhdGEnIGluIG1lc3NhZ2UgPyBtZXNzYWdlLmRhdGEgOiBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtTmVlZHNGaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGZpbmROZXR3b3JrSWQoTmV0d29ya1BhcmVudC5nZXQoZW50aXR5SWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybURhdGEgPSBuZXR3b3JrVXRpbHMuZml4VHJhbnNmb3JtUGFyZW50KG1lc3NhZ2UsIFRyYW5zZm9ybS5nZXQoZW50aXR5SWQpLCBwYXJlbnQuZW50aXR5SWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtVdGlscy5uZXR3b3JrTWVzc2FnZVRvTG9jYWwoeyAuLi5tZXNzYWdlLCBkYXRhOiB0cmFuc2Zvcm1EYXRhIH0sIGVudGl0eUlkLCBidWZmZXIsIHRyYW5zcG9ydEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIG5leHQgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgaXRzIGEgbmV0d29yayB0cmFuc3BvcnQgYW5kIGl0cyBhIFBVVF9DT01QT05FTlQgdGhhdCBoYXMgYSBOZXR3b3JrRW50aXR5IGNvbXBvbmVudCwgd2UgbmVlZCB0byBzZW5kIHRoaXMgbWVzc2FnZVxuICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggY29tbXMgd2l0aCB0aGUgRW50aXR5SUQgYW5kIE5ldHdvcmtJRCBmcm9tIHRoZXIgTmV0d29ya0VudGl0eSBzbyBldmVyeW9uZSBjYW4gcmVjaWV2ZSB0aGlzIG1lc3NhZ2UgYW5kIG1hcCB0byB0aGVpciBjdXN0b20gZW50aXR5SUQuXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV0d29ya1RyYW5zcG9ydCAmJiAhbmV0d29ya1V0aWxzLmlzTmV0d29ya01lc3NhZ2UobWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV0d29ya0RhdGEgPSBOZXR3b3JrRW50aXR5LmdldE9yTnVsbChtZXNzYWdlLmVudGl0eUlkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgaGFzIG5ldHdvcmtEYXRhIGNvbnZlcnQgdGhlIG1lc3NhZ2UgdG8gUFVUX05FVFdPUktfQ09NUE9ORU5ULlxuICAgICAgICAgICAgICAgICAgICBpZiAobmV0d29ya0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtVdGlscy5sb2NhbE1lc3NhZ2VUb05ldHdvcmsobWVzc2FnZSwgbmV0d29ya0RhdGEsIGJ1ZmZlciwgdHJhbnNwb3J0QnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIG5leHQgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29tbW9uIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRCdWZmZXIud3JpdGVCdWZmZXIobWVzc2FnZS5tZXNzYWdlQnVmZmVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOZXR3b3JrVHJhbnNwb3J0ICYmIHRyYW5zcG9ydEJ1ZmZlci5jdXJyZW50V3JpdGVPZmZzZXQoKSkge1xuICAgICAgICAgICAgICAgIF9fTmV0d29ya01lc3NhZ2VzQnVmZmVyLnB1c2godHJhbnNwb3J0QnVmZmVyLnRvQmluYXJ5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGlzTmV0d29ya1RyYW5zcG9ydCA/IF9fTmV0d29ya01lc3NhZ2VzQnVmZmVyIDogdHJhbnNwb3J0QnVmZmVyLnRvQmluYXJ5KCk7XG4gICAgICAgICAgICBhd2FpdCB0cmFuc3BvcnQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICogQWRkIGEgdHJhbnNwb3J0IHRvIHRoZSBjcmR0IHN5c3RlbVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0cmFuc3BvcnRzLnB1c2godHJhbnNwb3J0KSAtIDE7XG4gICAgICAgIHRyYW5zcG9ydC5vbm1lc3NhZ2UgPSBwYXJzZUNodW5rTWVzc2FnZShpZCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlbmRNZXNzYWdlcyxcbiAgICAgICAgcmVjZWl2ZU1lc3NhZ2VzLFxuICAgICAgICBhZGRUcmFuc3BvcnRcbiAgICB9O1xufVxuIiwgImV4cG9ydCB2YXIgQ3JkdFV0aWxzO1xuKGZ1bmN0aW9uIChDcmR0VXRpbHMpIHtcbiAgICBsZXQgU3luY2hyb25pemVkRW50aXR5VHlwZTtcbiAgICAoZnVuY3Rpb24gKFN5bmNocm9uaXplZEVudGl0eVR5cGUpIHtcbiAgICAgICAgLy8gc3luY2hyb25pemVzIGVudGl0aWVzIHdpdGggdGhlIE5ldHdvcmtTeW5jaHJvbml6ZWQgY29tcG9uZW50IG9ubHksIHVzZWQgZm9yIG5ldHdvcmtlZCBnYW1lc1xuICAgICAgICBTeW5jaHJvbml6ZWRFbnRpdHlUeXBlW1N5bmNocm9uaXplZEVudGl0eVR5cGVbXCJORVRXT1JLRURcIl0gPSAwXSA9IFwiTkVUV09SS0VEXCI7XG4gICAgICAgIC8vIHN5bmNocm9uaXplcyBlbnRpdGllcyBuZWVkZWQgYnkgdGhlIHJlbmRlcmVyXG4gICAgICAgIFN5bmNocm9uaXplZEVudGl0eVR5cGVbU3luY2hyb25pemVkRW50aXR5VHlwZVtcIlJFTkRFUkVSXCJdID0gMV0gPSBcIlJFTkRFUkVSXCI7XG4gICAgfSkoU3luY2hyb25pemVkRW50aXR5VHlwZSA9IENyZHRVdGlscy5TeW5jaHJvbml6ZWRFbnRpdHlUeXBlIHx8IChDcmR0VXRpbHMuU3luY2hyb25pemVkRW50aXR5VHlwZSA9IHt9KSk7XG59KShDcmR0VXRpbHMgfHwgKENyZHRVdGlscyA9IHt9KSk7XG5leHBvcnQgZGVmYXVsdCBDcmR0VXRpbHM7XG4vKipcbiAqIENvbXBhcmUgcmF3IGRhdGEuXG4gKiBAcHVibGljXG4gKiBAcmV0dXJucyAwIGlmIGlzIHRoZSBzYW1lIGRhdGEsIDEgaWYgYSA+IGIsIC0xIGlmIGIgPiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRhQ29tcGFyZShhLCBiKSB7XG4gICAgLy8gQXQgcmVmZXJlbmNlIGxldmVsXG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiAwO1xuICAgIGlmIChhID09PSBudWxsICYmIGIgIT09IG51bGwpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICBpZiAoYSAhPT0gbnVsbCAmJiBiID09PSBudWxsKVxuICAgICAgICByZXR1cm4gMTtcbiAgICBpZiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgYiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoRGlmZmVyZW5jZSA9IGEuYnl0ZUxlbmd0aCAtIGIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aERpZmZlcmVuY2UgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGhEaWZmZXJlbmNlID4gMCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbiA9IGEuYnl0ZUxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcmVzID0gYVtpXSAtIGJbaV07XG4gICAgICAgICAgICBpZiAocmVzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcyA+IDAgPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGRhdGEgaXMgZXhhY3RseSB0aGUgc2FtZVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBsZW5ndGhEaWZmZXJlbmNlID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aERpZmZlcmVuY2UgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGhEaWZmZXJlbmNlID4gMCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYS5sb2NhbGVDb21wYXJlKGIpO1xuICAgIH1cbiAgICByZXR1cm4gYSA+IGIgPyAxIDogLTE7XG59XG4iLCAiLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBSZWFkb25seSh2YWwpIHtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLnZhbCB9KTtcbn1cbiIsICJpbXBvcnQgeyBSZWFkV3JpdGVCeXRlQnVmZmVyIH0gZnJvbSAnLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJztcbmltcG9ydCB7IFByb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZSwgQ3JkdE1lc3NhZ2VUeXBlLCBQdXRDb21wb25lbnRPcGVyYXRpb24sIERlbGV0ZUNvbXBvbmVudCB9IGZyb20gJy4uL3NlcmlhbGl6YXRpb24vY3JkdCc7XG5pbXBvcnQgeyBkYXRhQ29tcGFyZSB9IGZyb20gJy4uL3N5c3RlbXMvY3JkdC91dGlscyc7XG5pbXBvcnQgeyBkZWVwUmVhZG9ubHkgfSBmcm9tICcuL3JlYWRvbmx5JztcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnRUaW1lc3RhbXAoZW50aXR5LCB0aW1lc3RhbXBzKSB7XG4gICAgY29uc3QgbmV3VGltZXN0YW1wID0gKHRpbWVzdGFtcHMuZ2V0KGVudGl0eSkgfHwgMCkgKyAxO1xuICAgIHRpbWVzdGFtcHMuc2V0KGVudGl0eSwgbmV3VGltZXN0YW1wKTtcbiAgICByZXR1cm4gbmV3VGltZXN0YW1wO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUR1bXBMd3dGdW5jdGlvbkZyb21DcmR0KGNvbXBvbmVudElkLCB0aW1lc3RhbXBzLCBzY2hlbWEsIGRhdGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZHVtcENyZHRTdGF0ZShidWZmZXIsIGZpbHRlckVudGl0eSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHksIHRpbWVzdGFtcF0gb2YgdGltZXN0YW1wcykge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoZmlsdGVyRW50aXR5KSB7XG4gICAgICAgICAgICAgICAgLy8gSSBzd2VhciB0aGF0IHRoaXMgaXMgYmVpbmcgdGVzdGVkIG9uIHN0YXRlLXRvLWNyZHQuc3BlYyBidXQgamVzdCBpcyB0cm9sbGluZyBtZVxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXJFbnRpdHkoZW50aXR5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzKGVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdCA9IGRhdGEuZ2V0KGVudGl0eSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmID0gbmV3IFJlYWRXcml0ZUJ5dGVCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICBzY2hlbWEuc2VyaWFsaXplKGl0LCBidWYpO1xuICAgICAgICAgICAgICAgIFB1dENvbXBvbmVudE9wZXJhdGlvbi53cml0ZShlbnRpdHksIHRpbWVzdGFtcCwgY29tcG9uZW50SWQsIGJ1Zi50b0JpbmFyeSgpLCBidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgRGVsZXRlQ29tcG9uZW50LndyaXRlKGVudGl0eSwgY29tcG9uZW50SWQsIHRpbWVzdGFtcCwgYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVXBkYXRlTHd3RnJvbUNyZHQoY29tcG9uZW50SWQsIHRpbWVzdGFtcHMsIHNjaGVtYSwgZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIHJlY2VpdmVkIG1lc3NhZ2Ugb25seSBpZiB0aGUgbGFtcG9ydCBudW1iZXIgcmVjaWV2ZWQgaXMgaGlnaGVyXG4gICAgICogdGhhbiB0aGUgc3RvcmVkIG9uZS4gSWYgaXRzIGxvd2VyLCB3ZSBzcHJlYWQgaXQgdG8gdGhlIG5ldHdvcmsgdG8gY29ycmVjdCB0aGUgcGVlci5cbiAgICAgKiBJZiB0aGV5IGFyZSBlcXVhbCwgdGhlIGJpZ2dlciByYXcgZGF0YSB3aW5zLlxuICBcbiAgICAgICogUmV0dXJucyB0aGUgcmVjaWV2ZWQgZGF0YSBpZiB0aGUgbGFtcG9ydCBudW1iZXIgd2FzIGJpZ2dlciB0aGFuIG91cnMuXG4gICAgICAqIElmIGl0IHdhcyBhbiBvdXRkYXRlZCBtZXNzYWdlLCB0aGVuIHdlIHJldHVybiB2b2lkXG4gICAgICAqIEBwdWJsaWNcbiAgICAgICovXG4gICAgZnVuY3Rpb24gY3JkdFJ1bGVGb3JDdXJyZW50U3RhdGUobWVzc2FnZSkge1xuICAgICAgICBjb25zdCB7IGVudGl0eUlkLCB0aW1lc3RhbXAgfSA9IG1lc3NhZ2U7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lc3RhbXAgPSB0aW1lc3RhbXBzLmdldChlbnRpdHlJZCk7XG4gICAgICAgIC8vIFRoZSByZWNlaXZlZCBtZXNzYWdlIGlzID4gdGhhbiBvdXIgY3VycmVudCB2YWx1ZSwgdXBkYXRlIG91ciBzdGF0ZS5jb21wb25lbnRzLlxuICAgICAgICBpZiAoY3VycmVudFRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRUaW1lc3RhbXAgPCB0aW1lc3RhbXApIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGUuU3RhdGVVcGRhdGVkVGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIC8vIE91dGRhdGVkIE1lc3NhZ2UuIFJlc2VuZCBvdXIgc3RhdGUgbWVzc2FnZSB0aHJvdWdoIHRoZSB3aXJlLlxuICAgICAgICBpZiAoY3VycmVudFRpbWVzdGFtcCA+IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJzInLCBjdXJyZW50VGltZXN0YW1wLCB0aW1lc3RhbXApXG4gICAgICAgICAgICByZXR1cm4gUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlLlN0YXRlT3V0ZGF0ZWRUaW1lc3RhbXA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsZXRlcyBhcmUgaWRlbXBvdGVudFxuICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0NPTVBPTkVOVCAmJiAhZGF0YS5oYXMoZW50aXR5SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlLk5vQ2hhbmdlcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VycmVudERhdGFHcmVhdGVyID0gMDtcbiAgICAgICAgaWYgKGRhdGEuaGFzKGVudGl0eUlkKSkge1xuICAgICAgICAgICAgY29uc3Qgd3JpdGVCdWZmZXIgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcigpO1xuICAgICAgICAgICAgc2NoZW1hLnNlcmlhbGl6ZShkYXRhLmdldChlbnRpdHlJZCksIHdyaXRlQnVmZmVyKTtcbiAgICAgICAgICAgIGN1cnJlbnREYXRhR3JlYXRlciA9IGRhdGFDb21wYXJlKHdyaXRlQnVmZmVyLnRvQmluYXJ5KCksIG1lc3NhZ2UuZGF0YSB8fCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnREYXRhR3JlYXRlciA9IGRhdGFDb21wYXJlKG51bGwsIG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2FtZSBkYXRhLCBzYW1lIHRpbWVzdGFtcC4gV2VpcmRvIGVjaG8gbWVzc2FnZS5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJzMnLCBjdXJyZW50RGF0YUdyZWF0ZXIsIHdyaXRlQnVmZmVyLnRvQmluYXJ5KCksIChtZXNzYWdlIGFzIGFueSkuZGF0YSB8fCBudWxsKVxuICAgICAgICBpZiAoY3VycmVudERhdGFHcmVhdGVyID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlLk5vQ2hhbmdlcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50RGF0YUdyZWF0ZXIgPiAwKSB7XG4gICAgICAgICAgICAvLyBDdXJyZW50IGRhdGEgaXMgZ3JlYXRlclxuICAgICAgICAgICAgcmV0dXJuIFByb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZS5TdGF0ZU91dGRhdGVkRGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEN1cmVudCBkYXRhIGlzIGxvd2VyXG4gICAgICAgICAgICByZXR1cm4gUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlLlN0YXRlVXBkYXRlZERhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChtc2cpID0+IHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKG1zZy50eXBlICE9PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCAmJlxuICAgICAgICAgICAgbXNnLnR5cGUgIT09IENyZHRNZXNzYWdlVHlwZS5QVVRfQ09NUE9ORU5UX05FVFdPUksgJiZcbiAgICAgICAgICAgIG1zZy50eXBlICE9PSBDcmR0TWVzc2FnZVR5cGUuREVMRVRFX0NPTVBPTkVOVCAmJlxuICAgICAgICAgICAgbXNnLnR5cGUgIT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfQ09NUE9ORU5UX05FVFdPUkspXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBkYXRhLmdldChtc2cuZW50aXR5SWQpXTtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gY3JkdFJ1bGVGb3JDdXJyZW50U3RhdGUobXNnKTtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gbXNnLmVudGl0eUlkO1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGUuU3RhdGVVcGRhdGVkRGF0YTpcbiAgICAgICAgICAgIGNhc2UgUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlLlN0YXRlVXBkYXRlZFRpbWVzdGFtcDoge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcHMuc2V0KGVudGl0eSwgbXNnLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgaWYgKG1zZy50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCB8fCBtc2cudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLlBVVF9DT01QT05FTlRfTkVUV09SSykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBidWYgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcihtc2cuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0KGVudGl0eSwgc2NoZW1hLmRlc2VyaWFsaXplKGJ1ZikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kZWxldGUoZW50aXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBkYXRhLmdldChlbnRpdHkpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUHJvY2Vzc01lc3NhZ2VSZXN1bHRUeXBlLlN0YXRlT3V0ZGF0ZWRUaW1lc3RhbXA6XG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NNZXNzYWdlUmVzdWx0VHlwZS5TdGF0ZU91dGRhdGVkRGF0YToge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhcyhlbnRpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdyaXRlQnVmZmVyID0gbmV3IFJlYWRXcml0ZUJ5dGVCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hLnNlcmlhbGl6ZShkYXRhLmdldChlbnRpdHkpLCB3cml0ZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQ3JkdE1lc3NhZ2VUeXBlLlBVVF9DT01QT05FTlQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogd3JpdGVCdWZmZXIudG9CaW5hcnkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlJZDogZW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wcy5nZXQoZW50aXR5KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZ2V0KGVudGl0eSlcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9DT01QT05FTlQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5SWQ6IGVudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcHMuZ2V0KGVudGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtudWxsLCBkYXRhLmdldChlbnRpdHkpXTtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdldENyZHRNZXNzYWdlc0Zvckx3dyhjb21wb25lbnRJZCwgdGltZXN0YW1wcywgZGlydHlJdGVyYXRvciwgc2NoZW1hLCBkYXRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGRpcnR5SXRlcmF0b3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RpbWVzdGFtcCA9IGluY3JlbWVudFRpbWVzdGFtcChlbnRpdHksIHRpbWVzdGFtcHMpO1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzKGVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3cml0ZUJ1ZmZlciA9IG5ldyBSZWFkV3JpdGVCeXRlQnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgc2NoZW1hLnNlcmlhbGl6ZShkYXRhLmdldChlbnRpdHkpLCB3cml0ZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50SWQsXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eUlkOiBlbnRpdHksXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHdyaXRlQnVmZmVyLnRvQmluYXJ5KCksXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3VGltZXN0YW1wXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB5aWVsZCBtc2c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfQ09NUE9ORU5ULFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRJZCxcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5SWQ6IGVudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXdUaW1lc3RhbXBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHlpZWxkIG1zZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkaXJ0eUl0ZXJhdG9yLmNsZWFyKCk7XG4gICAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnREZWZpbml0aW9uRnJvbVNjaGVtYShjb21wb25lbnROYW1lLCBjb21wb25lbnRJZCwgc2NoZW1hKSB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkaXJ0eUl0ZXJhdG9yID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgb25DaGFuZ2VDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IGNvbXBvbmVudElkKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudElkO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY29tcG9uZW50TmFtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnROYW1lO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY29tcG9uZW50VHlwZSgpIHtcbiAgICAgICAgICAgIC8vIGEgZ2V0dGVyIGlzIHVzZWQgaGVyZSB0byBwcmV2ZW50IGFjY2lkZW50YWwgY2hhbmdlc1xuICAgICAgICAgICAgcmV0dXJuIDAgLyogQ29tcG9uZW50VHlwZS5MYXN0V3JpdGVXaW5FbGVtZW50U2V0ICovO1xuICAgICAgICB9LFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIGhhcyhlbnRpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmhhcyhlbnRpdHkpO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGVGcm9tKGVudGl0eSwgbWFya0FzRGlydHkgPSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkYXRhLmdldChlbnRpdHkpO1xuICAgICAgICAgICAgaWYgKGRhdGEuZGVsZXRlKGVudGl0eSkgJiYgbWFya0FzRGlydHkpIHtcbiAgICAgICAgICAgICAgICBkaXJ0eUl0ZXJhdG9yLmFkZChlbnRpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudCB8fCBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnRpdHlEZWxldGVkKGVudGl0eSwgbWFya0FzRGlydHkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmRlbGV0ZShlbnRpdHkpICYmIG1hcmtBc0RpcnR5KSB7XG4gICAgICAgICAgICAgICAgZGlydHlJdGVyYXRvci5hZGQoZW50aXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0T3JOdWxsKGVudGl0eSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGF0YS5nZXQoZW50aXR5KTtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgPyBkZWVwUmVhZG9ubHkoY29tcG9uZW50KSA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGdldChlbnRpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRhdGEuZ2V0KGVudGl0eSk7XG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW2dldEZyb21dIENvbXBvbmVudCAke2NvbXBvbmVudE5hbWV9IGZvciBlbnRpdHkgIyR7ZW50aXR5fSBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWVwUmVhZG9ubHkoY29tcG9uZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlKGVudGl0eSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRhdGEuZ2V0KGVudGl0eSk7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbY3JlYXRlXSBDb21wb25lbnQgJHtjb21wb25lbnROYW1lfSBmb3IgJHtlbnRpdHl9IGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1c2VkVmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gc2NoZW1hLmNyZWF0ZSgpIDogc2NoZW1hLmV4dGVuZCA/IHNjaGVtYS5leHRlbmQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgICAgICBkYXRhLnNldChlbnRpdHksIHVzZWRWYWx1ZSk7XG4gICAgICAgICAgICBkaXJ0eUl0ZXJhdG9yLmFkZChlbnRpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIHVzZWRWYWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlT3JSZXBsYWNlKGVudGl0eSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZWRWYWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyBzY2hlbWEuY3JlYXRlKCkgOiBzY2hlbWEuZXh0ZW5kID8gc2NoZW1hLmV4dGVuZCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgICAgIGRhdGEuc2V0KGVudGl0eSwgdXNlZFZhbHVlKTtcbiAgICAgICAgICAgIGRpcnR5SXRlcmF0b3IuYWRkKGVudGl0eSk7XG4gICAgICAgICAgICByZXR1cm4gdXNlZFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRNdXRhYmxlT3JOdWxsKGVudGl0eSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGF0YS5nZXQoZW50aXR5KTtcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJ0eUl0ZXJhdG9yLmFkZChlbnRpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0T3JDcmVhdGVNdXRhYmxlKGVudGl0eSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRhdGEuZ2V0KGVudGl0eSk7XG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShlbnRpdHksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcnR5SXRlcmF0b3IuYWRkKGVudGl0eSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0TXV0YWJsZShlbnRpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuZ2V0TXV0YWJsZU9yTnVsbChlbnRpdHkpO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW211dGFibGVdIENvbXBvbmVudCAke2NvbXBvbmVudE5hbWV9IGZvciAke2VudGl0eX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICB9LFxuICAgICAgICAqaXRlcmF0b3IoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHksIGNvbXBvbmVudF0gb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIFtlbnRpdHksIGNvbXBvbmVudF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICpkaXJ0eUl0ZXJhdG9yKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZGlydHlJdGVyYXRvcikge1xuICAgICAgICAgICAgICAgIHlpZWxkIGVudGl0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q3JkdFVwZGF0ZXM6IGNyZWF0ZUdldENyZHRNZXNzYWdlc0Zvckx3dyhjb21wb25lbnRJZCwgdGltZXN0YW1wcywgZGlydHlJdGVyYXRvciwgc2NoZW1hLCBkYXRhKSxcbiAgICAgICAgdXBkYXRlRnJvbUNyZHQ6IGNyZWF0ZVVwZGF0ZUx3d0Zyb21DcmR0KGNvbXBvbmVudElkLCB0aW1lc3RhbXBzLCBzY2hlbWEsIGRhdGEpLFxuICAgICAgICBkdW1wQ3JkdFN0YXRlVG9CdWZmZXI6IGNyZWF0ZUR1bXBMd3dGdW5jdGlvbkZyb21DcmR0KGNvbXBvbmVudElkLCB0aW1lc3RhbXBzLCBzY2hlbWEsIGRhdGEpLFxuICAgICAgICBvbkNoYW5nZShlbnRpdHksIGNiKSB7XG4gICAgICAgICAgICBjb25zdCBjYnMgPSBvbkNoYW5nZUNhbGxiYWNrcy5nZXQoZW50aXR5KSA/PyBbXTtcbiAgICAgICAgICAgIGNicy5wdXNoKGNiKTtcbiAgICAgICAgICAgIG9uQ2hhbmdlQ2FsbGJhY2tzLnNldChlbnRpdHksIGNicyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9fb25DaGFuZ2VDYWxsYmFja3MoZW50aXR5LCB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgY2JzID0gb25DaGFuZ2VDYWxsYmFja3MuZ2V0KGVudGl0eSk7XG4gICAgICAgICAgICBpZiAoIWNicylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNiIG9mIGNicykge1xuICAgICAgICAgICAgICAgIGNiKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iLCAiZXhwb3J0IGNvbnN0IFNZU1RFTVNfUkVHVUxBUl9QUklPUklUWSA9IDEwMGUzO1xuZXhwb3J0IGZ1bmN0aW9uIFN5c3RlbUNvbnRhaW5lcigpIHtcbiAgICBjb25zdCBzeXN0ZW1zID0gW107XG4gICAgZnVuY3Rpb24gc29ydCgpIHtcbiAgICAgICAgLy8gVE9ETzogc3lzdGVtcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IHNob3VsZCBhbHdheXMgaGF2ZSB0aGUgc2FtZSBzdGFibGUgb3JkZXJcbiAgICAgICAgLy8gICAgICAgYWRkIGEgXCJjb3VudGVyXCIgdG8gdGhlIFN5c3RlbSB0eXBlIHRvIGVuc3VyZSB0aGF0IG9yZGVyXG4gICAgICAgIHN5c3RlbXMuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGQoZm4sIHByaW9yaXR5LCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IHN5c3RlbU5hbWUgPSBuYW1lID8/IGZuLm5hbWU7XG4gICAgICAgIGlmIChzeXN0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uZm4gPT09IGZuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTeXN0ZW0gJHtKU09OLnN0cmluZ2lmeShzeXN0ZW1OYW1lKX0gYWxyZWFkeSBhZGRlZCB0byB0aGUgZW5naW5lYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3lzdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgcHJpb3JpdHksXG4gICAgICAgICAgICBuYW1lOiBzeXN0ZW1OYW1lXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUT0RPOiByZXBsYWNlIHRoaXMgc29ydCBieSBhbiBpbnNlcnRpb24gaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgICAgIHNvcnQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlKHNlbGVjdG9yKSB7XG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5kZXggPSBzeXN0ZW1zLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5uYW1lID09PSBzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHN5c3RlbXMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLmZuID09PSBzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHN5c3RlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgc29ydCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkLFxuICAgICAgICByZW1vdmUsXG4gICAgICAgIGdldFN5c3RlbXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3lzdGVtcztcbiAgICAgICAgfVxuICAgIH07XG59XG4iLCAiaW1wb3J0IHsgUmVhZFdyaXRlQnl0ZUJ1ZmZlciB9IGZyb20gJy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcic7XG5pbXBvcnQgeyBBcHBlbmRWYWx1ZU9wZXJhdGlvbiwgQ3JkdE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi4vc2VyaWFsaXphdGlvbi9jcmR0JztcbmltcG9ydCB7IF9fREVWX18gfSBmcm9tICcuLi9ydW50aW1lL2ludmFyaWFudCc7XG5jb25zdCBlbXB0eVJlYWRvbmx5U2V0ID0gZnJlZXplU2V0KG5ldyBTZXQoKSk7XG5mdW5jdGlvbiBmcm96ZW5FcnJvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzZXQgaXMgZnJvemVuJyk7XG59XG5mdW5jdGlvbiBmcmVlemVTZXQoc2V0KSB7XG4gICAgO1xuICAgIHNldC5hZGQgPSBmcm96ZW5FcnJvcjtcbiAgICBzZXQuY2xlYXIgPSBmcm96ZW5FcnJvcjtcbiAgICByZXR1cm4gc2V0O1xufVxuZnVuY3Rpb24gc29ydEJ5VGltZXN0YW1wKGEsIGIpIHtcbiAgICByZXR1cm4gYS50aW1lc3RhbXAgPiBiLnRpbWVzdGFtcCA/IDEgOiAtMTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWYWx1ZVNldENvbXBvbmVudERlZmluaXRpb25Gcm9tU2NoZW1hKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudElkLCBzY2hlbWEsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRpcnR5SXRlcmF0b3IgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgcXVldWVkQ29tbWFuZHMgPSBbXTtcbiAgICBjb25zdCBvbkNoYW5nZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgICAvLyBvbmx5IHNvcnQgdGhlIGFycmF5IGlmIHRoZSBsYXRlc3QgKE4pIGVsZW1lbnQgaGFzIGEgdGltZXN0YW1wIDw9IE4tMVxuICAgIGZ1bmN0aW9uIHNob3VsZFNvcnQocm93KSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHJvdy5yYXcubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID4gMSAmJiByb3cucmF3W2xlbiAtIDFdLnRpbWVzdGFtcCA8PSByb3cucmF3W2xlbiAtIDJdLnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnb3RVcGRhdGVkKGVudGl0eSkge1xuICAgICAgICBjb25zdCByb3cgPSBkYXRhLmdldChlbnRpdHkpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAocm93KSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkU29ydChyb3cpKSB7XG4gICAgICAgICAgICAgICAgcm93LnJhdy5zb3J0KHNvcnRCeVRpbWVzdGFtcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAocm93LnJhdy5sZW5ndGggPiBvcHRpb25zLm1heEVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgcm93LnJhdy5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZnJvemVuU2V0ID0gZnJlZXplU2V0KG5ldyBTZXQocm93Py5yYXcubWFwKCgkKSA9PiAkLnZhbHVlKSkpO1xuICAgICAgICAgICAgcm93LmZyb3plblNldCA9IGZyb3plblNldDtcbiAgICAgICAgICAgIHJldHVybiBmcm96ZW5TZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5UmVhZG9ubHlTZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXBwZW5kKGVudGl0eSwgdmFsdWUpIHtcbiAgICAgICAgbGV0IHJvdyA9IGRhdGEuZ2V0KGVudGl0eSk7XG4gICAgICAgIGlmICghcm93KSB7XG4gICAgICAgICAgICByb3cgPSB7IHJhdzogW10sIGZyb3plblNldDogZW1wdHlSZWFkb25seVNldCB9O1xuICAgICAgICAgICAgZGF0YS5zZXQoZW50aXR5LCByb3cpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZWRWYWx1ZSA9IHNjaGVtYS5leHRlbmQgPyBzY2hlbWEuZXh0ZW5kKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBvcHRpb25zLnRpbWVzdGFtcEZ1bmN0aW9uKHVzZWRWYWx1ZSk7XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGZyZWV6ZSB0aGUgb2JqZWN0cyBpbiBkZXYgbW9kZSB0byB3YXJuIHRoZSBkZXZlbG9wZXJzIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIGl0IGlzIGFuIGV4cGVuc2l2ZSBvcGVyYXRpb25cbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUodXNlZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByb3cucmF3LnB1c2goeyB2YWx1ZTogdXNlZFZhbHVlLCB0aW1lc3RhbXAgfSk7XG4gICAgICAgIHJldHVybiB7IHNldDogZ290VXBkYXRlZChlbnRpdHkpLCB2YWx1ZTogdXNlZFZhbHVlIH07XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgZ2V0IGNvbXBvbmVudElkKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudElkO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY29tcG9uZW50TmFtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnROYW1lO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY29tcG9uZW50VHlwZSgpIHtcbiAgICAgICAgICAgIC8vIGEgZ2V0dGVyIGlzIHVzZWQgaGVyZSB0byBwcmV2ZW50IGFjY2lkZW50YWwgY2hhbmdlc1xuICAgICAgICAgICAgcmV0dXJuIDEgLyogQ29tcG9uZW50VHlwZS5Hcm93T25seVZhbHVlU2V0ICovO1xuICAgICAgICB9LFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIGhhcyhlbnRpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmhhcyhlbnRpdHkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnRpdHlEZWxldGVkKGVudGl0eSkge1xuICAgICAgICAgICAgZGF0YS5kZWxldGUoZW50aXR5KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KGVudGl0eSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gZGF0YS5nZXQoZW50aXR5KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzLmZyb3plblNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVJlYWRvbmx5U2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGRWYWx1ZShlbnRpdHksIHJhd1ZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCB7IHNldCwgdmFsdWUgfSA9IGFwcGVuZChlbnRpdHksIHJhd1ZhbHVlKTtcbiAgICAgICAgICAgIGRpcnR5SXRlcmF0b3IuYWRkKGVudGl0eSk7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcigpO1xuICAgICAgICAgICAgc2NoZW1hLnNlcmlhbGl6ZSh2YWx1ZSwgYnVmKTtcbiAgICAgICAgICAgIHF1ZXVlZENvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudElkLFxuICAgICAgICAgICAgICAgIGRhdGE6IGJ1Zi50b0JpbmFyeSgpLFxuICAgICAgICAgICAgICAgIGVudGl0eUlkOiBlbnRpdHksXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiAwLFxuICAgICAgICAgICAgICAgIHR5cGU6IENyZHRNZXNzYWdlVHlwZS5BUFBFTkRfVkFMVUVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgICAgfSxcbiAgICAgICAgKml0ZXJhdG9yKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbZW50aXR5LCBjb21wb25lbnRdIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBbZW50aXR5LCBjb21wb25lbnQuZnJvemVuU2V0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgKmRpcnR5SXRlcmF0b3IoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBkaXJ0eUl0ZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgZW50aXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRDcmR0VXBkYXRlcygpIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBhIGNvcHkgb2YgdGhlIGNvbW1hbmRzLCBhbmQgdGhlbiBjbGVhciB0aGUgbG9jYWwgY29weVxuICAgICAgICAgICAgZGlydHlJdGVyYXRvci5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXVlZENvbW1hbmRzLnNwbGljZSgwLCBxdWV1ZWRDb21tYW5kcy5sZW5ndGgpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVGcm9tQ3JkdChfYm9keSkge1xuICAgICAgICAgICAgaWYgKF9ib2R5LnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5BUFBFTkRfVkFMVUUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidWYgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcihfYm9keS5kYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBhcHBlbmQoX2JvZHkuZW50aXR5SWQsIHNjaGVtYS5kZXNlcmlhbGl6ZShidWYpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW251bGwsIHZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbbnVsbCwgdW5kZWZpbmVkXTtcbiAgICAgICAgfSxcbiAgICAgICAgZHVtcENyZHRTdGF0ZVRvQnVmZmVyOiBmdW5jdGlvbiAoYnVmZmVyLCBmaWx0ZXJFbnRpdHkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2VudGl0eSwgeyByYXcgfV0gb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJFbnRpdHkgJiYgIWZpbHRlckVudGl0eShlbnRpdHkpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0IG9mIHJhdykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBidWYgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWEuc2VyaWFsaXplKGl0LnZhbHVlLCBidWYpO1xuICAgICAgICAgICAgICAgICAgICBBcHBlbmRWYWx1ZU9wZXJhdGlvbi53cml0ZShlbnRpdHksIDAsIGNvbXBvbmVudElkLCBidWYudG9CaW5hcnkoKSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2hhbmdlKGVudGl0eSwgY2IpIHtcbiAgICAgICAgICAgIGNvbnN0IGNicyA9IG9uQ2hhbmdlQ2FsbGJhY2tzLmdldChlbnRpdHkpID8/IFtdO1xuICAgICAgICAgICAgY2JzLnB1c2goY2IpO1xuICAgICAgICAgICAgb25DaGFuZ2VDYWxsYmFja3Muc2V0KGVudGl0eSwgY2JzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX19vbkNoYW5nZUNhbGxiYWNrcyhlbnRpdHksIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBjYnMgPSBvbkNoYW5nZUNhbGxiYWNrcy5nZXQoZW50aXR5KTtcbiAgICAgICAgICAgIGlmICghY2JzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2Igb2YgY2JzKSB7XG4gICAgICAgICAgICAgICAgY2IodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcmV0O1xufVxuIiwgImltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi4vLi4vY29tcG9uZW50cyc7XG5mdW5jdGlvbiogZ2VuRW50aXR5VHJlZShlbnRpdHksIGVudGl0aWVzKSB7XG4gICAgLy8gVGhpcyBhdm9pZCBpbmZpbml0ZSBsb29wIHdoZW4gdGhlcmUgaXMgYSBjeWNsaWMgcGFyZW50aW5nXG4gICAgaWYgKCFlbnRpdGllcy5oYXMoZW50aXR5KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGVudGl0aWVzLmRlbGV0ZShlbnRpdHkpO1xuICAgIGZvciAoY29uc3QgW19lbnRpdHksIHZhbHVlXSBvZiBlbnRpdGllcykge1xuICAgICAgICBpZiAodmFsdWUucGFyZW50ID09PSBlbnRpdHkpIHtcbiAgICAgICAgICAgIHlpZWxkKiBnZW5FbnRpdHlUcmVlKF9lbnRpdHksIGVudGl0aWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB5aWVsZCBlbnRpdHk7XG59XG4vKipcbiAqIEdldCBhbiBpdGVyYXRvciBvZiBlbnRpdGllcyB0aGF0IGZvbGxvdyBhIHRyZWUgc3RydWN0dXJlIGZvciBhIGNvbXBvbmVudFxuICogQHB1YmxpY1xuICogQHBhcmFtIGVuZ2luZSAtIHRoZSBlbmdpbmUgcnVubmluZyB0aGUgZW50aXRpZXNcbiAqIEBwYXJhbSBlbnRpdHkgLSB0aGUgcm9vdCBlbnRpdHkgb2YgdGhlIHRyZWVcbiAqIEBwYXJhbSBjb21wb25lbnQgLSB0aGUgcGFyZW50aW5nIGNvbXBvbmVudCB0byBmaWx0ZXIgYnlcbiAqIEByZXR1cm5zIEFuIGl0ZXJhdG9yIG9mIGFuIGFycmF5IGFzIFtlbnRpdHksIGVudGl0eTIsIC4uLl1cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNvbnN0IFRyZWVDb21wb25lbnQgPSBlbmdpbmUuZGVmaW5lQ29tcG9uZW50KCdjdXN0b206OlRyZWVDb21wb25lbnQnLCB7XG4gKiAgICBsYWJlbDogU2NoZW1hcy5TdHJpbmcsXG4gKiAgICBwYXJlbnQ6IFNjaGVtYXMuRW50aXR5XG4gKiB9KVxuICpcbiAqIGZvciAoY29uc3QgZW50aXR5IG9mIGdldENvbXBvbmVudEVudGl0eVRyZWUoZW5naW5lLCBlbnRpdHksIFRyZWVDb21wb25lbnQpKSB7XG4gKiAgICAvLyBlbnRpdHkgaW4gdGhlIHRyZWVcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcG9uZW50RW50aXR5VHJlZShlbmdpbmUsIGVudGl0eSwgY29tcG9uZW50KSB7XG4gICAgY29uc3QgZW50aXRpZXMgPSBuZXcgTWFwKGVuZ2luZS5nZXRFbnRpdGllc1dpdGgoY29tcG9uZW50KSk7XG4gICAgcmV0dXJuIGdlbkVudGl0eVRyZWUoZW50aXR5LCBlbnRpdGllcyk7XG59XG4vLyBJIHN3ZWFyIGJ5IGFsbCB0aGUgZ29kcyB0aGF0IHRoaXMgaXMgYmVpbmcgdGVzdGVkIG9uIHRlc3Qvc2RrL25ldHdvcmsvc3luYy1lbmdpbmVzLnNwZWMudHNcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiByZW1vdmVOZXR3b3JrRW50aXR5Q2hpbGRyZW5zKGVuZ2luZSwgcGFyZW50KSB7XG4gICAgY29uc3QgTmV0d29ya1BhcmVudCA9IGNvbXBvbmVudHMuTmV0d29ya1BhcmVudChlbmdpbmUpO1xuICAgIGNvbnN0IE5ldHdvcmtFbnRpdHkgPSBjb21wb25lbnRzLk5ldHdvcmtFbnRpdHkoZW5naW5lKTtcbiAgICAvLyBSZW1vdmUgcGFyZW50XG4gICAgZW5naW5lLnJlbW92ZUVudGl0eShwYXJlbnQpO1xuICAgIC8vIFJlbW92ZSBjaGlsZHNcbiAgICBjb25zdCBuZXR3b3JrID0gTmV0d29ya0VudGl0eS5nZXRPck51bGwocGFyZW50KTtcbiAgICBpZiAobmV0d29yaykge1xuICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHksIHBhcmVudF0gb2YgZW5naW5lLmdldEVudGl0aWVzV2l0aChOZXR3b3JrUGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKHBhcmVudC5lbnRpdHlJZCA9PT0gbmV0d29yay5lbnRpdHlJZCAmJiBwYXJlbnQubmV0d29ya0lkID09PSBuZXR3b3JrLm5ldHdvcmtJZCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZU5ldHdvcmtFbnRpdHlDaGlsZHJlbnMoZW5naW5lLCBlbnRpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbn1cbi8qKlxuICogUmVtb3ZlIGFsbCBjb21wb25lbnRzIG9mIGVhY2ggZW50aXR5IGluIHRoZSB0cmVlIG1hZGUgd2l0aCBUcmFuc2Zvcm0gcGFyZW50aW5nXG4gKiBAcGFyYW0gZW5naW5lIC0gdGhlIGVuZ2luZSBydW5uaW5nIHRoZSBlbnRpdGllc1xuICogQHBhcmFtIGZpcnN0RW50aXR5IC0gdGhlIHJvb3QgZW50aXR5IG9mIHRoZSB0cmVlXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbnRpdHlXaXRoQ2hpbGRyZW4oZW5naW5lLCBlbnRpdHkpIHtcbiAgICBjb25zdCBUcmFuc2Zvcm0gPSBjb21wb25lbnRzLlRyYW5zZm9ybShlbmdpbmUpO1xuICAgIGNvbnN0IE5ldHdvcmtFbnRpdHkgPSBjb21wb25lbnRzLk5ldHdvcmtFbnRpdHkoZW5naW5lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoTmV0d29ya0VudGl0eS5oYXMoZW50aXR5KSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlTmV0d29ya0VudGl0eUNoaWxkcmVucyhlbmdpbmUsIGVudGl0eSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZW50IG9mIGdldENvbXBvbmVudEVudGl0eVRyZWUoZW5naW5lLCBlbnRpdHksIFRyYW5zZm9ybSkpIHtcbiAgICAgICAgZW5naW5lLnJlbW92ZUVudGl0eShlbnQpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgKiBhcyBjb21wb25lbnRzIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuY29uc3QgSW5wdXRDb21tYW5kcyA9IFtcbiAgICAwIC8qIElucHV0QWN0aW9uLklBX1BPSU5URVIgKi8sXG4gICAgMSAvKiBJbnB1dEFjdGlvbi5JQV9QUklNQVJZICovLFxuICAgIDIgLyogSW5wdXRBY3Rpb24uSUFfU0VDT05EQVJZICovLFxuICAgIDQgLyogSW5wdXRBY3Rpb24uSUFfRk9SV0FSRCAqLyxcbiAgICA1IC8qIElucHV0QWN0aW9uLklBX0JBQ0tXQVJEICovLFxuICAgIDYgLyogSW5wdXRBY3Rpb24uSUFfUklHSFQgKi8sXG4gICAgNyAvKiBJbnB1dEFjdGlvbi5JQV9MRUZUICovLFxuICAgIDggLyogSW5wdXRBY3Rpb24uSUFfSlVNUCAqLyxcbiAgICA5IC8qIElucHV0QWN0aW9uLklBX1dBTEsgKi8sXG4gICAgMTAgLyogSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzMgKi8sXG4gICAgMTEgLyogSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzQgKi8sXG4gICAgMTIgLyogSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzUgKi8sXG4gICAgMTMgLyogSW5wdXRBY3Rpb24uSUFfQUNUSU9OXzYgKi9cbl07XG5jb25zdCBJbnB1dFN0YXRlVXBkYXRlU3lzdGVtUHJpb3JpdHkgPSAxIDw8IDIwO1xuLyoqXG4gKiBAcHVibGljXG4gKiBfX19fRE8gTk9UIFVTRSBfX19fIHVzZSBpbnB1dFN5c3RlbSBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnB1dFN5c3RlbShlbmdpbmUpIHtcbiAgICBjb25zdCBQb2ludGVyRXZlbnRzUmVzdWx0ID0gY29tcG9uZW50cy5Qb2ludGVyRXZlbnRzUmVzdWx0KGVuZ2luZSk7XG4gICAgY29uc3QgZ2xvYmFsU3RhdGUgPSB7XG4gICAgICAgIHByZXZpb3VzRnJhbWVNYXhUaW1lc3RhbXA6IDAsXG4gICAgICAgIGN1cnJlbnRGcmFtZU1heFRpbWVzdGFtcDogMCxcbiAgICAgICAgYnV0dG9uU3RhdGU6IG5ldyBNYXAoKSxcbiAgICAgICAgdGhpc0ZyYW1lQ29tbWFuZHM6IFtdXG4gICAgfTtcbiAgICBmdW5jdGlvbiBmaW5kTGFzdEFjdGlvbihwb2ludGVyRXZlbnRUeXBlLCBpbnB1dEFjdGlvbiwgZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGFzY2VuZGluZ1RpbWVzdGFtcEl0ZXJhdG9yID0gUG9pbnRlckV2ZW50c1Jlc3VsdC5nZXQoZW50aXR5KTtcbiAgICAgICAgZm9yIChjb25zdCBjb21tYW5kIG9mIEFycmF5LmZyb20oYXNjZW5kaW5nVGltZXN0YW1wSXRlcmF0b3IpLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgaWYgKGNvbW1hbmQuYnV0dG9uID09PSBpbnB1dEFjdGlvbiAmJiBjb21tYW5kLnN0YXRlID09PSBwb2ludGVyRXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24qIGZpbmRDb21tYW5kc0J5QWN0aW9uRGVzY2VuZGluZyhpbnB1dEFjdGlvbiwgZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGFzY2VuZGluZ1RpbWVzdGFtcEl0ZXJhdG9yID0gUG9pbnRlckV2ZW50c1Jlc3VsdC5nZXQoZW50aXR5KTtcbiAgICAgICAgZm9yIChjb25zdCBjb21tYW5kIG9mIEFycmF5LmZyb20oYXNjZW5kaW5nVGltZXN0YW1wSXRlcmF0b3IpLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgaWYgKGNvbW1hbmQuYnV0dG9uID09PSBpbnB1dEFjdGlvbikge1xuICAgICAgICAgICAgICAgIHlpZWxkIGNvbW1hbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYnV0dG9uU3RhdGVVcGRhdGVTeXN0ZW0oKSB7XG4gICAgICAgIC8vIGZpcnN0IHN0b3JlIHRoZSBwcmV2aW91cycgZnJhbWUgdGltZXN0YW1wXG4gICAgICAgIGxldCBtYXhUaW1lc3RhbXAgPSBnbG9iYWxTdGF0ZS5jdXJyZW50RnJhbWVNYXhUaW1lc3RhbXA7XG4gICAgICAgIGdsb2JhbFN0YXRlLnByZXZpb3VzRnJhbWVNYXhUaW1lc3RhbXAgPSBtYXhUaW1lc3RhbXA7XG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS50aGlzRnJhbWVDb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLnRoaXNGcmFtZUNvbW1hbmRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlbiBpdGVyYXRlIG92ZXIgYWxsIG5ldyBjb21tYW5kc1xuICAgICAgICBmb3IgKGNvbnN0IFssIGNvbW1hbmRzXSBvZiBlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKFBvaW50ZXJFdmVudHNSZXN1bHQpKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBhZGFwdCB0aGUgZ3NldCBjb21wb25lbnQgdG8gaGF2ZSBhIGNhY2hlZCBcInJldmVyc2VkXCIgb3B0aW9uIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGNvbnN0IGFycmF5Q29tbWFuZHMgPSBBcnJheS5mcm9tKGNvbW1hbmRzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBhcnJheUNvbW1hbmRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IGFycmF5Q29tbWFuZHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQudGltZXN0YW1wID4gbWF4VGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heFRpbWVzdGFtcCA9IGNvbW1hbmQudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZC50aW1lc3RhbXAgPiBnbG9iYWxTdGF0ZS5wcmV2aW91c0ZyYW1lTWF4VGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnRoaXNGcmFtZUNvbW1hbmRzLnB1c2goY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kLnN0YXRlID09PSAwIC8qIFBvaW50ZXJFdmVudFR5cGUuUEVUX1VQICovIHx8IGNvbW1hbmQuc3RhdGUgPT09IDEgLyogUG9pbnRlckV2ZW50VHlwZS5QRVRfRE9XTiAqLykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q29tbWFuZCA9IGdsb2JhbFN0YXRlLmJ1dHRvblN0YXRlLmdldChjb21tYW5kLmJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJldkNvbW1hbmQgfHwgY29tbWFuZC50aW1lc3RhbXAgPiBwcmV2Q29tbWFuZC50aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmJ1dHRvblN0YXRlLnNldChjb21tYW5kLmJ1dHRvbiwgY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB3ZSBhcmUgaXRlcmF0aW5nIGEgZGVzY2VuZGluZyBhcnJheSwgd2UgY2FuIGVhcmx5IGZpbmlzaCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSBjdXJyZW50IGZyYW1lJ3MgbWF4IHRpbWVzdGFtcFxuICAgICAgICBnbG9iYWxTdGF0ZS5jdXJyZW50RnJhbWVNYXhUaW1lc3RhbXAgPSBtYXhUaW1lc3RhbXA7XG4gICAgfVxuICAgIGVuZ2luZS5hZGRTeXN0ZW0oYnV0dG9uU3RhdGVVcGRhdGVTeXN0ZW0sIElucHV0U3RhdGVVcGRhdGVTeXN0ZW1Qcmlvcml0eSwgJ0BkY2wvZWNzI2lucHV0U3lzdGVtJyk7XG4gICAgZnVuY3Rpb24gdGltZXN0YW1wSXNDdXJyZW50RnJhbWUodGltZXN0YW1wKSB7XG4gICAgICAgIGlmICh0aW1lc3RhbXAgPiBnbG9iYWxTdGF0ZS5wcmV2aW91c0ZyYW1lTWF4VGltZXN0YW1wICYmIHRpbWVzdGFtcCA8PSBnbG9iYWxTdGF0ZS5jdXJyZW50RnJhbWVNYXhUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldENsaWNrKGlucHV0QWN0aW9uLCBlbnRpdHkpIHtcbiAgICAgICAgaWYgKGlucHV0QWN0aW9uICE9PSAzIC8qIElucHV0QWN0aW9uLklBX0FOWSAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRDbGljayhpbnB1dEFjdGlvbiwgZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGlucHV0IG9mIElucHV0Q29tbWFuZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNtZCA9IGZpbmRDbGljayhpbnB1dCwgZW50aXR5KTtcbiAgICAgICAgICAgIGlmIChjbWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNtZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZENsaWNrKGlucHV0QWN0aW9uLCBlbnRpdHkpIHtcbiAgICAgICAgbGV0IGRvd24gPSBudWxsO1xuICAgICAgICBsZXQgdXAgPSBudWxsO1xuICAgICAgICAvLyBXZSBzZWFyY2ggdGhlIGxhc3QgVVAgJiBET1dOIGNvbW1hbmQgc29ydGVkIGJ5IHRpbWVzdGFtcCBkZXNjZW5kaW5nXG4gICAgICAgIGZvciAoY29uc3QgaXQgb2YgZmluZENvbW1hbmRzQnlBY3Rpb25EZXNjZW5kaW5nKGlucHV0QWN0aW9uLCBlbnRpdHkpKSB7XG4gICAgICAgICAgICBpZiAoIXVwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnN0YXRlID09PSAwIC8qIFBvaW50ZXJFdmVudFR5cGUuUEVUX1VQICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwID0gaXQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFkb3duKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnN0YXRlID09PSAxIC8qIFBvaW50ZXJFdmVudFR5cGUuUEVUX0RPV04gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgZG93biA9IGl0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF1cCB8fCAhZG93bilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvLyBJZiB0aGUgRE9XTiBjb21tYW5kIGhhcyBoYXBwZW4gYmVmb3JlIHRoZSBVUCBjb21tYW5kcywgaXQgbWVhbnMgdGhhdCB0aGF0IGEgY2xpY2tlZCBoYXMgaGFwcGVuXG4gICAgICAgIGlmIChkb3duLnRpbWVzdGFtcCA8IHVwLnRpbWVzdGFtcCAmJiB0aW1lc3RhbXBJc0N1cnJlbnRGcmFtZSh1cC50aW1lc3RhbXApKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1cCwgZG93biB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJbnB1dENvbW1hbmRGcm9tRW50aXR5KGlucHV0QWN0aW9uLCBwb2ludGVyRXZlbnRUeXBlLCBlbnRpdHkpIHtcbiAgICAgICAgaWYgKGlucHV0QWN0aW9uICE9PSAzIC8qIElucHV0QWN0aW9uLklBX0FOWSAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRJbnB1dENvbW1hbmQoaW5wdXRBY3Rpb24sIHBvaW50ZXJFdmVudFR5cGUsIGVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbnB1dCBvZiBJbnB1dENvbW1hbmRzKSB7XG4gICAgICAgICAgICBjb25zdCBjbWQgPSBmaW5kSW5wdXRDb21tYW5kKGlucHV0LCBwb2ludGVyRXZlbnRUeXBlLCBlbnRpdHkpO1xuICAgICAgICAgICAgaWYgKGNtZClcbiAgICAgICAgICAgICAgICByZXR1cm4gY21kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJbnB1dENvbW1hbmQoaW5wdXRBY3Rpb24sIHBvaW50ZXJFdmVudFR5cGUsIGVudGl0eSkge1xuICAgICAgICBpZiAoZW50aXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0SW5wdXRDb21tYW5kRnJvbUVudGl0eShpbnB1dEFjdGlvbiwgcG9pbnRlckV2ZW50VHlwZSwgZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29tbWFuZCBvZiBnbG9iYWxTdGF0ZS50aGlzRnJhbWVDb21tYW5kcykge1xuICAgICAgICAgICAgICAgIGlmICgoY29tbWFuZC5idXR0b24gPT09IGlucHV0QWN0aW9uIHx8IGlucHV0QWN0aW9uID09PSAzIC8qIElucHV0QWN0aW9uLklBX0FOWSAqLykgJiZcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5zdGF0ZSA9PT0gcG9pbnRlckV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kSW5wdXRDb21tYW5kKGlucHV0QWN0aW9uLCBwb2ludGVyRXZlbnRUeXBlLCBlbnRpdHkpIHtcbiAgICAgICAgLy8gV2Ugc2VhcmNoIHRoZSBsYXN0IHBvaW50ZXIgRXZlbnQgY29tbWFuZCBzb3J0ZWQgYnkgdGltZXN0YW1wXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBmaW5kTGFzdEFjdGlvbihwb2ludGVyRXZlbnRUeXBlLCBpbnB1dEFjdGlvbiwgZW50aXR5KTtcbiAgICAgICAgaWYgKCFjb21tYW5kKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICh0aW1lc3RhbXBJc0N1cnJlbnRGcmFtZShjb21tYW5kLnRpbWVzdGFtcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZXJlIHdhcyBhIERPV04gKGluIGFueSBwYXN0IGZyYW1lKSwgYW5kIHRoZW4gYW4gVVAgaW4gdGhlIGxhc3QgZnJhbWVcbiAgICBmdW5jdGlvbiBpc0NsaWNrZWQoaW5wdXRBY3Rpb24sIGVudGl0eSkge1xuICAgICAgICByZXR1cm4gZ2V0Q2xpY2soaW5wdXRBY3Rpb24sIGVudGl0eSkgIT09IG51bGw7XG4gICAgfVxuICAgIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgbGFzdCBhY3Rpb24gd2FzIHRyaWdnZXJlZCBpbiB0aGUgbGFzdCBmcmFtZVxuICAgIGZ1bmN0aW9uIGlzVHJpZ2dlcmVkKGlucHV0QWN0aW9uLCBwb2ludGVyRXZlbnRUeXBlLCBlbnRpdHkpIHtcbiAgICAgICAgaWYgKGVudGl0eSkge1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IGZpbmRMYXN0QWN0aW9uKHBvaW50ZXJFdmVudFR5cGUsIGlucHV0QWN0aW9uLCBlbnRpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIChjb21tYW5kICYmIHRpbWVzdGFtcElzQ3VycmVudEZyYW1lKGNvbW1hbmQudGltZXN0YW1wKSkgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbW1hbmQgb2YgZ2xvYmFsU3RhdGUudGhpc0ZyYW1lQ29tbWFuZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGNvbW1hbmQuYnV0dG9uID09PSBpbnB1dEFjdGlvbiB8fCBpbnB1dEFjdGlvbiA9PT0gMyAvKiBJbnB1dEFjdGlvbi5JQV9BTlkgKi8pICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuc3RhdGUgPT09IHBvaW50ZXJFdmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybnMgdGhlIGdsb2JhbCBzdGF0ZSBvZiB0aGUgaW5wdXQuIFRoaXMgZ2xvYmFsIHN0YXRlIGlzIHVwZGF0ZWQgZnJvbSB0aGUgc3lzdGVtXG4gICAgZnVuY3Rpb24gaXNQcmVzc2VkKGlucHV0QWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxTdGF0ZS5idXR0b25TdGF0ZS5nZXQoaW5wdXRBY3Rpb24pPy5zdGF0ZSA9PT0gMSAvKiBQb2ludGVyRXZlbnRUeXBlLlBFVF9ET1dOICovO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpc1ByZXNzZWQsXG4gICAgICAgIGdldENsaWNrLFxuICAgICAgICBnZXRJbnB1dENvbW1hbmQsXG4gICAgICAgIGlzQ2xpY2tlZCxcbiAgICAgICAgaXNUcmlnZ2VyZWRcbiAgICB9O1xufVxuIiwgIi8qKlxuICogQ29tcG9uZW50IHR5cGVzIGFyZSB1c2VkIHRvIHBpY2sgdGhlIHdpcmUgcHJvdG9jb2wgYW5kIHRoZSBjb25mbGljdCByZXNvbHV0aW9uIGFsZ29yaXRobVxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIENvbXBvbmVudFR5cGU7XG4oZnVuY3Rpb24gKENvbXBvbmVudFR5cGUpIHtcbiAgICBDb21wb25lbnRUeXBlW0NvbXBvbmVudFR5cGVbXCJMYXN0V3JpdGVXaW5FbGVtZW50U2V0XCJdID0gMF0gPSBcIkxhc3RXcml0ZVdpbkVsZW1lbnRTZXRcIjtcbiAgICBDb21wb25lbnRUeXBlW0NvbXBvbmVudFR5cGVbXCJHcm93T25seVZhbHVlU2V0XCJdID0gMV0gPSBcIkdyb3dPbmx5VmFsdWVTZXRcIjtcbn0pKENvbXBvbmVudFR5cGUgfHwgKENvbXBvbmVudFR5cGUgPSB7fSkpO1xuIiwgImltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgeyBjb21wb25lbnROdW1iZXJGcm9tTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tcG9uZW50LW51bWJlcic7XG5pbXBvcnQgeyBjaGVja05vdFRoZW5hYmxlIH0gZnJvbSAnLi4vcnVudGltZS9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgU2NoZW1hcyB9IGZyb20gJy4uL3NjaGVtYXMnO1xuaW1wb3J0IHsgY3JkdFNjZW5lU3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtcy9jcmR0JztcbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudERlZmluaXRpb25Gcm9tU2NoZW1hIH0gZnJvbSAnLi9sd3ctZWxlbWVudC1zZXQtY29tcG9uZW50LWRlZmluaXRpb24nO1xuaW1wb3J0IHsgY3JlYXRlRW50aXR5Q29udGFpbmVyIH0gZnJvbSAnLi9lbnRpdHknO1xuaW1wb3J0IHsgU3lzdGVtQ29udGFpbmVyLCBTWVNURU1TX1JFR1VMQVJfUFJJT1JJVFkgfSBmcm9tICcuL3N5c3RlbXMnO1xuaW1wb3J0IHsgY3JlYXRlVmFsdWVTZXRDb21wb25lbnREZWZpbml0aW9uRnJvbVNjaGVtYSB9IGZyb20gJy4vZ3Jvdy1vbmx5LXZhbHVlLXNldC1jb21wb25lbnQtZGVmaW5pdGlvbic7XG5pbXBvcnQgeyByZW1vdmVFbnRpdHlXaXRoQ2hpbGRyZW4gYXMgcmVtb3ZlRW50aXR5V2l0aENoaWxkcmVuRW5naW5lIH0gZnJvbSAnLi4vcnVudGltZS9oZWxwZXJzL3RyZWUnO1xuaW1wb3J0IHsgQ3JkdE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi4vc2VyaWFsaXphdGlvbi9jcmR0JztcbmV4cG9ydCAqIGZyb20gJy4vaW5wdXQnO1xuZXhwb3J0ICogZnJvbSAnLi9yZWFkb25seSc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbmZ1bmN0aW9uIHByZUVuZ2luZShvcHRpb25zKSB7XG4gICAgY29uc3QgZW50aXR5Q29udGFpbmVyID0gb3B0aW9ucz8uZW50aXR5Q29udGFpbmVyID8/IGNyZWF0ZUVudGl0eUNvbnRhaW5lcigpO1xuICAgIGNvbnN0IGNvbXBvbmVudHNEZWZpbml0aW9uID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHN5c3RlbXMgPSBTeXN0ZW1Db250YWluZXIoKTtcbiAgICBsZXQgc2VhbGVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gYWRkU3lzdGVtKGZuLCBwcmlvcml0eSA9IFNZU1RFTVNfUkVHVUxBUl9QUklPUklUWSwgbmFtZSkge1xuICAgICAgICBzeXN0ZW1zLmFkZChmbiwgcHJpb3JpdHksIG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVTeXN0ZW0oc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbXMucmVtb3ZlKHNlbGVjdG9yKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRW50aXR5KCkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBlbnRpdHlDb250YWluZXIuZ2VuZXJhdGVFbnRpdHkoKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlRW50aXR5KGVudGl0eSkge1xuICAgICAgICBmb3IgKGNvbnN0IFssIGNvbXBvbmVudF0gb2YgY29tcG9uZW50c0RlZmluaXRpb24pIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGhhY2sgZm9yIHRoZSBtb21lbnQuXG4gICAgICAgICAgICAvLyBXZSBzdGlsbCBuZWVkIHRoZSBOZXR3b3JrRW50aXR5IHRvIGZvcndhcmQgdGhpcyBtZXNzYWdlIHRvIHRoZSBTeW5jVHJhbnNwb3J0LlxuICAgICAgICAgICAgLy8gSWYgd2UgcmVtb3ZlIGl0IHRoZW4gd2UgY2FuJ3Qgbm90aWZ5IHRoZSBvdGhlciB1c2VycyB3aGljaCBlbnRpdHkgd2FzIGRlbGV0ZWQuXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudE5hbWUgPT09ICdjb3JlLXNjaGVtYTo6TmV0d29yay1FbnRpdHknKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29tcG9uZW50LmVudGl0eURlbGV0ZWQoZW50aXR5LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50aXR5Q29udGFpbmVyLnJlbW92ZUVudGl0eShlbnRpdHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVFbnRpdHlXaXRoQ2hpbGRyZW4oZW50aXR5KSB7XG4gICAgICAgIHJldHVybiByZW1vdmVFbnRpdHlXaXRoQ2hpbGRyZW5FbmdpbmUoeyByZW1vdmVFbnRpdHksIGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEsIGdldEVudGl0aWVzV2l0aCwgZGVmaW5lQ29tcG9uZW50IH0sIGVudGl0eSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50RGVmaW5pdGlvbihjb21wb25lbnROYW1lLCBjb21wb25lbnQpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKHNlYWxlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW5naW5lIGlzIGFscmVhZHkgc2VhbGVkLiBObyBjb21wb25lbnRzIGNhbiBiZSBhZGRlZCBhdCB0aGlzIHN0YWdlJyk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoY29tcG9uZW50TmFtZSk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBjb21wb25lbnRzRGVmaW5pdGlvbi5nZXQoY29tcG9uZW50SWQpO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgbnVtYmVyICR7Y29tcG9uZW50SWR9IHdhcyBhbHJlYWR5IHJlZ2lzdGVyZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnROYW1lICE9PSBjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCBuYW1lIGRvZXNuJ3QgbWF0Y2ggY29tcG9uZW50RGVmaW5pdGlvbi5jb21wb25lbnROYW1lICR7Y29tcG9uZW50TmFtZX0gIT0gJHtjb21wb25lbnQuY29tcG9uZW50TmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudElkICE9PSBjb21wb25lbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgbnVtYmVyIGRvZXNuJ3QgbWF0Y2ggY29tcG9uZW50RGVmaW5pdGlvbi5jb21wb25lbnRJZCAke2NvbXBvbmVudElkfSAhPSAke2NvbXBvbmVudC5jb21wb25lbnRJZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnRzRGVmaW5pdGlvbi5zZXQoY29tcG9uZW50SWQsIGNvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoY29tcG9uZW50TmFtZSwgc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoY29tcG9uZW50TmFtZSk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBjb21wb25lbnRzRGVmaW5pdGlvbi5nZXQoY29tcG9uZW50SWQpO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgLy8gVE9ETzogYXNzZXJ0IHNwZWMgPT09IHByZXYuc3BlY1xuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKHNlYWxlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW5naW5lIGlzIGFscmVhZHkgc2VhbGVkLiBObyBjb21wb25lbnRzIGNhbiBiZSBhZGRlZCBhdCB0aGlzIHN0YWdlJyk7XG4gICAgICAgIGNvbnN0IG5ld0NvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudERlZmluaXRpb25Gcm9tU2NoZW1hKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudElkLCBzY2hlbWEpO1xuICAgICAgICBjb21wb25lbnRzRGVmaW5pdGlvbi5zZXQoY29tcG9uZW50SWQsIG5ld0NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBuZXdDb21wb25lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlZmluZVZhbHVlU2V0Q29tcG9uZW50RnJvbVNjaGVtYShjb21wb25lbnROYW1lLCBzY2hlbWEsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50SWQgPSBjb21wb25lbnROdW1iZXJGcm9tTmFtZShjb21wb25lbnROYW1lKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGNvbXBvbmVudHNEZWZpbml0aW9uLmdldChjb21wb25lbnRJZCk7XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBhc3NlcnQgc3BlYyA9PT0gcHJldi5zcGVjXG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoc2VhbGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmdpbmUgaXMgYWxyZWFkeSBzZWFsZWQuIE5vIGNvbXBvbmVudHMgY2FuIGJlIGFkZGVkIGF0IHRoaXMgc3RhZ2UnKTtcbiAgICAgICAgY29uc3QgbmV3Q29tcG9uZW50ID0gY3JlYXRlVmFsdWVTZXRDb21wb25lbnREZWZpbml0aW9uRnJvbVNjaGVtYShjb21wb25lbnROYW1lLCBjb21wb25lbnRJZCwgc2NoZW1hLCBvcHRpb25zKTtcbiAgICAgICAgY29tcG9uZW50c0RlZmluaXRpb24uc2V0KGNvbXBvbmVudElkLCBuZXdDb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gbmV3Q29tcG9uZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWZpbmVDb21wb25lbnQoY29tcG9uZW50TmFtZSwgbWFwU3BlYywgY29uc3RydWN0b3JEZWZhdWx0KSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoY29tcG9uZW50TmFtZSk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBjb21wb25lbnRzRGVmaW5pdGlvbi5nZXQoY29tcG9uZW50SWQpO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgLy8gVE9ETzogYXNzZXJ0IHNwZWMgPT09IHByZXYuc3BlY1xuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlYWxlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW5naW5lIGlzIGFscmVhZHkgc2VhbGVkLiBObyBjb21wb25lbnRzIGNhbiBiZSBhZGRlZCBhdCB0aGlzIHN0YWdlJyk7XG4gICAgICAgIGNvbnN0IHNjaGVtYVNwZWMgPSBTY2hlbWFzLk1hcChtYXBTcGVjLCBjb25zdHJ1Y3RvckRlZmF1bHQpO1xuICAgICAgICBjb25zdCBkZWYgPSBjcmVhdGVDb21wb25lbnREZWZpbml0aW9uRnJvbVNjaGVtYShjb21wb25lbnROYW1lLCBjb21wb25lbnRJZCwgc2NoZW1hU3BlYyk7XG4gICAgICAgIGNvbnN0IG5ld0NvbXBvbmVudCA9IHtcbiAgICAgICAgICAgIC4uLmRlZixcbiAgICAgICAgICAgIGNyZWF0ZShlbnRpdHksIHZhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWYuY3JlYXRlKGVudGl0eSwgdmFsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcmVhdGVPclJlcGxhY2UoZW50aXR5LCB2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmLmNyZWF0ZU9yUmVwbGFjZShlbnRpdHksIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbXBvbmVudHNEZWZpbml0aW9uLnNldChjb21wb25lbnRJZCwgbmV3Q29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIG5ld0NvbXBvbmVudDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50KGNvbXBvbmVudElkT3JOYW1lKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gdHlwZW9mIGNvbXBvbmVudElkT3JOYW1lID09PSAnbnVtYmVyJyA/IGNvbXBvbmVudElkT3JOYW1lIDogY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoY29tcG9uZW50SWRPck5hbWUpO1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRzRGVmaW5pdGlvbi5nZXQoY29tcG9uZW50SWQpO1xuICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnRJZE9yTmFtZX0gbm90IGZvdW5kLiBZb3UgbmVlZCB0byBkZWNsYXJlIHRoZSBjb21wb25lbnRzIGF0IHRoZSBiZWdpbm5pZyBvZiB0aGUgZW5naW5lIGRlY2xhcmF0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50T3JOdWxsKGNvbXBvbmVudElkT3JOYW1lKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gdHlwZW9mIGNvbXBvbmVudElkT3JOYW1lID09PSAnbnVtYmVyJyA/IGNvbXBvbmVudElkT3JOYW1lIDogY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoY29tcG9uZW50SWRPck5hbWUpO1xuICAgICAgICByZXR1cm4gKGNvbXBvbmVudHNEZWZpbml0aW9uLmdldChjb21wb25lbnRJZCkgPz9cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICBudWxsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24qIGdldEVudGl0aWVzV2l0aCguLi5jb21wb25lbnRzKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2VudGl0eSwgLi4uZ3JvdXBDb21wXSBvZiBnZXRDb21wb25lbnREZWZHcm91cCguLi5jb21wb25lbnRzKSkge1xuICAgICAgICAgICAgeWllbGQgW2VudGl0eSwgLi4uZ3JvdXBDb21wLm1hcCgoYykgPT4gYy5nZXQoZW50aXR5KSldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEVudGl0eU9yTnVsbEJ5TmFtZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBOYW1lQ29tcG9uZW50ID0gY29tcG9uZW50cy5OYW1lKHsgZGVmaW5lQ29tcG9uZW50IH0pO1xuICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHksIG5hbWVdIG9mIGdldEVudGl0aWVzV2l0aChOYW1lQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgaWYgKG5hbWUudmFsdWUgPT09IHZhbHVlKVxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEVudGl0eUJ5TmFtZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBnZXRFbnRpdHlPck51bGxCeU5hbWUodmFsdWUpO1xuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cbiAgICBmdW5jdGlvbiogZ2V0Q29tcG9uZW50RGVmR3JvdXAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBbZmlyc3RDb21wb25lbnREZWYsIC4uLmNvbXBvbmVudERlZmluaXRpb25zXSA9IGFyZ3M7XG4gICAgICAgIGZvciAoY29uc3QgW2VudGl0eV0gb2YgZmlyc3RDb21wb25lbnREZWYuaXRlcmF0b3IoKSkge1xuICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnREZWYgb2YgY29tcG9uZW50RGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvbmVudERlZi5oYXMoZW50aXR5KSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgW2VudGl0eSwgLi4uYXJnc107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3lzdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbXMuZ2V0U3lzdGVtcygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wb25lbnRzSXRlcigpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNEZWZpbml0aW9uLnZhbHVlcygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVDb21wb25lbnREZWZpbml0aW9uKGNvbXBvbmVudElkT3JOYW1lKSB7XG4gICAgICAgIGlmIChzZWFsZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuZ2luZSBpcyBhbHJlYWR5IHNlYWxlZC4gTm8gY29tcG9uZW50cyBjYW4gYmUgcmVtb3ZlZCBhdCB0aGlzIHN0YWdlJyk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gdHlwZW9mIGNvbXBvbmVudElkT3JOYW1lID09PSAnbnVtYmVyJyA/IGNvbXBvbmVudElkT3JOYW1lIDogY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoY29tcG9uZW50SWRPck5hbWUpO1xuICAgICAgICBjb21wb25lbnRzRGVmaW5pdGlvbi5kZWxldGUoY29tcG9uZW50SWQpO1xuICAgIH1cbiAgICBjb21wb25lbnRzLlRyYW5zZm9ybSh7IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEgfSk7XG4gICAgZnVuY3Rpb24gc2VhbCgpIHtcbiAgICAgICAgaWYgKCFzZWFsZWQpIHtcbiAgICAgICAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkRW50aXR5LFxuICAgICAgICByZW1vdmVFbnRpdHksXG4gICAgICAgIHJlbW92ZUVudGl0eVdpdGhDaGlsZHJlbixcbiAgICAgICAgYWRkU3lzdGVtLFxuICAgICAgICBnZXRTeXN0ZW1zLFxuICAgICAgICByZW1vdmVTeXN0ZW0sXG4gICAgICAgIGRlZmluZUNvbXBvbmVudCxcbiAgICAgICAgZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYSxcbiAgICAgICAgZGVmaW5lVmFsdWVTZXRDb21wb25lbnRGcm9tU2NoZW1hLFxuICAgICAgICBnZXRFbnRpdGllc1dpdGgsXG4gICAgICAgIGdldENvbXBvbmVudCxcbiAgICAgICAgZ2V0Q29tcG9uZW50T3JOdWxsOiBnZXRDb21wb25lbnRPck51bGwsXG4gICAgICAgIGdldEVudGl0eU9yTnVsbEJ5TmFtZSxcbiAgICAgICAgZ2V0RW50aXR5QnlOYW1lLFxuICAgICAgICByZW1vdmVDb21wb25lbnREZWZpbml0aW9uLFxuICAgICAgICByZWdpc3RlckNvbXBvbmVudERlZmluaXRpb24sXG4gICAgICAgIGVudGl0eUNvbnRhaW5lcixcbiAgICAgICAgY29tcG9uZW50c0l0ZXIsXG4gICAgICAgIHNlYWxcbiAgICB9O1xufVxuLyoqXG4gKiBJbnRlcm5hbCBjb25zdHJ1Y3RvciBvZiBuZXcgZW5naW5lcywgdGhpcyBpcyBhbiBpbnRlcm5hbCBBUElcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIFByZXZlbnQgbWFudWFsIHVzYWdlIHByZWZlciBcImVuZ2luZVwiIGZvciBzY2VuZSBkZXZlbG9wbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gRW5naW5lKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwYXJ0aWFsRW5naW5lID0gcHJlRW5naW5lKG9wdGlvbnMpO1xuICAgIGNvbnN0IG9uQ2hhbmdlRnVuY3Rpb24gPSAoZW50aXR5LCBvcGVyYXRpb24sIGNvbXBvbmVudCwgY29tcG9uZW50VmFsdWUpID0+IHtcbiAgICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHBhcnRpYWxFbmdpbmUuY29tcG9uZW50c0l0ZXIoKSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudD8uX19vbkNoYW5nZUNhbGxiYWNrcyhlbnRpdHksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21wb25lbnQ/Ll9fb25DaGFuZ2VDYWxsYmFja3MoZW50aXR5LCBjb21wb25lbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM/Lm9uQ2hhbmdlRnVuY3Rpb24oZW50aXR5LCBvcGVyYXRpb24sIGNvbXBvbmVudCwgY29tcG9uZW50VmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgY3JkdFN5c3RlbSA9IGNyZHRTY2VuZVN5c3RlbShwYXJ0aWFsRW5naW5lLCBvbkNoYW5nZUZ1bmN0aW9uKTtcbiAgICBhc3luYyBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgYXdhaXQgY3JkdFN5c3RlbS5yZWNlaXZlTWVzc2FnZXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBzeXN0ZW0gb2YgcGFydGlhbEVuZ2luZS5nZXRTeXN0ZW1zKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IHN5c3RlbS5mbihkdCk7XG4gICAgICAgICAgICBjaGVja05vdFRoZW5hYmxlKHJldCwgYEEgc3lzdGVtICgke3N5c3RlbS5uYW1lIHx8ICdhbm9ueW1vdXMnfSkgcmV0dXJuZWQgYSB0aGVuYWJsZS4gU3lzdGVtcyBjYW5ub3QgYmUgYXN5bmMgZnVuY3Rpb25zLiBEb2N1bWVudGF0aW9uOiBodHRwczovL2RjbC5nZy9zZGsvc3luYy1zeXN0ZW1zYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZ2V0IHRoZSBkZWxldGVkIGVudGl0aWVzIHRvIHNlbmQgdGhlIERlbGV0ZUVudGl0eSBDUkRUIGNvbW1hbmRzXG4gICAgICAgIGNvbnN0IGRlbGV0ZWRFbnRpdGVzID0gcGFydGlhbEVuZ2luZS5lbnRpdHlDb250YWluZXIucmVsZWFzZVJlbW92ZWRFbnRpdGllcygpO1xuICAgICAgICBhd2FpdCBjcmR0U3lzdGVtLnNlbmRNZXNzYWdlcyhkZWxldGVkRW50aXRlcyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIF9pZDogRGF0ZS5ub3coKSxcbiAgICAgICAgYWRkRW50aXR5OiBwYXJ0aWFsRW5naW5lLmFkZEVudGl0eSxcbiAgICAgICAgcmVtb3ZlRW50aXR5OiBwYXJ0aWFsRW5naW5lLnJlbW92ZUVudGl0eSxcbiAgICAgICAgcmVtb3ZlRW50aXR5V2l0aENoaWxkcmVuOiBwYXJ0aWFsRW5naW5lLnJlbW92ZUVudGl0eVdpdGhDaGlsZHJlbixcbiAgICAgICAgYWRkU3lzdGVtOiBwYXJ0aWFsRW5naW5lLmFkZFN5c3RlbSxcbiAgICAgICAgcmVtb3ZlU3lzdGVtOiBwYXJ0aWFsRW5naW5lLnJlbW92ZVN5c3RlbSxcbiAgICAgICAgZGVmaW5lQ29tcG9uZW50OiBwYXJ0aWFsRW5naW5lLmRlZmluZUNvbXBvbmVudCxcbiAgICAgICAgZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYTogcGFydGlhbEVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hLFxuICAgICAgICBkZWZpbmVWYWx1ZVNldENvbXBvbmVudEZyb21TY2hlbWE6IHBhcnRpYWxFbmdpbmUuZGVmaW5lVmFsdWVTZXRDb21wb25lbnRGcm9tU2NoZW1hLFxuICAgICAgICByZWdpc3RlckNvbXBvbmVudERlZmluaXRpb246IHBhcnRpYWxFbmdpbmUucmVnaXN0ZXJDb21wb25lbnREZWZpbml0aW9uLFxuICAgICAgICBnZXRFbnRpdGllc1dpdGg6IHBhcnRpYWxFbmdpbmUuZ2V0RW50aXRpZXNXaXRoLFxuICAgICAgICBnZXRDb21wb25lbnQ6IHBhcnRpYWxFbmdpbmUuZ2V0Q29tcG9uZW50LFxuICAgICAgICBnZXRDb21wb25lbnRPck51bGw6IHBhcnRpYWxFbmdpbmUuZ2V0Q29tcG9uZW50T3JOdWxsLFxuICAgICAgICByZW1vdmVDb21wb25lbnREZWZpbml0aW9uOiBwYXJ0aWFsRW5naW5lLnJlbW92ZUNvbXBvbmVudERlZmluaXRpb24sXG4gICAgICAgIGNvbXBvbmVudHNJdGVyOiBwYXJ0aWFsRW5naW5lLmNvbXBvbmVudHNJdGVyLFxuICAgICAgICBzZWFsOiBwYXJ0aWFsRW5naW5lLnNlYWwsXG4gICAgICAgIGdldEVudGl0eU9yTnVsbEJ5TmFtZTogcGFydGlhbEVuZ2luZS5nZXRFbnRpdHlPck51bGxCeU5hbWUsXG4gICAgICAgIGdldEVudGl0eUJ5TmFtZTogcGFydGlhbEVuZ2luZS5nZXRFbnRpdHlCeU5hbWUsXG4gICAgICAgIHVwZGF0ZSxcbiAgICAgICAgUm9vdEVudGl0eTogMCxcbiAgICAgICAgUGxheWVyRW50aXR5OiAxLFxuICAgICAgICBDYW1lcmFFbnRpdHk6IDIsXG4gICAgICAgIGdldEVudGl0eVN0YXRlOiBwYXJ0aWFsRW5naW5lLmVudGl0eUNvbnRhaW5lci5nZXRFbnRpdHlTdGF0ZSxcbiAgICAgICAgYWRkVHJhbnNwb3J0OiBjcmR0U3lzdGVtLmFkZFRyYW5zcG9ydCxcbiAgICAgICAgZW50aXR5Q29udGFpbmVyOiBwYXJ0aWFsRW5naW5lLmVudGl0eUNvbnRhaW5lclxuICAgIH07XG59XG4iLCAiaW1wb3J0ICogYXMgY29tcG9uZW50cyBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IFJlYWRXcml0ZUJ5dGVCdWZmZXIgfSBmcm9tICcuLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInO1xuaW1wb3J0IHsgZGF0YUNvbXBhcmUgfSBmcm9tICcuL2NyZHQvdXRpbHMnO1xuLyoqXG4gKiBBdm9pZCBjcmVhdGluZyBtdWx0aXBsZSB0d2VlbiBzeXN0ZW1zXG4gKi9cbmNvbnN0IGNhY2hlVHdlZW4gPSBuZXcgTWFwKCk7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEByZXR1cm5zIHR3ZWVuIGhlbHBlciB0byBiZSB1c2VkIG9uIHRoZSBzY2VuZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHdlZW5TeXN0ZW0oZW5naW5lKSB7XG4gICAgaWYgKGNhY2hlVHdlZW4uaGFzKGVuZ2luZS5faWQpKSB7XG4gICAgICAgIHJldHVybiBjYWNoZVR3ZWVuLmdldChlbmdpbmUuX2lkKTtcbiAgICB9XG4gICAgY29uc3QgVHdlZW4gPSBjb21wb25lbnRzLlR3ZWVuKGVuZ2luZSk7XG4gICAgY29uc3QgVHdlZW5TdGF0ZSA9IGNvbXBvbmVudHMuVHdlZW5TdGF0ZShlbmdpbmUpO1xuICAgIGNvbnN0IFR3ZWVuU2VxdWVuY2UgPSBjb21wb25lbnRzLlR3ZWVuU2VxdWVuY2UoZW5naW5lKTtcbiAgICBjb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICBmdW5jdGlvbiBpc0NvbXBsZXRlZChlbnRpdHkpIHtcbiAgICAgICAgY29uc3QgdHdlZW5TdGF0ZSA9IFR3ZWVuU3RhdGUuZ2V0T3JOdWxsKGVudGl0eSk7XG4gICAgICAgIGNvbnN0IHR3ZWVuID0gVHdlZW4uZ2V0T3JOdWxsKGVudGl0eSk7XG4gICAgICAgIGNvbnN0IHR3ZWVuQ2FjaGUgPSBjYWNoZS5nZXQoZW50aXR5KTtcbiAgICAgICAgaWYgKCF0d2VlblN0YXRlIHx8ICF0d2VlbilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBSZW5kZXJlciBub3RpZmllZCB0aGF0IHRoZSB0d2VlbiBpcyBjb21wbGV0ZWRcbiAgICAgICAgKHR3ZWVuQ2hhbmdlZChlbnRpdHkpIHx8IHR3ZWVuU3RhdGUuc3RhdGUgPT09IDEgLyogVHdlZW5TdGF0ZVN0YXR1cy5UU19DT01QTEVURUQgKi8pICYmXG4gICAgICAgICAgICAvLyBBdm9pZCBzZW5kaW5nIGlzQ29tcGxldGVkIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgICAhdHdlZW5DYWNoZT8uY29tcGxldGVkICYmXG4gICAgICAgICAgICAvLyBBbW91bnQgb2YgZnJhbWVzIG5lZWRlZCB0byBjb25zaWRlciBhIHR3ZWVuIGNvbXBsZXRlZFxuICAgICAgICAgICAgKHR3ZWVuQ2FjaGU/LmZyYW1lcyA/PyAwKSA+IDIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHdlZW5DaGFuZ2VkKGVudGl0eSkge1xuICAgICAgICBjb25zdCBjdXJyZW50VHdlZW4gPSBUd2Vlbi5nZXRPck51bGwoZW50aXR5KTtcbiAgICAgICAgY29uc3QgcHJldlR3ZWVuID0gY2FjaGUuZ2V0KGVudGl0eSk/LnR3ZWVuO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoKGN1cnJlbnRUd2VlbiAmJiAhcHJldlR3ZWVuKSB8fCAoIWN1cnJlbnRUd2VlbiAmJiBwcmV2VHdlZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50QnVmZiA9IG5ldyBSZWFkV3JpdGVCeXRlQnVmZmVyKCk7XG4gICAgICAgIFR3ZWVuLnNjaGVtYS5zZXJpYWxpemUoY3VycmVudFR3ZWVuLCBjdXJyZW50QnVmZik7XG4gICAgICAgIGNvbnN0IGVxdWFsID0gZGF0YUNvbXBhcmUoY3VycmVudEJ1ZmYudG9CaW5hcnkoKSwgcHJldlR3ZWVuKTtcbiAgICAgICAgcmV0dXJuIGVxdWFsO1xuICAgIH1cbiAgICBjb25zdCByZXN0YXJ0VHdlZW5zID0gW107XG4gICAgLy8gTG9naWMgZm9yIHNlcXVlbmNlIHR3ZWVuc1xuICAgIGVuZ2luZS5hZGRTeXN0ZW0oKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHJlc3RhcnQgb2YgcmVzdGFydFR3ZWVucykge1xuICAgICAgICAgICAgcmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3RhcnRUd2VlbnMubGVuZ3RoID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBbZW50aXR5LCB0d2Vlbl0gb2YgZW5naW5lLmdldEVudGl0aWVzV2l0aChUd2VlbikpIHtcbiAgICAgICAgICAgIGlmICh0d2VlbkNoYW5nZWQoZW50aXR5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBSZWFkV3JpdGVCeXRlQnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgVHdlZW4uc2NoZW1hLnNlcmlhbGl6ZSh0d2VlbiwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQoZW50aXR5LCB7XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuOiBidWZmZXIudG9CaW5hcnkoKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVzOiAwLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0d2VlbkNhY2hlID0gY2FjaGUuZ2V0KGVudGl0eSk7XG4gICAgICAgICAgICB0d2VlbkNhY2hlLmZyYW1lcyArPSAxO1xuICAgICAgICAgICAgdHdlZW5DYWNoZS5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoaXNDb21wbGV0ZWQoZW50aXR5KSkge1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHR3ZWVuIGZyYW1lcy5cbiAgICAgICAgICAgICAgICB0d2VlbkNhY2hlLmZyYW1lcyA9IDA7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSB0d2VlbiBjb21wbGV0ZWQgdG8gYXZvaWQgY2FsbGluZyB0aGlzIGFnYWluIGZvciB0aGUgc2FtZSB0d2VlblxuICAgICAgICAgICAgICAgIHR3ZWVuQ2FjaGUuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0d2VlblNlcXVlbmNlID0gVHdlZW5TZXF1ZW5jZS5nZXRPck51bGwoZW50aXR5KTtcbiAgICAgICAgICAgICAgICBpZiAoIXR3ZWVuU2VxdWVuY2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2VxdWVuY2UgfSA9IHR3ZWVuU2VxdWVuY2U7XG4gICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlICYmIHNlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbbmV4dFR3ZWVuU2VxdWVuY2UsIC4uLm90aGVyVHdlZW5zXSA9IHNlcXVlbmNlO1xuICAgICAgICAgICAgICAgICAgICBUd2Vlbi5jcmVhdGVPclJlcGxhY2UoZW50aXR5LCBuZXh0VHdlZW5TZXF1ZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG11dGFibGVUd2VlbkhlbHBlciA9IFR3ZWVuU2VxdWVuY2UuZ2V0TXV0YWJsZShlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICBtdXRhYmxlVHdlZW5IZWxwZXIuc2VxdWVuY2UgPSBvdGhlclR3ZWVucztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR3ZWVuU2VxdWVuY2UubG9vcCA9PT0gMCAvKiBUd2Vlbkxvb3AuVExfUkVTVEFSVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YWJsZVR3ZWVuSGVscGVyLnNlcXVlbmNlLnB1c2godHdlZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR3ZWVuU2VxdWVuY2UubG9vcCA9PT0gMSAvKiBUd2Vlbkxvb3AuVExfWU9ZTyAqLykge1xuICAgICAgICAgICAgICAgICAgICBUd2Vlbi5jcmVhdGVPclJlcGxhY2UoZW50aXR5LCBiYWNrd2FyZHNUd2Vlbih0d2VlbikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0d2VlblNlcXVlbmNlLmxvb3AgPT09IDAgLyogVHdlZW5Mb29wLlRMX1JFU1RBUlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgVHdlZW4uZGVsZXRlRnJvbShlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZS5kZWxldGUoZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdGFydFR3ZWVucy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuLmNyZWF0ZU9yUmVwbGFjZShlbnRpdHksIHR3ZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICBmdW5jdGlvbiBiYWNrd2FyZHNUd2Vlbih0d2Vlbikge1xuICAgICAgICBpZiAodHdlZW4ubW9kZT8uJGNhc2UgPT09ICdtb3ZlJyAmJiB0d2Vlbi5tb2RlLm1vdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnR3ZWVuLCBtb2RlOiB7IC4uLnR3ZWVuLm1vZGUsIG1vdmU6IHsgc3RhcnQ6IHR3ZWVuLm1vZGUubW92ZS5lbmQsIGVuZDogdHdlZW4ubW9kZS5tb3ZlLnN0YXJ0IH0gfSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0d2Vlbi5tb2RlPy4kY2FzZSA9PT0gJ3JvdGF0ZScgJiYgdHdlZW4ubW9kZS5yb3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4udHdlZW4sXG4gICAgICAgICAgICAgICAgbW9kZTogeyAuLi50d2Vlbi5tb2RlLCByb3RhdGU6IHsgc3RhcnQ6IHR3ZWVuLm1vZGUucm90YXRlLmVuZCwgZW5kOiB0d2Vlbi5tb2RlLnJvdGF0ZS5zdGFydCB9IH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR3ZWVuLm1vZGU/LiRjYXNlID09PSAnc2NhbGUnICYmIHR3ZWVuLm1vZGUuc2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnR3ZWVuLCBtb2RlOiB7IC4uLnR3ZWVuLm1vZGUsIHNjYWxlOiB7IHN0YXJ0OiB0d2Vlbi5tb2RlLnNjYWxlLmVuZCwgZW5kOiB0d2Vlbi5tb2RlLnNjYWxlLnN0YXJ0IH0gfSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0d2Vlbi5tb2RlPy4kY2FzZSA9PT0gJ3RleHR1cmVNb3ZlJyAmJiB0d2Vlbi5tb2RlLnRleHR1cmVNb3ZlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnR3ZWVuLFxuICAgICAgICAgICAgICAgIG1vZGU6IHsgLi4udHdlZW4ubW9kZSwgdGV4dHVyZU1vdmU6IHsgc3RhcnQ6IHR3ZWVuLm1vZGUudGV4dHVyZU1vdmUuZW5kLCBlbmQ6IHR3ZWVuLm1vZGUudGV4dHVyZU1vdmUuc3RhcnQgfSB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0d2VlbicpO1xuICAgIH1cbiAgICBjb25zdCB0d2VlblN5c3RlbSA9IHtcbiAgICAgICAgLy8gVGhpcyBldmVudCBpcyBmaXJlZCBvbmx5IG9uY2UgcGVyIHR3ZWVuXG4gICAgICAgIHR3ZWVuQ29tcGxldGVkOiBpc0NvbXBsZXRlZFxuICAgIH07XG4gICAgY2FjaGVUd2Vlbi5zZXQoZW5naW5lLl9pZCwgdHdlZW5TeXN0ZW0pO1xuICAgIHJldHVybiB0d2VlblN5c3RlbTtcbn1cbiIsICIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuaW1wb3J0ICogYXMgY29tcG9uZW50cyBmcm9tICcuLi9jb21wb25lbnRzJztcbi8qKlxuICogSXQgY2hlY2tzIGFsbCB0aGUgZW50aXRpZXMgdGhhdCBoYXMgYSBQb2ludGVyRXZlbnQgYW5kIGNoZWNrIGlmIGl0IGhhcyBhIGNvbGxpZGVyLlxuICogKlxuICogQHB1YmxpY1xuICogQHBhcmFtcyBlbmdpbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvaW50ZXJFdmVudENvbGxpZGVyQ2hlY2tlcihlbmdpbmUpIHtcbiAgICBjb25zdCBQb2ludGVyRXZlbnRzID0gY29tcG9uZW50cy5Qb2ludGVyRXZlbnRzKGVuZ2luZSk7XG4gICAgY29uc3QgTWVzaENvbGxpZGVyID0gY29tcG9uZW50cy5NZXNoQ29sbGlkZXIoZW5naW5lKTtcbiAgICBjb25zdCBHbHRmQ29udGFpbmVyID0gY29tcG9uZW50cy5HbHRmQ29udGFpbmVyKGVuZ2luZSk7XG4gICAgY29uc3QgVWlUcmFuc2Zvcm0gPSBjb21wb25lbnRzLlVpVHJhbnNmb3JtKGVuZ2luZSk7XG4gICAgY29uc3QgYWxyZWFkeVNob3dubG9nID0gbmV3IFNldCgpO1xuICAgIGxldCB0aW1lciA9IDA7XG4gICAgZnVuY3Rpb24gc3lzdGVtQ2hlY2tlcihkdCkge1xuICAgICAgICB0aW1lciArPSBkdDtcbiAgICAgICAgaWYgKHRpbWVyIDw9IDEwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGltZXIgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHldIG9mIGVuZ2luZS5nZXRFbnRpdGllc1dpdGgoUG9pbnRlckV2ZW50cykpIHtcbiAgICAgICAgICAgIGlmIChhbHJlYWR5U2hvd25sb2cuaGFzKGVudGl0eSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBNYXliZSB0aGUgY29sbGlkZXIgaXMgaW5zaWRlIHRoZSBHTFRGQ29udGFpbmVyLiBJZ25vcmUgaXRcbiAgICAgICAgICAgIGlmIChHbHRmQ29udGFpbmVyLmhhcyhlbnRpdHkpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gVUkgaGFuZGxlcyB0aGUgcG9pbnRlcidzIGluIGEgZGlmZiB3YXkuXG4gICAgICAgICAgICBpZiAoVWlUcmFuc2Zvcm0uaGFzKGVudGl0eSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgTWVzaCBQb2ludGVyIENvbGxpc2lvbiBMYXllclxuICAgICAgICAgICAgY29uc3QgbWVzaCA9IE1lc2hDb2xsaWRlci5nZXRPck51bGwoZW50aXR5KTtcbiAgICAgICAgICAgIGlmIChtZXNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc2guY29sbGlzaW9uTWFzayA9PT0gdW5kZWZpbmVkIHx8IG1lc2guY29sbGlzaW9uTWFzayAmIDEgLyogY29tcG9uZW50cy5Db2xsaWRlckxheWVyLkNMX1BPSU5URVIgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxyZWFkeVNob3dubG9nLmFkZChlbnRpdHkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1MjZBMFx1RkUwRiBNaXNzaW5nIE1lc2hDb2xsaWRlciBjb21wb25lbnQgb24gZW50aXR5ICR7ZW50aXR5fS4gQWRkIGEgTWVzaENvbGxpZGVyIHRvIHRoZSBlbnRpdHkgc28gaXQgY2FuIGJlIGNsaWNrZWFibGUgYnkgdGhlIHBsYXllci5cblNlZSBodHRwczovL2RvY3MuZGVjZW50cmFsYW5kLm9yZy9jcmVhdG9yL2RldmVsb3BtZW50LWd1aWRlL3NkazcvY29sbGlkZXJzLyNwb2ludGVyLWJsb2NraW5nYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5naW5lLnJlbW92ZVN5c3RlbShzeXN0ZW1DaGVja2VyKTtcbiAgICBlbmdpbmUuYWRkU3lzdGVtKHN5c3RlbUNoZWNrZXIpO1xufVxuIiwgIi8qKlxuICogQGFscGhhICogVGhpcyBmaWxlIGluaXRpYWxpemF0aW9uIGlzIGFuIGFscGhhIG9uZS4gVGhpcyBpcyBiYXNlZCBvbiB0aGUgb2xkLWVjc1xuICogaW5pdCBhbmQgaXQnbGwgYmUgY2hhbmdpbmcuXG4gKi9cbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uLy4uL2VuZ2luZSc7XG5pbXBvcnQgeyBjcmVhdGVUYXNrU3lzdGVtIH0gZnJvbSAnLi4vLi4vc3lzdGVtcy9hc3luYy10YXNrJztcbmltcG9ydCB7IGNyZWF0ZVBvaW50ZXJFdmVudHNTeXN0ZW0gfSBmcm9tICcuLi8uLi9zeXN0ZW1zL2V2ZW50cyc7XG5pbXBvcnQgeyBjcmVhdGVJbnB1dFN5c3RlbSB9IGZyb20gJy4vLi4vLi4vZW5naW5lL2lucHV0JztcbmltcG9ydCB7IGNyZWF0ZVJheWNhc3RTeXN0ZW0gfSBmcm9tICcuLi8uLi9zeXN0ZW1zL3JheWNhc3QnO1xuaW1wb3J0IHsgY3JlYXRlVmlkZW9FdmVudHNTeXN0ZW0gfSBmcm9tICcuLi8uLi9zeXN0ZW1zL3ZpZGVvRXZlbnRzJztcbmltcG9ydCB7IGNyZWF0ZVR3ZWVuU3lzdGVtIH0gZnJvbSAnLi4vLi4vc3lzdGVtcy90d2Vlbic7XG5pbXBvcnQgeyBwb2ludGVyRXZlbnRDb2xsaWRlckNoZWNrZXIgfSBmcm9tICcuLi8uLi9zeXN0ZW1zL3BvaW50ZXItZXZlbnQtY29sbGlkZXItY2hlY2tlcic7XG4vKipcbiAqIEBwdWJsaWNcbiAqIFRoZSBlbmdpbmUgaXMgdGhlIHBhcnQgb2YgdGhlIHNjZW5lIHRoYXQgc2l0cyBpbiB0aGUgbWlkZGxlIGFuZCBtYW5hZ2VzIGFsbCBvZiB0aGUgb3RoZXIgcGFydHMuXG4gKiBJdCBkZXRlcm1pbmVzIHdoYXQgZW50aXRpZXMgYXJlIHJlbmRlcmVkIGFuZCBob3cgcGxheWVycyBpbnRlcmFjdCB3aXRoIHRoZW0uXG4gKiBJdCBhbHNvIGNvb3JkaW5hdGVzIHdoYXQgZnVuY3Rpb25zIGZyb20gc3lzdGVtcyBhcmUgZXhlY3V0ZWQgYW5kIHdoZW4uXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGVuZ2luZSB9IGZyb20gJ0BkY2wvc2RrL2VjcydcbiAqIGNvbnN0IGVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICogZW5naW5lLmFkZFN5c3RlbShzb21lU3lzdGVtRnVuY3Rpb24pXG4gKlxuICovXG5leHBvcnQgY29uc3QgZW5naW5lID0gLyogQF9fUFVSRV9fICovIEVuZ2luZSgpO1xuLyoqXG4gKiBAcHVibGljXG4gKiBJbnB1dCBzeXN0ZW0gbWFuYWdlci4gQ2hlY2sgZm9yIGJ1dHRvbiBldmVudHNcbiAqIEBleGFtcGxlXG4gKiBpbnB1dFN5c3RlbS5pc1RyaWdnZXJlZDogUmV0dXJucyB0cnVlIGlmIGFuIGlucHV0IGFjdGlvbiBvY3VycmVkIHNpbmNlIHRoZSBsYXN0IHRpY2suXG4gKiBpbnB1dFN5c3RlbS5pc1ByZXNzZWQ6IFJldHVybnMgdHJ1ZSBpZiBhbiBpbnB1dCBpcyBjdXJyZW50bHkgYmVpbmcgcHJlc3NlZCBkb3duLiBJdCB3aWxsIHJldHVybiB0cnVlIG9uIGV2ZXJ5IHRpY2sgdW50aWwgdGhlIGJ1dHRvbiBnb2VzIHVwIGFnYWluLlxuICogaW5wdXRTeXN0ZW0uZ2V0SW5wdXRDb21tYW5kOiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGRhdGEgYWJvdXQgdGhlIGlucHV0IGFjdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGlucHV0U3lzdGVtID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUlucHV0U3lzdGVtKGVuZ2luZSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9ucyB0byBhIHBhcnRpY3VsYXIgZW50aXR5IG9uIGlucHV0IGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHBvaW50ZXJFdmVudHNTeXN0ZW0gPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlUG9pbnRlckV2ZW50c1N5c3RlbShlbmdpbmUsIGlucHV0U3lzdGVtKTtcbi8qKlxuICogQHB1YmxpY1xuICogUmVnaXN0ZXIgY2FsbGJhY2sgZnVuY3Rpb25zIHRvIGEgcGFydGljdWxhciBlbnRpdHkgb24gcmF5Y2FzdCByZXN1bHRzLlxuICovXG5leHBvcnQgY29uc3QgcmF5Y2FzdFN5c3RlbSA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVSYXljYXN0U3lzdGVtKGVuZ2luZSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9ucyB0byBhIHBhcnRpY3VsYXIgZW50aXR5IG9uIHZpZGVvIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZGVvRXZlbnRzU3lzdGVtID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVZpZGVvRXZlbnRzU3lzdGVtKGVuZ2luZSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9ucyB0byBhIHBhcnRpY3VsYXIgZW50aXR5IG9uIHZpZGVvIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHR3ZWVuU3lzdGVtID0gY3JlYXRlVHdlZW5TeXN0ZW0oZW5naW5lKTtcbi8qKlxuICogQWRkcyBwb2ludGVyIGV2ZW50IGNvbGxpZGVyIHN5c3RlbSBvbmx5IGluIERFViBlbnZcbiAqL1xucG9pbnRlckV2ZW50Q29sbGlkZXJDaGVja2VyKGVuZ2luZSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqIFJ1bnMgYW4gYXN5bmMgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGV4ZWN1dGVUYXNrID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVRhc2tTeXN0ZW0oZW5naW5lKTtcbiIsICJpbXBvcnQgeyBlbmdpbmUgfSBmcm9tICcuLi8uLi9ydW50aW1lL2luaXRpYWxpemF0aW9uJztcbmltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi9pbmRleC5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9pbmRleC5nZW4nO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF1ZGlvRXZlbnQgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5BdWRpb0V2ZW50KGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgQXVkaW9Tb3VyY2UgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5BdWRpb1NvdXJjZShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF1ZGlvU3RyZWFtID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuQXVkaW9TdHJlYW0oZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdmF0YXJBdHRhY2ggPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5BdmF0YXJBdHRhY2goZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBBdmF0YXJCYXNlID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuQXZhdGFyQmFzZShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhckVtb3RlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLkF2YXRhckVtb3RlQ29tbWFuZChlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhckVxdWlwcGVkRGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLkF2YXRhckVxdWlwcGVkRGF0YShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhck1vZGlmaWVyQXJlYSA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLkF2YXRhck1vZGlmaWVyQXJlYShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEF2YXRhclNoYXBlID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuQXZhdGFyU2hhcGUoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBCaWxsYm9hcmQgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5CaWxsYm9hcmQoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBDYW1lcmFNb2RlID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuQ2FtZXJhTW9kZShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IENhbWVyYU1vZGVBcmVhID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuQ2FtZXJhTW9kZUFyZWEoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBFbmdpbmVJbmZvID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuRW5naW5lSW5mbyhlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IEdsdGZDb250YWluZXIgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5HbHRmQ29udGFpbmVyKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgR2x0ZkNvbnRhaW5lckxvYWRpbmdTdGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLkdsdGZDb250YWluZXJMb2FkaW5nU3RhdGUoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBJbnB1dE1vZGlmaWVyID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuSW5wdXRNb2RpZmllcihlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IE1haW5DYW1lcmEgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5NYWluQ2FtZXJhKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgTmZ0U2hhcGUgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5OZnRTaGFwZShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFBsYXllcklkZW50aXR5RGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlBsYXllcklkZW50aXR5RGF0YShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFBvaW50ZXJFdmVudHMgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5Qb2ludGVyRXZlbnRzKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgUG9pbnRlckV2ZW50c1Jlc3VsdCA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlBvaW50ZXJFdmVudHNSZXN1bHQoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBQb2ludGVyTG9jayA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlBvaW50ZXJMb2NrKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgUmF5Y2FzdCA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlJheWNhc3QoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBSYXljYXN0UmVzdWx0ID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuUmF5Y2FzdFJlc3VsdChlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFJlYWxtSW5mbyA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlJlYWxtSW5mbyhlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFRleHRTaGFwZSA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlRleHRTaGFwZShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFR3ZWVuU2VxdWVuY2UgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5Ud2VlblNlcXVlbmNlKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVHdlZW5TdGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlR3ZWVuU3RhdGUoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBVaUJhY2tncm91bmQgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5VaUJhY2tncm91bmQoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBVaUNhbnZhc0luZm9ybWF0aW9uID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuVWlDYW52YXNJbmZvcm1hdGlvbihlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFVpRHJvcGRvd24gPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5VaURyb3Bkb3duKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlEcm9wZG93blJlc3VsdCA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlVpRHJvcGRvd25SZXN1bHQoZW5naW5lKTtcbi8qKiBAcHVibGljICovIGV4cG9ydCBjb25zdCBVaUlucHV0ID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuVWlJbnB1dChlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFVpSW5wdXRSZXN1bHQgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5VaUlucHV0UmVzdWx0KGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlUZXh0ID0gLyogQF9fUFVSRV9fICovIGNvbXBvbmVudHMuVWlUZXh0KGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVWlUcmFuc2Zvcm0gPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5VaVRyYW5zZm9ybShlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFZpZGVvRXZlbnQgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5WaWRlb0V2ZW50KGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVmlkZW9QbGF5ZXIgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5WaWRlb1BsYXllcihlbmdpbmUpO1xuLyoqIEBwdWJsaWMgKi8gZXhwb3J0IGNvbnN0IFZpcnR1YWxDYW1lcmEgPSAvKiBAX19QVVJFX18gKi8gY29tcG9uZW50cy5WaXJ0dWFsQ2FtZXJhKGVuZ2luZSk7XG4vKiogQHB1YmxpYyAqLyBleHBvcnQgY29uc3QgVmlzaWJpbGl0eUNvbXBvbmVudCA9IC8qIEBfX1BVUkVfXyAqLyBjb21wb25lbnRzLlZpc2liaWxpdHlDb21wb25lbnQoZW5naW5lKTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuY29tbW9uXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBDYW1lcmFUeXBlO1xuKGZ1bmN0aW9uIChDYW1lcmFUeXBlKSB7XG4gICAgQ2FtZXJhVHlwZVtDYW1lcmFUeXBlW1wiQ1RfRklSU1RfUEVSU09OXCJdID0gMF0gPSBcIkNUX0ZJUlNUX1BFUlNPTlwiO1xuICAgIENhbWVyYVR5cGVbQ2FtZXJhVHlwZVtcIkNUX1RISVJEX1BFUlNPTlwiXSA9IDFdID0gXCJDVF9USElSRF9QRVJTT05cIjtcbiAgICAvKiogQ1RfQ0lORU1BVElDIC0gY29udHJvbGxlZCBieSB0aGUgc2NlbmUgKi9cbiAgICBDYW1lcmFUeXBlW0NhbWVyYVR5cGVbXCJDVF9DSU5FTUFUSUNcIl0gPSAyXSA9IFwiQ1RfQ0lORU1BVElDXCI7XG59KShDYW1lcmFUeXBlIHx8IChDYW1lcmFUeXBlID0ge30pKTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuY29tbW9uXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBJbnB1dEFjdGlvbjtcbihmdW5jdGlvbiAoSW5wdXRBY3Rpb24pIHtcbiAgICBJbnB1dEFjdGlvbltJbnB1dEFjdGlvbltcIklBX1BPSU5URVJcIl0gPSAwXSA9IFwiSUFfUE9JTlRFUlwiO1xuICAgIElucHV0QWN0aW9uW0lucHV0QWN0aW9uW1wiSUFfUFJJTUFSWVwiXSA9IDFdID0gXCJJQV9QUklNQVJZXCI7XG4gICAgSW5wdXRBY3Rpb25bSW5wdXRBY3Rpb25bXCJJQV9TRUNPTkRBUllcIl0gPSAyXSA9IFwiSUFfU0VDT05EQVJZXCI7XG4gICAgSW5wdXRBY3Rpb25bSW5wdXRBY3Rpb25bXCJJQV9BTllcIl0gPSAzXSA9IFwiSUFfQU5ZXCI7XG4gICAgSW5wdXRBY3Rpb25bSW5wdXRBY3Rpb25bXCJJQV9GT1JXQVJEXCJdID0gNF0gPSBcIklBX0ZPUldBUkRcIjtcbiAgICBJbnB1dEFjdGlvbltJbnB1dEFjdGlvbltcIklBX0JBQ0tXQVJEXCJdID0gNV0gPSBcIklBX0JBQ0tXQVJEXCI7XG4gICAgSW5wdXRBY3Rpb25bSW5wdXRBY3Rpb25bXCJJQV9SSUdIVFwiXSA9IDZdID0gXCJJQV9SSUdIVFwiO1xuICAgIElucHV0QWN0aW9uW0lucHV0QWN0aW9uW1wiSUFfTEVGVFwiXSA9IDddID0gXCJJQV9MRUZUXCI7XG4gICAgSW5wdXRBY3Rpb25bSW5wdXRBY3Rpb25bXCJJQV9KVU1QXCJdID0gOF0gPSBcIklBX0pVTVBcIjtcbiAgICBJbnB1dEFjdGlvbltJbnB1dEFjdGlvbltcIklBX1dBTEtcIl0gPSA5XSA9IFwiSUFfV0FMS1wiO1xuICAgIElucHV0QWN0aW9uW0lucHV0QWN0aW9uW1wiSUFfQUNUSU9OXzNcIl0gPSAxMF0gPSBcIklBX0FDVElPTl8zXCI7XG4gICAgSW5wdXRBY3Rpb25bSW5wdXRBY3Rpb25bXCJJQV9BQ1RJT05fNFwiXSA9IDExXSA9IFwiSUFfQUNUSU9OXzRcIjtcbiAgICBJbnB1dEFjdGlvbltJbnB1dEFjdGlvbltcIklBX0FDVElPTl81XCJdID0gMTJdID0gXCJJQV9BQ1RJT05fNVwiO1xuICAgIElucHV0QWN0aW9uW0lucHV0QWN0aW9uW1wiSUFfQUNUSU9OXzZcIl0gPSAxM10gPSBcIklBX0FDVElPTl82XCI7XG59KShJbnB1dEFjdGlvbiB8fCAoSW5wdXRBY3Rpb24gPSB7fSkpO1xuLyoqIFBvaW50ZXJFdmVudFR5cGUgaXMgYSBraW5kIG9mIGludGVyYWN0aW9uIHRoYXQgY2FuIGJlIGRldGVjdGVkLiAqL1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgUG9pbnRlckV2ZW50VHlwZTtcbihmdW5jdGlvbiAoUG9pbnRlckV2ZW50VHlwZSkge1xuICAgIFBvaW50ZXJFdmVudFR5cGVbUG9pbnRlckV2ZW50VHlwZVtcIlBFVF9VUFwiXSA9IDBdID0gXCJQRVRfVVBcIjtcbiAgICBQb2ludGVyRXZlbnRUeXBlW1BvaW50ZXJFdmVudFR5cGVbXCJQRVRfRE9XTlwiXSA9IDFdID0gXCJQRVRfRE9XTlwiO1xuICAgIFBvaW50ZXJFdmVudFR5cGVbUG9pbnRlckV2ZW50VHlwZVtcIlBFVF9IT1ZFUl9FTlRFUlwiXSA9IDJdID0gXCJQRVRfSE9WRVJfRU5URVJcIjtcbiAgICBQb2ludGVyRXZlbnRUeXBlW1BvaW50ZXJFdmVudFR5cGVbXCJQRVRfSE9WRVJfTEVBVkVcIl0gPSAzXSA9IFwiUEVUX0hPVkVSX0xFQVZFXCI7XG59KShQb2ludGVyRXZlbnRUeXBlIHx8IChQb2ludGVyRXZlbnRUeXBlID0ge30pKTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgcHJvdG9idWZQYWNrYWdlU2FyYXNhID0gXCJkZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuY29tbW9uXCI7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBMb2FkaW5nU3RhdGU7XG4oZnVuY3Rpb24gKExvYWRpbmdTdGF0ZSkge1xuICAgIExvYWRpbmdTdGF0ZVtMb2FkaW5nU3RhdGVbXCJVTktOT1dOXCJdID0gMF0gPSBcIlVOS05PV05cIjtcbiAgICBMb2FkaW5nU3RhdGVbTG9hZGluZ1N0YXRlW1wiTE9BRElOR1wiXSA9IDFdID0gXCJMT0FESU5HXCI7XG4gICAgTG9hZGluZ1N0YXRlW0xvYWRpbmdTdGF0ZVtcIk5PVF9GT1VORFwiXSA9IDJdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBMb2FkaW5nU3RhdGVbTG9hZGluZ1N0YXRlW1wiRklOSVNIRURfV0lUSF9FUlJPUlwiXSA9IDNdID0gXCJGSU5JU0hFRF9XSVRIX0VSUk9SXCI7XG4gICAgTG9hZGluZ1N0YXRlW0xvYWRpbmdTdGF0ZVtcIkZJTklTSEVEXCJdID0gNF0gPSBcIkZJTklTSEVEXCI7XG59KShMb2FkaW5nU3RhdGUgfHwgKExvYWRpbmdTdGF0ZSA9IHt9KSk7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzLmNvbW1vblwiO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgVGV4dEFsaWduTW9kZTtcbihmdW5jdGlvbiAoVGV4dEFsaWduTW9kZSkge1xuICAgIFRleHRBbGlnbk1vZGVbVGV4dEFsaWduTW9kZVtcIlRBTV9UT1BfTEVGVFwiXSA9IDBdID0gXCJUQU1fVE9QX0xFRlRcIjtcbiAgICBUZXh0QWxpZ25Nb2RlW1RleHRBbGlnbk1vZGVbXCJUQU1fVE9QX0NFTlRFUlwiXSA9IDFdID0gXCJUQU1fVE9QX0NFTlRFUlwiO1xuICAgIFRleHRBbGlnbk1vZGVbVGV4dEFsaWduTW9kZVtcIlRBTV9UT1BfUklHSFRcIl0gPSAyXSA9IFwiVEFNX1RPUF9SSUdIVFwiO1xuICAgIFRleHRBbGlnbk1vZGVbVGV4dEFsaWduTW9kZVtcIlRBTV9NSURETEVfTEVGVFwiXSA9IDNdID0gXCJUQU1fTUlERExFX0xFRlRcIjtcbiAgICBUZXh0QWxpZ25Nb2RlW1RleHRBbGlnbk1vZGVbXCJUQU1fTUlERExFX0NFTlRFUlwiXSA9IDRdID0gXCJUQU1fTUlERExFX0NFTlRFUlwiO1xuICAgIFRleHRBbGlnbk1vZGVbVGV4dEFsaWduTW9kZVtcIlRBTV9NSURETEVfUklHSFRcIl0gPSA1XSA9IFwiVEFNX01JRERMRV9SSUdIVFwiO1xuICAgIFRleHRBbGlnbk1vZGVbVGV4dEFsaWduTW9kZVtcIlRBTV9CT1RUT01fTEVGVFwiXSA9IDZdID0gXCJUQU1fQk9UVE9NX0xFRlRcIjtcbiAgICBUZXh0QWxpZ25Nb2RlW1RleHRBbGlnbk1vZGVbXCJUQU1fQk9UVE9NX0NFTlRFUlwiXSA9IDddID0gXCJUQU1fQk9UVE9NX0NFTlRFUlwiO1xuICAgIFRleHRBbGlnbk1vZGVbVGV4dEFsaWduTW9kZVtcIlRBTV9CT1RUT01fUklHSFRcIl0gPSA4XSA9IFwiVEFNX0JPVFRPTV9SSUdIVFwiO1xufSkoVGV4dEFsaWduTW9kZSB8fCAoVGV4dEFsaWduTW9kZSA9IHt9KSk7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBGb250O1xuKGZ1bmN0aW9uIChGb250KSB7XG4gICAgRm9udFtGb250W1wiRl9TQU5TX1NFUklGXCJdID0gMF0gPSBcIkZfU0FOU19TRVJJRlwiO1xuICAgIEZvbnRbRm9udFtcIkZfU0VSSUZcIl0gPSAxXSA9IFwiRl9TRVJJRlwiO1xuICAgIEZvbnRbRm9udFtcIkZfTU9OT1NQQUNFXCJdID0gMl0gPSBcIkZfTU9OT1NQQUNFXCI7XG59KShGb250IHx8IChGb250ID0ge30pKTtcbiIsICJpbXBvcnQgeyBTY2hlbWFzIH0gZnJvbSAnLi4vc2NoZW1hcyc7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIGNvbXBvc2l0ZSBpcyBub3QgYmVpbmcgc3VwcG9ydGVkIHNvIGZhciwgcGxlYXNlIGRvIG5vdCB1c2UgdGhpcyBmZWF0dXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSb290Q29tcG9uZW50KGVuZ2luZSkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGVuZ2luZS5nZXRDb21wb25lbnRPck51bGwoJ2NvbXBvc2l0ZTo6cm9vdCcpO1xuICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGVuZ2luZS5kZWZpbmVDb21wb25lbnQoJ2NvbXBvc2l0ZTo6cm9vdCcsIHtcbiAgICAgICAgc3JjOiBTY2hlbWFzLlN0cmluZyxcbiAgICAgICAgZW50aXRpZXM6IFNjaGVtYXMuQXJyYXkoU2NoZW1hcy5NYXAoe1xuICAgICAgICAgICAgc3JjOiBTY2hlbWFzLkVudGl0eSxcbiAgICAgICAgICAgIGRlc3Q6IFNjaGVtYXMuRW50aXR5XG4gICAgICAgIH0pKVxuICAgIH0pO1xufVxuIiwgImNvbnN0IGN1cnJlbnRXb3JraW5nRGlyID0gJy8nO1xuLyoqXG4gKiBUaGUgZnVuY3Rpb25zIGBub3JtYWxpemVTdHJpbmdQb3NpeGAsIGBkaXJuYW1lYCBhbmQgYHJlc29sdmVgXG4gKiB3ZXJlIGV4dHJhY3RlZCBmcm9tIHBhY2thZ2UgQGJyb3dzZXJpZnkvcGF0aFxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nUG9zaXgocGF0aCwgYWxsb3dBYm92ZVJvb3QgPSBmYWxzZSkge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBsZXQgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICAgIGxldCBsYXN0U2xhc2ggPSAtMTtcbiAgICBsZXQgZG90cyA9IDA7XG4gICAgbGV0IGNvZGU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcGF0aC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKVxuICAgICAgICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gNDcgLyovKi8pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29kZSA9IDQ3OyAvKi8qL1xuICAgICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIGlmIChsYXN0U2xhc2ggPT09IGkgLSAxIHx8IGRvdHMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBOT09QXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGkgLSAxICYmIGRvdHMgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA8IDIgfHxcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggIT09IDIgfHxcbiAgICAgICAgICAgICAgICAgICAgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDEpICE9PSA0NiAvKi4qLyB8fFxuICAgICAgICAgICAgICAgICAgICByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMikgIT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFNsYXNoSW5kZXggPSByZXMubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCAhPT0gcmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSByZXMuc2xpY2UoMCwgbGFzdFNsYXNoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlcy5sZW5ndGggLSAxIC0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG90cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzLmxlbmd0aCA9PT0gMiB8fCByZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gJy8uLic7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9ICcuLic7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSAnLycgKyBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IGkgLSBsYXN0U2xhc2ggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgIGRvdHMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDQ2IC8qLiovICYmIGRvdHMgIT09IC0xKSB7XG4gICAgICAgICAgICArK2RvdHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb3RzID0gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZSguLi5hcmdzKSB7XG4gICAgbGV0IHJlc29sdmVkUGF0aCA9ICcnO1xuICAgIGxldCByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG4gICAgbGV0IGN3ZDtcbiAgICBmb3IgKGxldCBpID0gYXJncy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICAgICAgbGV0IHBhdGg7XG4gICAgICAgIGlmIChpID49IDApXG4gICAgICAgICAgICBwYXRoID0gYXJnc1tpXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3dkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY3dkID0gY3VycmVudFdvcmtpbmdEaXI7XG4gICAgICAgICAgICBwYXRoID0gY3dkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3OyAvKi8qL1xuICAgIH1cbiAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG4gICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplU3RyaW5nUG9zaXgocmVzb2x2ZWRQYXRoLCAhcmVzb2x2ZWRBYnNvbHV0ZSk7XG4gICAgaWYgKHJlc29sdmVkQWJzb2x1dGUpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUGF0aC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuICcvJztcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkUGF0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnLic7XG4gICAgfVxufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXJuYW1lKHBhdGgpIHtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiAnLic7XG4gICAgbGV0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgY29uc3QgaGFzUm9vdCA9IGNvZGUgPT09IDQ3OyAvKi8qL1xuICAgIGxldCBlbmQgPSAtMTtcbiAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5kID09PSAtMSlcbiAgICAgICAgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gICAgaWYgKGhhc1Jvb3QgJiYgZW5kID09PSAxKVxuICAgICAgICByZXR1cm4gJy8vJztcbiAgICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDb21wb3NpdGUocGF0aCwgY3dkKSB7XG4gICAgY29uc3QgYWJzb2x1dGVQYXRoID0gcGF0aC5zdGFydHNXaXRoKCcuJykgPyByZXNvbHZlKGN3ZCwgcGF0aCkgOiByZXNvbHZlKHBhdGgpO1xuICAgIHJldHVybiBhYnNvbHV0ZVBhdGguc3Vic3RyaW5nKDEpO1xufVxuIiwgImltcG9ydCB7IGNvbXBvbmVudERlZmluaXRpb25CeU5hbWUgfSBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IGNvbXBvbmVudE51bWJlckZyb21OYW1lIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnQtbnVtYmVyJztcbmltcG9ydCB7IFNjaGVtYXMgfSBmcm9tICcuLi9zY2hlbWFzJztcbmltcG9ydCB7IFJlYWRXcml0ZUJ5dGVCdWZmZXIgfSBmcm9tICcuLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInO1xuaW1wb3J0IHsgZ2V0Q29tcG9zaXRlUm9vdENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vcGF0aCc7XG4vKiogQHB1YmxpYyAqL1xuLyogQF9fUFVSRV9fICovXG5leHBvcnQgdmFyIEVudGl0eU1hcHBpbmdNb2RlO1xuKGZ1bmN0aW9uIChFbnRpdHlNYXBwaW5nTW9kZSkge1xuICAgIEVudGl0eU1hcHBpbmdNb2RlW0VudGl0eU1hcHBpbmdNb2RlW1wiRU1NX05PTkVcIl0gPSAwXSA9IFwiRU1NX05PTkVcIjtcbiAgICBFbnRpdHlNYXBwaW5nTW9kZVtFbnRpdHlNYXBwaW5nTW9kZVtcIkVNTV9ORVhUX0FWQUlMQUJMRVwiXSA9IDFdID0gXCJFTU1fTkVYVF9BVkFJTEFCTEVcIjtcbiAgICBFbnRpdHlNYXBwaW5nTW9kZVtFbnRpdHlNYXBwaW5nTW9kZVtcIkVNTV9ESVJFQ1RfTUFQUElOR1wiXSA9IDJdID0gXCJFTU1fRElSRUNUX01BUFBJTkdcIjtcbn0pKEVudGl0eU1hcHBpbmdNb2RlIHx8IChFbnRpdHlNYXBwaW5nTW9kZSA9IHt9KSk7XG4vKipcbiAqIFJldHVybiB0aGUgY29tcG9uZW50IHZhbHVlIGZyb20gY29tcG9zaXRlIGRhdGFcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcG9uZW50VmFsdWUoY29tcG9uZW50RGVmaW5pdGlvbiwgY29tcG9uZW50KSB7XG4gICAgaWYgKGNvbXBvbmVudC5kYXRhPy4kY2FzZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQuZGF0YS5qc29uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudERlZmluaXRpb24uc2NoZW1hLmRlc2VyaWFsaXplKG5ldyBSZWFkV3JpdGVCeXRlQnVmZmVyKGNvbXBvbmVudC5kYXRhPy5iaW5hcnkpKTtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24gZnJvbSBjb21wb3NpdGUgaW5mb1xuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnREZWZpbml0aW9uKGVuZ2luZSwgY29tcG9uZW50KSB7XG4gICAgY29uc3QgZXhpc3RpbmdDb21wb25lbnREZWZpbml0aW9uID0gZW5naW5lLmdldENvbXBvbmVudE9yTnVsbChjb21wb25lbnQubmFtZSk7XG4gICAgaWYgKCFleGlzdGluZ0NvbXBvbmVudERlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudC5uYW1lLnN0YXJ0c1dpdGgoJ2NvcmU6OicpKSB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50Lm5hbWUgaW4gY29tcG9uZW50RGVmaW5pdGlvbkJ5TmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnREZWZpbml0aW9uQnlOYW1lW2NvbXBvbmVudC5uYW1lXShlbmdpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgY29yZSBjb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gd2FzIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb21wb25lbnQuanNvblNjaGVtYSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKGNvbXBvbmVudC5uYW1lLCBTY2hlbWFzLmZyb21Kc29uKGNvbXBvbmVudC5qc29uU2NoZW1hKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y29tcG9uZW50Lm5hbWV9IGlzIG5vdCBkZWZpbmVkIGFuZCB0aGVyZSBpcyBubyBzY2hlbWEgdG8gZGVmaW5lIGl0LmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdDb21wb25lbnREZWZpbml0aW9uO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJuIHRoZSBlbnRpdHkgbWFwcGluZyBvciBmYWlsIGlmIHRoZXJlIGlzIG5vIG1vcmVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW50aXR5TWFwcGluZyhlbmdpbmUsIGNvbXBvc2l0ZUVudGl0eSwgbWFwcGVkRW50aXRpZXMsIHsgZW50aXR5TWFwcGluZyB9KSB7XG4gICAgY29uc3QgZXhpc3RpbmdFbnRpdHkgPSBtYXBwZWRFbnRpdGllcy5nZXQoY29tcG9zaXRlRW50aXR5KTtcbiAgICBpZiAoZXhpc3RpbmdFbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nRW50aXR5O1xuICAgIH1cbiAgICBpZiAoZW50aXR5TWFwcGluZz8udHlwZSA9PT0gRW50aXR5TWFwcGluZ01vZGUuRU1NX0RJUkVDVF9NQVBQSU5HKSB7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IGVudGl0eU1hcHBpbmcuZ2V0Q29tcG9zaXRlRW50aXR5KGNvbXBvc2l0ZUVudGl0eSk7XG4gICAgICAgIG1hcHBlZEVudGl0aWVzLnNldChjb21wb3NpdGVFbnRpdHksIGVudGl0eSk7XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfVxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaW4gcnVudGltZSBjYW4gYmUganVzdCBgZW5naW5lLmFkZEVudGl0eSgpYFxuICAgIGNvbnN0IG5ld0VudGl0eSA9IGVudGl0eU1hcHBpbmc/LnR5cGUgPT09IEVudGl0eU1hcHBpbmdNb2RlLkVNTV9ORVhUX0FWQUlMQUJMRVxuICAgICAgICA/IGVudGl0eU1hcHBpbmcuZ2V0TmV4dEF2YWlsYWJsZUVudGl0eSgpXG4gICAgICAgIDogZW5naW5lLmFkZEVudGl0eSgpO1xuICAgIGlmIChuZXdFbnRpdHkgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBtb3JlIGVudGl0aWVzIHRvIGFsbG9jYXRlJyk7XG4gICAgfVxuICAgIG1hcHBlZEVudGl0aWVzLnNldChjb21wb3NpdGVFbnRpdHksIG5ld0VudGl0eSk7XG4gICAgcmV0dXJuIG5ld0VudGl0eTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbi8qIEBfX1BVUkVfXyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbmNlQ29tcG9zaXRlKGVuZ2luZSwgY29tcG9zaXRlUmVzb3VyY2UsIGNvbXBvc2l0ZVByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyByb290RW50aXR5LCBhbHJlYWR5UmVxdWVzdGVkU3JjOiBvcHRpb25hbEFscmVhZHlSZXF1ZXN0ZWRTcmMsIGVudGl0eU1hcHBpbmcgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYWxyZWFkeVJlcXVlc3RlZFNyYyA9IG9wdGlvbmFsQWxyZWFkeVJlcXVlc3RlZFNyYyB8fCBuZXcgU2V0KCk7XG4gICAgY29uc3QgY29tcG9zaXRlRGlyZWN0b3J5UGF0aCA9IHBhdGguZGlybmFtZShwYXRoLnJlc29sdmUoY29tcG9zaXRlUmVzb3VyY2Uuc3JjKSk7XG4gICAgY29uc3QgVHJhbnNmb3JtQ29tcG9uZW50TnVtYmVyID0gY29tcG9uZW50TnVtYmVyRnJvbU5hbWUoJ2NvcmU6OlRyYW5zZm9ybScpO1xuICAgIGNvbnN0IENvbXBvc2l0ZVJvb3RDb21wb25lbnQgPSBnZXRDb21wb3NpdGVSb290Q29tcG9uZW50KGVuZ2luZSk7XG4gICAgLy8gS2V5ID0+IEVudGl0eU51bWJlciBmcm9tIHRoZSBjb21wb3NpdGVcbiAgICAvLyBWYWx1ZSA9PiBFbnRpdHlOdW1iZXIgaW4gY3VycmVudCBlbmdpbmVcbiAgICBjb25zdCBtYXBwZWRFbnRpdGllcyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBnZXRDb21wb3NpdGVFbnRpdHkgPSAoY29tcG9zaXRlRW50aXR5KSA9PiBnZXRFbnRpdHlNYXBwaW5nKGVuZ2luZSwgY29tcG9zaXRlRW50aXR5LCBtYXBwZWRFbnRpdGllcywgb3B0aW9ucyk7XG4gICAgLy8gIyMgMSAjI1xuICAgIC8vIEZpcnN0IGVudGl0eSB0aGF0IEkgd2FudCB0byBtYXAsIHRoZSByb290IGVudGl0eSBmcm9tIHRoZSBjb21wb3NpdGUgdG8gdGhlIHRhcmdldCBlbnRpdHkgaW4gdGhlIGVuZ2luZVxuICAgIC8vIElmIHRoZXJlIGlzIG5vIGByb290RW50aXR5YCBwYXNzZWQsIHdlIGFzc2lnbiBvbmUgZnJvbSBgZ2V0TmV4dEF2YWlsYWJsZUVudGl0eWBcbiAgICBjb25zdCBjb21wb3NpdGVSb290RW50aXR5ID0gcm9vdEVudGl0eSA/PyBnZXRDb21wb3NpdGVFbnRpdHkoMCk7XG4gICAgaWYgKHJvb3RFbnRpdHkpIHtcbiAgICAgICAgbWFwcGVkRW50aXRpZXMuc2V0KDAsIHJvb3RFbnRpdHkpO1xuICAgIH1cbiAgICAvLyAjIyAyICMjXG4gICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgY29tcG9zaXRlIGluc2lkZSB0aGlzIG9uZSwgd2UgaW5zdGFuY2UgZmlyc3QuXG4gICAgLy8gPT4gVGhpcyBpcyBub3Qgb25seSBhIGNvcHksIHdlIG5lZWQgdG8gaW5zdGFuY2UuIE90aGVyd2lzZSwgd2UnZCBiZSBtaXNzaW5nIHRoYXQgYnJhbmNoZXNcbiAgICAvLyA9PiBUT0RPOiBpbiB0aGUgZnV0dXJlLCB0aGUgaW5zdGFuY2lhdGlvbiBpcyBmaXJzdCwgdGhlbiB0aGUgb3ZlcmlkZXMgKHRvIHBhcmFtZXRlcml6ZSBDb21wb3NpdGUsIGUuZy4gaG91c2Ugd2l0aCBkaWZmZXJlbnQgd2FsbCBjb2xvcnMpXG4gICAgY29uc3QgY2hpbGRyZW5Db21wb3NpdGUgPSBjb21wb3NpdGVSZXNvdXJjZS5jb21wb3NpdGUuY29tcG9uZW50cy5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IENvbXBvc2l0ZVJvb3RDb21wb25lbnQuY29tcG9uZW50TmFtZSk7XG4gICAgaWYgKGNoaWxkcmVuQ29tcG9zaXRlKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkQ29tcG9zaXRlRW50aXR5LCBjb21wb3NpdGVSYXdEYXRhXSBvZiBjaGlsZHJlbkNvbXBvc2l0ZS5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZENvbXBvc2l0ZSA9IGdldENvbXBvbmVudFZhbHVlKENvbXBvc2l0ZVJvb3RDb21wb25lbnQsIGNvbXBvc2l0ZVJhd0RhdGEpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRDb21wb3NpdGVQYXRoID0gcGF0aC5yZXNvbHZlQ29tcG9zaXRlKGNoaWxkQ29tcG9zaXRlLnNyYywgY29tcG9zaXRlRGlyZWN0b3J5UGF0aCk7XG4gICAgICAgICAgICBjb25zdCBjaGlsZENvbXBvc2l0ZVJlc291cmNlID0gY29tcG9zaXRlUHJvdmlkZXIuZ2V0Q29tcG9zaXRlT3JOdWxsKGNoaWxkQ29tcG9zaXRlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRFbnRpdHkgPSBnZXRDb21wb3NpdGVFbnRpdHkoY2hpbGRDb21wb3NpdGVFbnRpdHkpO1xuICAgICAgICAgICAgaWYgKGNoaWxkQ29tcG9zaXRlUmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeVJlcXVlc3RlZFNyYy5oYXMoY2hpbGRDb21wb3NpdGVSZXNvdXJjZS5zcmMpIHx8XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkQ29tcG9zaXRlUmVzb3VyY2Uuc3JjID09PSBjb21wb3NpdGVSZXNvdXJjZS5zcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb3NpdGUgJHtjb21wb3NpdGVSZXNvdXJjZS5zcmN9IGhhcyBhIHJlY3Vyc2l2ZSBpbnN0YW5jaWF0aW9uIHdoaWxlIHRyeSB0byBpbnN0YW5jZSAke2NoaWxkQ29tcG9zaXRlUmVzb3VyY2Uuc3JjfS4gUHJldmlvdXMgaW5zdGFuY2VzOiAke2FscmVhZHlSZXF1ZXN0ZWRTcmMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VDb21wb3NpdGUoZW5naW5lLCBjaGlsZENvbXBvc2l0ZVJlc291cmNlLCBjb21wb3NpdGVQcm92aWRlciwge1xuICAgICAgICAgICAgICAgICAgICByb290RW50aXR5OiB0YXJnZXRFbnRpdHksXG4gICAgICAgICAgICAgICAgICAgIGFscmVhZHlSZXF1ZXN0ZWRTcmM6IG5ldyBTZXQoYWxyZWFkeVJlcXVlc3RlZFNyYykuYWRkKGNoaWxkQ29tcG9zaXRlUmVzb3VyY2Uuc3JjKSxcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5TWFwcGluZzogZW50aXR5TWFwcGluZz8udHlwZSA9PT0gRW50aXR5TWFwcGluZ01vZGUuRU1NX05FWFRfQVZBSUxBQkxFID8gZW50aXR5TWFwcGluZyA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vICMjIDMgIyNcbiAgICAvLyBUaGVuLCB3ZSBjb3B5IHRoZSBhbGwgcmVzdCBvZiB0aGUgY29tcG9uZW50cyAoc2tpcHBpbmcgdGhlIENvbXBvc2l0ZSBvbmVzKVxuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIGNvbXBvc2l0ZVJlc291cmNlLmNvbXBvc2l0ZS5jb21wb25lbnRzKSB7XG4gICAgICAgIC8vIFdlIGFscmVhZHkgaW5zdGFuY2VkIHRoZSBjb21wb3NpdGVcbiAgICAgICAgaWYgKGNvbXBvbmVudC5uYW1lID09PSBDb21wb3NpdGVSb290Q29tcG9uZW50LmNvbXBvbmVudE5hbWUpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gIyMgM2EgIyNcbiAgICAgICAgLy8gV2UgZmluZCB0aGUgY29tcG9uZW50IGRlZmluaXRpb25cbiAgICAgICAgY29uc3QgY29tcG9uZW50RGVmaW5pdGlvbiA9IGdldENvbXBvbmVudERlZmluaXRpb24oZW5naW5lLCBjb21wb25lbnQpO1xuICAgICAgICAvLyAjIyAzYiAjI1xuICAgICAgICAvLyBJdGVyYXRpbmcgb3ZlciBhbGwgdGhlIGVudGl0aWVzIHdpdGggdGhpcyBjb21wb25lbnQgYW5kIGNyZWF0ZSB0aGUgcmVwbGljYVxuICAgICAgICBmb3IgKGNvbnN0IFtlbnRpdHksIGNvbXBvc2l0ZUNvbXBvbmVudFZhbHVlXSBvZiBjb21wb25lbnQuZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VmFsdWVEZXNlcmlhbGl6ZWQgPSBnZXRDb21wb25lbnRWYWx1ZShjb21wb25lbnREZWZpbml0aW9uLCBjb21wb3NpdGVDb21wb25lbnRWYWx1ZSk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRFbnRpdHkgPSBnZXRDb21wb3NpdGVFbnRpdHkoZW50aXR5KTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFZhbHVlID0gY29tcG9uZW50RGVmaW5pdGlvbi5jcmVhdGUodGFyZ2V0RW50aXR5LCBjb21wb25lbnRWYWx1ZURlc2VyaWFsaXplZCk7XG4gICAgICAgICAgICAvLyAjIyAzYyAjI1xuICAgICAgICAgICAgLy8gQWxsIGVudGl0aWVzIHJlZmVyZW5jZWQgaW4gdGhlIGNvbXBvc2l0ZSBwcm9iYWJseSBoYXMgYSBkaWZmZXJlbnQgcmVzb2x2ZWQgRW50aXR5TnVtYmVyXG4gICAgICAgICAgICAvLyBXZSdsbCBrbm93IHdpdGggdGhlIG1hcHBlZEVudGl0eWVzXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50RGVmaW5pdGlvbi5jb21wb25lbnRJZCA9PT0gVHJhbnNmb3JtQ29tcG9uZW50TnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gY29tcG9uZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLnBhcmVudCA9IGdldENvbXBvc2l0ZUVudGl0eSh0cmFuc2Zvcm0ucGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5wYXJlbnQgPSBnZXRDb21wb3NpdGVFbnRpdHkoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGlzIGl0IGdvaW5nIHRvIGJlIG5lY2Vzc2FyeSB0byByZW1hcCBhc3NldHM/IGUuZy4gc3JjIHBhcmFtIGZyb20gQXVkaW9Tb3VyY2UgYW5kIEdsdGZDb250YWluZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIFNjaGVtYXMubXV0YXRlTmVzdGVkVmFsdWVzKGNvbXBvbmVudERlZmluaXRpb24uc2NoZW1hLmpzb25TY2hlbWEsIGNvbXBvbmVudFZhbHVlLCAodmFsdWUsIHZhbHVlVHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVUeXBlLnNlcmlhbGl6YXRpb25UeXBlID09PSAnZW50aXR5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlZDogdHJ1ZSwgdmFsdWU6IGdldENvbXBvc2l0ZUVudGl0eSh2YWx1ZSkgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZWQ6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjb21wb3NpdGUgPSBDb21wb3NpdGVSb290Q29tcG9uZW50LmdldE11dGFibGVPck51bGwoY29tcG9zaXRlUm9vdEVudGl0eSkgfHwgQ29tcG9zaXRlUm9vdENvbXBvbmVudC5jcmVhdGUoY29tcG9zaXRlUm9vdEVudGl0eSk7XG4gICAgZm9yIChjb25zdCBbZW50aXR5U291cmNlLCB0YXJnZXRFbnRpdHldIG9mIG1hcHBlZEVudGl0aWVzKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5lbnRpdGllcy5wdXNoKHtcbiAgICAgICAgICAgIHNyYzogZW50aXR5U291cmNlLFxuICAgICAgICAgICAgZGVzdDogdGFyZ2V0RW50aXR5XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb21wb3NpdGUuc3JjID0gY29tcG9zaXRlUmVzb3VyY2Uuc3JjO1xuICAgIHJldHVybiBjb21wb3NpdGVSb290RW50aXR5O1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5nZW5cIjtcbmNvbnN0IHByb3RvYnVmUGFja2FnZVNhcmFzYSA9IFwiXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29tcG9uZW50RGF0YSgpIHtcbiAgICByZXR1cm4geyBkYXRhOiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIENvbXBvbmVudERhdGE7XG4oZnVuY3Rpb24gKENvbXBvbmVudERhdGEpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UuZGF0YT8uJGNhc2UpIHtcbiAgICAgICAgICAgIGNhc2UgXCJqc29uXCI6XG4gICAgICAgICAgICAgICAgVmFsdWUuZW5jb2RlKFZhbHVlLndyYXAobWVzc2FnZS5kYXRhLmpzb24pLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UuZGF0YS5iaW5hcnkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIENvbXBvbmVudERhdGEuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wb25lbnREYXRhKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IHsgJGNhc2U6IFwianNvblwiLCBqc29uOiBWYWx1ZS51bndyYXAoVmFsdWUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0geyAkY2FzZTogXCJiaW5hcnlcIiwgYmluYXJ5OiByZWFkZXIuYnl0ZXMoKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIENvbXBvbmVudERhdGEuZGVjb2RlID0gZGVjb2RlO1xuICAgIGZ1bmN0aW9uIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogaXNTZXQob2JqZWN0Lmpzb24pXG4gICAgICAgICAgICAgICAgPyB7ICRjYXNlOiBcImpzb25cIiwganNvbjogb2JqZWN0Lmpzb24gfVxuICAgICAgICAgICAgICAgIDogaXNTZXQob2JqZWN0LmJpbmFyeSlcbiAgICAgICAgICAgICAgICAgICAgPyB7ICRjYXNlOiBcImJpbmFyeVwiLCBiaW5hcnk6IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuYmluYXJ5KSB9XG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb21wb25lbnREYXRhLmZyb21KU09OID0gZnJvbUpTT047XG4gICAgZnVuY3Rpb24gdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZGF0YT8uJGNhc2UgPT09IFwianNvblwiICYmIChvYmouanNvbiA9IG1lc3NhZ2UuZGF0YT8uanNvbik7XG4gICAgICAgIG1lc3NhZ2UuZGF0YT8uJGNhc2UgPT09IFwiYmluYXJ5XCIgJiZcbiAgICAgICAgICAgIChvYmouYmluYXJ5ID0gbWVzc2FnZS5kYXRhPy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGE/LmJpbmFyeSkgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBDb21wb25lbnREYXRhLnRvSlNPTiA9IHRvSlNPTjtcbn0pKENvbXBvbmVudERhdGEgfHwgKENvbXBvbmVudERhdGEgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXBvc2l0ZUNvbXBvbmVudCgpIHtcbiAgICByZXR1cm4geyBuYW1lOiBcIlwiLCBqc29uU2NoZW1hOiB1bmRlZmluZWQsIGRhdGE6IG5ldyBNYXAoKSB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgQ29tcG9zaXRlQ29tcG9uZW50O1xuKGZ1bmN0aW9uIChDb21wb3NpdGVDb21wb25lbnQpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5uYW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5qc29uU2NoZW1hICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFZhbHVlLmVuY29kZShWYWx1ZS53cmFwKG1lc3NhZ2UuanNvblNjaGVtYSksIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZS5kYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIENvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkuZW5jb2RlKHsga2V5OiBrZXksIHZhbHVlIH0sIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBDb21wb3NpdGVDb21wb25lbnQuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wb3NpdGVDb21wb25lbnQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5uYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmpzb25TY2hlbWEgPSBWYWx1ZS51bndyYXAoVmFsdWUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5MyA9IENvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5My52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRhdGEuc2V0KGVudHJ5My5rZXksIGVudHJ5My52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBDb21wb3NpdGVDb21wb25lbnQuZGVjb2RlID0gZGVjb2RlO1xuICAgIGZ1bmN0aW9uIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogaXNTZXQob2JqZWN0Lm5hbWUpID8gU3RyaW5nKG9iamVjdC5uYW1lKSA6IFwiXCIsXG4gICAgICAgICAgICBqc29uU2NoZW1hOiBpc1NldChvYmplY3Q/Lmpzb25TY2hlbWEpID8gb2JqZWN0Lmpzb25TY2hlbWEgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkYXRhOiBpc09iamVjdChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5lbnRyaWVzKG9iamVjdC5kYXRhKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjYy5zZXQoTnVtYmVyKGtleSksIENvbXBvbmVudERhdGEuZnJvbUpTT04odmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICB9LCBuZXcgTWFwKCkpXG4gICAgICAgICAgICAgICAgOiBuZXcgTWFwKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIENvbXBvc2l0ZUNvbXBvbmVudC5mcm9tSlNPTiA9IGZyb21KU09OO1xuICAgIGZ1bmN0aW9uIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLm5hbWUgIT09IHVuZGVmaW5lZCAmJiAob2JqLm5hbWUgPSBtZXNzYWdlLm5hbWUpO1xuICAgICAgICBtZXNzYWdlLmpzb25TY2hlbWEgIT09IHVuZGVmaW5lZCAmJiAob2JqLmpzb25TY2hlbWEgPSBtZXNzYWdlLmpzb25TY2hlbWEpO1xuICAgICAgICBvYmouZGF0YSA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5kYXRhKSB7XG4gICAgICAgICAgICBtZXNzYWdlLmRhdGEuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICAgICAgICAgIG9iai5kYXRhW2tdID0gQ29tcG9uZW50RGF0YS50b0pTT04odik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBDb21wb3NpdGVDb21wb25lbnQudG9KU09OID0gdG9KU09OO1xufSkoQ29tcG9zaXRlQ29tcG9uZW50IHx8IChDb21wb3NpdGVDb21wb25lbnQgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkoKSB7XG4gICAgcmV0dXJuIHsga2V5OiAwLCB2YWx1ZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBDb21wb3NpdGVDb21wb25lbnRfRGF0YUVudHJ5O1xuKGZ1bmN0aW9uIChDb21wb3NpdGVDb21wb25lbnRfRGF0YUVudHJ5KSB7XG4gICAgZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uua2V5ICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb21wb25lbnREYXRhLmVuY29kZShtZXNzYWdlLnZhbHVlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIENvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wb3NpdGVDb21wb25lbnRfRGF0YUVudHJ5KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5rZXkgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52YWx1ZSA9IENvbXBvbmVudERhdGEuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBDb21wb3NpdGVDb21wb25lbnRfRGF0YUVudHJ5LmRlY29kZSA9IGRlY29kZTtcbiAgICBmdW5jdGlvbiBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogaXNTZXQob2JqZWN0LmtleSkgPyBOdW1iZXIob2JqZWN0LmtleSkgOiAwLFxuICAgICAgICAgICAgdmFsdWU6IGlzU2V0KG9iamVjdC52YWx1ZSkgPyBDb21wb25lbnREYXRhLmZyb21KU09OKG9iamVjdC52YWx1ZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIENvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkuZnJvbUpTT04gPSBmcm9tSlNPTjtcbiAgICBmdW5jdGlvbiB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5rZXkgIT09IHVuZGVmaW5lZCAmJiAob2JqLmtleSA9IE1hdGgucm91bmQobWVzc2FnZS5rZXkpKTtcbiAgICAgICAgbWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIChvYmoudmFsdWUgPSBtZXNzYWdlLnZhbHVlID8gQ29tcG9uZW50RGF0YS50b0pTT04obWVzc2FnZS52YWx1ZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBDb21wb3NpdGVDb21wb25lbnRfRGF0YUVudHJ5LnRvSlNPTiA9IHRvSlNPTjtcbn0pKENvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkgfHwgKENvbXBvc2l0ZUNvbXBvbmVudF9EYXRhRW50cnkgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXBvc2l0ZURlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHsgdmVyc2lvbjogMCwgY29tcG9uZW50czogW10gfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIENvbXBvc2l0ZURlZmluaXRpb247XG4oZnVuY3Rpb24gKENvbXBvc2l0ZURlZmluaXRpb24pIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS52ZXJzaW9uICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2UudmVyc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuY29tcG9uZW50cykge1xuICAgICAgICAgICAgQ29tcG9zaXRlQ29tcG9uZW50LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIENvbXBvc2l0ZURlZmluaXRpb24uZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wb3NpdGVEZWZpbml0aW9uKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52ZXJzaW9uID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29tcG9uZW50cy5wdXNoKENvbXBvc2l0ZUNvbXBvbmVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBDb21wb3NpdGVEZWZpbml0aW9uLmRlY29kZSA9IGRlY29kZTtcbiAgICBmdW5jdGlvbiBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246IGlzU2V0KG9iamVjdC52ZXJzaW9uKSA/IE51bWJlcihvYmplY3QudmVyc2lvbikgOiAwLFxuICAgICAgICAgICAgY29tcG9uZW50czogQXJyYXkuaXNBcnJheShvYmplY3Q/LmNvbXBvbmVudHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuY29tcG9uZW50cy5tYXAoKGUpID0+IENvbXBvc2l0ZUNvbXBvbmVudC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb21wb3NpdGVEZWZpbml0aW9uLmZyb21KU09OID0gZnJvbUpTT047XG4gICAgZnVuY3Rpb24gdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIChvYmoudmVyc2lvbiA9IE1hdGgucm91bmQobWVzc2FnZS52ZXJzaW9uKSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIG9iai5jb21wb25lbnRzID0gbWVzc2FnZS5jb21wb25lbnRzLm1hcCgoZSkgPT4gZSA/IENvbXBvc2l0ZUNvbXBvbmVudC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBDb21wb3NpdGVEZWZpbml0aW9uLnRvSlNPTiA9IHRvSlNPTjtcbn0pKENvbXBvc2l0ZURlZmluaXRpb24gfHwgKENvbXBvc2l0ZURlZmluaXRpb24gPSB7fSkpO1xuY29uc3QgdHNQcm90b0dsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBpZiAodHNQcm90b0dsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20odHNQcm90b0dsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBiaW4gPSB0c1Byb3RvR2xvYmFsVGhpcy5hdG9iKGI2NCk7XG4gICAgICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG59XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgaWYgKHRzUHJvdG9HbG9iYWxUaGlzLkJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gdHNQcm90b0dsb2JhbFRoaXMuQnVmZmVyLmZyb20oYXJyKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgICAgICBhcnIuZm9yRWFjaCgoYnl0ZSkgPT4ge1xuICAgICAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHNQcm90b0dsb2JhbFRoaXMuYnRvYShiaW4uam9pbihcIlwiKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5jb25zdCBwcm90b2J1ZlBhY2thZ2VTYXJhc2EgPSBcImdvb2dsZS5wcm90b2J1ZlwiO1xuLyoqXG4gKiBgTnVsbFZhbHVlYCBpcyBhIHNpbmdsZXRvbiBlbnVtZXJhdGlvbiB0byByZXByZXNlbnQgdGhlIG51bGwgdmFsdWUgZm9yIHRoZVxuICogYFZhbHVlYCB0eXBlIHVuaW9uLlxuICpcbiAqICBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBmb3IgYE51bGxWYWx1ZWAgaXMgSlNPTiBgbnVsbGAuXG4gKi9cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIE51bGxWYWx1ZTtcbihmdW5jdGlvbiAoTnVsbFZhbHVlKSB7XG4gICAgLyoqIE5VTExfVkFMVUUgLSBOdWxsIHZhbHVlLiAqL1xuICAgIE51bGxWYWx1ZVtOdWxsVmFsdWVbXCJOVUxMX1ZBTFVFXCJdID0gMF0gPSBcIk5VTExfVkFMVUVcIjtcbn0pKE51bGxWYWx1ZSB8fCAoTnVsbFZhbHVlID0ge30pKTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbnVsbFZhbHVlRnJvbUpTT04ob2JqZWN0KSB7XG4gICAgc3dpdGNoIChvYmplY3QpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIFwiTlVMTF9WQUxVRVwiOlxuICAgICAgICAgICAgcmV0dXJuIDAgLyogTnVsbFZhbHVlLk5VTExfVkFMVUUgKi87XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgdHNQcm90b0dsb2JhbFRoaXMuRXJyb3IoXCJVbnJlY29nbml6ZWQgZW51bSB2YWx1ZSBcIiArIG9iamVjdCArIFwiIGZvciBlbnVtIE51bGxWYWx1ZVwiKTtcbiAgICB9XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG51bGxWYWx1ZVRvSlNPTihvYmplY3QpIHtcbiAgICBzd2l0Y2ggKG9iamVjdCkge1xuICAgICAgICBjYXNlIDAgLyogTnVsbFZhbHVlLk5VTExfVkFMVUUgKi86XG4gICAgICAgICAgICByZXR1cm4gXCJOVUxMX1ZBTFVFXCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgdHNQcm90b0dsb2JhbFRoaXMuRXJyb3IoXCJVbnJlY29nbml6ZWQgZW51bSB2YWx1ZSBcIiArIG9iamVjdCArIFwiIGZvciBlbnVtIE51bGxWYWx1ZVwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVCYXNlU3RydWN0KCkge1xuICAgIHJldHVybiB7IGZpZWxkczogbmV3IE1hcCgpIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBTdHJ1Y3Q7XG4oZnVuY3Rpb24gKFN0cnVjdCkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIG1lc3NhZ2UuZmllbGRzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgU3RydWN0X0ZpZWxkc0VudHJ5LmVuY29kZSh7IGtleToga2V5LCB2YWx1ZSB9LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG4gICAgU3RydWN0LmVuY29kZSA9IGVuY29kZTtcbiAgICBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU3RydWN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5MSA9IFN0cnVjdF9GaWVsZHNFbnRyeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkxLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmllbGRzLnNldChlbnRyeTEua2V5LCBlbnRyeTEudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgU3RydWN0LmRlY29kZSA9IGRlY29kZTtcbiAgICBmdW5jdGlvbiBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkczogaXNPYmplY3Qob2JqZWN0LmZpZWxkcylcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5lbnRyaWVzKG9iamVjdC5maWVsZHMpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICB9LCBuZXcgTWFwKCkpXG4gICAgICAgICAgICAgICAgOiBuZXcgTWFwKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIFN0cnVjdC5mcm9tSlNPTiA9IGZyb21KU09OO1xuICAgIGZ1bmN0aW9uIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBvYmouZmllbGRzID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLmZpZWxkcykge1xuICAgICAgICAgICAgbWVzc2FnZS5maWVsZHMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICAgICAgICAgIG9iai5maWVsZHNba10gPSB2O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgU3RydWN0LnRvSlNPTiA9IHRvSlNPTjtcbiAgICBmdW5jdGlvbiB3cmFwKG9iamVjdCkge1xuICAgICAgICBjb25zdCBzdHJ1Y3QgPSBjcmVhdGVCYXNlU3RydWN0KCk7XG4gICAgICAgIGlmIChvYmplY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBzdHJ1Y3QuZmllbGRzLnNldChrZXksIG9iamVjdFtrZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJ1Y3Q7XG4gICAgfVxuICAgIFN0cnVjdC53cmFwID0gd3JhcDtcbiAgICBmdW5jdGlvbiB1bndyYXAobWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmplY3QgPSB7fTtcbiAgICAgICAgWy4uLm1lc3NhZ2UuZmllbGRzLmtleXMoKV0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IG1lc3NhZ2UuZmllbGRzLmdldChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gICAgU3RydWN0LnVud3JhcCA9IHVud3JhcDtcbn0pKFN0cnVjdCB8fCAoU3RydWN0ID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTdHJ1Y3RfRmllbGRzRW50cnkoKSB7XG4gICAgcmV0dXJuIHsga2V5OiBcIlwiLCB2YWx1ZTogdW5kZWZpbmVkIH07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBTdHJ1Y3RfRmllbGRzRW50cnk7XG4oZnVuY3Rpb24gKFN0cnVjdF9GaWVsZHNFbnRyeSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmtleSAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWYWx1ZS5lbmNvZGUoVmFsdWUud3JhcChtZXNzYWdlLnZhbHVlKSwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBTdHJ1Y3RfRmllbGRzRW50cnkuZW5jb2RlID0gZW5jb2RlO1xuICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTdHJ1Y3RfRmllbGRzRW50cnkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5rZXkgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFsdWUgPSBWYWx1ZS51bndyYXAoVmFsdWUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgU3RydWN0X0ZpZWxkc0VudHJ5LmRlY29kZSA9IGRlY29kZTtcbiAgICBmdW5jdGlvbiBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHsga2V5OiBpc1NldChvYmplY3Qua2V5KSA/IFN0cmluZyhvYmplY3Qua2V5KSA6IFwiXCIsIHZhbHVlOiBpc1NldChvYmplY3Q/LnZhbHVlKSA/IG9iamVjdC52YWx1ZSA6IHVuZGVmaW5lZCB9O1xuICAgIH1cbiAgICBTdHJ1Y3RfRmllbGRzRW50cnkuZnJvbUpTT04gPSBmcm9tSlNPTjtcbiAgICBmdW5jdGlvbiB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5rZXkgIT09IHVuZGVmaW5lZCAmJiAob2JqLmtleSA9IG1lc3NhZ2Uua2V5KTtcbiAgICAgICAgbWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIChvYmoudmFsdWUgPSBtZXNzYWdlLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgU3RydWN0X0ZpZWxkc0VudHJ5LnRvSlNPTiA9IHRvSlNPTjtcbn0pKFN0cnVjdF9GaWVsZHNFbnRyeSB8fCAoU3RydWN0X0ZpZWxkc0VudHJ5ID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VWYWx1ZSgpIHtcbiAgICByZXR1cm4geyBraW5kOiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFZhbHVlO1xuKGZ1bmN0aW9uIChWYWx1ZSkge1xuICAgIGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5raW5kPy4kY2FzZSkge1xuICAgICAgICAgICAgY2FzZSBcIm51bGxWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5raW5kLm51bGxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyVmFsdWVcIjpcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKDE3KS5kb3VibGUobWVzc2FnZS5raW5kLm51bWJlclZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLmtpbmQuc3RyaW5nVmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJvb2xWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzIpLmJvb2wobWVzc2FnZS5raW5kLmJvb2xWYWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3RydWN0VmFsdWVcIjpcbiAgICAgICAgICAgICAgICBTdHJ1Y3QuZW5jb2RlKFN0cnVjdC53cmFwKG1lc3NhZ2Uua2luZC5zdHJ1Y3RWYWx1ZSksIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibGlzdFZhbHVlXCI6XG4gICAgICAgICAgICAgICAgTGlzdFZhbHVlLmVuY29kZShMaXN0VmFsdWUud3JhcChtZXNzYWdlLmtpbmQubGlzdFZhbHVlKSwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbiAgICBWYWx1ZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVZhbHVlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5raW5kID0geyAkY2FzZTogXCJudWxsVmFsdWVcIiwgbnVsbFZhbHVlOiByZWFkZXIuaW50MzIoKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDE3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtpbmQgPSB7ICRjYXNlOiBcIm51bWJlclZhbHVlXCIsIG51bWJlclZhbHVlOiByZWFkZXIuZG91YmxlKCkgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSAyNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5raW5kID0geyAkY2FzZTogXCJzdHJpbmdWYWx1ZVwiLCBzdHJpbmdWYWx1ZTogcmVhZGVyLnN0cmluZygpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2luZCA9IHsgJGNhc2U6IFwiYm9vbFZhbHVlXCIsIGJvb2xWYWx1ZTogcmVhZGVyLmJvb2woKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtpbmQgPSB7ICRjYXNlOiBcInN0cnVjdFZhbHVlXCIsIHN0cnVjdFZhbHVlOiBTdHJ1Y3QudW53cmFwKFN0cnVjdC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKSB9O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmtpbmQgPSB7ICRjYXNlOiBcImxpc3RWYWx1ZVwiLCBsaXN0VmFsdWU6IExpc3RWYWx1ZS51bndyYXAoTGlzdFZhbHVlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgVmFsdWUuZGVjb2RlID0gZGVjb2RlO1xuICAgIGZ1bmN0aW9uIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogaXNTZXQob2JqZWN0Lm51bGxWYWx1ZSlcbiAgICAgICAgICAgICAgICA/IHsgJGNhc2U6IFwibnVsbFZhbHVlXCIsIG51bGxWYWx1ZTogbnVsbFZhbHVlRnJvbUpTT04ob2JqZWN0Lm51bGxWYWx1ZSkgfVxuICAgICAgICAgICAgICAgIDogaXNTZXQob2JqZWN0Lm51bWJlclZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IHsgJGNhc2U6IFwibnVtYmVyVmFsdWVcIiwgbnVtYmVyVmFsdWU6IE51bWJlcihvYmplY3QubnVtYmVyVmFsdWUpIH1cbiAgICAgICAgICAgICAgICAgICAgOiBpc1NldChvYmplY3Quc3RyaW5nVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHsgJGNhc2U6IFwic3RyaW5nVmFsdWVcIiwgc3RyaW5nVmFsdWU6IFN0cmluZyhvYmplY3Quc3RyaW5nVmFsdWUpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXNTZXQob2JqZWN0LmJvb2xWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgJGNhc2U6IFwiYm9vbFZhbHVlXCIsIGJvb2xWYWx1ZTogQm9vbGVhbihvYmplY3QuYm9vbFZhbHVlKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpc1NldChvYmplY3Quc3RydWN0VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geyAkY2FzZTogXCJzdHJ1Y3RWYWx1ZVwiLCBzdHJ1Y3RWYWx1ZTogb2JqZWN0LnN0cnVjdFZhbHVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpc1NldChvYmplY3QubGlzdFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7ICRjYXNlOiBcImxpc3RWYWx1ZVwiLCBsaXN0VmFsdWU6IFsuLi5vYmplY3QubGlzdFZhbHVlXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgVmFsdWUuZnJvbUpTT04gPSBmcm9tSlNPTjtcbiAgICBmdW5jdGlvbiB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5raW5kPy4kY2FzZSA9PT0gXCJudWxsVmFsdWVcIiAmJlxuICAgICAgICAgICAgKG9iai5udWxsVmFsdWUgPSBtZXNzYWdlLmtpbmQ/Lm51bGxWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbnVsbFZhbHVlVG9KU09OKG1lc3NhZ2Uua2luZD8ubnVsbFZhbHVlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwibnVtYmVyVmFsdWVcIiAmJiAob2JqLm51bWJlclZhbHVlID0gbWVzc2FnZS5raW5kPy5udW1iZXJWYWx1ZSk7XG4gICAgICAgIG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwic3RyaW5nVmFsdWVcIiAmJiAob2JqLnN0cmluZ1ZhbHVlID0gbWVzc2FnZS5raW5kPy5zdHJpbmdWYWx1ZSk7XG4gICAgICAgIG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwiYm9vbFZhbHVlXCIgJiYgKG9iai5ib29sVmFsdWUgPSBtZXNzYWdlLmtpbmQ/LmJvb2xWYWx1ZSk7XG4gICAgICAgIG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwic3RydWN0VmFsdWVcIiAmJiAob2JqLnN0cnVjdFZhbHVlID0gbWVzc2FnZS5raW5kPy5zdHJ1Y3RWYWx1ZSk7XG4gICAgICAgIG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwibGlzdFZhbHVlXCIgJiYgKG9iai5saXN0VmFsdWUgPSBtZXNzYWdlLmtpbmQ/Lmxpc3RWYWx1ZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIFZhbHVlLnRvSlNPTiA9IHRvSlNPTjtcbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZUJhc2VWYWx1ZSgpO1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5raW5kID0geyAkY2FzZTogXCJudWxsVmFsdWVcIiwgbnVsbFZhbHVlOiAwIC8qIE51bGxWYWx1ZS5OVUxMX1ZBTFVFICovIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSB7ICRjYXNlOiBcImJvb2xWYWx1ZVwiLCBib29sVmFsdWU6IHZhbHVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IHsgJGNhc2U6IFwibnVtYmVyVmFsdWVcIiwgbnVtYmVyVmFsdWU6IHZhbHVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IHsgJGNhc2U6IFwic3RyaW5nVmFsdWVcIiwgc3RyaW5nVmFsdWU6IHZhbHVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5raW5kID0geyAkY2FzZTogXCJsaXN0VmFsdWVcIiwgbGlzdFZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSB7ICRjYXNlOiBcInN0cnVjdFZhbHVlXCIsIHN0cnVjdFZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYW55IHZhbHVlIHR5cGU6IFwiICsgdHlwZW9mIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBWYWx1ZS53cmFwID0gd3JhcDtcbiAgICBmdW5jdGlvbiB1bndyYXAobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZS5raW5kPy4kY2FzZSA9PT0gXCJudWxsVmFsdWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZS5raW5kPy4kY2FzZSA9PT0gXCJudW1iZXJWYWx1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5raW5kPy5udW1iZXJWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmtpbmQ/LiRjYXNlID09PSBcInN0cmluZ1ZhbHVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLmtpbmQ/LnN0cmluZ1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwiYm9vbFZhbHVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLmtpbmQ/LmJvb2xWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmtpbmQ/LiRjYXNlID09PSBcInN0cnVjdFZhbHVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLmtpbmQ/LnN0cnVjdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1lc3NhZ2Uua2luZD8uJGNhc2UgPT09IFwibGlzdFZhbHVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLmtpbmQ/Lmxpc3RWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmFsdWUudW53cmFwID0gdW53cmFwO1xufSkoVmFsdWUgfHwgKFZhbHVlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VMaXN0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWVzOiBbXSB9O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgTGlzdFZhbHVlO1xuKGZ1bmN0aW9uIChMaXN0VmFsdWUpIHtcbiAgICBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS52YWx1ZXMpIHtcbiAgICAgICAgICAgIFZhbHVlLmVuY29kZShWYWx1ZS53cmFwKHYpLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuICAgIExpc3RWYWx1ZS5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUxpc3RWYWx1ZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlcy5wdXNoKFZhbHVlLnVud3JhcChWYWx1ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgTGlzdFZhbHVlLmRlY29kZSA9IGRlY29kZTtcbiAgICBmdW5jdGlvbiBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWVzOiBBcnJheS5pc0FycmF5KG9iamVjdD8udmFsdWVzKSA/IFsuLi5vYmplY3QudmFsdWVzXSA6IFtdIH07XG4gICAgfVxuICAgIExpc3RWYWx1ZS5mcm9tSlNPTiA9IGZyb21KU09OO1xuICAgIGZ1bmN0aW9uIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZXMpIHtcbiAgICAgICAgICAgIG9iai52YWx1ZXMgPSBtZXNzYWdlLnZhbHVlcy5tYXAoKGUpID0+IGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnZhbHVlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIExpc3RWYWx1ZS50b0pTT04gPSB0b0pTT047XG4gICAgZnVuY3Rpb24gd3JhcChhcnJheSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGVCYXNlTGlzdFZhbHVlKCk7XG4gICAgICAgIHJlc3VsdC52YWx1ZXMgPSBhcnJheSA/PyBbXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTGlzdFZhbHVlLndyYXAgPSB3cmFwO1xuICAgIGZ1bmN0aW9uIHVud3JhcChtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlPy5oYXNPd25Qcm9wZXJ0eShcInZhbHVlc1wiKSAmJiBBcnJheS5pc0FycmF5KG1lc3NhZ2UudmFsdWVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UudmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgTGlzdFZhbHVlLnVud3JhcCA9IHVud3JhcDtcbn0pKExpc3RWYWx1ZSB8fCAoTGlzdFZhbHVlID0ge30pKTtcbmNvbnN0IHRzUHJvdG9HbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGw7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuIiwgImltcG9ydCB7IGdldENvbXBvc2l0ZVJvb3RDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgRW50aXR5TWFwcGluZ01vZGUsIGluc3RhbmNlQ29tcG9zaXRlIH0gZnJvbSAnLi9pbnN0YW5jZSc7XG5pbXBvcnQgeyByZXNvbHZlQ29tcG9zaXRlIH0gZnJvbSAnLi9wYXRoJztcbmltcG9ydCB7IENvbXBvc2l0ZURlZmluaXRpb24gfSBmcm9tICcuL3Byb3RvL2dlbi9jb21wb3NpdGUuZ2VuJztcbmV4cG9ydCB7IEVudGl0eU1hcHBpbmdNb2RlIH07XG5leHBvcnQgeyBnZXRDb21wb3NpdGVSb290Q29tcG9uZW50IH07XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIGNvbXBvc2l0ZSBpcyBub3QgYmVpbmcgc3VwcG9ydGVkIHNvIGZhciwgcGxlYXNlIGRvIG5vdCB1c2UgdGhpcyBmZWF0dXJlXG4gKi9cbmV4cG9ydCB2YXIgQ29tcG9zaXRlO1xuKGZ1bmN0aW9uIChDb21wb3NpdGUpIHtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIGZ1bmN0aW9uIGZyb21Kc29uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gQ29tcG9zaXRlRGVmaW5pdGlvbi5mcm9tSlNPTihvYmplY3QpO1xuICAgIH1cbiAgICBDb21wb3NpdGUuZnJvbUpzb24gPSBmcm9tSnNvbjtcbiAgICAvKiogQHB1YmxpYyAqL1xuICAgIGZ1bmN0aW9uIGZyb21CaW5hcnkoYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBDb21wb3NpdGVEZWZpbml0aW9uLmRlY29kZShidWZmZXIpO1xuICAgIH1cbiAgICBDb21wb3NpdGUuZnJvbUJpbmFyeSA9IGZyb21CaW5hcnk7XG4gICAgLyoqIEBwdWJsaWMgKi9cbiAgICBmdW5jdGlvbiB0b0pzb24oY29tcG9zaXRlKSB7XG4gICAgICAgIHJldHVybiBDb21wb3NpdGVEZWZpbml0aW9uLnRvSlNPTihjb21wb3NpdGUpO1xuICAgIH1cbiAgICBDb21wb3NpdGUudG9Kc29uID0gdG9Kc29uO1xuICAgIC8qKiBAcHVibGljICovXG4gICAgZnVuY3Rpb24gdG9CaW5hcnkoY29tcG9zaXRlKSB7XG4gICAgICAgIHJldHVybiBDb21wb3NpdGVEZWZpbml0aW9uLmVuY29kZShjb21wb3NpdGUpLmZpbmlzaCgpO1xuICAgIH1cbiAgICBDb21wb3NpdGUudG9CaW5hcnkgPSB0b0JpbmFyeTtcbiAgICAvKipcbiAgICAgKiBJbnN0YW5jZSBhIGNvbXBvc2l0ZSBhbmQgcmV0dXJucyBpdHMgcm9vdCBlbnRpdHlcbiAgICAgKiBAcGFyYW0gY29tcG9zaXRlRGF0YSAtIHN0YXRlIHNlcmlhbGl6ZWQgYnkgdGhlIENSRFQgcHJvdG9jb2xcbiAgICAgKiBAcGFyYW0gZ2V0TmV4dEF2YWlsYWJsZUVudGl0eSAtIGZ1bmN0aW9uIHRoYXQgZ2l2ZXMgdW51c2VkIGVudGl0aWVzXG4gICAgICogQHBhcmFtIHJvb3RFbnRpdHkgLSAob3B0aW9uYWwpIHN1Z2dlc3RlZCBtYXBwZWQgcm9vdEVudGl0eSBmb3IgdGhlIGNvbXBvc2l0ZVxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIC8qI19fUFVSRV9fKi8gZnVuY3Rpb24gaW5zdGFuY2UoZW5naW5lLCBjb21wb3NpdGVEYXRhLCBjb21wb3NpdGVQcm92aWRlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGluc3RhbmNlQ29tcG9zaXRlKGVuZ2luZSwgY29tcG9zaXRlRGF0YSwgY29tcG9zaXRlUHJvdmlkZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBDb21wb3NpdGUuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGFuZCBub3JtYWxpemUgYSBjb21wb3NpdGUgcGF0aFxuICAgICAqIEBwYXJhbSBzcmMgLSB0aGUgc291cmNlIHBhdGhcbiAgICAgKiBAcGFyYW0gY3dkIC0gdGhlIGRpcmVjdG9yeSBmcm9tIHRoZSByZXNvbHZlIHNob3VsZCBzdGFydCB0byByZXNvbHZlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgYWJzb2x1dGUgcmVzb2x2ZWQgcGF0aCB3aXRob3V0IHNsYXNoIGF0IHRoZSBiZWdpbm5pbmdcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgLyojX19QVVJFX18qLyBmdW5jdGlvbiByZXNvbHZlQW5kTm9ybWFsaXplUGF0aChzcmMsIGN3ZCA9ICcvJykge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUNvbXBvc2l0ZShzcmMsIGN3ZCk7XG4gICAgfVxuICAgIENvbXBvc2l0ZS5yZXNvbHZlQW5kTm9ybWFsaXplUGF0aCA9IHJlc29sdmVBbmROb3JtYWxpemVQYXRoO1xufSkoQ29tcG9zaXRlIHx8IChDb21wb3NpdGUgPSB7fSkpO1xuIiwgIi8vIFRoZSBvcmRlciBvZiB0aGUgZm9sbG93aW5nIGltcG9ydHMgbWF0dGVycy4gUGxlYXNlIGRvIG5vdCBhdXRvLXNvcnRcbmV4cG9ydCAqIGZyb20gJy4vZW5naW5lJztcbmV4cG9ydCAqIGZyb20gJy4vc2NoZW1hcyc7XG5leHBvcnQgKiBmcm9tICcuL3J1bnRpbWUvaW5pdGlhbGl6YXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9ydW50aW1lL3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vcnVudGltZS9oZWxwZXJzJztcbmV4cG9ydCB7IGN5Y2xpY1BhcmVudGluZ0NoZWNrZXIgfSBmcm9tICcuL3N5c3RlbXMvY3ljbGljUGFyZW50aW5nQ2hlY2tlcic7XG5leHBvcnQgKiBmcm9tICcuL3N5c3RlbXMvZXZlbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vc3lzdGVtcy9yYXljYXN0JztcbmV4cG9ydCAqIGZyb20gJy4vc3lzdGVtcy92aWRlb0V2ZW50cyc7XG5leHBvcnQgKiBmcm9tICcuL3N5c3RlbXMvYXN5bmMtdGFzayc7XG5leHBvcnQgKiBmcm9tICcuL3N5c3RlbXMvdHdlZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9lbmdpbmUvZW50aXR5JztcbmV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50cy90eXBlcyc7XG4vLyBAaW50ZXJuYWxcbmltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi9jb21wb25lbnRzJztcbi8vIEBpbnRlcm5hbFxuZXhwb3J0IHsgY29tcG9uZW50cyB9O1xuaW1wb3J0IHsgZW5naW5lIH0gZnJvbSAnLi9ydW50aW1lL2luaXRpYWxpemF0aW9uJztcbi8vIGV4cG9ydCBjb21wb25lbnRzIGZvciBnbG9iYWwgZW5naW5lXG5leHBvcnQgY29uc3QgVHJhbnNmb3JtID0gLyogQF9fUFVSRV9fKi8gY29tcG9uZW50cy5UcmFuc2Zvcm0oZW5naW5lKTtcbmV4cG9ydCBjb25zdCBBbmltYXRvciA9IC8qIEBfX1BVUkVfXyovIGNvbXBvbmVudHMuQW5pbWF0b3IoZW5naW5lKTtcbmV4cG9ydCBjb25zdCBBdWRpb1NvdXJjZSA9IC8qIEBfX1BVUkVfXyovIGNvbXBvbmVudHMuQXVkaW9Tb3VyY2UoZW5naW5lKTtcbmV4cG9ydCBjb25zdCBBdWRpb1N0cmVhbSA9IC8qIEBfX1BVUkVfXyovIGNvbXBvbmVudHMuQXVkaW9TdHJlYW0oZW5naW5lKTtcbmV4cG9ydCBjb25zdCBNYXRlcmlhbCA9IC8qIEBfX1BVUkVfXyovIGNvbXBvbmVudHMuTWF0ZXJpYWwoZW5naW5lKTtcbmV4cG9ydCBjb25zdCBNZXNoUmVuZGVyZXIgPSAvKiBAX19QVVJFX18qLyBjb21wb25lbnRzLk1lc2hSZW5kZXJlcihlbmdpbmUpO1xuZXhwb3J0IGNvbnN0IE1lc2hDb2xsaWRlciA9IC8qIEBfX1BVUkVfXyovIGNvbXBvbmVudHMuTWVzaENvbGxpZGVyKGVuZ2luZSk7XG5leHBvcnQgY29uc3QgTmFtZSA9IGNvbXBvbmVudHMuTmFtZShlbmdpbmUpO1xuZXhwb3J0IGNvbnN0IFR3ZWVuID0gLyogQF9fUFVSRV9fKi8gY29tcG9uZW50cy5Ud2VlbihlbmdpbmUpO1xuZXhwb3J0IGNvbnN0IFZpcnR1YWxDYW1lcmEgPSAvKiBAX19QVVJFX18qLyBjb21wb25lbnRzLlZpcnR1YWxDYW1lcmEoZW5naW5lKTtcbmV4cG9ydCBjb25zdCBJbnB1dE1vZGlmaWVyID0gLyogQF9fUFVSRV9fKi8gY29tcG9uZW50cy5JbnB1dE1vZGlmaWVyKGVuZ2luZSk7XG4vKipcbiAqIEBhbHBoYVxuICogVGhpcyBpcyBnb2luZyB0byBiZSB1c2VkIGZvciBzeW5jIGNvbXBvbmVudHMgdGhyb3VnaCBhIHNlcnZlci5cbiAqIENhbiBiZSBtb2RpZmllZCBpbiB0aGUgZnV0dXJlIHNpbmNlIGl0J3Mgc3RpbGwgaW4gcmVzZWFyY2hcbiAqL1xuZXhwb3J0IGNvbnN0IFN5bmNDb21wb25lbnRzID0gLyogQF9fUFVSRV9fKi8gY29tcG9uZW50cy5TeW5jQ29tcG9uZW50cyhlbmdpbmUpO1xuLyoqXG4gKiBAYWxwaGFcbiAqIFRhZyBhIGVudGl0eSB0byBiZSBzeW5jcm9uaXplZCB0aHJvdWdoIGNvbW1zXG4gKi9cbmV4cG9ydCBjb25zdCBOZXR3b3JrRW50aXR5ID0gLyogQF9fUFVSRV9fKi8gY29tcG9uZW50cy5OZXR3b3JrRW50aXR5KGVuZ2luZSk7XG4vKipcbiAqIEBhbHBoYVxuICogVGFnIGEgZW50aXR5IHRvIGJlIHN5bmNyb25pemVkIHRocm91Z2ggY29tbXNcbiAqL1xuZXhwb3J0IGNvbnN0IE5ldHdvcmtQYXJlbnQgPSAvKiBAX19QVVJFX18qLyBjb21wb25lbnRzLk5ldHdvcmtQYXJlbnQoZW5naW5lKTtcbi8vIGV4cG9ydCBjb21wb25lbnRzIGZvciBnbG9iYWwgZW5naW5lXG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMvZ2VuZXJhdGVkL2dsb2JhbC5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzL2dlbmVyYXRlZC90eXBlcy5nZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJpYWxpemF0aW9uL2NyZHQnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb3NpdGUnO1xuIiwgIi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGEgdmFsdWUgdG8gZ2FtbWEgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFRvR2FtbWFTcGFjZSA9IDEgLyAyLjI7XG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gY29udmVydCBhIHZhbHVlIHRvIGxpbmVhciBzcGFjZVxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgVG9MaW5lYXJTcGFjZSA9IDIuMjtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBkZWZpbmUgdGhlIG1pbmltYWwgbnVtYmVyIHZhbHVlIGluIEJhYnlsb24uanNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEVwc2lsb24gPSAwLjAwMDAwMTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gRXVsZXIgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBERUcyUkFEID0gTWF0aC5QSSAvIDE4MDtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gcmFkaWFucyB0byBFdWxlciBkZWdyZWVzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBSQUQyREVHID0gMzYwIC8gKE1hdGguUEkgKiAyKTtcbiIsICIvKipcbiAqIFNjYWxhciBjb21wdXRhdGlvbiBsaWJyYXJ5XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgU2NhbGFyO1xuKGZ1bmN0aW9uIChTY2FsYXIpIHtcbiAgICAvKipcbiAgICAgKiBUd28gcGkgY29uc3RhbnRzIGNvbnZlbmllbnQgZm9yIGNvbXB1dGF0aW9uLlxuICAgICAqL1xuICAgIFNjYWxhci5Ud29QaSA9IE1hdGguUEkgKiAyO1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gOiB0cnVlIGlmIHRoZSBhYnNvbHV0ZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYiBpcyBsb3dlciB0aGFuIGVwc2lsb24gKGRlZmF1bHQgPSAxLjQwMTI5OEUtNDUpXG4gICAgICogQHBhcmFtIGEgLSBudW1iZXJcbiAgICAgKiBAcGFyYW0gYiAtIG51bWJlclxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gKGRlZmF1bHQgPSAxLjQwMTI5OEUtNDUpXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgYWJzb2x1dGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYW5kIGIgaXMgbG93ZXIgdGhhbiBlcHNpbG9uIChkZWZhdWx0ID0gMS40MDEyOThFLTQ1KVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdpdGhpbkVwc2lsb24oYSwgYiwgZXBzaWxvbiA9IDEuNDAxMjk4ZS00NSkge1xuICAgICAgICBjb25zdCBudW0gPSBhIC0gYjtcbiAgICAgICAgcmV0dXJuIC1lcHNpbG9uIDw9IG51bSAmJiBudW0gPD0gZXBzaWxvbjtcbiAgICB9XG4gICAgU2NhbGFyLndpdGhpbkVwc2lsb24gPSB3aXRoaW5FcHNpbG9uO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgOiB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gICAgICogQHBhcmFtIGkgLSBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9IZXgoaSkge1xuICAgICAgICBjb25zdCBzdHIgPSBpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGkgPD0gMTUpIHtcbiAgICAgICAgICAgIHJldHVybiAoJzAnICsgc3RyKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgU2NhbGFyLnRvSGV4ID0gdG9IZXg7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyAtMSBpZiB2YWx1ZSBpcyBuZWdhdGl2ZSBhbmQgKzEgaXMgdmFsdWUgaXMgcG9zaXRpdmUuXG4gICAgICogQHBhcmFtIF92YWx1ZSAtIHRoZSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHRoZSB2YWx1ZSBpdHNlbGYgaWYgaXQncyBlcXVhbCB0byB6ZXJvLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpZ24odmFsdWUpIHtcbiAgICAgICAgY29uc3QgX3ZhbHVlID0gK3ZhbHVlOyAvLyBjb252ZXJ0IHRvIGEgbnVtYmVyXG4gICAgICAgIGlmIChfdmFsdWUgPT09IDAgfHwgaXNOYU4oX3ZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIF92YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3ZhbHVlID4gMCA/IDEgOiAtMTtcbiAgICB9XG4gICAgU2NhbGFyLnNpZ24gPSBzaWduO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIGl0c2VsZiBpZiBpdCdzIGJldHdlZW4gbWluIGFuZCBtYXguXG4gICAgICogUmV0dXJucyBtaW4gaWYgdGhlIHZhbHVlIGlzIGxvd2VyIHRoYW4gbWluLlxuICAgICAqIFJldHVybnMgbWF4IGlmIHRoZSB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gbWF4LlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjbG1hcFxuICAgICAqIEBwYXJhbSBtaW4gLSB0aGUgbWluIHZhbHVlIHRvIGNsYW1wIHRvIChkZWZhdWx0OiAwKVxuICAgICAqIEBwYXJhbSBtYXggLSB0aGUgbWF4IHZhbHVlIHRvIGNsYW1wIHRvIChkZWZhdWx0OiAxKVxuICAgICAqIEByZXR1cm5zIHRoZSBjbGFtcGVkIHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKG1heCwgTWF0aC5tYXgobWluLCB2YWx1ZSkpO1xuICAgIH1cbiAgICBTY2FsYXIuY2xhbXAgPSBjbGFtcDtcbiAgICAvKipcbiAgICAgKiB0aGUgbG9nMiBvZiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY29tcHV0ZSBsb2cyIG9mXG4gICAgICogQHJldHVybnMgdGhlIGxvZzIgb2YgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9nMih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5sb2codmFsdWUpICogTWF0aC5MT0cyRTtcbiAgICB9XG4gICAgU2NhbGFyLmxvZzIgPSBsb2cyO1xuICAgIC8qKlxuICAgICAqIExvb3BzIHRoZSB2YWx1ZSwgc28gdGhhdCBpdCBpcyBuZXZlciBsYXJnZXIgdGhhbiBsZW5ndGggYW5kIG5ldmVyIHNtYWxsZXIgdGhhbiAwLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBtb2R1bG8gb3BlcmF0b3IgYnV0IGl0IHdvcmtzIHdpdGggZmxvYXRpbmcgcG9pbnQgbnVtYmVycy5cbiAgICAgKiBGb3IgZXhhbXBsZSwgdXNpbmcgMy4wIGZvciB0IGFuZCAyLjUgZm9yIGxlbmd0aCwgdGhlIHJlc3VsdCB3b3VsZCBiZSAwLjUuXG4gICAgICogV2l0aCB0ID0gNSBhbmQgbGVuZ3RoID0gMi41LCB0aGUgcmVzdWx0IHdvdWxkIGJlIDAuMC5cbiAgICAgKiBOb3RlLCBob3dldmVyLCB0aGF0IHRoZSBiZWhhdmlvdXIgaXMgbm90IGRlZmluZWQgZm9yIG5lZ2F0aXZlIG51bWJlcnMgYXMgaXQgaXMgZm9yIHRoZSBtb2R1bG8gb3BlcmF0b3JcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIC0gdGhlIGxlbmd0aFxuICAgICAqIEByZXR1cm5zIHRoZSBsb29wZWQgdmFsdWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQodmFsdWUsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgLSBNYXRoLmZsb29yKHZhbHVlIC8gbGVuZ3RoKSAqIGxlbmd0aDtcbiAgICB9XG4gICAgU2NhbGFyLnJlcGVhdCA9IHJlcGVhdDtcbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIHZhbHVlIGJldHdlZW4gMC4wIGFuZCAxLjAgdXNpbmcgbWluIGFuZCBtYXggdmFsdWVzXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgdG8gbm9ybWFsaXplXG4gICAgICogQHBhcmFtIG1pbiAtIG1heCB0byBub3JtYWxpemUgYmV0d2VlblxuICAgICAqIEBwYXJhbSBtYXggLSBtaW4gdG8gbm9ybWFsaXplIGJldHdlZW5cbiAgICAgKiBAcmV0dXJucyB0aGUgbm9ybWFsaXplZCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAtIG1pbikgLyAobWF4IC0gbWluKTtcbiAgICB9XG4gICAgU2NhbGFyLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcbiAgICAvKipcbiAgICAgKiBEZW5vcm1hbGl6ZSB0aGUgdmFsdWUgZnJvbSAwLjAgYW5kIDEuMCB1c2luZyBtaW4gYW5kIG1heCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZCAtIHZhbHVlIHRvIGRlbm9ybWFsaXplXG4gICAgICogQHBhcmFtIG1pbiAtIG1heCB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHBhcmFtIG1heCAtIG1pbiB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHJldHVybnMgdGhlIGRlbm9ybWFsaXplZCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbm9ybWFsaXplKG5vcm1hbGl6ZWQsIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkICogKG1heCAtIG1pbikgKyBtaW47XG4gICAgfVxuICAgIFNjYWxhci5kZW5vcm1hbGl6ZSA9IGRlbm9ybWFsaXplO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHNob3J0ZXN0IGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gZ2l2ZW4gYW5nbGVzIGdpdmVuIGluIGRlZ3JlZXMuXG4gICAgICogQHBhcmFtIGN1cnJlbnQgLSBjdXJyZW50IGFuZ2xlIGluIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gdGFyZ2V0IGFuZ2xlIGluIGRlZ3JlZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgZGVsdGFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWx0YUFuZ2xlKGN1cnJlbnQsIHRhcmdldCkge1xuICAgICAgICBsZXQgbnVtID0gcmVwZWF0KHRhcmdldCAtIGN1cnJlbnQsIDM2MC4wKTtcbiAgICAgICAgaWYgKG51bSA+IDE4MC4wKSB7XG4gICAgICAgICAgICBudW0gLT0gMzYwLjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgU2NhbGFyLmRlbHRhQW5nbGUgPSBkZWx0YUFuZ2xlO1xuICAgIC8qKlxuICAgICAqIFBpbmdQb25ncyB0aGUgdmFsdWUgdCwgc28gdGhhdCBpdCBpcyBuZXZlciBsYXJnZXIgdGhhbiBsZW5ndGggYW5kIG5ldmVyIHNtYWxsZXIgdGhhbiAwLlxuICAgICAqIEBwYXJhbSB0eCAtIHZhbHVlXG4gICAgICogQHBhcmFtIGxlbmd0aCAtIGxlbmd0aFxuICAgICAqIEByZXR1cm5zIFRoZSByZXR1cm5lZCB2YWx1ZSB3aWxsIG1vdmUgYmFjayBhbmQgZm9ydGggYmV0d2VlbiAwIGFuZCBsZW5ndGhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaW5nUG9uZyh0eCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHQgPSByZXBlYXQodHgsIGxlbmd0aCAqIDIuMCk7XG4gICAgICAgIHJldHVybiBsZW5ndGggLSBNYXRoLmFicyh0IC0gbGVuZ3RoKTtcbiAgICB9XG4gICAgU2NhbGFyLnBpbmdQb25nID0gcGluZ1Bvbmc7XG4gICAgLyoqXG4gICAgICogSW50ZXJwb2xhdGVzIGJldHdlZW4gbWluIGFuZCBtYXggd2l0aCBzbW9vdGhpbmcgYXQgdGhlIGxpbWl0cy5cbiAgICAgKlxuICAgICAqIFRoaXMgZXhwb3J0IGZ1bmN0aW9uIGludGVycG9sYXRlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluIGEgc2ltaWxhciB3YXkgdG8gTGVycC4gSG93ZXZlciwgdGhlIGludGVycG9sYXRpb24gd2lsbCBncmFkdWFsbHkgc3BlZWQgdXBcbiAgICAgKiBmcm9tIHRoZSBzdGFydCBhbmQgc2xvdyBkb3duIHRvd2FyZCB0aGUgZW5kLiBUaGlzIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgbmF0dXJhbC1sb29raW5nIGFuaW1hdGlvbiwgZmFkaW5nIGFuZCBvdGhlciB0cmFuc2l0aW9ucy5cbiAgICAgKiBAcGFyYW0gZnJvbSAtIGZyb21cbiAgICAgKiBAcGFyYW0gdG8gLSB0b1xuICAgICAqIEBwYXJhbSB0eCAtIHZhbHVlXG4gICAgICogQHJldHVybnMgdGhlIHNtb290aCBzdGVwcGVkIHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc21vb3RoU3RlcChmcm9tLCB0bywgdHgpIHtcbiAgICAgICAgbGV0IHQgPSBjbGFtcCh0eCk7XG4gICAgICAgIHQgPSAtMi4wICogdCAqIHQgKiB0ICsgMy4wICogdCAqIHQ7XG4gICAgICAgIHJldHVybiB0byAqIHQgKyBmcm9tICogKDEuMCAtIHQpO1xuICAgIH1cbiAgICBTY2FsYXIuc21vb3RoU3RlcCA9IHNtb290aFN0ZXA7XG4gICAgLyoqXG4gICAgICogTW92ZXMgYSB2YWx1ZSBjdXJyZW50IHRvd2FyZHMgdGFyZ2V0LlxuICAgICAqXG4gICAgICogVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc2FtZSBhcyBNYXRoZi5MZXJwIGJ1dCBpbnN0ZWFkIHRoZSBleHBvcnQgZnVuY3Rpb24gd2lsbCBlbnN1cmUgdGhhdCB0aGUgc3BlZWQgbmV2ZXIgZXhjZWVkcyBtYXhEZWx0YS5cbiAgICAgKiBOZWdhdGl2ZSB2YWx1ZXMgb2YgbWF4RGVsdGEgcHVzaGVzIHRoZSB2YWx1ZSBhd2F5IGZyb20gdGFyZ2V0LlxuICAgICAqIEBwYXJhbSBjdXJyZW50IC0gY3VycmVudCB2YWx1ZVxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSB0YXJnZXQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4RGVsdGEgLSBtYXggZGlzdGFuY2UgdG8gbW92ZVxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1vdmVUb3dhcmRzKGN1cnJlbnQsIHRhcmdldCwgbWF4RGVsdGEpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgIGlmIChNYXRoLmFicyh0YXJnZXQgLSBjdXJyZW50KSA8PSBtYXhEZWx0YSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3VycmVudCArIHNpZ24odGFyZ2V0IC0gY3VycmVudCkgKiBtYXhEZWx0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBTY2FsYXIubW92ZVRvd2FyZHMgPSBtb3ZlVG93YXJkcztcbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIE1vdmVUb3dhcmRzIGJ1dCBtYWtlcyBzdXJlIHRoZSB2YWx1ZXMgaW50ZXJwb2xhdGUgY29ycmVjdGx5IHdoZW4gdGhleSB3cmFwIGFyb3VuZCAzNjAgZGVncmVlcy5cbiAgICAgKlxuICAgICAqIFZhcmlhYmxlcyBjdXJyZW50IGFuZCB0YXJnZXQgYXJlIGFzc3VtZWQgdG8gYmUgaW4gZGVncmVlcy4gRm9yIG9wdGltaXphdGlvbiByZWFzb25zLCBuZWdhdGl2ZSB2YWx1ZXMgb2YgbWF4RGVsdGFcbiAgICAgKiAgYXJlIG5vdCBzdXBwb3J0ZWQgYW5kIG1heSBjYXVzZSBvc2NpbGxhdGlvbi4gVG8gcHVzaCBjdXJyZW50IGF3YXkgZnJvbSBhIHRhcmdldCBhbmdsZSwgYWRkIDE4MCB0byB0aGF0IGFuZ2xlIGluc3RlYWQuXG4gICAgICogQHBhcmFtIGN1cnJlbnQgLSBjdXJyZW50IHZhbHVlXG4gICAgICogQHBhcmFtIHRhcmdldCAtIHRhcmdldCB2YWx1ZVxuICAgICAqIEBwYXJhbSBtYXhEZWx0YSAtIG1heCBkaXN0YW5jZSB0byBtb3ZlXG4gICAgICogQHJldHVybnMgcmVzdWx0aW5nIGFuZ2xlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbW92ZVRvd2FyZHNBbmdsZShjdXJyZW50LCB0YXJnZXQsIG1heERlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IGRlbHRhQW5nbGUoY3VycmVudCwgdGFyZ2V0KTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgIGlmICgtbWF4RGVsdGEgPCBudW0gJiYgbnVtIDwgbWF4RGVsdGEpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1vdmVUb3dhcmRzKGN1cnJlbnQsIGN1cnJlbnQgKyBudW0sIG1heERlbHRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBTY2FsYXIubW92ZVRvd2FyZHNBbmdsZSA9IG1vdmVUb3dhcmRzQW5nbGU7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzY2FsYXIgd2l0aCB2YWx1ZXMgbGluZWFybHkgaW50ZXJwb2xhdGVkIG9mIFwiYW1vdW50XCIgYmV0d2VlbiB0aGUgc3RhcnQgc2NhbGFyIGFuZCB0aGUgZW5kIHNjYWxhclxuICAgICAqIEBwYXJhbSBzdGFydCAtIHN0YXJ0IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIHRhcmdldCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBhbW91bnQgdG8gbGVycCBiZXR3ZWVuXG4gICAgICogQHJldHVybnMgdGhlIGxlcnBlZCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlcnAoc3RhcnQsIGVuZCwgYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBzdGFydCArIChlbmQgLSBzdGFydCkgKiBhbW91bnQ7XG4gICAgfVxuICAgIFNjYWxhci5sZXJwID0gbGVycDtcbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIExlcnAgYnV0IG1ha2VzIHN1cmUgdGhlIHZhbHVlcyBpbnRlcnBvbGF0ZSBjb3JyZWN0bHkgd2hlbiB0aGV5IHdyYXAgYXJvdW5kIDM2MCBkZWdyZWVzLlxuICAgICAqIFRoZSBwYXJhbWV0ZXIgdCBpcyBjbGFtcGVkIHRvIHRoZSByYW5nZSBbMCwgMV0uIFZhcmlhYmxlcyBhIGFuZCBiIGFyZSBhc3N1bWVkIHRvIGJlIGluIGRlZ3JlZXMuXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gdGFyZ2V0IHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGFtb3VudCB0byBsZXJwIGJldHdlZW5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVycGVkIHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVycEFuZ2xlKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBsZXQgbnVtID0gcmVwZWF0KGVuZCAtIHN0YXJ0LCAzNjAuMCk7XG4gICAgICAgIGlmIChudW0gPiAxODAuMCkge1xuICAgICAgICAgICAgbnVtIC09IDM2MC4wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFydCArIG51bSAqIGNsYW1wKGFtb3VudCk7XG4gICAgfVxuICAgIFNjYWxhci5sZXJwQW5nbGUgPSBsZXJwQW5nbGU7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbGluZWFyIHBhcmFtZXRlciB0IHRoYXQgcHJvZHVjZXMgdGhlIGludGVycG9sYW50IHZhbHVlIHdpdGhpbiB0aGUgcmFuZ2UgW2EsIGJdLlxuICAgICAqIEBwYXJhbSBhIC0gc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYiAtIHRhcmdldCB2YWx1ZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIGJldHdlZW4gYSBhbmQgYlxuICAgICAqIEByZXR1cm5zIHRoZSBpbnZlcnNlTGVycCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludmVyc2VMZXJwKGEsIGIsIHZhbHVlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBpZiAoYSAhPT0gYikge1xuICAgICAgICAgICAgcmVzdWx0ID0gY2xhbXAoKHZhbHVlIC0gYSkgLyAoYiAtIGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IDAuMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBTY2FsYXIuaW52ZXJzZUxlcnAgPSBpbnZlcnNlTGVycDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHNjYWxhciBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIEhlcm1pdGUgc3BsaW5lIGRlZmluZWQgYnkgdGhlIHNjYWxhcnMgXCJ2YWx1ZTFcIiwgXCJ2YWx1ZTNcIiwgXCJ0YW5nZW50MVwiLCBcInRhbmdlbnQyXCIuXG4gICAgICoge0BsaW5rIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vSGVybWl0ZVBvbHlub21pYWwuaHRtbH1cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gc3BsaW5lIHZhbHVlXG4gICAgICogQHBhcmFtIHRhbmdlbnQxIC0gc3BsaW5lIHZhbHVlXG4gICAgICogQHBhcmFtIHZhbHVlMiAtIHNwbGluZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB0YW5nZW50MiAtIHNwbGluZSB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBpbnB1dCB2YWx1ZVxuICAgICAqIEByZXR1cm5zIGhlcm1pdGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVybWl0ZSh2YWx1ZTEsIHRhbmdlbnQxLCB2YWx1ZTIsIHRhbmdlbnQyLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MSA9IDIuMCAqIGN1YmVkIC0gMy4wICogc3F1YXJlZCArIDEuMDtcbiAgICAgICAgY29uc3QgcGFydDIgPSAtMi4wICogY3ViZWQgKyAzLjAgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MyA9IGN1YmVkIC0gMi4wICogc3F1YXJlZCArIGFtb3VudDtcbiAgICAgICAgY29uc3QgcGFydDQgPSBjdWJlZCAtIHNxdWFyZWQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTEgKiBwYXJ0MSArIHZhbHVlMiAqIHBhcnQyICsgdGFuZ2VudDEgKiBwYXJ0MyArIHRhbmdlbnQyICogcGFydDQ7XG4gICAgfVxuICAgIFNjYWxhci5oZXJtaXRlID0gaGVybWl0ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcmFuZG9tIGZsb2F0IG51bWJlciBiZXR3ZWVuIGFuZCBtaW4gYW5kIG1heCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbWluIC0gbWluIHZhbHVlIG9mIHJhbmRvbVxuICAgICAqIEBwYXJhbSBtYXggLSBtYXggdmFsdWUgb2YgcmFuZG9tXG4gICAgICogQHJldHVybnMgcmFuZG9tIHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tUmFuZ2UobWluLCBtYXgpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG4gICAgfVxuICAgIFNjYWxhci5yYW5kb21SYW5nZSA9IHJhbmRvbVJhbmdlO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZXhwb3J0IGZ1bmN0aW9uIHJldHVybnMgcGVyY2VudGFnZSBvZiBhIG51bWJlciBpbiBhIGdpdmVuIHJhbmdlLlxuICAgICAqXG4gICAgICogUmFuZ2VUb1BlcmNlbnQoNDAsMjAsNjApIHdpbGwgcmV0dXJuIDAuNSAoNTAlKVxuICAgICAqIFJhbmdlVG9QZXJjZW50KDM0LDAsMTAwKSB3aWxsIHJldHVybiAwLjM0ICgzNCUpXG4gICAgICogQHBhcmFtIG51bSAtIHRvIGNvbnZlcnQgdG8gcGVyY2VudGFnZVxuICAgICAqIEBwYXJhbSBtaW4gLSBtaW4gcmFuZ2VcbiAgICAgKiBAcGFyYW0gbWF4IC0gbWF4IHJhbmdlXG4gICAgICogQHJldHVybnMgdGhlIHBlcmNlbnRhZ2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5nZVRvUGVyY2VudChudW0sIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiAobnVtIC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgIH1cbiAgICBTY2FsYXIucmFuZ2VUb1BlcmNlbnQgPSByYW5nZVRvUGVyY2VudDtcbiAgICAvKipcbiAgICAgKiBUaGlzIGV4cG9ydCBmdW5jdGlvbiByZXR1cm5zIG51bWJlciB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBwZXJjZW50YWdlIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gICAgICpcbiAgICAgKiBQZXJjZW50VG9SYW5nZSgwLjM0LDAsMTAwKSB3aWxsIHJldHVybiAzNC5cbiAgICAgKiBAcGFyYW0gcGVyY2VudCAtIHRvIGNvbnZlcnQgdG8gbnVtYmVyXG4gICAgICogQHBhcmFtIG1pbiAtIG1pbiByYW5nZVxuICAgICAqIEBwYXJhbSBtYXggLSBtYXggcmFuZ2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbnVtYmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGVyY2VudFRvUmFuZ2UocGVyY2VudCwgbWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIChtYXggLSBtaW4pICogcGVyY2VudCArIG1pbjtcbiAgICB9XG4gICAgU2NhbGFyLnBlcmNlbnRUb1JhbmdlID0gcGVyY2VudFRvUmFuZ2U7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYW5nbGUgY29udmVydGVkIHRvIGVxdWl2YWxlbnQgdmFsdWUgYmV0d2VlbiAtTWF0aC5QSSBhbmQgTWF0aC5QSSByYWRpYW5zLlxuICAgICAqIEBwYXJhbSBhbmdsZSAtIFRoZSBhbmdsZSB0byBub3JtYWxpemUgaW4gcmFkaWFuLlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgYW5nbGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplUmFkaWFucyhhbmdsZSkge1xuICAgICAgICAvLyBNb3JlIHByZWNpc2UgYnV0IHNsb3dlciB2ZXJzaW9uIGtlcHQgZm9yIHJlZmVyZW5jZS5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tY29tbWVudGVkLW91dC1jb2RlXG4gICAgICAgIC8qXG4gICAgICAgIC8vIGFuZ2xlID0gYW5nbGUgJSBUb29scy5Ud29QaTtcbiAgICAgICAgLy8gYW5nbGUgPSAoYW5nbGUgKyBUb29scy5Ud29QaSkgJSBUb29scy5Ud29QaTtcbiAgICBcbiAgICAgICAgLy9pZiAoYW5nbGUgPiBNYXRoLlBJKSB7XG4gICAgICAgIC8vXHRhbmdsZSAtPSBUb29scy5Ud29QaTtcbiAgICAgICAgLy99XG4gICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGFuZ2xlIC0gU2NhbGFyLlR3b1BpICogTWF0aC5mbG9vcigoYW5nbGUgKyBNYXRoLlBJKSAvIFNjYWxhci5Ud29QaSk7XG4gICAgfVxuICAgIFNjYWxhci5ub3JtYWxpemVSYWRpYW5zID0gbm9ybWFsaXplUmFkaWFucztcbn0pKFNjYWxhciB8fCAoU2NhbGFyID0ge30pKTtcbiIsICJpbXBvcnQgeyBFcHNpbG9uIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi9RdWF0ZXJuaW9uJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4vU2NhbGFyJztcbi8qKlxuICogQHB1YmxpY1xuICogVmVjdG9yMyBpcyBhIHR5cGUgYW5kIGEgbmFtZXNwYWNlLlxuICogYGBgXG4gKiAvLyBUaGUgbmFtZXNwYWNlIGNvbnRhaW5zIGFsbCB0eXBlcyBhbmQgZnVuY3Rpb25zIHRvIG9wZXJhdGVzIHdpdGggVmVjdG9yM1xuICogY29uc3QgbmV4dCA9IFZlY3RvcjMuYWRkKHBvaW50QSwgdmVsb2NpdHlBKVxuICogLy8gVGhlIHR5cGUgVmVjdG9yMyBpcyBhbiBhbGlhcyB0byBWZWN0b3IzLlJlYWRvbmx5VmVjdG9yM1xuICogY29uc3QgcmVhZG9ubHlQb3NpdGlvbjogVmVjdG9yMyA9IFZlY3RvcjMuWmVybygpXG4gKiByZWFkb25seVBvc2l0aW9uLnggPSAwLjEgLy8gdGhpcyBGQUlMU1xuICpcbiAqIC8vIEZvciBtdXRhYmxlIHVzYWdlLCB1c2UgYFZlY3RvcjMuTXV0YWJsZWBcbiAqIGNvbnN0IHBvc2l0aW9uOiBWZWN0b3IzLk11dGFibGUgPSBWZWN0b3IzLk9uZSgpXG4gKiBwb3NpdGlvbi54ID0gMy4wIC8vIHRoaXMgV09SS1NcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIFZlY3RvcjM7XG4oZnVuY3Rpb24gKFZlY3RvcjMpIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIHZlY3RvciBpcyBub24gdW5pZm9ybSBtZWFuaW5nIHgsIHkgb3IgeiBhcmUgbm90IGFsbCB0aGUgc2FtZVxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSB2ZWN0b3IgdG8gY2hlY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05vblVuaWZvcm0odmVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGFic1ggPSBNYXRoLmFicyh2ZWN0b3IueCk7XG4gICAgICAgIGNvbnN0IGFic1kgPSBNYXRoLmFicyh2ZWN0b3IueSk7XG4gICAgICAgIGlmIChhYnNYICE9PSBhYnNZKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhYnNaID0gTWF0aC5hYnModmVjdG9yLnopO1xuICAgICAgICBpZiAoYWJzWCAhPT0gYWJzWikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBWZWN0b3IzLmlzTm9uVW5pZm9ybSA9IGlzTm9uVW5pZm9ybTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFZlY3RvcjMgb2JqZWN0IGZyb20gdGhlIGdpdmVuIHgsIHksIHogKGZsb2F0cykgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBmaXJzdCBjb29yZGluYXRlcyAob24gWCBheGlzKVxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgc2Vjb25kIGNvb3JkaW5hdGVzIChvbiBZIGF4aXMpXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB0aGlyZCBjb29yZGluYXRlcyAob24gWiBheGlzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBmaXJzdCBjb29yZGluYXRlcyAob24gWCBheGlzKVxuICAgICAqL1xuICAgIHggPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZXMgKG9uIFkgYXhpcylcbiAgICAgKi9cbiAgICB5ID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdGhpcmQgY29vcmRpbmF0ZXMgKG9uIFogYXhpcylcbiAgICAgKi9cbiAgICB6ID0gMCkge1xuICAgICAgICByZXR1cm4geyB4LCB5LCB6IH07XG4gICAgfVxuICAgIFZlY3RvcjMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSB0aGUgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvcjIgLSB0aGUgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKHZlY3RvcjEsIHZlY3RvcjIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHZlY3RvcjEueCArIHZlY3RvcjIueCxcbiAgICAgICAgICAgIHk6IHZlY3RvcjEueSArIHZlY3RvcjIueSxcbiAgICAgICAgICAgIHo6IHZlY3RvcjEueiArIHZlY3RvcjIuelxuICAgICAgICB9O1xuICAgIH1cbiAgICBWZWN0b3IzLmFkZCA9IGFkZDtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhZGRpdGlvbiBiZXR3ZWVuIHZlY3RvckEgYW5kIHZlY3RvckIgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGludG8gcmVzdWx0XG4gICAgICogQHBhcmFtIHZlY3RvckEgLSB0aGUgZmlyc3QgdmVjdG9yIGZvciB0aGUgYWRkaXRpb24gb3BlcmF0aW9uXG4gICAgICogQHBhcmFtIHZlY3RvckIgLSB0aGUgc2Vjb25kIHZlY3RvciBmb3IgdGhlIGFkZGl0aW9uIG9wZXJhdGlvblxuICAgICAqIEBwYXJhbSByZXN1bHQgLSB0aGUgdmVjdG9yIHdoZXJlIHRoZSByZXN1bHQgb2YgdGhlIGFkZGl0aW9uIGlzIHN0b3JlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFRvUmVmKHZlY3RvckEsIHZlY3RvckIsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHZlY3RvckEueCArIHZlY3RvckIueDtcbiAgICAgICAgcmVzdWx0LnkgPSB2ZWN0b3JBLnkgKyB2ZWN0b3JCLnk7XG4gICAgICAgIHJlc3VsdC56ID0gdmVjdG9yQS56ICsgdmVjdG9yQi56O1xuICAgIH1cbiAgICBWZWN0b3IzLmFkZFRvUmVmID0gYWRkVG9SZWY7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGFzIHRoZSByZXN1bHQgb2YgdGhlIHN1YnN0cmFjdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyB2ZWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB2ZWN0b3IxLnggLSB2ZWN0b3IyLngsXG4gICAgICAgICAgICB5OiB2ZWN0b3IxLnkgLSB2ZWN0b3IyLnksXG4gICAgICAgICAgICB6OiB2ZWN0b3IxLnogLSB2ZWN0b3IyLnpcbiAgICAgICAgfTtcbiAgICB9XG4gICAgVmVjdG9yMy5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHN1YnN0cmFjdGlvbiBiZXR3ZWVuIHZlY3RvckEgYW5kIHZlY3RvckIgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGludG8gcmVzdWx0XG4gICAgICogQHBhcmFtIHZlY3RvckEgLSB0aGUgZmlyc3QgdmVjdG9yIGZvciB0aGUgc3Vic3RyYWN0aW9uIG9wZXJhdGlvblxuICAgICAqIEBwYXJhbSB2ZWN0b3JCIC0gdGhlIHNlY29uZCB2ZWN0b3IgZm9yIHRoZSBzdWJzdHJhY3Rpb24gb3BlcmF0aW9uXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3Igd2hlcmUgdGhlIHJlc3VsdCBvZiB0aGUgc3Vic3RyYWN0aW9uIGlzIHN0b3JlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1YnRyYWN0VG9SZWYodmVjdG9yQSwgdmVjdG9yQiwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdmVjdG9yQS54IC0gdmVjdG9yQi54O1xuICAgICAgICByZXN1bHQueSA9IHZlY3RvckEueSAtIHZlY3RvckIueTtcbiAgICAgICAgcmVzdWx0LnogPSB2ZWN0b3JBLnogLSB2ZWN0b3JCLno7XG4gICAgfVxuICAgIFZlY3RvcjMuc3VidHJhY3RUb1JlZiA9IHN1YnRyYWN0VG9SZWY7XG4gICAgLyoqXG4gICAgICogU3VidHJhY3RzIHRoZSBnaXZlbiBmbG9hdHMgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGFuZCBzZXQgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhpcyByZXN1bHRcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1YnRyYWN0RnJvbUZsb2F0c1RvUmVmKHZlY3RvcjEsIHgsIHksIHosIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHZlY3RvcjEueCAtIHg7XG4gICAgICAgIHJlc3VsdC55ID0gdmVjdG9yMS55IC0geTtcbiAgICAgICAgcmVzdWx0LnogPSB2ZWN0b3IxLnogLSB6O1xuICAgIH1cbiAgICBWZWN0b3IzLnN1YnRyYWN0RnJvbUZsb2F0c1RvUmVmID0gc3VidHJhY3RGcm9tRmxvYXRzVG9SZWY7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHdpdGggdGhlIG90aGVyIHNpZ25cbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0aW5nIHZlY3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4geyB4OiAtdmFsdWUueCwgeTogLXZhbHVlLnksIHo6IC12YWx1ZS56IH07XG4gICAgfVxuICAgIFZlY3RvcjMubmVnYXRlID0gbmVnYXRlO1xuICAgIC8qKlxuICAgICAqIENvcHkgc291cmNlIGludG8gZGVzdFxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUZyb20oc291cmNlLCBkZXN0KSB7XG4gICAgICAgIGRlc3QueCA9IHNvdXJjZS54O1xuICAgICAgICBkZXN0LnkgPSBzb3VyY2UueTtcbiAgICAgICAgZGVzdC56ID0gc291cmNlLno7XG4gICAgfVxuICAgIFZlY3RvcjMuY29weUZyb20gPSBjb3B5RnJvbTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJkZXN0XCIgd2l0aCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2VcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZVxuICAgICAqIEBwYXJhbSBkZXN0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUZyb21GbG9hdHMoeCwgeSwgeiwgZGVzdCkge1xuICAgICAgICBkZXN0LnggPSB4O1xuICAgICAgICBkZXN0LnkgPSB5O1xuICAgICAgICBkZXN0LnogPSB6O1xuICAgIH1cbiAgICBWZWN0b3IzLmNvcHlGcm9tRmxvYXRzID0gY29weUZyb21GbG9hdHM7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHdpdGggdGhlIHNhbWUgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0aW5nIHZlY3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHNvdXJjZS54LCBzb3VyY2UueSwgc291cmNlLnopO1xuICAgIH1cbiAgICBWZWN0b3IzLmNsb25lID0gY2xvbmU7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjbGlwIGZhY3RvciBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAgICogQHBhcmFtIHZlY3RvcjAgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSBheGlzIC0gZGVmaW5lcyB0aGUgYXhpcyB0byB1c2VcbiAgICAgKiBAcGFyYW0gc2l6ZSAtIGRlZmluZXMgdGhlIHNpemUgYWxvbmcgdGhlIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgY2xpcCBmYWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDbGlwRmFjdG9yKHZlY3RvcjAsIHZlY3RvcjEsIGF4aXMsIHNpemUpIHtcbiAgICAgICAgY29uc3QgZDAgPSBkb3QodmVjdG9yMCwgYXhpcykgLSBzaXplO1xuICAgICAgICBjb25zdCBkMSA9IGRvdCh2ZWN0b3IxLCBheGlzKSAtIHNpemU7XG4gICAgICAgIGNvbnN0IHMgPSBkMCAvIChkMCAtIGQxKTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIFZlY3RvcjMuZ2V0Q2xpcEZhY3RvciA9IGdldENsaXBGYWN0b3I7XG4gICAgLyoqXG4gICAgICogR2V0IGFuZ2xlIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gdmVjdG9yMCAtIGFuZ2xlIGJldHdlZW4gdmVjdG9yMCBhbmQgdmVjdG9yMVxuICAgICAqIEBwYXJhbSB2ZWN0b3IxIC0gYW5nbGUgYmV0d2VlbiB2ZWN0b3IwIGFuZCB2ZWN0b3IxXG4gICAgICogQHBhcmFtIG5vcm1hbCAtIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXG4gICAgICogQHJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdmVjdG9yMCBhbmQgdmVjdG9yMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFuZ2xlQmV0d2VlblZlY3RvcnModmVjdG9yMCwgdmVjdG9yMSwgbm9ybWFsKSB7XG4gICAgICAgIGNvbnN0IHYwID0gbm9ybWFsaXplKHZlY3RvcjApO1xuICAgICAgICBjb25zdCB2MSA9IG5vcm1hbGl6ZSh2ZWN0b3IxKTtcbiAgICAgICAgY29uc3QgdjB2MWRvdCA9IGRvdCh2MCwgdjEpO1xuICAgICAgICBjb25zdCBuID0gY3JlYXRlKCk7XG4gICAgICAgIGNyb3NzVG9SZWYodjAsIHYxLCBuKTtcbiAgICAgICAgaWYgKGRvdChuLCBub3JtYWwpID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWNvcyh2MHYxZG90KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLU1hdGguYWNvcyh2MHYxZG90KTtcbiAgICB9XG4gICAgVmVjdG9yMy5nZXRBbmdsZUJldHdlZW5WZWN0b3JzID0gZ2V0QW5nbGVCZXR3ZWVuVmVjdG9ycztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIGFycmF5XG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0sIGFycmF5W29mZnNldCArIDJdKTtcbiAgICB9XG4gICAgVmVjdG9yMy5mcm9tQXJyYXkgPSBmcm9tQXJyYXk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCBmcm9tIHRoZSBpbmRleCBcIm9mZnNldFwiIG9mIHRoZSBnaXZlbiBGbG9hdEFycmF5XG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiAgVXNlIEZyb21BcnJheSBpbnN0ZWFkXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUZsb2F0QXJyYXkoYXJyYXksIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5KGFycmF5LCBvZmZzZXQpO1xuICAgIH1cbiAgICBWZWN0b3IzLmZyb21GbG9hdEFycmF5ID0gZnJvbUZsb2F0QXJyYXk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgZWxlbWVudCB2YWx1ZXMgZnJvbSB0aGUgaW5kZXggXCJvZmZzZXRcIiBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUFycmF5VG9SZWYoYXJyYXksIG9mZnNldCwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtvZmZzZXQgKyAxXTtcbiAgICAgICAgcmVzdWx0LnogPSBhcnJheVtvZmZzZXQgKyAyXTtcbiAgICB9XG4gICAgVmVjdG9yMy5mcm9tQXJyYXlUb1JlZiA9IGZyb21BcnJheVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGVsZW1lbnQgdmFsdWVzIGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIEZsb2F0QXJyYXlcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuICBVc2UgRnJvbUFycmF5VG9SZWYgaW5zdGVhZC5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUZsb2F0QXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCk7XG4gICAgfVxuICAgIFZlY3RvcjMuZnJvbUZsb2F0QXJyYXlUb1JlZiA9IGZyb21GbG9hdEFycmF5VG9SZWY7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgICAqIEByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsZW5ndGgodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodmVjdG9yLnggKiB2ZWN0b3IueCArIHZlY3Rvci55ICogdmVjdG9yLnkgKyB2ZWN0b3IueiAqIHZlY3Rvci56KTtcbiAgICB9XG4gICAgVmVjdG9yMy5sZW5ndGggPSBsZW5ndGg7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlbmd0aFNxdWFyZWQodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB2ZWN0b3IueCAqIHZlY3Rvci54ICsgdmVjdG9yLnkgKiB2ZWN0b3IueSArIHZlY3Rvci56ICogdmVjdG9yLno7XG4gICAgfVxuICAgIFZlY3RvcjMubGVuZ3RoU3F1YXJlZCA9IGxlbmd0aFNxdWFyZWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgbXVsdGlwbGllZCBieSB0aGUgZmxvYXQgXCJzY2FsZVwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2NhbGVUb1JlZih2ZWN0b3IsIHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB2ZWN0b3IueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSA9IHZlY3Rvci55ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC56ID0gdmVjdG9yLnogKiBzY2FsZTtcbiAgICB9XG4gICAgVmVjdG9yMy5zY2FsZVRvUmVmID0gc2NhbGVUb1JlZjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBtdWx0aXBsaWVkIGJ5IHRoZSBmbG9hdCBcInNjYWxlXCJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBtdWx0aXBsaWVyIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZSh2ZWN0b3IsIHNjYWxlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUodmVjdG9yLnggKiBzY2FsZSwgdmVjdG9yLnkgKiBzY2FsZSwgdmVjdG9yLnogKiBzY2FsZSk7XG4gICAgfVxuICAgIFZlY3RvcjMuc2NhbGUgPSBzY2FsZTtcbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBnaXZlbiBpbnB1dCBsZW5ndGguXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGluIHBsYWNlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gbGVuIC0gdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplRnJvbUxlbmd0aCh2ZWN0b3IsIGxlbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIG5vcm1hbGl6ZUZyb21MZW5ndGhUb1JlZih2ZWN0b3IsIGxlbiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgVmVjdG9yMy5ub3JtYWxpemVGcm9tTGVuZ3RoID0gbm9ybWFsaXplRnJvbUxlbmd0aDtcbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBnaXZlbiBpbnB1dCBsZW5ndGguXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGluIHBsYWNlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gbGVuIC0gdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplRnJvbUxlbmd0aFRvUmVmKHZlY3RvciwgbGVuLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEuMCkge1xuICAgICAgICAgICAgY29weUZyb20odmVjdG9yLCByZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlVG9SZWYodmVjdG9yLCAxLjAgLyBsZW4sIHJlc3VsdCk7XG4gICAgfVxuICAgIFZlY3RvcjMubm9ybWFsaXplRnJvbUxlbmd0aFRvUmVmID0gbm9ybWFsaXplRnJvbUxlbmd0aFRvUmVmO1xuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplRnJvbUxlbmd0aCh2ZWN0b3IsIGxlbmd0aCh2ZWN0b3IpKTtcbiAgICB9XG4gICAgVmVjdG9yMy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMuXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGluIHBsYWNlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub3JtYWxpemVUb1JlZih2ZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICBub3JtYWxpemVGcm9tTGVuZ3RoVG9SZWYodmVjdG9yLCBsZW5ndGgodmVjdG9yKSwgcmVzdWx0KTtcbiAgICB9XG4gICAgVmVjdG9yMy5ub3JtYWxpemVUb1JlZiA9IG5vcm1hbGl6ZVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0IChmbG9hdCkgYmV0d2VlbiB0aGUgdmVjdG9ycyBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBsZWZ0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSByaWdodCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGRvdCBwcm9kdWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0Lno7XG4gICAgfVxuICAgIFZlY3RvcjMuZG90ID0gZG90O1xuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3IgKHdpdGggYW4gaW1wbGljaXQgMSBpbiB0aGUgNHRoIGRpbWVuc2lvbikgYW5kIG0sIGFuZCBkaXZpZGVzIGJ5IHBlcnNwZWN0aXZlXG4gICAgICogQHBhcmFtIG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyByZXN1bHQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5TWF0cml4NCh2ZWN0b3IsIG1hdHJpeCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjbG9uZSh2ZWN0b3IpO1xuICAgICAgICBhcHBseU1hdHJpeDRUb1JlZih2ZWN0b3IsIG1hdHJpeCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgVmVjdG9yMy5hcHBseU1hdHJpeDQgPSBhcHBseU1hdHJpeDQ7XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciAod2l0aCBhbiBpbXBsaWNpdCAxIGluIHRoZSA0dGggZGltZW5zaW9uKSBhbmQgbSwgYW5kIGRpdmlkZXMgYnkgcGVyc3BlY3RpdmUgYW5kIHNldCB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGlzIHJlc3VsdFxuICAgICAqIEBwYXJhbSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcHBseU1hdHJpeDRUb1JlZih2ZWN0b3IsIG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdmVjdG9yO1xuICAgICAgICBjb25zdCBtID0gbWF0cml4Ll9tO1xuICAgICAgICBjb25zdCB3ID0gMSAvIChtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0pO1xuICAgICAgICByZXN1bHQueCA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgKiB3O1xuICAgICAgICByZXN1bHQueSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgKiB3O1xuICAgICAgICByZXN1bHQueiA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0pICogdztcbiAgICB9XG4gICAgVmVjdG9yMy5hcHBseU1hdHJpeDRUb1JlZiA9IGFwcGx5TWF0cml4NFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyBiYXNlZCBvbiB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBxIC0gZGVmaW5lcyB0aGUgUXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGUodmVjdG9yLCBxKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICByb3RhdGVUb1JlZih2ZWN0b3IsIHEsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZlY3RvcjMucm90YXRlID0gcm90YXRlO1xuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgY3VycmVudCBWZWN0b3IzIGJhc2VkIG9uIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLCBidXQgYXBwbGllcyB0aGUgcm90YXRpb24gdG8gdGFyZ2V0IFZlY3RvcjMuXG4gICAgICogQHBhcmFtIHEgLSBkZWZpbmVzIHRoZSBRdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0ZVRvUmVmKHZlY3RvciwgcSwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdmVjdG9yO1xuICAgICAgICBjb25zdCB7IHg6IHF4LCB5OiBxeSwgejogcXosIHc6IHF3IH0gPSBxO1xuICAgICAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxuICAgICAgICBjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcbiAgICAgICAgY29uc3QgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG4gICAgICAgIGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICAgICAgICBjb25zdCBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgICAgICAgcmVzdWx0LnggPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xuICAgICAgICByZXN1bHQueSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XG4gICAgICAgIHJlc3VsdC56ID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcbiAgICB9XG4gICAgVmVjdG9yMy5yb3RhdGVUb1JlZiA9IHJvdGF0ZVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gZGVmaW5lcyB0aGUgZW5kIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIG1heCBkZWZpbmVzIGFtb3VudCBiZXR3ZWVuIGJvdGggKGJldHdlZW4gMCBhbmQgMSlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsZXJwKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIGxlcnBUb1JlZihzdGFydCwgZW5kLCBhbW91bnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZlY3RvcjMubGVycCA9IGxlcnA7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBmcm9tIHRoZSB2ZWN0b3IgXCJzdGFydFwiIGZvciBcImFtb3VudFwiIHRvIHRoZSB2ZWN0b3IgXCJlbmRcIlxuICAgICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBtYXggZGVmaW5lcyBhbW91bnQgYmV0d2VlbiBib3RoIChiZXR3ZWVuIDAgYW5kIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlcnBUb1JlZihzdGFydCwgZW5kLCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHN0YXJ0LnggKyAoZW5kLnggLSBzdGFydC54KSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LnkgPSBzdGFydC55ICsgKGVuZC55IC0gc3RhcnQueSkgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC56ID0gc3RhcnQueiArIChlbmQueiAtIHN0YXJ0LnopICogYW1vdW50O1xuICAgIH1cbiAgICBWZWN0b3IzLmxlcnBUb1JlZiA9IGxlcnBUb1JlZjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHZlY3RvcnMgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIFRoZSBjcm9zcyBwcm9kdWN0IGlzIHRoZW4gb3J0aG9nb25hbCB0byBib3RoIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3Jvc3MgcHJvZHVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyb3NzKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFplcm8oKTtcbiAgICAgICAgY3Jvc3NUb1JlZihsZWZ0LCByaWdodCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgVmVjdG9yMy5jcm9zcyA9IGNyb3NzO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNyb3NzIHByb2R1Y3Qgb2YgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIFRoZSBjcm9zcyBwcm9kdWN0IGlzIHRoZW4gb3J0aG9nb25hbCB0byBib3RoIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gY3Jvc3NUb1JlZihsZWZ0LCByaWdodCwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gbGVmdC55ICogcmlnaHQueiAtIGxlZnQueiAqIHJpZ2h0Lnk7XG4gICAgICAgIHJlc3VsdC55ID0gbGVmdC56ICogcmlnaHQueCAtIGxlZnQueCAqIHJpZ2h0Lno7XG4gICAgICAgIHJlc3VsdC56ID0gbGVmdC54ICogcmlnaHQueSAtIGxlZnQueSAqIHJpZ2h0Lng7XG4gICAgfVxuICAgIFZlY3RvcjMuY3Jvc3NUb1JlZiA9IGNyb3NzVG9SZWY7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBUaGlzIG1ldGhvZCBjb21wdXRlcyB0cmFuZm9ybWVkIGNvb3JkaW5hdGVzIG9ubHksIG5vdCB0cmFuc2Zvcm1lZCBkaXJlY3Rpb24gdmVjdG9ycyAoaWUuIGl0IHRha2VzIHRyYW5zbGF0aW9uIGluIGFjY291bnQpXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIHRyYW5zZm9ybWVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1Db29yZGluYXRlcyh2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFplcm8oKTtcbiAgICAgICAgdHJhbnNmb3JtQ29vcmRpbmF0ZXNUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBWZWN0b3IzLnRyYW5zZm9ybUNvb3JkaW5hdGVzID0gdHJhbnNmb3JtQ29vcmRpbmF0ZXM7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgY29vcmRpbmF0ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3JcbiAgICAgKiBUaGlzIG1ldGhvZCBjb21wdXRlcyB0cmFuZm9ybWVkIGNvb3JkaW5hdGVzIG9ubHksIG5vdCB0cmFuc2Zvcm1lZCBkaXJlY3Rpb24gdmVjdG9ycyAoaWUuIGl0IHRha2VzIHRyYW5zbGF0aW9uIGluIGFjY291bnQpXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUNvb3JkaW5hdGVzVG9SZWYodmVjdG9yLCB0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1Db29yZGluYXRlc0Zyb21GbG9hdHNUb1JlZih2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56LCB0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0KTtcbiAgICB9XG4gICAgVmVjdG9yMy50cmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmID0gdHJhbnNmb3JtQ29vcmRpbmF0ZXNUb1JlZjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiBjb29yZGluYXRlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIGZsb2F0cyAoeCwgeSwgeilcbiAgICAgKiBUaGlzIG1ldGhvZCBjb21wdXRlcyB0cmFuZm9ybWVkIGNvb3JkaW5hdGVzIG9ubHksIG5vdCB0cmFuc2Zvcm1lZCBkaXJlY3Rpb24gdmVjdG9yc1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZSB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmUgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1Db29yZGluYXRlc0Zyb21GbG9hdHNUb1JlZih4LCB5LCB6LCB0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm1hdGlvbi5fbTtcbiAgICAgICAgY29uc3QgcnggPSB4ICogbVswXSArIHkgKiBtWzRdICsgeiAqIG1bOF0gKyBtWzEyXTtcbiAgICAgICAgY29uc3QgcnkgPSB4ICogbVsxXSArIHkgKiBtWzVdICsgeiAqIG1bOV0gKyBtWzEzXTtcbiAgICAgICAgY29uc3QgcnogPSB4ICogbVsyXSArIHkgKiBtWzZdICsgeiAqIG1bMTBdICsgbVsxNF07XG4gICAgICAgIGNvbnN0IHJ3ID0gMSAvICh4ICogbVszXSArIHkgKiBtWzddICsgeiAqIG1bMTFdICsgbVsxNV0pO1xuICAgICAgICByZXN1bHQueCA9IHJ4ICogcnc7XG4gICAgICAgIHJlc3VsdC55ID0gcnkgKiBydztcbiAgICAgICAgcmVzdWx0LnogPSByeiAqIHJ3O1xuICAgIH1cbiAgICBWZWN0b3IzLnRyYW5zZm9ybUNvb3JkaW5hdGVzRnJvbUZsb2F0c1RvUmVmID0gdHJhbnNmb3JtQ29vcmRpbmF0ZXNGcm9tRmxvYXRzVG9SZWY7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3JcbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtTm9ybWFsKHZlY3RvciwgdHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gWmVybygpO1xuICAgICAgICB0cmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBWZWN0b3IzLnRyYW5zZm9ybU5vcm1hbCA9IHRyYW5zZm9ybU5vcm1hbDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3JcbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybU5vcm1hbFRvUmVmKHZlY3RvciwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCkge1xuICAgICAgICB0cmFuc2Zvcm1Ob3JtYWxGcm9tRmxvYXRzVG9SZWYodmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIFZlY3RvcjMudHJhbnNmb3JtTm9ybWFsVG9SZWYgPSB0cmFuc2Zvcm1Ob3JtYWxUb1JlZjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiBmbG9hdHMgKHgsIHksIHopXG4gICAgICogVGhpcyBtZXRob2RzIGNvbXB1dGVzIHRyYW5zZm9ybWVkIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHZlY3RvcnMgb25seSAoaWUuIGl0IGRvZXMgbm90IGFwcGx5IHRyYW5zbGF0aW9uKVxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZSB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmUgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1Ob3JtYWxGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtYXRpb24uX207XG4gICAgICAgIHJlc3VsdC54ID0geCAqIG1bMF0gKyB5ICogbVs0XSArIHogKiBtWzhdO1xuICAgICAgICByZXN1bHQueSA9IHggKiBtWzFdICsgeSAqIG1bNV0gKyB6ICogbVs5XTtcbiAgICAgICAgcmVzdWx0LnogPSB4ICogbVsyXSArIHkgKiBtWzZdICsgeiAqIG1bMTBdO1xuICAgIH1cbiAgICBWZWN0b3IzLnRyYW5zZm9ybU5vcm1hbEZyb21GbG9hdHNUb1JlZiA9IHRyYW5zZm9ybU5vcm1hbEZyb21GbG9hdHNUb1JlZjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgbG9jYXRlZCBmb3IgXCJhbW91bnRcIiBvbiB0aGUgQ2F0bXVsbFJvbSBpbnRlcnBvbGF0aW9uIHNwbGluZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIsIFwidmFsdWUyXCIsIFwidmFsdWUzXCIsIFwidmFsdWU0XCJcbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyB0aGUgZmlyc3QgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB2YWx1ZTMgLSBkZWZpbmVzIHRoZSB0aGlyZCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIHZhbHVlNCAtIGRlZmluZXMgdGhlIGZvdXJ0aCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGFtb3VudCBvbiB0aGUgc3BsaW5lIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20odmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgdmFsdWU0LCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueCArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueCArIHZhbHVlMy54KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS54IC0gNS4wICogdmFsdWUyLnggKyA0LjAgKiB2YWx1ZTMueCAtIHZhbHVlNC54KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnggKyAzLjAgKiB2YWx1ZTIueCAtIDMuMCAqIHZhbHVlMy54ICsgdmFsdWU0LngpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB5ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueSArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueSArIHZhbHVlMy55KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS55IC0gNS4wICogdmFsdWUyLnkgKyA0LjAgKiB2YWx1ZTMueSAtIHZhbHVlNC55KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnkgKyAzLjAgKiB2YWx1ZTIueSAtIDMuMCAqIHZhbHVlMy55ICsgdmFsdWU0LnkpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB6ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueiArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueiArIHZhbHVlMy56KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS56IC0gNS4wICogdmFsdWUyLnogKyA0LjAgKiB2YWx1ZTMueiAtIHZhbHVlNC56KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnogKyAzLjAgKiB2YWx1ZTIueiAtIDMuMCAqIHZhbHVlMy56ICsgdmFsdWU0LnopICogY3ViZWQpO1xuICAgICAgICByZXR1cm4gY3JlYXRlKHgsIHksIHopO1xuICAgIH1cbiAgICBWZWN0b3IzLmNhdG11bGxSb20gPSBjYXRtdWxsUm9tO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY29vcmRpbmF0ZXMgb2YgXCJ2YWx1ZVwiLCBpZiB0aGUgdmVjdG9yIFwidmFsdWVcIiBpcyBpbiB0aGUgY3ViZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwibWluXCIgYW5kIFwibWF4XCJcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGxvd2VyIHRoYW4gb25lIG9mIHRoZSBcIm1pblwiIGNvb3JkaW5hdGUsIHRoZW4gdGhpcyBcInZhbHVlXCIgY29vcmRpbmF0ZSBpcyBzZXQgd2l0aCB0aGUgXCJtaW5cIiBvbmVcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBvbmUgb2YgdGhlIFwibWF4XCIgY29vcmRpbmF0ZSwgdGhlbiB0aGlzIFwidmFsdWVcIiBjb29yZGluYXRlIGlzIHNldCB3aXRoIHRoZSBcIm1heFwiIG9uZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWluIC0gZGVmaW5lcyB0aGUgbG93ZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyB0aGUgdXBwZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgY29uc3QgdiA9IGNyZWF0ZSgpO1xuICAgICAgICBjbGFtcFRvUmVmKHZhbHVlLCBtaW4sIG1heCwgdik7XG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBWZWN0b3IzLmNsYW1wID0gY2xhbXA7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgY29vcmRpbmF0ZXMgb2YgXCJ2YWx1ZVwiLCBpZiB0aGUgdmVjdG9yIFwidmFsdWVcIiBpcyBpbiB0aGUgY3ViZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwibWluXCIgYW5kIFwibWF4XCJcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGxvd2VyIHRoYW4gb25lIG9mIHRoZSBcIm1pblwiIGNvb3JkaW5hdGUsIHRoZW4gdGhpcyBcInZhbHVlXCIgY29vcmRpbmF0ZSBpcyBzZXQgd2l0aCB0aGUgXCJtaW5cIiBvbmVcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBvbmUgb2YgdGhlIFwibWF4XCIgY29vcmRpbmF0ZSwgdGhlbiB0aGlzIFwidmFsdWVcIiBjb29yZGluYXRlIGlzIHNldCB3aXRoIHRoZSBcIm1heFwiIG9uZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWluIC0gZGVmaW5lcyB0aGUgbG93ZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyB0aGUgdXBwZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXBUb1JlZih2YWx1ZSwgbWluLCBtYXgsIHJlc3VsdCkge1xuICAgICAgICBsZXQgeCA9IHZhbHVlLng7XG4gICAgICAgIHggPSB4ID4gbWF4LnggPyBtYXgueCA6IHg7XG4gICAgICAgIHggPSB4IDwgbWluLnggPyBtaW4ueCA6IHg7XG4gICAgICAgIGxldCB5ID0gdmFsdWUueTtcbiAgICAgICAgeSA9IHkgPiBtYXgueSA/IG1heC55IDogeTtcbiAgICAgICAgeSA9IHkgPCBtaW4ueSA/IG1pbi55IDogeTtcbiAgICAgICAgbGV0IHogPSB2YWx1ZS56O1xuICAgICAgICB6ID0geiA+IG1heC56ID8gbWF4LnogOiB6O1xuICAgICAgICB6ID0geiA8IG1pbi56ID8gbWluLnogOiB6O1xuICAgICAgICBjb3B5RnJvbUZsb2F0cyh4LCB5LCB6LCByZXN1bHQpO1xuICAgIH1cbiAgICBWZWN0b3IzLmNsYW1wVG9SZWYgPSBjbGFtcFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBzcGxpbmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcInZhbHVlMVwiLCBcInRhbmdlbnQxXCIsIFwidmFsdWUyXCIsIFwidGFuZ2VudDJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIHRhbmdlbnQxIC0gZGVmaW5lcyB0aGUgZmlyc3QgdGFuZ2VudCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgdGFuZ2VudCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgYW1vdW50IG9uIHRoZSBpbnRlcnBvbGF0aW9uIHNwbGluZSAoYmV0d2VlbiAwIGFuZCAxKVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlcm1pdGUodmFsdWUxLCB0YW5nZW50MSwgdmFsdWUyLCB0YW5nZW50MiwgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHNxdWFyZWQgPSBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIGNvbnN0IGN1YmVkID0gYW1vdW50ICogc3F1YXJlZDtcbiAgICAgICAgY29uc3QgcGFydDEgPSAyLjAgKiBjdWJlZCAtIDMuMCAqIHNxdWFyZWQgKyAxLjA7XG4gICAgICAgIGNvbnN0IHBhcnQyID0gLTIuMCAqIGN1YmVkICsgMy4wICogc3F1YXJlZDtcbiAgICAgICAgY29uc3QgcGFydDMgPSBjdWJlZCAtIDIuMCAqIHNxdWFyZWQgKyBhbW91bnQ7XG4gICAgICAgIGNvbnN0IHBhcnQ0ID0gY3ViZWQgLSBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueCAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnggKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi54ICogcGFydDQ7XG4gICAgICAgIGNvbnN0IHkgPSB2YWx1ZTEueSAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi55ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEueSAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLnkgKiBwYXJ0NDtcbiAgICAgICAgY29uc3QgeiA9IHZhbHVlMS56ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnogKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS56ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueiAqIHBhcnQ0O1xuICAgICAgICByZXR1cm4gY3JlYXRlKHgsIHksIHopO1xuICAgIH1cbiAgICBWZWN0b3IzLmhlcm1pdGUgPSBoZXJtaXRlO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pbmltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0d28gVmVjdG9yM1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluaW1pemUobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgY29uc3QgbWluID0gY3JlYXRlKCk7XG4gICAgICAgIG1pbmltaXplSW5QbGFjZUZyb21GbG9hdHNUb1JlZihyaWdodCwgbGVmdC54LCBsZWZ0LnksIGxlZnQueiwgbWluKTtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgVmVjdG9yMy5taW5pbWl6ZSA9IG1pbmltaXplO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heGltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0d28gVmVjdG9yM1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4aW1pemUobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgY29uc3QgbWF4ID0gY3JlYXRlKCk7XG4gICAgICAgIG1heGltaXplSW5QbGFjZUZyb21GbG9hdHNUb1JlZihsZWZ0LCByaWdodC54LCByaWdodC55LCByaWdodC56LCBtYXgpO1xuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICBWZWN0b3IzLm1heGltaXplID0gbWF4aW1pemU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdmVjdG9ycyBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaXN0YW5jZSh2YWx1ZTEsIHZhbHVlMikge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KGRpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikpO1xuICAgIH1cbiAgICBWZWN0b3IzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIgYW5kIFwidmFsdWUyXCJcbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlzdGFuY2VTcXVhcmVkKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IHggPSB2YWx1ZTEueCAtIHZhbHVlMi54O1xuICAgICAgICBjb25zdCB5ID0gdmFsdWUxLnkgLSB2YWx1ZTIueTtcbiAgICAgICAgY29uc3QgeiA9IHZhbHVlMS56IC0gdmFsdWUyLno7XG4gICAgICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgfVxuICAgIFZlY3RvcjMuZGlzdGFuY2VTcXVhcmVkID0gZGlzdGFuY2VTcXVhcmVkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGF0IHRoZSBjZW50ZXIgYmV0d2VlbiBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjZW50ZXIodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gYWRkKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgc2NhbGVUb1JlZihjZW50ZXIsIDAuNSwgY2VudGVyKTtcbiAgICAgICAgcmV0dXJuIGNlbnRlcjtcbiAgICB9XG4gICAgVmVjdG9yMy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgLyoqXG4gICAgICogR2l2ZW4gdGhyZWUgb3J0aG9nb25hbCBub3JtYWxpemVkIGxlZnQtaGFuZGVkIG9yaWVudGVkIFZlY3RvcjMgYXhpcyBpbiBzcGFjZSAodGFyZ2V0IHN5c3RlbSksXG4gICAgICogUm90YXRpb25Gcm9tQXhpcygpIHJldHVybnMgdGhlIHJvdGF0aW9uIEV1bGVyIGFuZ2xlcyAoZXggOiByb3RhdGlvbi54LCByb3RhdGlvbi55LCByb3RhdGlvbi56KSB0byBhcHBseVxuICAgICAqIHRvIHNvbWV0aGluZyBpbiBvcmRlciB0byByb3RhdGUgaXQgZnJvbSBpdHMgbG9jYWwgc3lzdGVtIHRvIHRoZSBnaXZlbiB0YXJnZXQgc3lzdGVtXG4gICAgICogTm90ZTogYXhpczEsIGF4aXMyIGFuZCBheGlzMyBhcmUgbm9ybWFsaXplZCBkdXJpbmcgdGhpcyBvcGVyYXRpb25cbiAgICAgKiBAcGFyYW0gYXhpczEgLSBkZWZpbmVzIHRoZSBmaXJzdCBheGlzXG4gICAgICogQHBhcmFtIGF4aXMyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczMgLSBkZWZpbmVzIHRoZSB0aGlyZCBheGlzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uRnJvbUF4aXMoYXhpczEsIGF4aXMyLCBheGlzMykge1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IFplcm8oKTtcbiAgICAgICAgcm90YXRpb25Gcm9tQXhpc1RvUmVmKGF4aXMxLCBheGlzMiwgYXhpczMsIHJvdGF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJvdGF0aW9uO1xuICAgIH1cbiAgICBWZWN0b3IzLnJvdGF0aW9uRnJvbUF4aXMgPSByb3RhdGlvbkZyb21BeGlzO1xuICAgIC8qKlxuICAgICAqIFRoZSBzYW1lIHRoYW4gUm90YXRpb25Gcm9tQXhpcyBidXQgdXBkYXRlcyB0aGUgZ2l2ZW4gcmVmIFZlY3RvcjMgcGFyYW1ldGVyIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgbmV3IFZlY3RvcjNcbiAgICAgKiBAcGFyYW0gYXhpczEgLSBkZWZpbmVzIHRoZSBmaXJzdCBheGlzXG4gICAgICogQHBhcmFtIGF4aXMyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczMgLSBkZWZpbmVzIHRoZSB0aGlyZCBheGlzXG4gICAgICogQHBhcmFtIHJlZiAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgcXVhdCA9IFF1YXRlcm5pb24uY3JlYXRlKCk7XG4gICAgICAgIFF1YXRlcm5pb24uZnJvbUF4aXNUb1JvdGF0aW9uUXVhdGVybmlvblRvUmVmKGF4aXMxLCBheGlzMiwgYXhpczMsIHF1YXQpO1xuICAgICAgICBjb3B5RnJvbShRdWF0ZXJuaW9uLnRvRXVsZXJBbmdsZXMocXVhdCksIHJlc3VsdCk7XG4gICAgfVxuICAgIFZlY3RvcjMucm90YXRpb25Gcm9tQXhpc1RvUmVmID0gcm90YXRpb25Gcm9tQXhpc1RvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBhIHN0cmluZyB3aXRoIHRoZSBWZWN0b3IzIGNvb3JkaW5hdGVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gYCgke3ZlY3Rvci54fSwgJHt2ZWN0b3IueX0sICR7dmVjdG9yLnp9KWA7XG4gICAgfVxuICAgIFZlY3RvcjMudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBWZWN0b3IzIGhhc2ggY29kZVxuICAgICAqIEByZXR1cm5zIGEgbnVtYmVyIHdoaWNoIHRlbmRzIHRvIGJlIHVuaXF1ZSBiZXR3ZWVuIFZlY3RvcjMgaW5zdGFuY2VzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SGFzaENvZGUodmVjdG9yKSB7XG4gICAgICAgIGxldCBoYXNoID0gdmVjdG9yLnggfHwgMDtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh2ZWN0b3IueSB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh2ZWN0b3IueiB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIFZlY3RvcjMuZ2V0SGFzaENvZGUgPSBnZXRIYXNoQ29kZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZlY3RvcjEgYW5kIHRoZSB2ZWN0b3IyIGNvb3JkaW5hdGVzIGFyZSBzdHJpY3RseSBlcXVhbFxuICAgICAqIEBwYXJhbSB2ZWN0b3IxIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGJvdGggdmVjdG9ycyBhcmUgZXF1YWxzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxzKHZlY3RvcjEsIHZlY3RvcjIpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3IxLnggPT09IHZlY3RvcjIueCAmJlxuICAgICAgICAgICAgdmVjdG9yMS55ID09PSB2ZWN0b3IyLnkgJiZcbiAgICAgICAgICAgIHZlY3RvcjEueiA9PT0gdmVjdG9yMi56KTtcbiAgICB9XG4gICAgVmVjdG9yMy5lcXVhbHMgPSBlcXVhbHM7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IFZlY3RvcjMgYW5kIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgYXJlIGRpc3RhbnQgbGVzcyB0aGFuIGVwc2lsb25cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gZGVmaW5lcyB0aGUgbWluaW1hbCBkaXN0YW5jZSB0byBkZWZpbmUgdmFsdWVzIGFzIGVxdWFsc1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgYm90aCB2ZWN0b3JzIGFyZSBkaXN0YW50IGxlc3MgdGhhbiBlcHNpbG9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxzV2l0aEVwc2lsb24odmVjdG9yMSwgdmVjdG9yMiwgZXBzaWxvbiA9IEVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChTY2FsYXIud2l0aGluRXBzaWxvbih2ZWN0b3IxLngsIHZlY3RvcjIueCwgZXBzaWxvbikgJiZcbiAgICAgICAgICAgIFNjYWxhci53aXRoaW5FcHNpbG9uKHZlY3RvcjEueSwgdmVjdG9yMi55LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyLndpdGhpbkVwc2lsb24odmVjdG9yMS56LCB2ZWN0b3IyLnosIGVwc2lsb24pKTtcbiAgICB9XG4gICAgVmVjdG9yMy5lcXVhbHNXaXRoRXBzaWxvbiA9IGVxdWFsc1dpdGhFcHNpbG9uO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGVxdWFscyB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBib3RoIHZlY3RvcnMgYXJlIGVxdWFsc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsc1RvRmxvYXRzKHZlY3RvciwgeCwgeSwgeikge1xuICAgICAgICByZXR1cm4gdmVjdG9yLnggPT09IHggJiYgdmVjdG9yLnkgPT09IHkgJiYgdmVjdG9yLnogPT09IHo7XG4gICAgfVxuICAgIFZlY3RvcjMuZXF1YWxzVG9GbG9hdHMgPSBlcXVhbHNUb0Zsb2F0cztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMsIHJlc3VsdCBvZiB0aGUgbXVsdGlwbGljYXRpb24gb2YgdmVjdG9yMSBieSB0aGUgdmVjdG9yMlxuICAgICAqIEBwYXJhbSB2ZWN0b3IxIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseSh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBtdWx0aXBseVRvUmVmKHZlY3RvcjEsIHZlY3RvcjIsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZlY3RvcjMubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IFZlY3RvcjMgYnkgdGhlIGdpdmVuIG9uZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseVRvUmVmKHZlY3RvcjEsIHZlY3RvcjIsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHZlY3RvcjEueCAqIHZlY3RvcjIueDtcbiAgICAgICAgcmVzdWx0LnkgPSB2ZWN0b3IxLnkgKiB2ZWN0b3IyLnk7XG4gICAgICAgIHJlc3VsdC56ID0gdmVjdG9yMS56ICogdmVjdG9yMi56O1xuICAgIH1cbiAgICBWZWN0b3IzLm11bHRpcGx5VG9SZWYgPSBtdWx0aXBseVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBtdWxsaXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseUJ5RmxvYXRzVG9SZWYodmVjdG9yMSwgeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdmVjdG9yMS54ICogeDtcbiAgICAgICAgcmVzdWx0LnkgPSB2ZWN0b3IxLnkgKiB5O1xuICAgICAgICByZXN1bHQueiA9IHZlY3RvcjEueiAqIHo7XG4gICAgfVxuICAgIFZlY3RvcjMubXVsdGlwbHlCeUZsb2F0c1RvUmVmID0gbXVsdGlwbHlCeUZsb2F0c1RvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBtdWxsaXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseUJ5RmxvYXRzKHZlY3RvcjEsIHgsIHksIHopIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIG11bHRpcGx5QnlGbG9hdHNUb1JlZih2ZWN0b3IxLCB4LCB5LCB6LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBWZWN0b3IzLm11bHRpcGx5QnlGbG9hdHMgPSBtdWx0aXBseUJ5RmxvYXRzO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBkaXZpc2lvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaXZpZGUodmVjdG9yMSwgdmVjdG9yMikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogdmVjdG9yMS54IC8gdmVjdG9yMi54LFxuICAgICAgICAgICAgeTogdmVjdG9yMS55IC8gdmVjdG9yMi55LFxuICAgICAgICAgICAgejogdmVjdG9yMS56IC8gdmVjdG9yMi56XG4gICAgICAgIH07XG4gICAgfVxuICAgIFZlY3RvcjMuZGl2aWRlID0gZGl2aWRlO1xuICAgIC8qKlxuICAgICAqIERpdmlkZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gb25lcyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaXZpZGVUb1JlZih2ZWN0b3IxLCB2ZWN0b3IyLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB2ZWN0b3IxLnggLyB2ZWN0b3IyLng7XG4gICAgICAgIHJlc3VsdC55ID0gdmVjdG9yMS55IC8gdmVjdG9yMi55O1xuICAgICAgICByZXN1bHQueiA9IHZlY3RvcjEueiAvIHZlY3RvcjIuejtcbiAgICB9XG4gICAgVmVjdG9yMy5kaXZpZGVUb1JlZiA9IGRpdmlkZVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFNldCByZXN1bHQgVmVjdG9yMyB3aXRoIHRoZSBtYXhpbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdmVjdG9yMSBhbmQgdGhlIGdpdmVuIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSBzZXQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heGltaXplSW5QbGFjZUZyb21GbG9hdHNUb1JlZih2ZWN0b3IxLCB4LCB5LCB6LCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHggPiB2ZWN0b3IxLngpIHtcbiAgICAgICAgICAgIHJlc3VsdC54ID0geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC54ID0gdmVjdG9yMS54O1xuICAgICAgICB9XG4gICAgICAgIGlmICh5ID4gdmVjdG9yMS55KSB7XG4gICAgICAgICAgICByZXN1bHQueSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQueSA9IHZlY3RvcjEueTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeiA+IHZlY3RvcjEueikge1xuICAgICAgICAgICAgcmVzdWx0LnogPSB6O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnogPSB2ZWN0b3IxLno7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmVjdG9yMy5tYXhpbWl6ZUluUGxhY2VGcm9tRmxvYXRzVG9SZWYgPSBtYXhpbWl6ZUluUGxhY2VGcm9tRmxvYXRzVG9SZWY7XG4gICAgLyoqXG4gICAgICogU2V0IHJlc3VsdCBWZWN0b3IzIHdpdGggdGhlIG1pbmltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB2ZWN0b3IxIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gdGhlIHNldCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluaW1pemVJblBsYWNlRnJvbUZsb2F0c1RvUmVmKHZlY3RvcjEsIHgsIHksIHosIHJlc3VsdCkge1xuICAgICAgICBpZiAoeCA8IHZlY3RvcjEueCkge1xuICAgICAgICAgICAgcmVzdWx0LnggPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnggPSB2ZWN0b3IxLng7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPCB2ZWN0b3IxLnkpIHtcbiAgICAgICAgICAgIHJlc3VsdC55ID0geTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC55ID0gdmVjdG9yMS55O1xuICAgICAgICB9XG4gICAgICAgIGlmICh6IDwgdmVjdG9yMS56KSB7XG4gICAgICAgICAgICByZXN1bHQueiA9IHo7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQueiA9IHZlY3RvcjEuejtcbiAgICAgICAgfVxuICAgIH1cbiAgICBWZWN0b3IzLm1pbmltaXplSW5QbGFjZUZyb21GbG9hdHNUb1JlZiA9IG1pbmltaXplSW5QbGFjZUZyb21GbG9hdHNUb1JlZjtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjMgZnJvbSB2ZWN0b3IxIGZsb29yZWQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsb29yKHZlY3RvcjEpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZShNYXRoLmZsb29yKHZlY3RvcjEueCksIE1hdGguZmxvb3IodmVjdG9yMS55KSwgTWF0aC5mbG9vcih2ZWN0b3IxLnopKTtcbiAgICB9XG4gICAgVmVjdG9yMy5mbG9vciA9IGZsb29yO1xuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMyBmcm9tIHZlY3RvcjEgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJhY3QodmVjdG9yMSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHZlY3RvcjEueCAtIE1hdGguZmxvb3IodmVjdG9yMS54KSwgdmVjdG9yMS55IC0gTWF0aC5mbG9vcih2ZWN0b3IxLnkpLCB2ZWN0b3IxLnogLSBNYXRoLmZsb29yKHZlY3RvcjEueikpO1xuICAgIH1cbiAgICBWZWN0b3IzLmZyYWN0ID0gZnJhY3Q7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBlbXB0eSBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gWmVybygpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgVmVjdG9yMy5aZXJvID0gWmVybztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgxLjAsIDEuMCwgMS4wKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IHVuaXQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIE9uZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgxLjAsIDEuMCwgMS4wKTtcbiAgICB9XG4gICAgVmVjdG9yMy5PbmUgPSBPbmU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0b2xlbmd0aFNxdWFyZWQgKDAuMCwgMS4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgdXAgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFVwKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAuMCwgMS4wLCAwLjApO1xuICAgIH1cbiAgICBWZWN0b3IzLlVwID0gVXA7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAtMS4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgZG93biBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gRG93bigpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIC0xLjAsIDAuMCk7XG4gICAgfVxuICAgIFZlY3RvcjMuRG93biA9IERvd247XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBGb3J3YXJkKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAuMCwgMC4wLCAxLjApO1xuICAgIH1cbiAgICBWZWN0b3IzLkZvcndhcmQgPSBGb3J3YXJkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMC4wLCAtMS4wKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IGZvcndhcmQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJhY2t3YXJkKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAuMCwgMC4wLCAtMS4wKTtcbiAgICB9XG4gICAgVmVjdG9yMy5CYWNrd2FyZCA9IEJhY2t3YXJkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDEuMCwgMC4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgcmlnaHQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFJpZ2h0KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDEuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICBWZWN0b3IzLlJpZ2h0ID0gUmlnaHQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoLTEuMCwgMC4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgbGVmdCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgtMS4wLCAwLjAsIDAuMCk7XG4gICAgfVxuICAgIFZlY3RvcjMuTGVmdCA9IExlZnQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyByYW5kb20gVmVjdG9yM1xuICAgICAqIEByZXR1cm5zIGEgcmFuZG9tIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSYW5kb20oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoTWF0aC5yYW5kb20oKSwgTWF0aC5yYW5kb20oKSwgTWF0aC5yYW5kb20oKSk7XG4gICAgfVxuICAgIFZlY3RvcjMuUmFuZG9tID0gUmFuZG9tO1xufSkoVmVjdG9yMyB8fCAoVmVjdG9yMyA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuL01hdHJpeCc7XG4vKipcbiAqIFJlcHJlc2VucyBhIHBsYW5lIGJ5IHRoZSBlcXVhdGlvbiBheCArIGJ5ICsgY3ogKyBkID0gMFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFBsYW5lO1xuKGZ1bmN0aW9uIChQbGFuZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQbGFuZSBvYmplY3QgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBmbG9hdHMgYSwgYiwgYywgZCBhbmQgdGhlIHBsYW5lIGVxdWF0aW9uIDogYXggKyBieSArIGN6ICsgZCA9IDBcbiAgICAgKiBAcGFyYW0gYSAtIGEgY29tcG9uZW50IG9mIHRoZSBwbGFuZVxuICAgICAqIEBwYXJhbSBiIC0gYiBjb21wb25lbnQgb2YgdGhlIHBsYW5lXG4gICAgICogQHBhcmFtIGMgLSBjIGNvbXBvbmVudCBvZiB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gZCAtIGQgY29tcG9uZW50IG9mIHRoZSBwbGFuZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShhLCBiLCBjLCBkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub3JtYWw6IFZlY3RvcjMuY3JlYXRlKGEsIGIsIGMpLFxuICAgICAgICAgICAgZDogZFxuICAgICAgICB9O1xuICAgIH1cbiAgICBQbGFuZS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLy8gU3RhdGljc1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFuZSBmcm9tIGFuICBhcnJheVxuICAgICAqIEBwYXJhbSBhcnJheSAtIHRoZSBhcnJheSB0byBjcmVhdGUgYSBwbGFuZSBmcm9tXG4gICAgICogQHJldHVybnMgYSBuZXcgUGxhbmUgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUFycmF5KGFycmF5KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoYXJyYXlbMF0sIGFycmF5WzFdLCBhcnJheVsyXSwgYXJyYXlbM10pO1xuICAgIH1cbiAgICBQbGFuZS5mcm9tQXJyYXkgPSBmcm9tQXJyYXk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBsYW5lIGZyb20gdGhyZWUgcG9pbnRzXG4gICAgICogQHBhcmFtIHBvaW50MSAtIHBvaW50IHVzZWQgdG8gY3JlYXRlIHRoZSBwbGFuZVxuICAgICAqIEBwYXJhbSBwb2ludDIgLSBwb2ludCB1c2VkIHRvIGNyZWF0ZSB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQzIC0gcG9pbnQgdXNlZCB0byBjcmVhdGUgdGhlIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgUGxhbmUgZGVmaW5lZCBieSB0aGUgdGhyZWUgZ2l2ZW4gcG9pbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21Qb2ludHMoX3BvaW50MSwgX3BvaW50MiwgX3BvaW50Mykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyByZXN1bHQuY29weUZyb21Qb2ludHMocG9pbnQxLCBwb2ludDIsIHBvaW50MylcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgUGxhbmUuZnJvbVBvaW50cyA9IGZyb21Qb2ludHM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBsYW5lIGZyb20gYW4gb3JpZ2luIHBvaW50IGFuZCBhIG5vcm1hbFxuICAgICAqIEBwYXJhbSBvcmlnaW4gLSBvcmlnaW4gb2YgdGhlIHBsYW5lIHRvIGJlIGNvbnN0cnVjdGVkXG4gICAgICogQHBhcmFtIG5vcm1hbCAtIG5vcm1hbCBvZiB0aGUgcGxhbmUgdG8gYmUgY29uc3RydWN0ZWRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBQbGFuZSB0aGUgbm9ybWFsIHZlY3RvciB0byB0aGlzIHBsYW5lIGF0IHRoZSBnaXZlbiBvcmlnaW4gcG9pbnQuXG4gICAgICogTm90ZSA6IHRoZSB2ZWN0b3IgXCJub3JtYWxcIiBpcyB1cGRhdGVkIGJlY2F1c2Ugbm9ybWFsaXplZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb21Qb3NpdGlvbkFuZE5vcm1hbChvcmlnaW4sIG5vcm1hbCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgcmVzdWx0Lm5vcm1hbCA9IFZlY3RvcjMubm9ybWFsaXplKG5vcm1hbCk7XG4gICAgICAgIHJlc3VsdC5kID0gLShub3JtYWwueCAqIG9yaWdpbi54ICtcbiAgICAgICAgICAgIG5vcm1hbC55ICogb3JpZ2luLnkgK1xuICAgICAgICAgICAgbm9ybWFsLnogKiBvcmlnaW4ueik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFBsYW5lLnJvbVBvc2l0aW9uQW5kTm9ybWFsID0gcm9tUG9zaXRpb25BbmROb3JtYWw7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2UgZnJvbSBhIHBsYW5lIGFuZCBhIHBvaW50XG4gICAgICogQHBhcmFtIG9yaWdpbiAtIG9yaWdpbiBvZiB0aGUgcGxhbmUgdG8gYmUgY29uc3RydWN0ZWRcbiAgICAgKiBAcGFyYW0gbm9ybWFsIC0gbm9ybWFsIG9mIHRoZSBwbGFuZSB0byBiZSBjb25zdHJ1Y3RlZFxuICAgICAqIEBwYXJhbSBwb2ludCAtIHBvaW50IHRvIGNhbGN1bGF0ZSBkaXN0YW5jZSB0b1xuICAgICAqIEByZXR1cm5zIHRoZSBzaWduZWQgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcGxhbmUgZGVmaW5lZCBieSB0aGUgbm9ybWFsIHZlY3RvciBhdCB0aGUgXCJvcmlnaW5cIlwiIHBvaW50IGFuZCB0aGUgZ2l2ZW4gb3RoZXIgcG9pbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2lnbmVkRGlzdGFuY2VUb1BsYW5lRnJvbVBvc2l0aW9uQW5kTm9ybWFsKG9yaWdpbiwgbm9ybWFsLCBwb2ludCkge1xuICAgICAgICBjb25zdCBkID0gLShub3JtYWwueCAqIG9yaWdpbi54ICsgbm9ybWFsLnkgKiBvcmlnaW4ueSArIG5vcm1hbC56ICogb3JpZ2luLnopO1xuICAgICAgICByZXR1cm4gVmVjdG9yMy5kb3QocG9pbnQsIG5vcm1hbCkgKyBkO1xuICAgIH1cbiAgICBQbGFuZS5zaWduZWREaXN0YW5jZVRvUGxhbmVGcm9tUG9zaXRpb25BbmROb3JtYWwgPSBzaWduZWREaXN0YW5jZVRvUGxhbmVGcm9tUG9zaXRpb25BbmROb3JtYWw7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIHBsYW5lIGNvb3JkaW5hdGVzIGFzIGEgbmV3IGFycmF5IG9mIDQgZWxlbWVudHMgW2EsIGIsIGMsIGRdLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzQXJyYXkocGxhbmUpIHtcbiAgICAgICAgcmV0dXJuIFtwbGFuZS5ub3JtYWwueCwgcGxhbmUubm9ybWFsLnksIHBsYW5lLm5vcm1hbC56LCBwbGFuZS5kXTtcbiAgICB9XG4gICAgUGxhbmUuYXNBcnJheSA9IGFzQXJyYXk7XG4gICAgLy8gTWV0aG9kc1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGEgbmV3IHBsYW5lIGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IFBsYW5lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHBsYW5lKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUocGxhbmUubm9ybWFsLngsIHBsYW5lLm5vcm1hbC55LCBwbGFuZS5ub3JtYWwueiwgcGxhbmUuZCk7XG4gICAgfVxuICAgIFBsYW5lLmNsb25lID0gY2xvbmU7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIFBsYW5lIGhhc2ggY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIYXNoQ29kZShfcGxhbmUpIHtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyBsZXQgaGFzaCA9IHBsYW5lLm5vcm1hbC5nZXRIYXNoQ29kZSgpXG4gICAgICAgIC8vIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAocGxhbmUuZCB8fCAwKVxuICAgICAgICAvLyByZXR1cm4gaGFzaFxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgUGxhbmUuZ2V0SGFzaENvZGUgPSBnZXRIYXNoQ29kZTtcbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgUGxhbmUgaW4gcGxhY2UuXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgUGxhbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHBsYW5lKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgwLCAwLCAwLCAwKTtcbiAgICAgICAgY29uc3Qgbm9ybSA9IE1hdGguc3FydChwbGFuZS5ub3JtYWwueCAqIHBsYW5lLm5vcm1hbC54ICtcbiAgICAgICAgICAgIHBsYW5lLm5vcm1hbC55ICogcGxhbmUubm9ybWFsLnkgK1xuICAgICAgICAgICAgcGxhbmUubm9ybWFsLnogKiBwbGFuZS5ub3JtYWwueik7XG4gICAgICAgIGxldCBtYWduaXR1ZGUgPSAwLjA7XG4gICAgICAgIGlmIChub3JtICE9PSAwKSB7XG4gICAgICAgICAgICBtYWduaXR1ZGUgPSAxLjAgLyBub3JtO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5ub3JtYWwueCA9IHBsYW5lLm5vcm1hbC54ICogbWFnbml0dWRlO1xuICAgICAgICByZXN1bHQubm9ybWFsLnkgPSBwbGFuZS5ub3JtYWwueSAqIG1hZ25pdHVkZTtcbiAgICAgICAgcmVzdWx0Lm5vcm1hbC56ID0gcGxhbmUubm9ybWFsLnogKiBtYWduaXR1ZGU7XG4gICAgICAgIHJlc3VsdC5kICo9IG1hZ25pdHVkZTtcbiAgICAgICAgcmV0dXJuIHBsYW5lO1xuICAgIH1cbiAgICBQbGFuZS5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhIHRyYW5zZm9ybWF0aW9uIHRoZSBwbGFuZSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0XG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFBsYW5lIGFzIHRoZSByZXN1bHQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIG9mIHRoZSBjdXJyZW50IFBsYW5lIGJ5IHRoZSBnaXZlbiBtYXRyaXguXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKHBsYW5lLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCB0cmFuc3Bvc2VkTWF0cml4ID0gTWF0cml4LmNyZWF0ZSgpO1xuICAgICAgICBNYXRyaXgudHJhbnNwb3NlVG9SZWYodHJhbnNmb3JtYXRpb24sIHRyYW5zcG9zZWRNYXRyaXgpO1xuICAgICAgICBjb25zdCBtID0gdHJhbnNwb3NlZE1hdHJpeC5fbTtcbiAgICAgICAgY29uc3QgeCA9IHBsYW5lLm5vcm1hbC54O1xuICAgICAgICBjb25zdCB5ID0gcGxhbmUubm9ybWFsLnk7XG4gICAgICAgIGNvbnN0IHogPSBwbGFuZS5ub3JtYWwuejtcbiAgICAgICAgY29uc3QgZCA9IHBsYW5lLmQ7XG4gICAgICAgIGNvbnN0IG5vcm1hbFggPSB4ICogbVswXSArIHkgKiBtWzFdICsgeiAqIG1bMl0gKyBkICogbVszXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsWSA9IHggKiBtWzRdICsgeSAqIG1bNV0gKyB6ICogbVs2XSArIGQgKiBtWzddO1xuICAgICAgICBjb25zdCBub3JtYWxaID0geCAqIG1bOF0gKyB5ICogbVs5XSArIHogKiBtWzEwXSArIGQgKiBtWzExXTtcbiAgICAgICAgY29uc3QgZmluYWxEID0geCAqIG1bMTJdICsgeSAqIG1bMTNdICsgeiAqIG1bMTRdICsgZCAqIG1bMTVdO1xuICAgICAgICByZXR1cm4gY3JlYXRlKG5vcm1hbFgsIG5vcm1hbFksIG5vcm1hbFosIGZpbmFsRCk7XG4gICAgfVxuICAgIFBsYW5lLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAvKipcbiAgICAgKiBDYWxjdWFsdHRlIHRoZSBkb3QgcHJvZHVjdCBiZXR3ZWVuIHRoZSBwb2ludCBhbmQgdGhlIHBsYW5lIG5vcm1hbFxuICAgICAqIEBwYXJhbSBwb2ludCAtIHBvaW50IHRvIGNhbGN1bGF0ZSB0aGUgZG90IHByb2R1Y3Qgd2l0aFxuICAgICAqIEByZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCAoZmxvYXQpIG9mIHRoZSBwb2ludCBjb29yZGluYXRlcyBhbmQgdGhlIHBsYW5lIG5vcm1hbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb3RDb29yZGluYXRlKHBsYW5lLCBwb2ludCkge1xuICAgICAgICByZXR1cm4gKHBsYW5lLm5vcm1hbC54ICogcG9pbnQueCArXG4gICAgICAgICAgICBwbGFuZS5ub3JtYWwueSAqIHBvaW50LnkgK1xuICAgICAgICAgICAgcGxhbmUubm9ybWFsLnogKiBwb2ludC56ICtcbiAgICAgICAgICAgIHBsYW5lLmQpO1xuICAgIH1cbiAgICBQbGFuZS5kb3RDb29yZGluYXRlID0gZG90Q29vcmRpbmF0ZTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFBsYW5lIGZyb20gdGhlIHBsYW5lIGRlZmluZWQgYnkgdGhlIHRocmVlIGdpdmVuIHBvaW50cy5cbiAgICAgKiBAcGFyYW0gcG9pbnQxIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQyIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQzIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBQbGFuZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5RnJvbVBvaW50cyhwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgICAgIGNvbnN0IHgxID0gcG9pbnQyLnggLSBwb2ludDEueDtcbiAgICAgICAgY29uc3QgeTEgPSBwb2ludDIueSAtIHBvaW50MS55O1xuICAgICAgICBjb25zdCB6MSA9IHBvaW50Mi56IC0gcG9pbnQxLno7XG4gICAgICAgIGNvbnN0IHgyID0gcG9pbnQzLnggLSBwb2ludDEueDtcbiAgICAgICAgY29uc3QgeTIgPSBwb2ludDMueSAtIHBvaW50MS55O1xuICAgICAgICBjb25zdCB6MiA9IHBvaW50My56IC0gcG9pbnQxLno7XG4gICAgICAgIGNvbnN0IHl6ID0geTEgKiB6MiAtIHoxICogeTI7XG4gICAgICAgIGNvbnN0IHh6ID0gejEgKiB4MiAtIHgxICogejI7XG4gICAgICAgIGNvbnN0IHh5ID0geDEgKiB5MiAtIHkxICogeDI7XG4gICAgICAgIGNvbnN0IHB5dGggPSBNYXRoLnNxcnQoeXogKiB5eiArIHh6ICogeHogKyB4eSAqIHh5KTtcbiAgICAgICAgbGV0IGludlB5dGg7XG4gICAgICAgIGlmIChweXRoICE9PSAwKSB7XG4gICAgICAgICAgICBpbnZQeXRoID0gMS4wIC8gcHl0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludlB5dGggPSAwLjA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9ybWFsID0gVmVjdG9yMy5jcmVhdGUoeXogKiBpbnZQeXRoLCB4eiAqIGludlB5dGgsIHh5ICogaW52UHl0aCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub3JtYWwsXG4gICAgICAgICAgICBkOiAtKG5vcm1hbC54ICogcG9pbnQxLnggKyBub3JtYWwueSAqIHBvaW50MS55ICsgbm9ybWFsLnogKiBwb2ludDEueilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgUGxhbmUuY29weUZyb21Qb2ludHMgPSBjb3B5RnJvbVBvaW50cztcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHBsYW5lIGlzIGZhY2luZyBhIGdpdmVuIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gLSB0aGUgZGlyZWN0aW9uIHRvIGNoZWNrIGlmIHRoZSBwbGFuZSBpcyBmYWNpbmdcbiAgICAgKiBAcGFyYW0gZXBzaWxvbiAtIHZhbHVlIHRoZSBkb3QgcHJvZHVjdCBpcyBjb21wYXJlZCBhZ2FpbnN0IChyZXR1cm5zIHRydWUgaWYgZG90ICZsdDs9IGVwc2lsb24pXG4gICAgICogQHJldHVybnMgVHJ1ZSBpcyB0aGUgdmVjdG9yIFwiZGlyZWN0aW9uXCIgIGlzIHRoZSBzYW1lIHNpZGUgdGhhbiB0aGUgcGxhbmUgbm9ybWFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnJvbnRGYWNpbmdUbyhwbGFuZSwgZGlyZWN0aW9uLCBlcHNpbG9uKSB7XG4gICAgICAgIGNvbnN0IGRvdCA9IFZlY3RvcjMuZG90KHBsYW5lLm5vcm1hbCwgZGlyZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGRvdCA8PSBlcHNpbG9uO1xuICAgIH1cbiAgICBQbGFuZS5pc0Zyb250RmFjaW5nVG8gPSBpc0Zyb250RmFjaW5nVG87XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2UgdG8gYSBwb2ludFxuICAgICAqIEBwYXJhbSBwb2ludCAtIHBvaW50IHRvIGNhbGN1bGF0ZSBkaXN0YW5jZSB0b1xuICAgICAqIEByZXR1cm5zIHRoZSBzaWduZWQgZGlzdGFuY2UgKGZsb2F0KSBmcm9tIHRoZSBnaXZlbiBwb2ludCB0byB0aGUgUGxhbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2lnbmVkRGlzdGFuY2VUbyhwbGFuZSwgcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjMuZG90KHBvaW50LCBwbGFuZS5ub3JtYWwpICsgcGxhbmUuZDtcbiAgICB9XG4gICAgUGxhbmUuc2lnbmVkRGlzdGFuY2VUbyA9IHNpZ25lZERpc3RhbmNlVG87XG59KShQbGFuZSB8fCAoUGxhbmUgPSB7fSkpO1xuIiwgImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL1ZlY3RvcjMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbic7XG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gJy4vUGxhbmUnO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIHN0b3JlIG1hdHJpeCBkYXRhICg0eDQpXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgTWF0cml4O1xuKGZ1bmN0aW9uIChNYXRyaXgpIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbnRlcm5hbCBkYXRhIG9mIHRoZSBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtKHNlbGYpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX207XG4gICAgfVxuICAgIE1hdHJpeC5tID0gbTtcbiAgICBsZXQgX3VwZGF0ZUZsYWdTZWVkID0gMDtcbiAgICBjb25zdCBfaWRlbnRpdHlSZWFkb25seSA9IHt9O1xuICAgIC8qKlxuICAgICAqIEdldHMgYW4gaWRlbnRpdHkgbWF0cml4IHRoYXQgbXVzdCBub3QgYmUgdXBkYXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIElkZW50aXR5UmVhZG9ubHkoKSB7XG4gICAgICAgIHJldHVybiBfaWRlbnRpdHlSZWFkb25seTtcbiAgICB9XG4gICAgTWF0cml4LklkZW50aXR5UmVhZG9ubHkgPSBJZGVudGl0eVJlYWRvbmx5O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW1wdHkgbWF0cml4IChmaWxsZWQgd2l0aCB6ZXJvcylcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIGNvbnN0IG5ld01hdHJpeCA9IHtcbiAgICAgICAgICAgIHVwZGF0ZUZsYWc6IDAsXG4gICAgICAgICAgICBpc0lkZW50aXR5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzSWRlbnRpdHkzeDI6IHRydWUsXG4gICAgICAgICAgICBfaXNJZGVudGl0eURpcnR5OiB0cnVlLFxuICAgICAgICAgICAgX2lzSWRlbnRpdHkzeDJEaXJ0eTogdHJ1ZSxcbiAgICAgICAgICAgIF9tOiBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF1cbiAgICAgICAgfTtcbiAgICAgICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKG5ld01hdHJpeCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gbmV3TWF0cml4O1xuICAgIH1cbiAgICBNYXRyaXguY3JlYXRlID0gY3JlYXRlO1xuICAgIC8vIFN0YXRpY3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IE1hdHJpeCBzZXQgZnJvbSB0aGUgc3RhcnRpbmcgaW5kZXggb2YgdGhlIGdpdmVuIGFycmF5XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBmcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBNYXRyaXguZnJvbUFycmF5ID0gZnJvbUFycmF5O1xuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGNvbnRlbnQgb2YgYW4gYXJyYXkgaW50byBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIGFuIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdID0gYXJyYXlbaW5kZXggKyBvZmZzZXRdO1xuICAgICAgICB9XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHJlc3VsdCk7XG4gICAgfVxuICAgIE1hdHJpeC5mcm9tQXJyYXlUb1JlZiA9IGZyb21BcnJheVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhbiBhcnJheSBpbnRvIGEgbWF0cml4IGFmdGVyIGhhdmluZyBtdWx0aXBsaWVkIGVhY2ggY29tcG9uZW50IGJ5IGEgZ2l2ZW4gZmFjdG9yXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21GbG9hdEFycmF5VG9SZWZTY2FsZWQoYXJyYXksIG9mZnNldCwgc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSBhcnJheVtpbmRleCArIG9mZnNldF0gKiBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBfbWFya0FzVXBkYXRlZChyZXN1bHQpO1xuICAgIH1cbiAgICBNYXRyaXguZnJvbUZsb2F0QXJyYXlUb1JlZlNjYWxlZCA9IGZyb21GbG9hdEFycmF5VG9SZWZTY2FsZWQ7XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgbGlzdCBvZiB2YWx1ZXMgKDE2KSBpbnNpZGUgYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0xMSAtIGRlZmluZXMgMXN0IHZhbHVlIG9mIDFzdCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0xMiAtIGRlZmluZXMgMm5kIHZhbHVlIG9mIDFzdCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0xMyAtIGRlZmluZXMgM3JkIHZhbHVlIG9mIDFzdCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0xNCAtIGRlZmluZXMgNHRoIHZhbHVlIG9mIDFzdCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0yMSAtIGRlZmluZXMgMXN0IHZhbHVlIG9mIDJuZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0yMiAtIGRlZmluZXMgMm5kIHZhbHVlIG9mIDJuZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0yMyAtIGRlZmluZXMgM3JkIHZhbHVlIG9mIDJuZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0yNCAtIGRlZmluZXMgNHRoIHZhbHVlIG9mIDJuZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0zMSAtIGRlZmluZXMgMXN0IHZhbHVlIG9mIDNyZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0zMiAtIGRlZmluZXMgMm5kIHZhbHVlIG9mIDNyZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0zMyAtIGRlZmluZXMgM3JkIHZhbHVlIG9mIDNyZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE0zNCAtIGRlZmluZXMgNHRoIHZhbHVlIG9mIDNyZCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE00MSAtIGRlZmluZXMgMXN0IHZhbHVlIG9mIDR0aCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE00MiAtIGRlZmluZXMgMm5kIHZhbHVlIG9mIDR0aCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE00MyAtIGRlZmluZXMgM3JkIHZhbHVlIG9mIDR0aCByb3dcbiAgICAgKiBAcGFyYW0gaW5pdGlhbE00NCAtIGRlZmluZXMgNHRoIHZhbHVlIG9mIDR0aCByb3dcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21WYWx1ZXNUb1JlZihpbml0aWFsTTExLCBpbml0aWFsTTEyLCBpbml0aWFsTTEzLCBpbml0aWFsTTE0LCBpbml0aWFsTTIxLCBpbml0aWFsTTIyLCBpbml0aWFsTTIzLCBpbml0aWFsTTI0LCBpbml0aWFsTTMxLCBpbml0aWFsTTMyLCBpbml0aWFsTTMzLCBpbml0aWFsTTM0LCBpbml0aWFsTTQxLCBpbml0aWFsTTQyLCBpbml0aWFsTTQzLCBpbml0aWFsTTQ0LCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgbSA9IHJlc3VsdC5fbTtcbiAgICAgICAgbVswXSA9IGluaXRpYWxNMTE7XG4gICAgICAgIG1bMV0gPSBpbml0aWFsTTEyO1xuICAgICAgICBtWzJdID0gaW5pdGlhbE0xMztcbiAgICAgICAgbVszXSA9IGluaXRpYWxNMTQ7XG4gICAgICAgIG1bNF0gPSBpbml0aWFsTTIxO1xuICAgICAgICBtWzVdID0gaW5pdGlhbE0yMjtcbiAgICAgICAgbVs2XSA9IGluaXRpYWxNMjM7XG4gICAgICAgIG1bN10gPSBpbml0aWFsTTI0O1xuICAgICAgICBtWzhdID0gaW5pdGlhbE0zMTtcbiAgICAgICAgbVs5XSA9IGluaXRpYWxNMzI7XG4gICAgICAgIG1bMTBdID0gaW5pdGlhbE0zMztcbiAgICAgICAgbVsxMV0gPSBpbml0aWFsTTM0O1xuICAgICAgICBtWzEyXSA9IGluaXRpYWxNNDE7XG4gICAgICAgIG1bMTNdID0gaW5pdGlhbE00MjtcbiAgICAgICAgbVsxNF0gPSBpbml0aWFsTTQzO1xuICAgICAgICBtWzE1XSA9IGluaXRpYWxNNDQ7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHJlc3VsdCk7XG4gICAgfVxuICAgIE1hdHJpeC5mcm9tVmFsdWVzVG9SZWYgPSBmcm9tVmFsdWVzVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBuZXcgbWF0cml4IGZyb20gYSBsaXN0IG9mIHZhbHVlcyAoMTYpXG4gICAgICogQHBhcmFtIGluaXRpYWxNMTEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tVmFsdWVzKGluaXRpYWxNMTEsIGluaXRpYWxNMTIsIGluaXRpYWxNMTMsIGluaXRpYWxNMTQsIGluaXRpYWxNMjEsIGluaXRpYWxNMjIsIGluaXRpYWxNMjMsIGluaXRpYWxNMjQsIGluaXRpYWxNMzEsIGluaXRpYWxNMzIsIGluaXRpYWxNMzMsIGluaXRpYWxNMzQsIGluaXRpYWxNNDEsIGluaXRpYWxNNDIsIGluaXRpYWxNNDMsIGluaXRpYWxNNDQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSBpbml0aWFsTTExO1xuICAgICAgICBtWzFdID0gaW5pdGlhbE0xMjtcbiAgICAgICAgbVsyXSA9IGluaXRpYWxNMTM7XG4gICAgICAgIG1bM10gPSBpbml0aWFsTTE0O1xuICAgICAgICBtWzRdID0gaW5pdGlhbE0yMTtcbiAgICAgICAgbVs1XSA9IGluaXRpYWxNMjI7XG4gICAgICAgIG1bNl0gPSBpbml0aWFsTTIzO1xuICAgICAgICBtWzddID0gaW5pdGlhbE0yNDtcbiAgICAgICAgbVs4XSA9IGluaXRpYWxNMzE7XG4gICAgICAgIG1bOV0gPSBpbml0aWFsTTMyO1xuICAgICAgICBtWzEwXSA9IGluaXRpYWxNMzM7XG4gICAgICAgIG1bMTFdID0gaW5pdGlhbE0zNDtcbiAgICAgICAgbVsxMl0gPSBpbml0aWFsTTQxO1xuICAgICAgICBtWzEzXSA9IGluaXRpYWxNNDI7XG4gICAgICAgIG1bMTRdID0gaW5pdGlhbE00MztcbiAgICAgICAgbVsxNV0gPSBpbml0aWFsTTQ0O1xuICAgICAgICBfbWFya0FzVXBkYXRlZChyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBNYXRyaXguZnJvbVZhbHVlcyA9IGZyb21WYWx1ZXM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXRyaXggY29tcG9zZWQgYnkgbWVyZ2luZyBzY2FsZSAodmVjdG9yMyksIHJvdGF0aW9uIChxdWF0ZXJuaW9uKSBhbmQgdHJhbnNsYXRpb24gKHZlY3RvcjMpXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgdmVjdG9yM1xuICAgICAqIEBwYXJhbSByb3RhdGlvbiAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IzXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZShzY2FsZSwgcm90YXRpb24sIHRyYW5zbGF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBjb21wb3NlVG9SZWYoc2NhbGUsIHJvdGF0aW9uLCB0cmFuc2xhdGlvbiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LmNvbXBvc2UgPSBjb21wb3NlO1xuICAgIC8qKlxuICAgICAqIFNldHMgYSBtYXRyaXggdG8gYSB2YWx1ZSBjb21wb3NlZCBieSBtZXJnaW5nIHNjYWxlICh2ZWN0b3IzKSwgcm90YXRpb24gKHF1YXRlcm5pb24pIGFuZCB0cmFuc2xhdGlvbiAodmVjdG9yMylcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSB2ZWN0b3IzXG4gICAgICogQHBhcmFtIHJvdGF0aW9uIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvcjNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VUb1JlZihzY2FsZSwgcm90YXRpb24sIHRyYW5zbGF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgdG1wTWF0cml4ID0gW2NyZWF0ZSgpLCBjcmVhdGUoKSwgY3JlYXRlKCldO1xuICAgICAgICBzY2FsaW5nVG9SZWYoc2NhbGUueCwgc2NhbGUueSwgc2NhbGUueiwgdG1wTWF0cml4WzFdKTtcbiAgICAgICAgZnJvbVF1YXRlcm5pb25Ub1JlZihyb3RhdGlvbiwgdG1wTWF0cml4WzBdKTtcbiAgICAgICAgbXVsdGlwbHlUb1JlZih0bXBNYXRyaXhbMV0sIHRtcE1hdHJpeFswXSwgcmVzdWx0KTtcbiAgICAgICAgc2V0VHJhbnNsYXRpb24ocmVzdWx0LCB0cmFuc2xhdGlvbik7XG4gICAgfVxuICAgIE1hdHJpeC5jb21wb3NlVG9SZWYgPSBjb21wb3NlVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBpZGVudGl0eSBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBJZGVudGl0eSgpIHtcbiAgICAgICAgY29uc3QgaWRlbnRpdHkgPSBmcm9tVmFsdWVzKDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyhpZGVudGl0eSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgTWF0cml4LklkZW50aXR5ID0gSWRlbnRpdHk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXRyaXggYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBJZGVudGl0eVRvUmVmKHJlc3VsdCkge1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgICAgICBfdXBkYXRlSWRlbnRpdHlTdGF0dXMocmVzdWx0LCB0cnVlKTtcbiAgICB9XG4gICAgTWF0cml4LklkZW50aXR5VG9SZWYgPSBJZGVudGl0eVRvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgemVybyBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB6ZXJvIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFplcm8oKSB7XG4gICAgICAgIGNvbnN0IHplcm8gPSBmcm9tVmFsdWVzKDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyh6ZXJvLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB6ZXJvO1xuICAgIH1cbiAgICBNYXRyaXguWmVybyA9IFplcm87XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWCBheGlzXG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gUm90YXRpb25YKGFuZ2xlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICByb3RhdGlvblhUb1JlZihhbmdsZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LlJvdGF0aW9uWCA9IFJvdGF0aW9uWDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCBmb3IgXCJhbmdsZVwiIHJhZGlhbnMgYXJvdW5kIHRoZSBYIGF4aXMgYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uWFRvUmVmKGFuZ2xlLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgcyA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgZnJvbVZhbHVlc1RvUmVmKDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCBjLCBzLCAwLjAsIDAuMCwgLXMsIGMsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgICAgICBfdXBkYXRlSWRlbnRpdHlTdGF0dXMocmVzdWx0LCBjID09PSAxICYmIHMgPT09IDApO1xuICAgIH1cbiAgICBNYXRyaXgucm90YXRpb25YVG9SZWYgPSByb3RhdGlvblhUb1JlZjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCBmb3IgXCJhbmdsZVwiIHJhZGlhbnMgYXJvdW5kIHRoZSBZIGF4aXNcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGlvblkoYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIHJvdGF0aW9uWVRvUmVmKGFuZ2xlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBNYXRyaXgucm90YXRpb25ZID0gcm90YXRpb25ZO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIFkgYXhpcyBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gcm90YXRpb25ZVG9SZWYoYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoYywgMC4wLCAtcywgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIHMsIDAuMCwgYywgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyhyZXN1bHQsIGMgPT09IDEgJiYgcyA9PT0gMCk7XG4gICAgfVxuICAgIE1hdHJpeC5yb3RhdGlvbllUb1JlZiA9IHJvdGF0aW9uWVRvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIFogYXhpc1xuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uWihhbmdsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoKTtcbiAgICAgICAgcm90YXRpb25aVG9SZWYoYW5nbGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE1hdHJpeC5yb3RhdGlvblogPSByb3RhdGlvblo7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWiBheGlzIGFuZCBzdG9yZXMgaXQgaW4gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGlvblpUb1JlZihhbmdsZSwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGZyb21WYWx1ZXNUb1JlZihjLCBzLCAwLjAsIDAuMCwgLXMsIGMsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKHJlc3VsdCwgYyA9PT0gMSAmJiBzID09PSAwKTtcbiAgICB9XG4gICAgTWF0cml4LnJvdGF0aW9uWlRvUmVmID0gcm90YXRpb25aVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xuICAgICAqIEBwYXJhbSBheGlzIC0gZGVmaW5lcyB0aGUgYXhpcyB0byB1c2VcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGlvbkF4aXMoYXhpcywgYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIHJvdGF0aW9uQXhpc1RvUmVmKGF4aXMsIGFuZ2xlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBNYXRyaXgucm90YXRpb25BeGlzID0gcm90YXRpb25BeGlzO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIGdpdmVuIGF4aXMgYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBheGlzIC0gZGVmaW5lcyB0aGUgYXhpcyB0byB1c2VcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGlvbkF4aXNUb1JlZihfYXhpcywgYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIGNvbnN0IGMxID0gMSAtIGM7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBWZWN0b3IzLm5vcm1hbGl6ZShfYXhpcyk7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSBheGlzLnggKiBheGlzLnggKiBjMSArIGM7XG4gICAgICAgIG1bMV0gPSBheGlzLnggKiBheGlzLnkgKiBjMSAtIGF4aXMueiAqIHM7XG4gICAgICAgIG1bMl0gPSBheGlzLnggKiBheGlzLnogKiBjMSArIGF4aXMueSAqIHM7XG4gICAgICAgIG1bM10gPSAwLjA7XG4gICAgICAgIG1bNF0gPSBheGlzLnkgKiBheGlzLnggKiBjMSArIGF4aXMueiAqIHM7XG4gICAgICAgIG1bNV0gPSBheGlzLnkgKiBheGlzLnkgKiBjMSArIGM7XG4gICAgICAgIG1bNl0gPSBheGlzLnkgKiBheGlzLnogKiBjMSAtIGF4aXMueCAqIHM7XG4gICAgICAgIG1bN10gPSAwLjA7XG4gICAgICAgIG1bOF0gPSBheGlzLnogKiBheGlzLnggKiBjMSAtIGF4aXMueSAqIHM7XG4gICAgICAgIG1bOV0gPSBheGlzLnogKiBheGlzLnkgKiBjMSArIGF4aXMueCAqIHM7XG4gICAgICAgIG1bMTBdID0gYXhpcy56ICogYXhpcy56ICogYzEgKyBjO1xuICAgICAgICBtWzExXSA9IDAuMDtcbiAgICAgICAgbVsxMl0gPSAwLjA7XG4gICAgICAgIG1bMTNdID0gMC4wO1xuICAgICAgICBtWzE0XSA9IDAuMDtcbiAgICAgICAgbVsxNV0gPSAxLjA7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHJlc3VsdCk7XG4gICAgfVxuICAgIE1hdHJpeC5yb3RhdGlvbkF4aXNUb1JlZiA9IHJvdGF0aW9uQXhpc1RvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByb3RhdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0geWF3IC0gZGVmaW5lcyB0aGUgeWF3IGFuZ2xlIGluIHJhZGlhbnMgKFkgYXhpcylcbiAgICAgKiBAcGFyYW0gcGl0Y2ggLSBkZWZpbmVzIHRoZSBwaXRjaCBhbmdsZSBpbiByYWRpYW5zIChYIGF4aXMpXG4gICAgICogQHBhcmFtIHJvbGwgLSBkZWZpbmVzIHRoZSByb2xsIGFuZ2xlIGluIHJhZGlhbnMgKFggYXhpcylcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHJvdGF0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uWWF3UGl0Y2hSb2xsKHlhdywgcGl0Y2gsIHJvbGwpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIHJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LnJvdGF0aW9uWWF3UGl0Y2hSb2xsID0gcm90YXRpb25ZYXdQaXRjaFJvbGw7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHlhdyAtIGRlZmluZXMgdGhlIHlhdyBhbmdsZSBpbiByYWRpYW5zIChZIGF4aXMpXG4gICAgICogQHBhcmFtIHBpdGNoIC0gZGVmaW5lcyB0aGUgcGl0Y2ggYW5nbGUgaW4gcmFkaWFucyAoWCBheGlzKVxuICAgICAqIEBwYXJhbSByb2xsIC0gZGVmaW5lcyB0aGUgcm9sbCBhbmdsZSBpbiByYWRpYW5zIChYIGF4aXMpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmKHlhdywgcGl0Y2gsIHJvbGwsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBxdWF0ZXJuaW9uUmVzdWx0ID0gUXVhdGVybmlvbi5aZXJvKCk7XG4gICAgICAgIFF1YXRlcm5pb24uZnJvbVJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcXVhdGVybmlvblJlc3VsdCk7XG4gICAgICAgIGZyb21RdWF0ZXJuaW9uVG9SZWYocXVhdGVybmlvblJlc3VsdCwgcmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LnJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYgPSByb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzY2FsaW5nIG1hdHJpeFxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFogYXhpc1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2NhbGluZyh4LCB5LCB6KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBzY2FsaW5nVG9SZWYoeCwgeSwgeiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LnNjYWxpbmcgPSBzY2FsaW5nO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzY2FsaW5nIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWCBheGlzXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWSBheGlzXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWiBheGlzXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsaW5nVG9SZWYoeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIGZyb21WYWx1ZXNUb1JlZih4LCAwLjAsIDAuMCwgMC4wLCAwLjAsIHksIDAuMCwgMC4wLCAwLjAsIDAuMCwgeiwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyhyZXN1bHQsIHggPT09IDEgJiYgeSA9PT0gMSAmJiB6ID09PSAxKTtcbiAgICB9XG4gICAgTWF0cml4LnNjYWxpbmdUb1JlZiA9IHNjYWxpbmdUb1JlZjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdHJhbnNsYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiBvbiBYIGF4aXNcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb25vbiBaIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0aW9uKHgsIHksIHopIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIHRyYW5zbGF0aW9uVG9SZWYoeCwgeSwgeiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LnRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb247XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRyYW5zbGF0aW9uIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiBvbiBYIGF4aXNcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb25vbiBaIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0aW9uVG9SZWYoeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIGZyb21WYWx1ZXNUb1JlZigxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCB4LCB5LCB6LCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyhyZXN1bHQsIHggPT09IDAgJiYgeSA9PT0gMCAmJiB6ID09PSAwKTtcbiAgICB9XG4gICAgTWF0cml4LnRyYW5zbGF0aW9uVG9SZWYgPSB0cmFuc2xhdGlvblRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgTWF0cml4IHdob3NlIHZhbHVlcyBhcmUgdGhlIGludGVycG9sYXRlZCB2YWx1ZXMgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIGJldHdlZW4gdGhlIG9uZXMgb2YgdGhlIG1hdHJpY2VzIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIuXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGZhY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVycChzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIGxlcnBUb1JlZihzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE1hdHJpeC5sZXJwID0gbGVycDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGdpdmVuIG1hdHJpeCBcInJlc3VsdFwiIGFzIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWVzIGZvciBcImdyYWRpZW50XCIgKGZsb2F0KSBiZXR3ZWVuIHRoZSBvbmVzIG9mIHRoZSBtYXRyaWNlcyBcInN0YXJ0VmFsdWVcIiBhbmQgXCJlbmRWYWx1ZVwiLlxuICAgICAqIEBwYXJhbSBzdGFydFZhbHVlIC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kVmFsdWUgLSBkZWZpbmVzIHRoZSBlbmQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZ3JhZGllbnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgTWF0cml4IG9iamVjdCB3aGVyZSB0byBzdG9yZSBkYXRhXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVycFRvUmVmKHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBncmFkaWVudCwgcmVzdWx0KSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgcmVzdWx0Ll9tW2luZGV4XSA9XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZS5fbVtpbmRleF0gKiAoMS4wIC0gZ3JhZGllbnQpICsgZW5kVmFsdWUuX21baW5kZXhdICogZ3JhZGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgX21hcmtBc1VwZGF0ZWQocmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LmxlcnBUb1JlZiA9IGxlcnBUb1JlZjtcbiAgICAvKipcbiAgICAgKiBCdWlsZHMgYSBuZXcgbWF0cml4IHdob3NlIHZhbHVlcyBhcmUgY29tcHV0ZWQgYnk6XG4gICAgICogKiBkZWNvbXBvc2luZyB0aGUgdGhlIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIgbWF0cmljZXMgaW50byB0aGVpciByZXNwZWN0aXZlIHNjYWxlLCByb3RhdGlvbiBhbmQgdHJhbnNsYXRpb24gbWF0cmljZXNcbiAgICAgKiAqIGludGVycG9sYXRpbmcgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIHRoZSB2YWx1ZXMgYmV0d2VlbiBlYWNoIG9mIHRoZXNlIGRlY29tcG9zZWQgbWF0cmljZXMgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIHRoZSBlbmRcbiAgICAgKiAqIHJlY29tcG9zaW5nIGEgbmV3IG1hdHJpeCBmcm9tIHRoZXNlIDMgaW50ZXJwb2xhdGVkIHNjYWxlLCByb3RhdGlvbiBhbmQgdHJhbnNsYXRpb24gbWF0cmljZXNcbiAgICAgKiBAcGFyYW0gc3RhcnRWYWx1ZSAtIGRlZmluZXMgdGhlIGZpcnN0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIHNlY29uZCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZ3JhZGllbnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBiZXR3ZWVuIHRoZSB0d28gbWF0cmljZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlY29tcG9zZUxlcnAoc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBkZWNvbXBvc2VMZXJwVG9SZWYoc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGdyYWRpZW50LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBNYXRyaXguZGVjb21wb3NlTGVycCA9IGRlY29tcG9zZUxlcnA7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgbWF0cml4IHRvIHZhbHVlcyB3aGljaCBhcmUgY29tcHV0ZWQgYnk6XG4gICAgICogKiBkZWNvbXBvc2luZyB0aGUgdGhlIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIgbWF0cmljZXMgaW50byB0aGVpciByZXNwZWN0aXZlIHNjYWxlLCByb3RhdGlvbiBhbmQgdHJhbnNsYXRpb24gbWF0cmljZXNcbiAgICAgKiAqIGludGVycG9sYXRpbmcgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIHRoZSB2YWx1ZXMgYmV0d2VlbiBlYWNoIG9mIHRoZXNlIGRlY29tcG9zZWQgbWF0cmljZXMgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIHRoZSBlbmRcbiAgICAgKiAqIHJlY29tcG9zaW5nIGEgbmV3IG1hdHJpeCBmcm9tIHRoZXNlIDMgaW50ZXJwb2xhdGVkIHNjYWxlLCByb3RhdGlvbiBhbmQgdHJhbnNsYXRpb24gbWF0cmljZXNcbiAgICAgKiBAcGFyYW0gc3RhcnRWYWx1ZSAtIGRlZmluZXMgdGhlIGZpcnN0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIHNlY29uZCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZ3JhZGllbnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBiZXR3ZWVuIHRoZSB0d28gbWF0cmljZXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlY29tcG9zZUxlcnBUb1JlZihzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzdGFydFNjYWxlID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0Um90YXRpb24gPSBRdWF0ZXJuaW9uLlplcm8oKTtcbiAgICAgICAgY29uc3Qgc3RhcnRUcmFuc2xhdGlvbiA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBkZWNvbXBvc2Uoc3RhcnRWYWx1ZSwgc3RhcnRTY2FsZSwgc3RhcnRSb3RhdGlvbiwgc3RhcnRUcmFuc2xhdGlvbik7XG4gICAgICAgIGNvbnN0IGVuZFNjYWxlID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIGNvbnN0IGVuZFJvdGF0aW9uID0gUXVhdGVybmlvbi5aZXJvKCk7XG4gICAgICAgIGNvbnN0IGVuZFRyYW5zbGF0aW9uID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIGRlY29tcG9zZShlbmRWYWx1ZSwgZW5kU2NhbGUsIGVuZFJvdGF0aW9uLCBlbmRUcmFuc2xhdGlvbik7XG4gICAgICAgIGNvbnN0IHJlc3VsdFNjYWxlID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIFZlY3RvcjMubGVycFRvUmVmKHN0YXJ0U2NhbGUsIGVuZFNjYWxlLCBncmFkaWVudCwgcmVzdWx0U2NhbGUpO1xuICAgICAgICBjb25zdCByZXN1bHRSb3RhdGlvbiA9IFF1YXRlcm5pb24uWmVybygpO1xuICAgICAgICBRdWF0ZXJuaW9uLnNsZXJwVG9SZWYoc3RhcnRSb3RhdGlvbiwgZW5kUm90YXRpb24sIGdyYWRpZW50LCByZXN1bHRSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IHJlc3VsdFRyYW5zbGF0aW9uID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIFZlY3RvcjMubGVycFRvUmVmKHN0YXJ0VHJhbnNsYXRpb24sIGVuZFRyYW5zbGF0aW9uLCBncmFkaWVudCwgcmVzdWx0VHJhbnNsYXRpb24pO1xuICAgICAgICBjb21wb3NlVG9SZWYocmVzdWx0U2NhbGUsIHJlc3VsdFJvdGF0aW9uLCByZXN1bHRUcmFuc2xhdGlvbiwgcmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LmRlY29tcG9zZUxlcnBUb1JlZiA9IGRlY29tcG9zZUxlcnBUb1JlZjtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCB1c2VkIHRvIHJvdGF0ZSBhbiBlbnRpdHkgc28gYXMgaXQgbG9va3MgYXQgdGhlIHRhcmdldCB2ZWN0b3IzLCBmcm9tIHRoZSBleWUgdmVjdG9yMyBwb3NpdGlvbiwgdGhlIHVwIHZlY3RvcjMgYmVpbmcgb3JpZW50ZWQgbGlrZSBcInVwXCJcbiAgICAgKiBzZWxmIGZ1bmN0aW9uIHdvcmtzIGluIGxlZnQgaGFuZGVkIG1vZGVcbiAgICAgKiBAcGFyYW0gZXllIC0gZGVmaW5lcyB0aGUgZmluYWwgcG9zaXRpb24gb2YgdGhlIGVudGl0eVxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBkZWZpbmVzIHdoZXJlIHRoZSBlbnRpdHkgc2hvdWxkIGxvb2sgYXRcbiAgICAgKiBAcGFyYW0gdXAgLSBkZWZpbmVzIHRoZSB1cCB2ZWN0b3IgZm9yIHRoZSBlbnRpdHlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvb2tBdExIKGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoKTtcbiAgICAgICAgbG9va0F0TEhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE1hdHJpeC5Mb29rQXRMSCA9IExvb2tBdExIO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIFwicmVzdWx0XCIgTWF0cml4IHRvIGEgcm90YXRpb24gbWF0cml4IHVzZWQgdG8gcm90YXRlIGFuIGVudGl0eSBzbyB0aGF0IGl0IGxvb2tzIGF0IHRoZSB0YXJnZXQgdmVjdG9yMywgZnJvbSB0aGUgZXllIHZlY3RvcjMgcG9zaXRpb24sIHRoZSB1cCB2ZWN0b3IzIGJlaW5nIG9yaWVudGVkIGxpa2UgXCJ1cFwiLlxuICAgICAqIHNlbGYgZnVuY3Rpb24gd29ya3MgaW4gbGVmdCBoYW5kZWQgbW9kZVxuICAgICAqIEBwYXJhbSBleWUgLSBkZWZpbmVzIHRoZSBmaW5hbCBwb3NpdGlvbiBvZiB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgd2hlcmUgdGhlIGVudGl0eSBzaG91bGQgbG9vayBhdFxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIHVwIHZlY3RvciBmb3IgdGhlIGVudGl0eVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9va0F0TEhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4QXhpcyA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBjb25zdCB5QXhpcyA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBjb25zdCB6QXhpcyA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICAvLyBaIGF4aXNcbiAgICAgICAgVmVjdG9yMy5zdWJ0cmFjdFRvUmVmKHRhcmdldCwgZXllLCB6QXhpcyk7XG4gICAgICAgIFZlY3RvcjMubm9ybWFsaXplVG9SZWYoekF4aXMsIHpBeGlzKTtcbiAgICAgICAgLy8gWCBheGlzXG4gICAgICAgIFZlY3RvcjMuY3Jvc3NUb1JlZih1cCwgekF4aXMsIHhBeGlzKTtcbiAgICAgICAgY29uc3QgeFNxdWFyZUxlbmd0aCA9IFZlY3RvcjMubGVuZ3RoU3F1YXJlZCh4QXhpcyk7XG4gICAgICAgIGlmICh4U3F1YXJlTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB4QXhpcy54ID0gMS4wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgVmVjdG9yMy5ub3JtYWxpemVGcm9tTGVuZ3RoVG9SZWYoeEF4aXMsIE1hdGguc3FydCh4U3F1YXJlTGVuZ3RoKSwgeEF4aXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFkgYXhpc1xuICAgICAgICBWZWN0b3IzLmNyb3NzVG9SZWYoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG4gICAgICAgIFZlY3RvcjMubm9ybWFsaXplVG9SZWYoeUF4aXMsIHlBeGlzKTtcbiAgICAgICAgLy8gRXllIGFuZ2xlc1xuICAgICAgICBjb25zdCBleCA9IC1WZWN0b3IzLmRvdCh4QXhpcywgZXllKTtcbiAgICAgICAgY29uc3QgZXkgPSAtVmVjdG9yMy5kb3QoeUF4aXMsIGV5ZSk7XG4gICAgICAgIGNvbnN0IGV6ID0gLVZlY3RvcjMuZG90KHpBeGlzLCBleWUpO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoeEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMC4wLCB4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLjAsIHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAuMCwgZXgsIGV5LCBleiwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICBNYXRyaXgubG9va0F0TEhUb1JlZiA9IGxvb2tBdExIVG9SZWY7XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyByb3RhdGlvbiBtYXRyaXggdXNlZCB0byByb3RhdGUgYW4gZW50aXR5IHNvIGFzIGl0IGxvb2tzIGF0IHRoZSB0YXJnZXQgdmVjdG9yMywgZnJvbSB0aGUgZXllIHZlY3RvcjMgcG9zaXRpb24sIHRoZSB1cCB2ZWN0b3IzIGJlaW5nIG9yaWVudGVkIGxpa2UgXCJ1cFwiXG4gICAgICogc2VsZiBmdW5jdGlvbiB3b3JrcyBpbiByaWdodCBoYW5kZWQgbW9kZVxuICAgICAqIEBwYXJhbSBleWUgLSBkZWZpbmVzIHRoZSBmaW5hbCBwb3NpdGlvbiBvZiB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgd2hlcmUgdGhlIGVudGl0eSBzaG91bGQgbG9vayBhdFxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIHVwIHZlY3RvciBmb3IgdGhlIGVudGl0eVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9va0F0UkgoZXllLCB0YXJnZXQsIHVwKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBsb29rQXRSSFRvUmVmKGV5ZSwgdGFyZ2V0LCB1cCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4Lmxvb2tBdFJIID0gbG9va0F0Ukg7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIiBNYXRyaXggdG8gYSByb3RhdGlvbiBtYXRyaXggdXNlZCB0byByb3RhdGUgYW4gZW50aXR5IHNvIHRoYXQgaXQgbG9va3MgYXQgdGhlIHRhcmdldCB2ZWN0b3IzLCBmcm9tIHRoZSBleWUgdmVjdG9yMyBwb3NpdGlvbiwgdGhlIHVwIHZlY3RvcjMgYmVpbmcgb3JpZW50ZWQgbGlrZSBcInVwXCIuXG4gICAgICogc2VsZiBmdW5jdGlvbiB3b3JrcyBpbiByaWdodCBoYW5kZWQgbW9kZVxuICAgICAqIEBwYXJhbSBleWUgLSBkZWZpbmVzIHRoZSBmaW5hbCBwb3NpdGlvbiBvZiB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgd2hlcmUgdGhlIGVudGl0eSBzaG91bGQgbG9vayBhdFxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIHVwIHZlY3RvciBmb3IgdGhlIGVudGl0eVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9va0F0UkhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4QXhpcyA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBjb25zdCB5QXhpcyA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBjb25zdCB6QXhpcyA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICAvLyBaIGF4aXNcbiAgICAgICAgVmVjdG9yMy5zdWJ0cmFjdFRvUmVmKGV5ZSwgdGFyZ2V0LCB6QXhpcyk7XG4gICAgICAgIFZlY3RvcjMubm9ybWFsaXplVG9SZWYoekF4aXMsIHpBeGlzKTtcbiAgICAgICAgLy8gWCBheGlzXG4gICAgICAgIFZlY3RvcjMuY3Jvc3NUb1JlZih1cCwgekF4aXMsIHhBeGlzKTtcbiAgICAgICAgY29uc3QgeFNxdWFyZUxlbmd0aCA9IFZlY3RvcjMubGVuZ3RoU3F1YXJlZCh4QXhpcyk7XG4gICAgICAgIGlmICh4U3F1YXJlTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB4QXhpcy54ID0gMS4wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgVmVjdG9yMy5ub3JtYWxpemVGcm9tTGVuZ3RoVG9SZWYoeEF4aXMsIE1hdGguc3FydCh4U3F1YXJlTGVuZ3RoKSwgeEF4aXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFkgYXhpc1xuICAgICAgICBWZWN0b3IzLmNyb3NzVG9SZWYoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG4gICAgICAgIFZlY3RvcjMubm9ybWFsaXplVG9SZWYoeUF4aXMsIHlBeGlzKTtcbiAgICAgICAgLy8gRXllIGFuZ2xlc1xuICAgICAgICBjb25zdCBleCA9IC1WZWN0b3IzLmRvdCh4QXhpcywgZXllKTtcbiAgICAgICAgY29uc3QgZXkgPSAtVmVjdG9yMy5kb3QoeUF4aXMsIGV5ZSk7XG4gICAgICAgIGNvbnN0IGV6ID0gLVZlY3RvcjMuZG90KHpBeGlzLCBleWUpO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoeEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMC4wLCB4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLjAsIHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAuMCwgZXgsIGV5LCBleiwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICBNYXRyaXgubG9va0F0UkhUb1JlZiA9IGxvb2tBdFJIVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHdpZHRoIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgd2lkdGhcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9ydGhvTEgod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gY3JlYXRlKCk7XG4gICAgICAgIG9ydGhvTEhUb1JlZih3aWR0aCwgaGVpZ2h0LCB6bmVhciwgemZhciwgbWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgTWF0cml4Lm9ydGhvTEggPSBvcnRob0xIO1xuICAgIC8qKlxuICAgICAqIFN0b3JlIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gdG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gd2lkdGggLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBoZWlnaHRcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcnRob0xIVG9SZWYod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCBhID0gMi4wIC8gd2lkdGg7XG4gICAgICAgIGNvbnN0IGIgPSAyLjAgLyBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGMgPSAyLjAgLyAoZiAtIG4pO1xuICAgICAgICBjb25zdCBkID0gLShmICsgbikgLyAoZiAtIG4pO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDAuMCwgMC4wLCAwLjAsIGQsIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKHJlc3VsdCwgYSA9PT0gMSAmJiBiID09PSAxICYmIGMgPT09IDEgJiYgZCA9PT0gMCk7XG4gICAgfVxuICAgIE1hdHJpeC5vcnRob0xIVG9SZWYgPSBvcnRob0xIVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBsZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCByaWdodCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIGJvdHRvbSAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGJvdHRvbSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHRvcCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE9ydGhvT2ZmQ2VudGVyTEgobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6bmVhciwgemZhcikge1xuICAgICAgICBjb25zdCBtYXRyaXggPSBjcmVhdGUoKTtcbiAgICAgICAgb3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIE1hdHJpeC5PcnRob09mZkNlbnRlckxIID0gT3J0aG9PZmZDZW50ZXJMSDtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSBsZWZ0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBpbnRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBsZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCByaWdodCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIGJvdHRvbSAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGJvdHRvbSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHRvcCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gb3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCBhID0gMi4wIC8gKHJpZ2h0IC0gbGVmdCk7XG4gICAgICAgIGNvbnN0IGIgPSAyLjAgLyAodG9wIC0gYm90dG9tKTtcbiAgICAgICAgY29uc3QgYyA9IDIuMCAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAtKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGkwID0gKGxlZnQgKyByaWdodCkgLyAobGVmdCAtIHJpZ2h0KTtcbiAgICAgICAgY29uc3QgaTEgPSAodG9wICsgYm90dG9tKSAvIChib3R0b20gLSB0b3ApO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDAuMCwgaTAsIGkxLCBkLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHJlc3VsdCk7XG4gICAgfVxuICAgIE1hdHJpeC5vcnRob09mZkNlbnRlckxIVG9SZWYgPSBvcnRob09mZkNlbnRlckxIVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJpZ2h0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGxlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHJpZ2h0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gYm90dG9tIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgYm90dG9tIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdG9wIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgdG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgcmlnaHQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9ydGhvT2ZmQ2VudGVyUkgobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6bmVhciwgemZhcikge1xuICAgICAgICBjb25zdCBtYXRyaXggPSBjcmVhdGUoKTtcbiAgICAgICAgb3J0aG9PZmZDZW50ZXJSSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIE1hdHJpeC5vcnRob09mZkNlbnRlclJIID0gb3J0aG9PZmZDZW50ZXJSSDtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSByaWdodC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gaW50byBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgbGVmdCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgcmlnaHQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSBib3R0b20gLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBib3R0b20gY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB0b3AgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCB0b3AgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB6bmVhciAtIGRlZmluZXMgdGhlIG5lYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSB6ZmFyIC0gZGVmaW5lcyB0aGUgZmFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9ydGhvT2ZmQ2VudGVyUkhUb1JlZihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpuZWFyLCB6ZmFyLCByZXN1bHQpIHtcbiAgICAgICAgb3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fbVsxMF0gKj0gLTE7IC8vIE5vIG5lZWQgdG8gY2FsbCBfbWFya0FzVXBkYXRlZCBhcyBwcmV2aW91cyBmdW5jdGlvbiBhbHJlYWR5IGNhbGxlZCBpdCBhbmQgbGV0IF9pc0lkZW50aXR5RGlydHkgdG8gdHJ1ZVxuICAgIH1cbiAgICBNYXRyaXgub3J0aG9PZmZDZW50ZXJSSFRvUmVmID0gb3J0aG9PZmZDZW50ZXJSSFRvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsZWZ0LWhhbmRlZCBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSB3aWR0aCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHdpZHRoXG4gICAgICogQHBhcmFtIGhlaWdodCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGhlaWdodFxuICAgICAqIEBwYXJhbSB6bmVhciAtIGRlZmluZXMgdGhlIG5lYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSB6ZmFyIC0gZGVmaW5lcyB0aGUgZmFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXggYXMgYSBsZWZ0LWhhbmRlZCBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBlcnNwZWN0aXZlTEgod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gY3JlYXRlKCk7XG4gICAgICAgIGNvbnN0IG4gPSB6bmVhcjtcbiAgICAgICAgY29uc3QgZiA9IHpmYXI7XG4gICAgICAgIGNvbnN0IGEgPSAoMi4wICogbikgLyB3aWR0aDtcbiAgICAgICAgY29uc3QgYiA9ICgyLjAgKiBuKSAvIGhlaWdodDtcbiAgICAgICAgY29uc3QgYyA9IChmICsgbikgLyAoZiAtIG4pO1xuICAgICAgICBjb25zdCBkID0gKC0yLjAgKiBmICogbikgLyAoZiAtIG4pO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDEuMCwgMC4wLCAwLjAsIGQsIDAuMCwgbWF0cml4KTtcbiAgICAgICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKG1hdHJpeCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBNYXRyaXgucGVyc3BlY3RpdmVMSCA9IHBlcnNwZWN0aXZlTEg7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIGZvdiAtIGRlZmluZXMgdGhlIGhvcml6b250YWwgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSBhc3BlY3QgLSBkZWZpbmVzIHRoZSBhc3BlY3QgcmF0aW9cbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgbGVmdC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZvdkxIKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhcikge1xuICAgICAgICBjb25zdCBtYXRyaXggPSBjcmVhdGUoKTtcbiAgICAgICAgcGVyc3BlY3RpdmVGb3ZMSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgbWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgTWF0cml4LnBlcnNwZWN0aXZlRm92TEggPSBwZXJzcGVjdGl2ZUZvdkxIO1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gaW50byBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBmb3YgLSBkZWZpbmVzIHRoZSBob3Jpem9udGFsIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0gYXNwZWN0IC0gZGVmaW5lcyB0aGUgYXNwZWN0IHJhdGlvXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHBhcmFtIGlzVmVydGljYWxGb3ZGaXhlZCAtIGRlZmluZXMgaXQgdGhlIGZvdiBpcyB2ZXJ0aWNhbGx5IGZpeGVkIChkZWZhdWx0KSBvciBob3Jpem9udGFsbHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZvdkxIVG9SZWYoZm92LCBhc3BlY3QsIHpuZWFyLCB6ZmFyLCByZXN1bHQsIGlzVmVydGljYWxGb3ZGaXhlZCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgbiA9IHpuZWFyO1xuICAgICAgICBjb25zdCBmID0gemZhcjtcbiAgICAgICAgY29uc3QgdCA9IDEuMCAvIE1hdGgudGFuKGZvdiAqIDAuNSk7XG4gICAgICAgIGNvbnN0IGEgPSBpc1ZlcnRpY2FsRm92Rml4ZWQgPyB0IC8gYXNwZWN0IDogdDtcbiAgICAgICAgY29uc3QgYiA9IGlzVmVydGljYWxGb3ZGaXhlZCA/IHQgOiB0ICogYXNwZWN0O1xuICAgICAgICBjb25zdCBjID0gKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAoLTIuMCAqIGYgKiBuKSAvIChmIC0gbik7XG4gICAgICAgIGZyb21WYWx1ZXNUb1JlZihhLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGIsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYywgMS4wLCAwLjAsIDAuMCwgZCwgMC4wLCByZXN1bHQpO1xuICAgICAgICBfdXBkYXRlSWRlbnRpdHlTdGF0dXMocmVzdWx0LCBmYWxzZSk7XG4gICAgfVxuICAgIE1hdHJpeC5wZXJzcGVjdGl2ZUZvdkxIVG9SZWYgPSBwZXJzcGVjdGl2ZUZvdkxIVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJpZ2h0LWhhbmRlZCBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSBmb3YgLSBkZWZpbmVzIHRoZSBob3Jpem9udGFsIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0gYXNwZWN0IC0gZGVmaW5lcyB0aGUgYXNwZWN0IHJhdGlvXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIHJpZ2h0LWhhbmRlZCBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFBlcnNwZWN0aXZlRm92UkgoZm92LCBhc3BlY3QsIHpuZWFyLCB6ZmFyKSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IGNyZWF0ZSgpO1xuICAgICAgICBwZXJzcGVjdGl2ZUZvdlJIVG9SZWYoZm92LCBhc3BlY3QsIHpuZWFyLCB6ZmFyLCBtYXRyaXgpO1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBNYXRyaXguUGVyc3BlY3RpdmVGb3ZSSCA9IFBlcnNwZWN0aXZlRm92Ukg7XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgcmlnaHQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gaW50byBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBmb3YgLSBkZWZpbmVzIHRoZSBob3Jpem9udGFsIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0gYXNwZWN0IC0gZGVmaW5lcyB0aGUgYXNwZWN0IHJhdGlvXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHBhcmFtIGlzVmVydGljYWxGb3ZGaXhlZCAtIGRlZmluZXMgaXQgdGhlIGZvdiBpcyB2ZXJ0aWNhbGx5IGZpeGVkIChkZWZhdWx0KSBvciBob3Jpem9udGFsbHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZvdlJIVG9SZWYoZm92LCBhc3BlY3QsIHpuZWFyLCB6ZmFyLCByZXN1bHQsIGlzVmVydGljYWxGb3ZGaXhlZCA9IHRydWUpIHtcbiAgICAgICAgLyogYWx0ZXJuYXRpdmVseSBzZWxmIGNvdWxkIGJlIGV4cHJlc3NlZCBhczpcbiAgICAgICAgLy8gICAgbSA9IFBlcnNwZWN0aXZlRm92TEhUb1JlZlxuICAgICAgICAvLyAgICBtWzEwXSAqPSAtMS4wO1xuICAgICAgICAvLyAgICBtWzExXSAqPSAtMS4wO1xuICAgICAgICAqL1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCB0ID0gMS4wIC8gTWF0aC50YW4oZm92ICogMC41KTtcbiAgICAgICAgY29uc3QgYSA9IGlzVmVydGljYWxGb3ZGaXhlZCA/IHQgLyBhc3BlY3QgOiB0O1xuICAgICAgICBjb25zdCBiID0gaXNWZXJ0aWNhbEZvdkZpeGVkID8gdCA6IHQgKiBhc3BlY3Q7XG4gICAgICAgIGNvbnN0IGMgPSAtKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAoLTIgKiBmICogbikgLyAoZiAtIG4pO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIC0xLjAsIDAuMCwgMC4wLCBkLCAwLjAsIHJlc3VsdCk7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyhyZXN1bHQsIGZhbHNlKTtcbiAgICB9XG4gICAgTWF0cml4LnBlcnNwZWN0aXZlRm92UkhUb1JlZiA9IHBlcnNwZWN0aXZlRm92UkhUb1JlZjtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIGZvciBXZWJWUiBpbmZvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGZvdiAtIGRlZmluZXMgdGhlIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gcmlnaHRIYW5kZWQgLSBkZWZpbmVzIGlmIHRoZSBtYXRyaXggbXVzdCBiZSBpbiByaWdodC1oYW5kZWQgbW9kZSAoZmFsc2UgYnkgZGVmYXVsdClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZvdldlYlZSVG9SZWYoZm92LCB6bmVhciwgemZhciwgcmVzdWx0LCByaWdodEhhbmRlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0SGFuZGVkRmFjdG9yID0gcmlnaHRIYW5kZWQgPyAtMSA6IDE7XG4gICAgICAgIGNvbnN0IHVwVGFuID0gTWF0aC50YW4oKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgZG93blRhbiA9IE1hdGgudGFuKChmb3YuZG93bkRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgbGVmdFRhbiA9IE1hdGgudGFuKChmb3YubGVmdERlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgcmlnaHRUYW4gPSBNYXRoLnRhbigoZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkpIC8gMTgwLjApO1xuICAgICAgICBjb25zdCB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgICAgICAgY29uc3QgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSB4U2NhbGU7XG4gICAgICAgIG1bMV0gPSBtWzJdID0gbVszXSA9IG1bNF0gPSAwLjA7XG4gICAgICAgIG1bNV0gPSB5U2NhbGU7XG4gICAgICAgIG1bNl0gPSBtWzddID0gMC4wO1xuICAgICAgICBtWzhdID0gKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjU7XG4gICAgICAgIG1bOV0gPSAtKCh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41KTtcbiAgICAgICAgbVsxMF0gPSAtemZhciAvICh6bmVhciAtIHpmYXIpO1xuICAgICAgICBtWzExXSA9IDEuMCAqIHJpZ2h0SGFuZGVkRmFjdG9yO1xuICAgICAgICBtWzEyXSA9IG1bMTNdID0gbVsxNV0gPSAwLjA7XG4gICAgICAgIG1bMTRdID0gLSgyLjAgKiB6ZmFyICogem5lYXIpIC8gKHpmYXIgLSB6bmVhcik7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHJlc3VsdCk7XG4gICAgfVxuICAgIE1hdHJpeC5wZXJzcGVjdGl2ZUZvdldlYlZSVG9SZWYgPSBwZXJzcGVjdGl2ZUZvdldlYlZSVG9SZWY7XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgYSAyeDIgbWF0cml4IGZyb20gYSBnaXZlbiBtYXRyaXggYW5kIHN0b3JlIHRoZSByZXN1bHQgaW4gYSBGbG9hdEFycmF5XG4gICAgICogQHBhcmFtIG1hdHJpeCAtIGRlZmluZXMgdGhlIG1hdHJpeCB0byB1c2VcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBGbG9hdEFycmF5IGFycmF5IHdpdGggNCBlbGVtZW50cyA6IHRoZSAyeDIgbWF0cml4IGV4dHJhY3RlZCBmcm9tIHRoZSBnaXZlbiBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBHZXRBc01hdHJpeDJ4MihtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIFttYXRyaXguX21bMF0sIG1hdHJpeC5fbVsxXSwgbWF0cml4Ll9tWzRdLCBtYXRyaXguX21bNV1dO1xuICAgIH1cbiAgICBNYXRyaXguR2V0QXNNYXRyaXgyeDIgPSBHZXRBc01hdHJpeDJ4MjtcbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIDN4MyBtYXRyaXggZnJvbSBhIGdpdmVuIG1hdHJpeCBhbmQgc3RvcmUgdGhlIHJlc3VsdCBpbiBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IEZsb2F0QXJyYXkgYXJyYXkgd2l0aCA5IGVsZW1lbnRzIDogdGhlIDN4MyBtYXRyaXggZXh0cmFjdGVkIGZyb20gdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEdldEFzTWF0cml4M3gzKG1hdHJpeCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWF0cml4Ll9tWzBdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzFdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzJdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzRdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzVdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzZdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzhdLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzldLFxuICAgICAgICAgICAgbWF0cml4Ll9tWzEwXVxuICAgICAgICBdO1xuICAgIH1cbiAgICBNYXRyaXguR2V0QXNNYXRyaXgzeDMgPSBHZXRBc01hdHJpeDN4MztcbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSB0cmFuc3Bvc2Ugb2YgYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHRyYW5zcG9zZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNwb3NlKG1hdHJpeCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoKTtcbiAgICAgICAgdHJhbnNwb3NlVG9SZWYobWF0cml4LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBNYXRyaXgudHJhbnNwb3NlID0gdHJhbnNwb3NlO1xuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIHRyYW5zcG9zZSBvZiBhIG1hdHJpeCBhbmQgc3RvcmUgaXQgaW4gYSB0YXJnZXQgbWF0cml4XG4gICAgICogQHBhcmFtIG1hdHJpeCAtIGRlZmluZXMgdGhlIG1hdHJpeCB0byB0cmFuc3Bvc2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zcG9zZVRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHJtID0gcmVzdWx0Ll9tO1xuICAgICAgICBjb25zdCBtbSA9IG1hdHJpeC5fbTtcbiAgICAgICAgcm1bMF0gPSBtbVswXTtcbiAgICAgICAgcm1bMV0gPSBtbVs0XTtcbiAgICAgICAgcm1bMl0gPSBtbVs4XTtcbiAgICAgICAgcm1bM10gPSBtbVsxMl07XG4gICAgICAgIHJtWzRdID0gbW1bMV07XG4gICAgICAgIHJtWzVdID0gbW1bNV07XG4gICAgICAgIHJtWzZdID0gbW1bOV07XG4gICAgICAgIHJtWzddID0gbW1bMTNdO1xuICAgICAgICBybVs4XSA9IG1tWzJdO1xuICAgICAgICBybVs5XSA9IG1tWzZdO1xuICAgICAgICBybVsxMF0gPSBtbVsxMF07XG4gICAgICAgIHJtWzExXSA9IG1tWzE0XTtcbiAgICAgICAgcm1bMTJdID0gbW1bM107XG4gICAgICAgIHJtWzEzXSA9IG1tWzddO1xuICAgICAgICBybVsxNF0gPSBtbVsxMV07XG4gICAgICAgIHJtWzE1XSA9IG1tWzE1XTtcbiAgICAgICAgLy8gaWRlbnRpdHktbmVzcyBkb2VzIG5vdCBjaGFuZ2Ugd2hlbiB0cmFuc3Bvc2luZ1xuICAgICAgICBfdXBkYXRlSWRlbnRpdHlTdGF0dXMocmVzdWx0LCBtYXRyaXguaXNJZGVudGl0eSwgbWF0cml4Ll9pc0lkZW50aXR5RGlydHkpO1xuICAgIH1cbiAgICBNYXRyaXgudHJhbnNwb3NlVG9SZWYgPSB0cmFuc3Bvc2VUb1JlZjtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIHJlZmxlY3Rpb24gbWF0cml4IGZyb20gYSBwbGFuZVxuICAgICAqIEBwYXJhbSBwbGFuZSAtIGRlZmluZXMgdGhlIHJlZmxlY3Rpb24gcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWZsZWN0aW9uKHBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IGNyZWF0ZSgpO1xuICAgICAgICByZWZsZWN0aW9uVG9SZWYocGxhbmUsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIE1hdHJpeC5yZWZsZWN0aW9uID0gcmVmbGVjdGlvbjtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIHJlZmxlY3Rpb24gbWF0cml4IGZyb20gYSBwbGFuZVxuICAgICAqIEBwYXJhbSBwbGFuZSAtIGRlZmluZXMgdGhlIHJlZmxlY3Rpb24gcGxhbmVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZmxlY3Rpb25Ub1JlZihfcGxhbmUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBwbGFuZSA9IFBsYW5lLm5vcm1hbGl6ZShfcGxhbmUpO1xuICAgICAgICBjb25zdCB4ID0gcGxhbmUubm9ybWFsLng7XG4gICAgICAgIGNvbnN0IHkgPSBwbGFuZS5ub3JtYWwueTtcbiAgICAgICAgY29uc3QgeiA9IHBsYW5lLm5vcm1hbC56O1xuICAgICAgICBjb25zdCB0ZW1wID0gLTIgKiB4O1xuICAgICAgICBjb25zdCB0ZW1wMiA9IC0yICogeTtcbiAgICAgICAgY29uc3QgdGVtcDMgPSAtMiAqIHo7XG4gICAgICAgIGZyb21WYWx1ZXNUb1JlZih0ZW1wICogeCArIDEsIHRlbXAyICogeCwgdGVtcDMgKiB4LCAwLjAsIHRlbXAgKiB5LCB0ZW1wMiAqIHkgKyAxLCB0ZW1wMyAqIHksIDAuMCwgdGVtcCAqIHosIHRlbXAyICogeiwgdGVtcDMgKiB6ICsgMSwgMC4wLCB0ZW1wICogcGxhbmUuZCwgdGVtcDIgKiBwbGFuZS5kLCB0ZW1wMyAqIHBsYW5lLmQsIDEuMCwgcmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LnJlZmxlY3Rpb25Ub1JlZiA9IHJlZmxlY3Rpb25Ub1JlZjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBtYXRyaXggYXMgYSByb3RhdGlvbiBtYXRyaXggY29tcG9zZWQgZnJvbSB0aGUgMyBsZWZ0IGhhbmRlZCBheGVzXG4gICAgICogQHBhcmFtIHhheGlzIC0gZGVmaW5lcyB0aGUgdmFsdWUgb2YgdGhlIDFzdCBheGlzXG4gICAgICogQHBhcmFtIHlheGlzIC0gZGVmaW5lcyB0aGUgdmFsdWUgb2YgdGhlIDJuZCBheGlzXG4gICAgICogQHBhcmFtIHpheGlzIC0gZGVmaW5lcyB0aGUgdmFsdWUgb2YgdGhlIDNyZCBheGlzXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tWFlaQXhlc1RvUmVmKHhheGlzLCB5YXhpcywgemF4aXMsIHJlc3VsdCkge1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoeGF4aXMueCwgeGF4aXMueSwgeGF4aXMueiwgMC4wLCB5YXhpcy54LCB5YXhpcy55LCB5YXhpcy56LCAwLjAsIHpheGlzLngsIHpheGlzLnksIHpheGlzLnosIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICBNYXRyaXguZnJvbVhZWkF4ZXNUb1JlZiA9IGZyb21YWVpBeGVzVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiBhbmQgc3RvcmVzIGl0IGluIGEgdGFyZ2V0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBxdWF0IC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21RdWF0ZXJuaW9uVG9SZWYocXVhdCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHh4ID0gcXVhdC54ICogcXVhdC54O1xuICAgICAgICBjb25zdCB5eSA9IHF1YXQueSAqIHF1YXQueTtcbiAgICAgICAgY29uc3QgenogPSBxdWF0LnogKiBxdWF0Lno7XG4gICAgICAgIGNvbnN0IHh5ID0gcXVhdC54ICogcXVhdC55O1xuICAgICAgICBjb25zdCB6dyA9IHF1YXQueiAqIHF1YXQudztcbiAgICAgICAgY29uc3QgenggPSBxdWF0LnogKiBxdWF0Lng7XG4gICAgICAgIGNvbnN0IHl3ID0gcXVhdC55ICogcXVhdC53O1xuICAgICAgICBjb25zdCB5eiA9IHF1YXQueSAqIHF1YXQuejtcbiAgICAgICAgY29uc3QgeHcgPSBxdWF0LnggKiBxdWF0Lnc7XG4gICAgICAgIHJlc3VsdC5fbVswXSA9IDEuMCAtIDIuMCAqICh5eSArIHp6KTtcbiAgICAgICAgcmVzdWx0Ll9tWzFdID0gMi4wICogKHh5ICsgencpO1xuICAgICAgICByZXN1bHQuX21bMl0gPSAyLjAgKiAoenggLSB5dyk7XG4gICAgICAgIHJlc3VsdC5fbVszXSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzRdID0gMi4wICogKHh5IC0gencpO1xuICAgICAgICByZXN1bHQuX21bNV0gPSAxLjAgLSAyLjAgKiAoenogKyB4eCk7XG4gICAgICAgIHJlc3VsdC5fbVs2XSA9IDIuMCAqICh5eiArIHh3KTtcbiAgICAgICAgcmVzdWx0Ll9tWzddID0gMC4wO1xuICAgICAgICByZXN1bHQuX21bOF0gPSAyLjAgKiAoenggKyB5dyk7XG4gICAgICAgIHJlc3VsdC5fbVs5XSA9IDIuMCAqICh5eiAtIHh3KTtcbiAgICAgICAgcmVzdWx0Ll9tWzEwXSA9IDEuMCAtIDIuMCAqICh5eSArIHh4KTtcbiAgICAgICAgcmVzdWx0Ll9tWzExXSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzEyXSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzEzXSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzE0XSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzE1XSA9IDEuMDtcbiAgICAgICAgX21hcmtBc1VwZGF0ZWQocmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LmZyb21RdWF0ZXJuaW9uVG9SZWYgPSBmcm9tUXVhdGVybmlvblRvUmVmO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBmdW5jdGlvbiBfbWFya0FzVXBkYXRlZChzZWxmKSB7XG4gICAgICAgIHNlbGYudXBkYXRlRmxhZyA9IF91cGRhdGVGbGFnU2VlZCsrO1xuICAgICAgICBzZWxmLmlzSWRlbnRpdHkgPSBmYWxzZTtcbiAgICAgICAgc2VsZi5pc0lkZW50aXR5M3gyID0gZmFsc2U7XG4gICAgICAgIHNlbGYuX2lzSWRlbnRpdHlEaXJ0eSA9IHRydWU7XG4gICAgICAgIHNlbGYuX2lzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIC8vIFByb3BlcnRpZXNcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCBtYXRyaXggaXMgaWRlbnRpdHlcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlzIHRoZSBtYXRyaXggaXMgdGhlIGlkZW50aXR5IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSWRlbnRpdHlVcGRhdGUoc2VsZikge1xuICAgICAgICBpZiAoc2VsZi5faXNJZGVudGl0eURpcnR5KSB7XG4gICAgICAgICAgICBzZWxmLl9pc0lkZW50aXR5RGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBzZWxmLl9tO1xuICAgICAgICAgICAgc2VsZi5pc0lkZW50aXR5ID1cbiAgICAgICAgICAgICAgICBtWzBdID09PSAxLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxXSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMl0gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzNdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVs0XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bNV0gPT09IDEuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzZdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVs3XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bOF0gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzldID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxMF0gPT09IDEuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzExXSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMTJdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxM10gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzE0XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMTVdID09PSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGYuaXNJZGVudGl0eTtcbiAgICB9XG4gICAgTWF0cml4LmlzSWRlbnRpdHlVcGRhdGUgPSBpc0lkZW50aXR5VXBkYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IG1hdHJpeCBpcyBpZGVudGl0eSBhcyBhIHRleHR1cmUgbWF0cml4ICgzeDIgc3RvcmUgaW4gNHg0KVxuICAgICAqIEByZXR1cm5zIHRydWUgaXMgdGhlIG1hdHJpeCBpcyB0aGUgaWRlbnRpdHkgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJZGVudGl0eUFzM3gyVXBkYXRlKHNlbGYpIHtcbiAgICAgICAgaWYgKHNlbGYuX2lzSWRlbnRpdHkzeDJEaXJ0eSkge1xuICAgICAgICAgICAgc2VsZi5faXNJZGVudGl0eTN4MkRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc2VsZi5fbVswXSAhPT0gMS4wIHx8IHNlbGYuX21bNV0gIT09IDEuMCB8fCBzZWxmLl9tWzE1XSAhPT0gMS4wKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5pc0lkZW50aXR5M3gyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxmLl9tWzFdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzJdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzNdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzRdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzZdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzddICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzhdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzldICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzEwXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICAgICAgc2VsZi5fbVsxMV0gIT09IDAuMCB8fFxuICAgICAgICAgICAgICAgIHNlbGYuX21bMTJdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICBzZWxmLl9tWzEzXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICAgICAgc2VsZi5fbVsxNF0gIT09IDAuMCkge1xuICAgICAgICAgICAgICAgIHNlbGYuaXNJZGVudGl0eTN4MiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5pc0lkZW50aXR5M3gyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZi5pc0lkZW50aXR5M3gyO1xuICAgIH1cbiAgICBNYXRyaXguaXNJZGVudGl0eUFzM3gyVXBkYXRlID0gaXNJZGVudGl0eUFzM3gyVXBkYXRlO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRldGVybWluYW50IG9mIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgbWF0cml4IGRldGVybWluYW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoc2VsZikge1xuICAgICAgICBpZiAoc2VsZi5pc0lkZW50aXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtID0gc2VsZi5fbTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTAwID0gbVswXSwgbTAxID0gbVsxXSwgbTAyID0gbVsyXSwgbTAzID0gbVszXTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTEwID0gbVs0XSwgbTExID0gbVs1XSwgbTEyID0gbVs2XSwgbTEzID0gbVs3XTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTIwID0gbVs4XSwgbTIxID0gbVs5XSwgbTIyID0gbVsxMF0sIG0yMyA9IG1bMTFdO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICBjb25zdCBtMzAgPSBtWzEyXSwgbTMxID0gbVsxM10sIG0zMiA9IG1bMTRdLCBtMzMgPSBtWzE1XTtcbiAgICAgICAgLypcbiAgICAgICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGFwbGFjZV9leHBhbnNpb25cbiAgICAgICAgLy8gdG8gY29tcHV0ZSB0aGUgZGV0ZXJybWluYW50IG9mIGEgNHg0IE1hdHJpeCB3ZSBjb21wdXRlIHRoZSBjb2ZhY3RvcnMgb2YgYW55IHJvdyBvciBjb2x1bW4sXG4gICAgICAgIC8vIHRoZW4gd2UgbXVsdGlwbHkgZWFjaCBDb2ZhY3RvciBieSBpdHMgY29ycmVzcG9uZGluZyBtYXRyaXggdmFsdWUgYW5kIHN1bSB0aGVtIGFsbCB0byBnZXQgdGhlIGRldGVybWluYW50XG4gICAgICAgIC8vIENvZmFjdG9yKGksIGopID0gc2lnbihpLGopICogZGV0KE1pbm9yKGksIGopKVxuICAgICAgICAvLyB3aGVyZVxuICAgICAgICAvLyAgLSBzaWduKGksaikgPSAoaStqKSAlIDIgPT09IDAgPyAxIDogLTFcbiAgICAgICAgLy8gIC0gTWlub3IoaSwgaikgaXMgdGhlIDN4MyBtYXRyaXggd2UgZ2V0IGJ5IHJlbW92aW5nIHJvdyBpIGFuZCBjb2x1bW4gaiBmcm9tIGN1cnJlbnQgTWF0cml4XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhlcmUgd2UgZG8gdGhhdCBmb3IgdGhlIDFzdCByb3cuXG4gICAgICAgICovXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWVcbiAgICAgICAgY29uc3QgZGV0XzIyXzMzID0gbTIyICogbTMzIC0gbTMyICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjFfMzMgPSBtMjEgKiBtMzMgLSBtMzEgKiBtMjM7XG4gICAgICAgIGNvbnN0IGRldF8yMV8zMiA9IG0yMSAqIG0zMiAtIG0zMSAqIG0yMjtcbiAgICAgICAgY29uc3QgZGV0XzIwXzMzID0gbTIwICogbTMzIC0gbTMwICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjBfMzIgPSBtMjAgKiBtMzIgLSBtMjIgKiBtMzA7XG4gICAgICAgIGNvbnN0IGRldF8yMF8zMSA9IG0yMCAqIG0zMSAtIG0zMCAqIG0yMTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAwID0gKyhtMTEgKiBkZXRfMjJfMzMgLSBtMTIgKiBkZXRfMjFfMzMgKyBtMTMgKiBkZXRfMjFfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMDEgPSAtKG0xMCAqIGRldF8yMl8zMyAtIG0xMiAqIGRldF8yMF8zMyArIG0xMyAqIGRldF8yMF8zMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMiA9ICsobTEwICogZGV0XzIxXzMzIC0gbTExICogZGV0XzIwXzMzICsgbTEzICogZGV0XzIwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAzID0gLShtMTAgKiBkZXRfMjFfMzIgLSBtMTEgKiBkZXRfMjBfMzIgKyBtMTIgKiBkZXRfMjBfMzEpO1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOnZhcmlhYmxlLW5hbWVcbiAgICAgICAgcmV0dXJuIG0wMCAqIGNvZmFjdF8wMCArIG0wMSAqIGNvZmFjdF8wMSArIG0wMiAqIGNvZmFjdF8wMiArIG0wMyAqIGNvZmFjdF8wMztcbiAgICB9XG4gICAgTWF0cml4LmRldGVybWluYW50ID0gZGV0ZXJtaW5hbnQ7XG4gICAgLy8gTWV0aG9kc1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hdHJpeCBhcyBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbWF0cml4IHVuZGVybHlpbmcgYXJyYXlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHNlbGYpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX207XG4gICAgfVxuICAgIE1hdHJpeC50b0FycmF5ID0gdG9BcnJheTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXRyaXggYXMgYSBGbG9hdEFycmF5XG4gICAgICogQHJldHVybnMgdGhlIG1hdHJpeCB1bmRlcmx5aW5nIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzQXJyYXkoc2VsZikge1xuICAgICAgICByZXR1cm4gc2VsZi5fbTtcbiAgICB9XG4gICAgTWF0cml4LmFzQXJyYXkgPSBhc0FycmF5O1xuICAgIC8qKlxuICAgICAqIFNldHMgYWxsIHRoZSBtYXRyaXggZWxlbWVudHMgdG8gemVyb1xuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc2V0KHNlbGYpIHtcbiAgICAgICAgZnJvbVZhbHVlc1RvUmVmKDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgc2VsZik7XG4gICAgICAgIF91cGRhdGVJZGVudGl0eVN0YXR1cyhzZWxmLCBmYWxzZSk7XG4gICAgfVxuICAgIE1hdHJpeC5yZXNldCA9IHJlc2V0O1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGN1cnJlbnQgbWF0cml4IHdpdGggYSBzZWNvbmQgb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIGFkZFxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyB0aGUgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgbWF0cml4IGFuZCB0aGUgZ2l2ZW4gb25lXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKHNlbGYsIG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBhZGRUb1JlZihzZWxmLCBvdGhlciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LmFkZCA9IGFkZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBtYXRyaXggXCJyZXN1bHRcIiB0byB0aGUgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgbWF0cml4IGFuZCB0aGUgZ2l2ZW4gb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIGFkZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkVG9SZWYoc2VsZiwgb3RoZXIsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSBzZWxmLl9tW2luZGV4XSArIG90aGVyLl9tW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBfbWFya0FzVXBkYXRlZChyZXN1bHQpO1xuICAgIH1cbiAgICBNYXRyaXguYWRkVG9SZWYgPSBhZGRUb1JlZjtcbiAgICAvKipcbiAgICAgKiBBZGRzIGluIHBsYWNlIHRoZSBnaXZlbiBtYXRyaXggdG8gdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFRvU2VsZihzZWxmLCBvdGhlcikge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHNlbGYuX21baW5kZXhdICs9IG90aGVyLl9tW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBfbWFya0FzVXBkYXRlZChzZWxmKTtcbiAgICB9XG4gICAgTWF0cml4LmFkZFRvU2VsZiA9IGFkZFRvU2VsZjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG1hdHJpeCBhcyB0aGUgaW52ZXJ0IG9mIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludmVydChzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIGludmVydFRvUmVmKHNvdXJjZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LmludmVydCA9IGludmVydDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBtYXRyaXggdG8gdGhlIGN1cnJlbnQgaW52ZXJ0ZWQgTWF0cml4XG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52ZXJ0VG9SZWYoc291cmNlLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5pc0lkZW50aXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb3B5KHNvdXJjZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGUgaW52ZXJzZSBvZiBhIE1hdHJpeCBpcyB0aGUgdHJhbnNwb3NlIG9mIGNvZmFjdG9yIG1hdHJpeCBkaXZpZGVkIGJ5IHRoZSBkZXRlcm1pbmFudFxuICAgICAgICBjb25zdCBtID0gc291cmNlLl9tO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0wMCA9IG1bMF0sIG0wMSA9IG1bMV0sIG0wMiA9IG1bMl0sIG0wMyA9IG1bM107XG4gICAgICAgIGNvbnN0IG0xMCA9IG1bNF0sIG0xMSA9IG1bNV0sIG0xMiA9IG1bNl0sIG0xMyA9IG1bN107XG4gICAgICAgIGNvbnN0IG0yMCA9IG1bOF0sIG0yMSA9IG1bOV0sIG0yMiA9IG1bMTBdLCBtMjMgPSBtWzExXTtcbiAgICAgICAgY29uc3QgbTMwID0gbVsxMl0sIG0zMSA9IG1bMTNdLCBtMzIgPSBtWzE0XSwgbTMzID0gbVsxNV07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lXG4gICAgICAgIGNvbnN0IGRldF8yMl8zMyA9IG0yMiAqIG0zMyAtIG0zMiAqIG0yMztcbiAgICAgICAgY29uc3QgZGV0XzIxXzMzID0gbTIxICogbTMzIC0gbTMxICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjFfMzIgPSBtMjEgKiBtMzIgLSBtMzEgKiBtMjI7XG4gICAgICAgIGNvbnN0IGRldF8yMF8zMyA9IG0yMCAqIG0zMyAtIG0zMCAqIG0yMztcbiAgICAgICAgY29uc3QgZGV0XzIwXzMyID0gbTIwICogbTMyIC0gbTIyICogbTMwO1xuICAgICAgICBjb25zdCBkZXRfMjBfMzEgPSBtMjAgKiBtMzEgLSBtMzAgKiBtMjE7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMCA9ICsobTExICogZGV0XzIyXzMzIC0gbTEyICogZGV0XzIxXzMzICsgbTEzICogZGV0XzIxXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAxID0gLShtMTAgKiBkZXRfMjJfMzMgLSBtMTIgKiBkZXRfMjBfMzMgKyBtMTMgKiBkZXRfMjBfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMDIgPSArKG0xMCAqIGRldF8yMV8zMyAtIG0xMSAqIGRldF8yMF8zMyArIG0xMyAqIGRldF8yMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMyA9IC0obTEwICogZGV0XzIxXzMyIC0gbTExICogZGV0XzIwXzMyICsgbTEyICogZGV0XzIwXzMxKTtcbiAgICAgICAgY29uc3QgZGV0ID0gbTAwICogY29mYWN0XzAwICsgbTAxICogY29mYWN0XzAxICsgbTAyICogY29mYWN0XzAyICsgbTAzICogY29mYWN0XzAzO1xuICAgICAgICBpZiAoZGV0ID09PSAwKSB7XG4gICAgICAgICAgICBjb3B5KHNvdXJjZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXRJbnYgPSAxIC8gZGV0O1xuICAgICAgICBjb25zdCBkZXRfMTJfMzMgPSBtMTIgKiBtMzMgLSBtMzIgKiBtMTM7XG4gICAgICAgIGNvbnN0IGRldF8xMV8zMyA9IG0xMSAqIG0zMyAtIG0zMSAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzExXzMyID0gbTExICogbTMyIC0gbTMxICogbTEyO1xuICAgICAgICBjb25zdCBkZXRfMTBfMzMgPSBtMTAgKiBtMzMgLSBtMzAgKiBtMTM7XG4gICAgICAgIGNvbnN0IGRldF8xMF8zMiA9IG0xMCAqIG0zMiAtIG0zMCAqIG0xMjtcbiAgICAgICAgY29uc3QgZGV0XzEwXzMxID0gbTEwICogbTMxIC0gbTMwICogbTExO1xuICAgICAgICBjb25zdCBkZXRfMTJfMjMgPSBtMTIgKiBtMjMgLSBtMjIgKiBtMTM7XG4gICAgICAgIGNvbnN0IGRldF8xMV8yMyA9IG0xMSAqIG0yMyAtIG0yMSAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzExXzIyID0gbTExICogbTIyIC0gbTIxICogbTEyO1xuICAgICAgICBjb25zdCBkZXRfMTBfMjMgPSBtMTAgKiBtMjMgLSBtMjAgKiBtMTM7XG4gICAgICAgIGNvbnN0IGRldF8xMF8yMiA9IG0xMCAqIG0yMiAtIG0yMCAqIG0xMjtcbiAgICAgICAgY29uc3QgZGV0XzEwXzIxID0gbTEwICogbTIxIC0gbTIwICogbTExO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMTAgPSAtKG0wMSAqIGRldF8yMl8zMyAtIG0wMiAqIGRldF8yMV8zMyArIG0wMyAqIGRldF8yMV8zMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8xMSA9ICsobTAwICogZGV0XzIyXzMzIC0gbTAyICogZGV0XzIwXzMzICsgbTAzICogZGV0XzIwXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzEyID0gLShtMDAgKiBkZXRfMjFfMzMgLSBtMDEgKiBkZXRfMjBfMzMgKyBtMDMgKiBkZXRfMjBfMzEpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMTMgPSArKG0wMCAqIGRldF8yMV8zMiAtIG0wMSAqIGRldF8yMF8zMiArIG0wMiAqIGRldF8yMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8yMCA9ICsobTAxICogZGV0XzEyXzMzIC0gbTAyICogZGV0XzExXzMzICsgbTAzICogZGV0XzExXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzIxID0gLShtMDAgKiBkZXRfMTJfMzMgLSBtMDIgKiBkZXRfMTBfMzMgKyBtMDMgKiBkZXRfMTBfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMjIgPSArKG0wMCAqIGRldF8xMV8zMyAtIG0wMSAqIGRldF8xMF8zMyArIG0wMyAqIGRldF8xMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8yMyA9IC0obTAwICogZGV0XzExXzMyIC0gbTAxICogZGV0XzEwXzMyICsgbTAyICogZGV0XzEwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzMwID0gLShtMDEgKiBkZXRfMTJfMjMgLSBtMDIgKiBkZXRfMTFfMjMgKyBtMDMgKiBkZXRfMTFfMjIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMzEgPSArKG0wMCAqIGRldF8xMl8yMyAtIG0wMiAqIGRldF8xMF8yMyArIG0wMyAqIGRldF8xMF8yMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8zMiA9IC0obTAwICogZGV0XzExXzIzIC0gbTAxICogZGV0XzEwXzIzICsgbTAzICogZGV0XzEwXzIxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzMzID0gKyhtMDAgKiBkZXRfMTFfMjIgLSBtMDEgKiBkZXRfMTBfMjIgKyBtMDIgKiBkZXRfMTBfMjEpO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYoY29mYWN0XzAwICogZGV0SW52LCBjb2ZhY3RfMTAgKiBkZXRJbnYsIGNvZmFjdF8yMCAqIGRldEludiwgY29mYWN0XzMwICogZGV0SW52LCBjb2ZhY3RfMDEgKiBkZXRJbnYsIGNvZmFjdF8xMSAqIGRldEludiwgY29mYWN0XzIxICogZGV0SW52LCBjb2ZhY3RfMzEgKiBkZXRJbnYsIGNvZmFjdF8wMiAqIGRldEludiwgY29mYWN0XzEyICogZGV0SW52LCBjb2ZhY3RfMjIgKiBkZXRJbnYsIGNvZmFjdF8zMiAqIGRldEludiwgY29mYWN0XzAzICogZGV0SW52LCBjb2ZhY3RfMTMgKiBkZXRJbnYsIGNvZmFjdF8yMyAqIGRldEludiwgY29mYWN0XzMzICogZGV0SW52LCByZXN1bHQpO1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOnZhcmlhYmxlLW5hbWVcbiAgICB9XG4gICAgTWF0cml4LmludmVydFRvUmVmID0gaW52ZXJ0VG9SZWY7XG4gICAgLyoqXG4gICAgICogYWRkIGEgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgY3VycmVudCBNYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgbWF0cml4LiBiZXR3ZWVuIDAgYW5kIDE1LlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBiZSBhZGRlZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQXRJbmRleChzZWxmLCBpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgc2VsZi5fbVtpbmRleF0gKz0gdmFsdWU7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHNlbGYpO1xuICAgIH1cbiAgICBNYXRyaXguYWRkQXRJbmRleCA9IGFkZEF0SW5kZXg7XG4gICAgLyoqXG4gICAgICogbXV0aXBseSB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIGluIHRoZSBjdXJyZW50IE1hdHJpeCBieSBhIHZhbHVlXG4gICAgICogQHBhcmFtIGluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSB2YWx1ZSB3aXRoaW4gdGhlIG1hdHJpeC4gYmV0d2VlbiAwIGFuZCAxNS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gYmUgYWRkZWRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGx5QXRJbmRleChzZWxmLCBpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgc2VsZi5fbVtpbmRleF0gKj0gdmFsdWU7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHNlbGYpO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgTWF0cml4Lm11bHRpcGx5QXRJbmRleCA9IG11bHRpcGx5QXRJbmRleDtcbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgKHVzaW5nIDMgZmxvYXRzKSBpbiB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIDFzdCBjb21wb25lbnQgb2YgdGhlIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSAybmQgY29tcG9uZW50IG9mIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgM3JkIGNvbXBvbmVudCBvZiB0aGUgdHJhbnNsYXRpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0aW9uRnJvbUZsb2F0cyhzZWxmLCB4LCB5LCB6KSB7XG4gICAgICAgIHNlbGYuX21bMTJdID0geDtcbiAgICAgICAgc2VsZi5fbVsxM10gPSB5O1xuICAgICAgICBzZWxmLl9tWzE0XSA9IHo7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHNlbGYpO1xuICAgIH1cbiAgICBNYXRyaXguc2V0VHJhbnNsYXRpb25Gcm9tRmxvYXRzID0gc2V0VHJhbnNsYXRpb25Gcm9tRmxvYXRzO1xuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBpbiB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdmVjdG9yMyAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIHRvIGluc2VydFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRpb24oc2VsZiwgdmVjdG9yMykge1xuICAgICAgICBzZXRUcmFuc2xhdGlvbkZyb21GbG9hdHMoc2VsZiwgdmVjdG9yMy54LCB2ZWN0b3IzLnksIHZlY3RvcjMueik7XG4gICAgfVxuICAgIE1hdHJpeC5zZXRUcmFuc2xhdGlvbiA9IHNldFRyYW5zbGF0aW9uO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRyYW5zbGF0aW9uIHZhbHVlIG9mIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIGV4dHJhY3RlZCB0cmFuc2xhdGlvbiBmcm9tIHRoZSBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihzZWxmKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZShzZWxmLl9tWzEyXSwgc2VsZi5fbVsxM10sIHNlbGYuX21bMTRdKTtcbiAgICB9XG4gICAgTWF0cml4LmdldFRyYW5zbGF0aW9uID0gZ2V0VHJhbnNsYXRpb247XG4gICAgLyoqXG4gICAgICogRmlsbCBhIFZlY3RvcjMgd2l0aCB0aGUgZXh0cmFjdGVkIHRyYW5zbGF0aW9uIGZyb20gdGhlIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uVG9SZWYoc2VsZiwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gc2VsZi5fbVsxMl07XG4gICAgICAgIHJlc3VsdC55ID0gc2VsZi5fbVsxM107XG4gICAgICAgIHJlc3VsdC56ID0gc2VsZi5fbVsxNF07XG4gICAgfVxuICAgIE1hdHJpeC5nZXRUcmFuc2xhdGlvblRvUmVmID0gZ2V0VHJhbnNsYXRpb25Ub1JlZjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcm90YXRpb24gYW5kIHNjYWxpbmcgcGFydCBmcm9tIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVSb3RhdGlvbkFuZFNjYWxpbmcoc2VsZikge1xuICAgICAgICBjb25zdCBtID0gc2VsZi5fbTtcbiAgICAgICAgZnJvbVZhbHVlc1RvUmVmKDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIG1bMTJdLCBtWzEzXSwgbVsxNF0sIG1bMTVdLCBzZWxmKTtcbiAgICAgICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKHNlbGYsIG1bMTJdID09PSAwICYmIG1bMTNdID09PSAwICYmIG1bMTRdID09PSAwICYmIG1bMTVdID09PSAxKTtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIE1hdHJpeC5yZW1vdmVSb3RhdGlvbkFuZFNjYWxpbmcgPSByZW1vdmVSb3RhdGlvbkFuZFNjYWxpbmc7XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG1hdHJpY2VzXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXggc2V0IHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBNYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseShzZWxmLCBvdGhlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoKTtcbiAgICAgICAgbXVsdGlwbHlUb1JlZihzZWxmLCBvdGhlciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4Lm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgLyoqXG4gICAgICogQ29weSB0aGUgY3VycmVudCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgc291cmNlIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weShmcm9tLCBkZXN0KSB7XG4gICAgICAgIGNvcHlUb0FycmF5KGZyb20sIGRlc3QuX20pO1xuICAgICAgICBfdXBkYXRlSWRlbnRpdHlTdGF0dXMoZGVzdCwgZnJvbS5pc0lkZW50aXR5LCBmcm9tLl9pc0lkZW50aXR5RGlydHksIGZyb20uaXNJZGVudGl0eTN4MiwgZnJvbS5faXNJZGVudGl0eTN4MkRpcnR5KTtcbiAgICB9XG4gICAgTWF0cml4LmNvcHkgPSBjb3B5O1xuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyB0aGUgZ2l2ZW4gYXJyYXkgZnJvbSB0aGUgc3RhcnRpbmcgaW5kZXggd2l0aCB0aGUgY3VycmVudCBtYXRyaXggdmFsdWVzXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgdGFyZ2V0IGFycmF5IHdoZXJlIHRvIHN0YXJ0IHN0b3JpbmcgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVRvQXJyYXkoc2VsZiwgYXJyYXlEZXN0LCBvZmZzZXREZXN0ID0gMCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGFycmF5RGVzdFtvZmZzZXREZXN0ICsgaW5kZXhdID0gc2VsZi5fbVtpbmRleF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgTWF0cml4LmNvcHlUb0FycmF5ID0gY29weVRvQXJyYXk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gbWF0cml4IFwicmVzdWx0XCIgd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IE1hdHJpeCBhbmQgdGhlIGdpdmVuIG9uZVxuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIG1hdHJpeCB3aGVyZSB0byBzdG9yZSB0aGUgbXVsdGlwbGljYXRpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseVRvUmVmKHNlbGYsIG90aGVyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHNlbGYuaXNJZGVudGl0eSkge1xuICAgICAgICAgICAgY29weShvdGhlciwgcmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIuaXNJZGVudGl0eSkge1xuICAgICAgICAgICAgY29weShzZWxmLCByZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5VG9BcnJheShzZWxmLCBvdGhlciwgcmVzdWx0Ll9tLCAwKTtcbiAgICAgICAgX21hcmtBc1VwZGF0ZWQocmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4Lm11bHRpcGx5VG9SZWYgPSBtdWx0aXBseVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIEZsb2F0QXJyYXkgXCJyZXN1bHRcIiBmcm9tIHRoZSBnaXZlbiBpbmRleCBcIm9mZnNldFwiIHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIG9mIHRoZSBjdXJyZW50IG1hdHJpeCBhbmQgdGhlIGdpdmVuIG9uZVxuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIGFycmF5IHdoZXJlIHRvIHN0b3JlIHRoZSBtdWx0aXBsaWNhdGlvblxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHRhcmdldCBhcnJheSB3aGVyZSB0byBzdGFydCBzdG9yaW5nIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGx5VG9BcnJheShzZWxmLCBvdGhlciwgcmVzdWx0LCBvZmZzZXQpIHtcbiAgICAgICAgY29uc3QgbSA9IHNlbGYuX207XG4gICAgICAgIGNvbnN0IG90aGVyTSA9IG90aGVyLl9tO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IHRtMCA9IG1bMF0sIHRtMSA9IG1bMV0sIHRtMiA9IG1bMl0sIHRtMyA9IG1bM107XG4gICAgICAgIGNvbnN0IHRtNCA9IG1bNF0sIHRtNSA9IG1bNV0sIHRtNiA9IG1bNl0sIHRtNyA9IG1bN107XG4gICAgICAgIGNvbnN0IHRtOCA9IG1bOF0sIHRtOSA9IG1bOV0sIHRtMTAgPSBtWzEwXSwgdG0xMSA9IG1bMTFdO1xuICAgICAgICBjb25zdCB0bTEyID0gbVsxMl0sIHRtMTMgPSBtWzEzXSwgdG0xNCA9IG1bMTRdLCB0bTE1ID0gbVsxNV07XG4gICAgICAgIGNvbnN0IG9tMCA9IG90aGVyTVswXSwgb20xID0gb3RoZXJNWzFdLCBvbTIgPSBvdGhlck1bMl0sIG9tMyA9IG90aGVyTVszXTtcbiAgICAgICAgY29uc3Qgb200ID0gb3RoZXJNWzRdLCBvbTUgPSBvdGhlck1bNV0sIG9tNiA9IG90aGVyTVs2XSwgb203ID0gb3RoZXJNWzddO1xuICAgICAgICBjb25zdCBvbTggPSBvdGhlck1bOF0sIG9tOSA9IG90aGVyTVs5XSwgb20xMCA9IG90aGVyTVsxMF0sIG9tMTEgPSBvdGhlck1bMTFdO1xuICAgICAgICBjb25zdCBvbTEyID0gb3RoZXJNWzEyXSwgb20xMyA9IG90aGVyTVsxM10sIG9tMTQgPSBvdGhlck1bMTRdLCBvbTE1ID0gb3RoZXJNWzE1XTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIHJlc3VsdFtvZmZzZXRdID0gdG0wICogb20wICsgdG0xICogb200ICsgdG0yICogb204ICsgdG0zICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDFdID0gdG0wICogb20xICsgdG0xICogb201ICsgdG0yICogb205ICsgdG0zICogb20xMztcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDJdID0gdG0wICogb20yICsgdG0xICogb202ICsgdG0yICogb20xMCArIHRtMyAqIG9tMTQ7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyAzXSA9IHRtMCAqIG9tMyArIHRtMSAqIG9tNyArIHRtMiAqIG9tMTEgKyB0bTMgKiBvbTE1O1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNF0gPSB0bTQgKiBvbTAgKyB0bTUgKiBvbTQgKyB0bTYgKiBvbTggKyB0bTcgKiBvbTEyO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNV0gPSB0bTQgKiBvbTEgKyB0bTUgKiBvbTUgKyB0bTYgKiBvbTkgKyB0bTcgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNl0gPSB0bTQgKiBvbTIgKyB0bTUgKiBvbTYgKyB0bTYgKiBvbTEwICsgdG03ICogb20xNDtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDddID0gdG00ICogb20zICsgdG01ICogb203ICsgdG02ICogb20xMSArIHRtNyAqIG9tMTU7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyA4XSA9IHRtOCAqIG9tMCArIHRtOSAqIG9tNCArIHRtMTAgKiBvbTggKyB0bTExICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDldID0gdG04ICogb20xICsgdG05ICogb201ICsgdG0xMCAqIG9tOSArIHRtMTEgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTBdID0gdG04ICogb20yICsgdG05ICogb202ICsgdG0xMCAqIG9tMTAgKyB0bTExICogb20xNDtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDExXSA9IHRtOCAqIG9tMyArIHRtOSAqIG9tNyArIHRtMTAgKiBvbTExICsgdG0xMSAqIG9tMTU7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyAxMl0gPSB0bTEyICogb20wICsgdG0xMyAqIG9tNCArIHRtMTQgKiBvbTggKyB0bTE1ICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDEzXSA9IHRtMTIgKiBvbTEgKyB0bTEzICogb201ICsgdG0xNCAqIG9tOSArIHRtMTUgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTRdID0gdG0xMiAqIG9tMiArIHRtMTMgKiBvbTYgKyB0bTE0ICogb20xMCArIHRtMTUgKiBvbTE0O1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTVdID0gdG0xMiAqIG9tMyArIHRtMTMgKiBvbTcgKyB0bTE0ICogb20xMSArIHRtMTUgKiBvbTE1O1xuICAgIH1cbiAgICBNYXRyaXgubXVsdGlwbHlUb0FycmF5ID0gbXVsdGlwbHlUb0FycmF5O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGVxdWFsaXR5IGJldHdlZW4gc2VsZiBtYXRyaXggYW5kIGEgc2Vjb25kIG9uZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIHNlY29uZCBtYXRyaXggdG8gY29tcGFyZVxuICAgICAqIEByZXR1cm5zIHRydWUgaXMgdGhlIGN1cnJlbnQgbWF0cml4IGFuZCB0aGUgZ2l2ZW4gb25lIHZhbHVlcyBhcmUgc3RyaWN0bHkgZXF1YWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbHMoc2VsZiwgdmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3RoZXIgPSB2YWx1ZTtcbiAgICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmlzSWRlbnRpdHkgfHwgb3RoZXIuaXNJZGVudGl0eSkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLl9pc0lkZW50aXR5RGlydHkgJiYgIW90aGVyLl9pc0lkZW50aXR5RGlydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pc0lkZW50aXR5ICYmIG90aGVyLmlzSWRlbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHNlbGYuX207XG4gICAgICAgIGNvbnN0IG9tID0gb3RoZXIuX207XG4gICAgICAgIHJldHVybiAobVswXSA9PT0gb21bMF0gJiZcbiAgICAgICAgICAgIG1bMV0gPT09IG9tWzFdICYmXG4gICAgICAgICAgICBtWzJdID09PSBvbVsyXSAmJlxuICAgICAgICAgICAgbVszXSA9PT0gb21bM10gJiZcbiAgICAgICAgICAgIG1bNF0gPT09IG9tWzRdICYmXG4gICAgICAgICAgICBtWzVdID09PSBvbVs1XSAmJlxuICAgICAgICAgICAgbVs2XSA9PT0gb21bNl0gJiZcbiAgICAgICAgICAgIG1bN10gPT09IG9tWzddICYmXG4gICAgICAgICAgICBtWzhdID09PSBvbVs4XSAmJlxuICAgICAgICAgICAgbVs5XSA9PT0gb21bOV0gJiZcbiAgICAgICAgICAgIG1bMTBdID09PSBvbVsxMF0gJiZcbiAgICAgICAgICAgIG1bMTFdID09PSBvbVsxMV0gJiZcbiAgICAgICAgICAgIG1bMTJdID09PSBvbVsxMl0gJiZcbiAgICAgICAgICAgIG1bMTNdID09PSBvbVsxM10gJiZcbiAgICAgICAgICAgIG1bMTRdID09PSBvbVsxNF0gJiZcbiAgICAgICAgICAgIG1bMTVdID09PSBvbVsxNV0pO1xuICAgIH1cbiAgICBNYXRyaXguZXF1YWxzID0gZXF1YWxzO1xuICAgIC8qKlxuICAgICAqIENsb25lIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBmcm9tIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHNlbGYpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKCk7XG4gICAgICAgIGNvcHkoc2VsZiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LmNsb25lID0gY2xvbmU7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCBjb2RlIG9mIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSBoYXNoIGNvZGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIYXNoQ29kZShzZWxmKSB7XG4gICAgICAgIGxldCBoYXNoID0gc2VsZi5fbVswXSB8fCAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAoc2VsZi5fbVtpXSB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgTWF0cml4LmdldEhhc2hDb2RlID0gZ2V0SGFzaENvZGU7XG4gICAgLyoqXG4gICAgICogRGVjb21wb3NlcyB0aGUgY3VycmVudCBNYXRyaXggaW50byBhIHRyYW5zbGF0aW9uLCByb3RhdGlvbiBhbmQgc2NhbGluZyBjb21wb25lbnRzXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgdmVjdG9yMyBnaXZlbiBhcyBhIHJlZmVyZW5jZSB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gcm90YXRpb24gLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBxdWF0ZXJuaW9uIGdpdmVuIGFzIGEgcmVmZXJlbmNlIHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvcjMgZ2l2ZW4gYXMgYSByZWZlcmVuY2UgdG8gdXBkYXRlXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWNvbXBvc2Uoc2VsZiwgc2NhbGUsIHJvdGF0aW9uLCB0cmFuc2xhdGlvbikge1xuICAgICAgICBpZiAoc2VsZi5pc0lkZW50aXR5KSB7XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi54ID0gMDtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi55ID0gMDtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi56ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY2FsZSkge1xuICAgICAgICAgICAgICAgIHNjYWxlLnggPSAxO1xuICAgICAgICAgICAgICAgIHNjYWxlLnkgPSAxO1xuICAgICAgICAgICAgICAgIHNjYWxlLnogPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcm90YXRpb24udyA9IDE7XG4gICAgICAgICAgICAgICAgcm90YXRpb24ueCA9IDA7XG4gICAgICAgICAgICAgICAgcm90YXRpb24ueSA9IDA7XG4gICAgICAgICAgICAgICAgcm90YXRpb24ueiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtID0gc2VsZi5fbTtcbiAgICAgICAgaWYgKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbi54ID0gbVsxMl07XG4gICAgICAgICAgICB0cmFuc2xhdGlvbi55ID0gbVsxM107XG4gICAgICAgICAgICB0cmFuc2xhdGlvbi56ID0gbVsxNF07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXNlZFNjYWxlID0gc2NhbGUgfHwgVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIHVzZWRTY2FsZS54ID0gTWF0aC5zcXJ0KG1bMF0gKiBtWzBdICsgbVsxXSAqIG1bMV0gKyBtWzJdICogbVsyXSk7XG4gICAgICAgIHVzZWRTY2FsZS55ID0gTWF0aC5zcXJ0KG1bNF0gKiBtWzRdICsgbVs1XSAqIG1bNV0gKyBtWzZdICogbVs2XSk7XG4gICAgICAgIHVzZWRTY2FsZS56ID0gTWF0aC5zcXJ0KG1bOF0gKiBtWzhdICsgbVs5XSAqIG1bOV0gKyBtWzEwXSAqIG1bMTBdKTtcbiAgICAgICAgaWYgKGRldGVybWluYW50KHNlbGYpIDw9IDApIHtcbiAgICAgICAgICAgIHVzZWRTY2FsZS55ICo9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VkU2NhbGUueCA9PT0gMCB8fCB1c2VkU2NhbGUueSA9PT0gMCB8fCB1c2VkU2NhbGUueiA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcm90YXRpb24udyA9IDE7XG4gICAgICAgICAgICAgICAgcm90YXRpb24ueCA9IDA7XG4gICAgICAgICAgICAgICAgcm90YXRpb24ueSA9IDA7XG4gICAgICAgICAgICAgICAgcm90YXRpb24ueiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICAgICAgY29uc3Qgc3ggPSAxIC8gdXNlZFNjYWxlLngsIHN5ID0gMSAvIHVzZWRTY2FsZS55LCBzeiA9IDEgLyB1c2VkU2NhbGUuejtcbiAgICAgICAgICAgIGNvbnN0IHRtcE1hdHJpeCA9IGNyZWF0ZSgpO1xuICAgICAgICAgICAgZnJvbVZhbHVlc1RvUmVmKG1bMF0gKiBzeCwgbVsxXSAqIHN4LCBtWzJdICogc3gsIDAuMCwgbVs0XSAqIHN5LCBtWzVdICogc3ksIG1bNl0gKiBzeSwgMC4wLCBtWzhdICogc3osIG1bOV0gKiBzeiwgbVsxMF0gKiBzeiwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHRtcE1hdHJpeCk7XG4gICAgICAgICAgICBRdWF0ZXJuaW9uLmZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHRtcE1hdHJpeCwgcm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBNYXRyaXguZGVjb21wb3NlID0gZGVjb21wb3NlO1xuICAgIC8qKlxuICAgICAqIEdldHMgc3BlY2lmaWMgcm93IG9mIHRoZSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBudW1iZXIgb2YgdGhlIHJvdyB0byBnZXRcbiAgICAgKiBAcmV0dXJucyB0aGUgaW5kZXgtdGggcm93IG9mIHRoZSBjdXJyZW50IG1hdHJpeCBhcyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgLy8gVE9ET1xuICAgIC8vIGV4cG9ydCBmdW5jdGlvbiBnZXRSb3coaW5kZXg6IG51bWJlcik6IE51bGxhYmxlPFZlY3RvcjQ+IHtcbiAgICAvLyAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiAzKSB7XG4gICAgLy8gICAgIHJldHVybiBudWxsXG4gICAgLy8gICB9XG4gICAgLy8gICBjb25zdCBpID0gaW5kZXggKiA0XG4gICAgLy8gICByZXR1cm4gbmV3IFZlY3RvcjQoXG4gICAgLy8gICAgIHNlbGYuX21baSArIDBdLFxuICAgIC8vICAgICBzZWxmLl9tW2kgKyAxXSxcbiAgICAvLyAgICAgc2VsZi5fbVtpICsgMl0sXG4gICAgLy8gICAgIHNlbGYuX21baSArIDNdXG4gICAgLy8gICApXG4gICAgLy8gfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGluZGV4LXRoIHJvdyBvZiB0aGUgY3VycmVudCBtYXRyaXggdG8gdGhlIHZlY3RvcjQgdmFsdWVzXG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyB0aGUgbnVtYmVyIG9mIHRoZSByb3cgdG8gc2V0XG4gICAgICogQHBhcmFtIHJvdyAtIGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3I0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICAvLyBUT0RPXG4gICAgLy8gZXhwb3J0IGZ1bmN0aW9uIHNldFJvdyhpbmRleDogbnVtYmVyLCByb3c6IFZlY3RvcjQpOiBNdXRhYmxlTWF0cml4IHtcbiAgICAvLyAgIHJldHVybiBzZXRSb3dGcm9tRmxvYXRzKGluZGV4LCByb3cueCwgcm93LnksIHJvdy56LCByb3cudylcbiAgICAvLyB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5kZXgtdGggcm93IG9mIHRoZSBjdXJyZW50IG1hdHJpeCB3aXRoIHRoZSBnaXZlbiA0IHggZmxvYXQgdmFsdWVzXG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyB0aGUgcm93IGluZGV4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvbXBvbmVudCB0byBzZXRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29tcG9uZW50IHRvIHNldFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb21wb25lbnQgdG8gc2V0XG4gICAgICogQHBhcmFtIHcgLSBkZWZpbmVzIHRoZSB3IGNvbXBvbmVudCB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFJvd0Zyb21GbG9hdHMoc2VsZiwgaW5kZXgsIHgsIHksIHosIHcpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IDMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpID0gaW5kZXggKiA0O1xuICAgICAgICBzZWxmLl9tW2kgKyAwXSA9IHg7XG4gICAgICAgIHNlbGYuX21baSArIDFdID0geTtcbiAgICAgICAgc2VsZi5fbVtpICsgMl0gPSB6O1xuICAgICAgICBzZWxmLl9tW2kgKyAzXSA9IHc7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHNlbGYpO1xuICAgIH1cbiAgICBNYXRyaXguc2V0Um93RnJvbUZsb2F0cyA9IHNldFJvd0Zyb21GbG9hdHM7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBhIG5ldyBtYXRyaXggc2V0IHdpdGggdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlcyBtdWx0aXBsaWVkIGJ5IHNjYWxlIChmbG9hdClcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZShzZWxmLCBzY2FsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoKTtcbiAgICAgICAgc2NhbGVUb1JlZihzZWxmLCBzY2FsZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTWF0cml4LnNjYWxlID0gc2NhbGU7XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlcyBieSBhIGZhY3RvciB0byBhIGdpdmVuIHJlc3VsdCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZVRvUmVmKHNlbGYsIHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdID0gc2VsZi5fbVtpbmRleF0gKiBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBfbWFya0FzVXBkYXRlZChyZXN1bHQpO1xuICAgIH1cbiAgICBNYXRyaXguc2NhbGVUb1JlZiA9IHNjYWxlVG9SZWY7XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgTWF0cml4IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZUFuZEFkZFRvUmVmKHNlbGYsIHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdICs9IHNlbGYuX21baW5kZXhdICogc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgX21hcmtBc1VwZGF0ZWQocmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LnNjYWxlQW5kQWRkVG9SZWYgPSBzY2FsZUFuZEFkZFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0byB0aGUgZ2l2ZW4gbWF0cml4IGEgbm9ybWFsIG1hdHJpeCwgY29tcHV0ZWQgZnJvbSBzZWxmIG9uZSAodXNpbmcgdmFsdWVzIGZyb20gaWRlbnRpdHkgbWF0cml4IGZvciBmb3VydGggcm93IGFuZCBjb2x1bW4pLlxuICAgICAqIEBwYXJhbSByZWYgLSBtYXRyaXggdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vcm1hbE1hdHJpeFRvUmVmKHNlbGYsIHJlZikge1xuICAgICAgICBjb25zdCB0bXAgPSBjcmVhdGUoKTtcbiAgICAgICAgaW52ZXJ0VG9SZWYoc2VsZiwgdG1wKTtcbiAgICAgICAgdHJhbnNwb3NlVG9SZWYodG1wLCByZWYpO1xuICAgICAgICBjb25zdCBtID0gcmVmLl9tO1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYobVswXSwgbVsxXSwgbVsyXSwgMC4wLCBtWzRdLCBtWzVdLCBtWzZdLCAwLjAsIG1bOF0sIG1bOV0sIG1bMTBdLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVmKTtcbiAgICB9XG4gICAgTWF0cml4Lm5vcm1hbE1hdHJpeFRvUmVmID0gbm9ybWFsTWF0cml4VG9SZWY7XG4gICAgLyoqXG4gICAgICogR2V0cyBvbmx5IHJvdGF0aW9uIHBhcnQgb2YgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IHNldHMgdG8gdGhlIGV4dHJhY3RlZCByb3RhdGlvbiBtYXRyaXggZnJvbSB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSb3RhdGlvbk1hdHJpeChzZWxmKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgpO1xuICAgICAgICBnZXRSb3RhdGlvbk1hdHJpeFRvUmVmKHNlbGYsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE1hdHJpeC5nZXRSb3RhdGlvbk1hdHJpeCA9IGdldFJvdGF0aW9uTWF0cml4O1xuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSByb3RhdGlvbiBtYXRyaXggZnJvbSB0aGUgY3VycmVudCBvbmUgYW5kIHNldHMgaXQgYXMgdGhlIGdpdmVuIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeCB0byBzdG9yZSBkYXRhIHRvXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Um90YXRpb25NYXRyaXhUb1JlZihzZWxmLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBWZWN0b3IzLlplcm8oKTtcbiAgICAgICAgaWYgKCFkZWNvbXBvc2Uoc2VsZiwgc2NhbGUpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBJZGVudGl0eSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG0gPSBzZWxmLl9tO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICBjb25zdCBzeCA9IDEgLyBzY2FsZS54LCBzeSA9IDEgLyBzY2FsZS55LCBzeiA9IDEgLyBzY2FsZS56O1xuICAgICAgICBmcm9tVmFsdWVzVG9SZWYobVswXSAqIHN4LCBtWzFdICogc3gsIG1bMl0gKiBzeCwgMC4wLCBtWzRdICogc3ksIG1bNV0gKiBzeSwgbVs2XSAqIHN5LCAwLjAsIG1bOF0gKiBzeiwgbVs5XSAqIHN6LCBtWzEwXSAqIHN6LCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVzdWx0KTtcbiAgICB9XG4gICAgTWF0cml4LmdldFJvdGF0aW9uTWF0cml4VG9SZWYgPSBnZXRSb3RhdGlvbk1hdHJpeFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgbW9kZWwgbWF0cml4IGZyb20gYmVpbmcgcmlnaHQgaGFuZGVkIHRvIGxlZnQgaGFuZGVkIGluIHBsYWNlIGFuZCB2aWNlIHZlcnNhXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9nZ2xlTW9kZWxNYXRyaXhIYW5kSW5QbGFjZShzZWxmKSB7XG4gICAgICAgIHNlbGYuX21bMl0gKj0gLTE7XG4gICAgICAgIHNlbGYuX21bNl0gKj0gLTE7XG4gICAgICAgIHNlbGYuX21bOF0gKj0gLTE7XG4gICAgICAgIHNlbGYuX21bOV0gKj0gLTE7XG4gICAgICAgIHNlbGYuX21bMTRdICo9IC0xO1xuICAgICAgICBfbWFya0FzVXBkYXRlZChzZWxmKTtcbiAgICB9XG4gICAgTWF0cml4LnRvZ2dsZU1vZGVsTWF0cml4SGFuZEluUGxhY2UgPSB0b2dnbGVNb2RlbE1hdHJpeEhhbmRJblBsYWNlO1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgcHJvamVjdGlvbiBtYXRyaXggZnJvbSBiZWluZyByaWdodCBoYW5kZWQgdG8gbGVmdCBoYW5kZWQgaW4gcGxhY2UgYW5kIHZpY2UgdmVyc2FcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGVQcm9qZWN0aW9uTWF0cml4SGFuZEluUGxhY2Uoc2VsZikge1xuICAgICAgICBzZWxmLl9tWzhdICo9IC0xO1xuICAgICAgICBzZWxmLl9tWzldICo9IC0xO1xuICAgICAgICBzZWxmLl9tWzEwXSAqPSAtMTtcbiAgICAgICAgc2VsZi5fbVsxMV0gKj0gLTE7XG4gICAgICAgIF9tYXJrQXNVcGRhdGVkKHNlbGYpO1xuICAgIH1cbiAgICBNYXRyaXgudG9nZ2xlUHJvamVjdGlvbk1hdHJpeEhhbmRJblBsYWNlID0gdG9nZ2xlUHJvamVjdGlvbk1hdHJpeEhhbmRJblBsYWNlO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBmdW5jdGlvbiBfdXBkYXRlSWRlbnRpdHlTdGF0dXMoc2VsZiwgaXNJZGVudGl0eSwgaXNJZGVudGl0eURpcnR5ID0gZmFsc2UsIGlzSWRlbnRpdHkzeDIgPSBmYWxzZSwgaXNJZGVudGl0eTN4MkRpcnR5ID0gdHJ1ZSkge1xuICAgICAgICBzZWxmLnVwZGF0ZUZsYWcgPSBfdXBkYXRlRmxhZ1NlZWQrKztcbiAgICAgICAgc2VsZi5pc0lkZW50aXR5ID0gaXNJZGVudGl0eTtcbiAgICAgICAgc2VsZi5pc0lkZW50aXR5M3gyID0gaXNJZGVudGl0eSB8fCBpc0lkZW50aXR5M3gyO1xuICAgICAgICBzZWxmLl9pc0lkZW50aXR5RGlydHkgPSBzZWxmLmlzSWRlbnRpdHkgPyBmYWxzZSA6IGlzSWRlbnRpdHlEaXJ0eTtcbiAgICAgICAgc2VsZi5faXNJZGVudGl0eTN4MkRpcnR5ID0gc2VsZi5pc0lkZW50aXR5M3gyID8gZmFsc2UgOiBpc0lkZW50aXR5M3gyRGlydHk7XG4gICAgfVxufSkoTWF0cml4IHx8IChNYXRyaXggPSB7fSkpO1xuIiwgImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL1ZlY3RvcjMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi9TY2FsYXInO1xuaW1wb3J0IHsgREVHMlJBRCwgUkFEMkRFRyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi9NYXRyaXgnO1xuLyoqXG4gKiBAcHVibGljXG4gKiBRdWF0ZXJuaW9uIGlzIGEgdHlwZSBhbmQgYSBuYW1lc3BhY2UuXG4gKiBgYGBcbiAqIC8vIFRoZSBuYW1lc3BhY2UgY29udGFpbnMgYWxsIHR5cGVzIGFuZCBmdW5jdGlvbnMgdG8gb3BlcmF0ZXMgd2l0aCBRdWF0ZXJuaW9uXG4gKiBjb25zdCBuZXh0ID0gUXVhdGVybmlvbi5hZGQocG9pbnRBLCB2ZWxvY2l0eUEpXG4gKiAvLyBUaGUgdHlwZSBRdWF0ZXJuaW9uIGlzIGFuIGFsaWFzIHRvIFF1YXRlcm5pb24uUmVhZG9ubHlRdWF0ZXJuaW9uXG4gKiBjb25zdCByZWFkb25seVJvdGF0aW9uOiBRdWF0ZXJuaW9uID0gUXVhdGVybmlvbi5aZXJvKClcbiAqIHJlYWRvbmx5Um90YXRpb24ueCA9IDAuMSAvLyB0aGlzIEZBSUxTXG4gKlxuICogLy8gRm9yIG11dGFibGUgdXNhZ2UsIHVzZSBgUXVhdGVybmlvbi5NdXRhYmxlYFxuICogY29uc3Qgcm90YXRpb246IFF1YXRlcm5pb24uTXV0YWJsZSA9IFF1YXRlcm5pb24uSWRlbnRpdHkoKVxuICogcm90YXRpb24ueCA9IDMuMCAvLyB0aGlzIFdPUktTXG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBRdWF0ZXJuaW9uO1xuKGZ1bmN0aW9uIChRdWF0ZXJuaW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBRdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGZsb2F0c1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB0aGlyZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdClcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIGZvdXJ0aCBjb21wb25lbnQgKDEuMCBieSBkZWZhdWx0KVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShcbiAgICAvKiogZGVmaW5lcyB0aGUgZmlyc3QgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpICovXG4gICAgeCA9IDAuMCwgXG4gICAgLyoqIGRlZmluZXMgdGhlIHNlY29uZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB5ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgdGhpcmQgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpICovXG4gICAgeiA9IDAuMCwgXG4gICAgLyoqIGRlZmluZXMgdGhlIGZvdXJ0aCBjb21wb25lbnQgKDEuMCBieSBkZWZhdWx0KSAqL1xuICAgIHcgPSAxLjApIHtcbiAgICAgICAgcmV0dXJuIHsgeCwgeSwgeiwgdyB9O1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFF1YXRlcm5pb24gYXMgdGhlIHJlc3VsdCBvZiB0aGUgYWRkaXRpb24gb2YgdGhlIHR3byBnaXZlbiBxdWF0ZXJuaW9ucy5cbiAgICAgKiBAcGFyYW0gcTEgLSB0aGUgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBxMiAtIHRoZSBzZWNvbmQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZChxMSwgcTIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogcTEueCArIHEyLngsIHk6IHExLnkgKyBxMi55LCB6OiBxMS56ICsgcTIueiwgdzogcTEudyArIHEyLncgfTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5hZGQgPSBhZGQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBmcm9tIHRoZSBnaXZlbiBFdWxlciBmbG9hdCBhbmdsZXMgKHksIHgsIHopIGFuZCBzdG9yZXMgaXQgaW4gdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHlhdyAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBZIGF4aXMgKHJhZGlhbnMpXG4gICAgICogQHBhcmFtIHBpdGNoIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFggYXhpcyAocmFkaWFucylcbiAgICAgKiBAcGFyYW0gcm9sbCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBaIGF4aXMgKHJhZGlhbnMpXG4gICAgICogQHJldHVybnMgcmVzdWx0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUm90YXRpb25ZYXdQaXRjaFJvbGwoeWF3LCBwaXRjaCwgcm9sbCkge1xuICAgICAgICAvLyBJbXBsZW1lbnRlZCB1bml0eS1iYXNlZCBjYWxjdWxhdGlvbnMgZnJvbTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU2MDU1ODEzXG4gICAgICAgIGNvbnN0IGhhbGZQaXRjaCA9IHBpdGNoICogMC41O1xuICAgICAgICBjb25zdCBoYWxmWWF3ID0geWF3ICogMC41O1xuICAgICAgICBjb25zdCBoYWxmUm9sbCA9IHJvbGwgKiAwLjU7XG4gICAgICAgIGNvbnN0IGMxID0gTWF0aC5jb3MoaGFsZlBpdGNoKTtcbiAgICAgICAgY29uc3QgYzIgPSBNYXRoLmNvcyhoYWxmWWF3KTtcbiAgICAgICAgY29uc3QgYzMgPSBNYXRoLmNvcyhoYWxmUm9sbCk7XG4gICAgICAgIGNvbnN0IHMxID0gTWF0aC5zaW4oaGFsZlBpdGNoKTtcbiAgICAgICAgY29uc3QgczIgPSBNYXRoLnNpbihoYWxmWWF3KTtcbiAgICAgICAgY29uc3QgczMgPSBNYXRoLnNpbihoYWxmUm9sbCk7XG4gICAgICAgIHJldHVybiBjcmVhdGUoYzIgKiBzMSAqIGMzICsgczIgKiBjMSAqIHMzLCBzMiAqIGMxICogYzMgLSBjMiAqIHMxICogczMsIGMyICogYzEgKiBzMyAtIHMyICogczEgKiBjMywgYzIgKiBjMSAqIGMzICsgczIgKiBzMSAqIHMzKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5mcm9tUm90YXRpb25ZYXdQaXRjaFJvbGwgPSBmcm9tUm90YXRpb25ZYXdQaXRjaFJvbGw7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJvdGF0aW9uIHRoYXQgcm90YXRlcyB6IGRlZ3JlZXMgYXJvdW5kIHRoZSB6IGF4aXMsIHggZGVncmVlcyBhcm91bmQgdGhlIHggYXhpcywgYW5kIHkgZGVncmVlcyBhcm91bmQgdGhlIHkgYXhpcy5cbiAgICAgKiBAcGFyYW0geCAtIHRoZSByb3RhdGlvbiBvbiB0aGUgeCBheGlzIGluIGV1bGVyIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0geSAtIHRoZSByb3RhdGlvbiBvbiB0aGUgeSBheGlzIGluIGV1bGVyIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0geiAtIHRoZSByb3RhdGlvbiBvbiB0aGUgeiBheGlzIGluIGV1bGVyIGRlZ3JlZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tRXVsZXJEZWdyZWVzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIGZyb21Sb3RhdGlvbllhd1BpdGNoUm9sbCh5ICogREVHMlJBRCwgeCAqIERFRzJSQUQsIHogKiBERUcyUkFEKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5mcm9tRXVsZXJEZWdyZWVzID0gZnJvbUV1bGVyRGVncmVlcztcbiAgICAvKipcbiAgICAgKiBHZXRzIGxlbmd0aCBvZiBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgcXVhdGVybmlvbiBsZW5ndGggKGZsb2F0KVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlbmd0aChxKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQobGVuZ3RoU3F1YXJlZChxKSk7XG4gICAgfVxuICAgIFF1YXRlcm5pb24ubGVuZ3RoID0gbGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIEdldHMgbGVuZ3RoIG9mIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBxdWF0ZXJuaW9uIGxlbmd0aCAoZmxvYXQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVuZ3RoU3F1YXJlZChxKSB7XG4gICAgICAgIHJldHVybiBxLnggKiBxLnggKyBxLnkgKiBxLnkgKyBxLnogKiBxLnogKyBxLncgKiBxLnc7XG4gICAgfVxuICAgIFF1YXRlcm5pb24ubGVuZ3RoU3F1YXJlZCA9IGxlbmd0aFNxdWFyZWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG90IHByb2R1Y3QgKGZsb2F0KSBiZXR3ZWVuIHRoZSBxdWF0ZXJuaW9ucyBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBsZWZ0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSByaWdodCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGRvdCBwcm9kdWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiAobGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudyk7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uZG90ID0gZG90O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFuZ2xlIGluIGRlZ3JlZXMgYmV0d2VlbiB0d28gcm90YXRpb25zIGEgYW5kIGIuXG4gICAgICogQHBhcmFtIHF1YXQxIC0gZGVmaW5lcyB0aGUgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBxdWF0MiAtIGRlZmluZXMgdGhlIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGRlZ3JlZXMgYW5nbGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbmdsZShxdWF0MSwgcXVhdDIpIHtcbiAgICAgICAgY29uc3QgZG90VmFsID0gZG90KHF1YXQxLCBxdWF0Mik7XG4gICAgICAgIHJldHVybiBNYXRoLmFjb3MoTWF0aC5taW4oTWF0aC5hYnMoZG90VmFsKSwgMSkpICogMiAqIFJBRDJERUc7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uYW5nbGUgPSBhbmdsZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZnJvbSBxdWF0ZXJuaW9uIGlzIHJvdGF0ZWQgdG93YXJkcyB0byBieSBhbiBhbmd1bGFyIHN0ZXAgb2YgbWF4RGVncmVlc0RlbHRhLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSB0byAtIGRlZmluZXMgdGhlIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIG1heERlZ3JlZXNEZWx0YSAtIHRoZSBpbnRlcnZhbCBzdGVwXG4gICAgICovXG4gICAgZnVuY3Rpb24gcm90YXRlVG93YXJkcyhmcm9tLCB0bywgbWF4RGVncmVlc0RlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IGFuZ2xlKGZyb20sIHRvKTtcbiAgICAgICAgaWYgKG51bSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLm1pbigxLCBtYXhEZWdyZWVzRGVsdGEgLyBudW0pO1xuICAgICAgICByZXR1cm4gc2xlcnAoZnJvbSwgdG8sIHQpO1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLnJvdGF0ZVRvd2FyZHMgPSByb3RhdGVUb3dhcmRzO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByb3RhdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgZm9yd2FyZCBhbmQgdXB3YXJkcyBkaXJlY3Rpb25zLlxuICAgICAqIEBwYXJhbSBmb3J3YXJkIC0gdGhlIGRpcmVjdGlvbiB0byBsb29rIGluXG4gICAgICogQHBhcmFtIHVwIC0gdGhlIHZlY3RvciB0aGF0IGRlZmluZXMgaW4gd2hpY2ggZGlyZWN0aW9uIHVwIGlzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9va1JvdGF0aW9uKGZvcndhcmQsIHVwID0geyB4OiAwLjAsIHk6IDEuMCwgejogMC4wIH0pIHtcbiAgICAgICAgY29uc3QgZm9yd2FyZE5ldyA9IFZlY3RvcjMubm9ybWFsaXplKGZvcndhcmQpO1xuICAgICAgICBjb25zdCByaWdodCA9IFZlY3RvcjMubm9ybWFsaXplKFZlY3RvcjMuY3Jvc3ModXAsIGZvcndhcmROZXcpKTtcbiAgICAgICAgY29uc3QgdXBOZXcgPSBWZWN0b3IzLmNyb3NzKGZvcndhcmROZXcsIHJpZ2h0KTtcbiAgICAgICAgY29uc3QgbTAwID0gcmlnaHQueDtcbiAgICAgICAgY29uc3QgbTAxID0gcmlnaHQueTtcbiAgICAgICAgY29uc3QgbTAyID0gcmlnaHQuejtcbiAgICAgICAgY29uc3QgbTEwID0gdXBOZXcueDtcbiAgICAgICAgY29uc3QgbTExID0gdXBOZXcueTtcbiAgICAgICAgY29uc3QgbTEyID0gdXBOZXcuejtcbiAgICAgICAgY29uc3QgbTIwID0gZm9yd2FyZE5ldy54O1xuICAgICAgICBjb25zdCBtMjEgPSBmb3J3YXJkTmV3Lnk7XG4gICAgICAgIGNvbnN0IG0yMiA9IGZvcndhcmROZXcuejtcbiAgICAgICAgY29uc3QgbnVtOCA9IG0wMCArIG0xMSArIG0yMjtcbiAgICAgICAgY29uc3QgcXVhdGVybmlvbiA9IGNyZWF0ZSgpO1xuICAgICAgICBpZiAobnVtOCA+IDApIHtcbiAgICAgICAgICAgIGxldCBudW0gPSBNYXRoLnNxcnQobnVtOCArIDEpO1xuICAgICAgICAgICAgcXVhdGVybmlvbi53ID0gbnVtICogMC41O1xuICAgICAgICAgICAgbnVtID0gMC41IC8gbnVtO1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gKG0xMiAtIG0yMSkgKiBudW07XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIwIC0gbTAyKSAqIG51bTtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDEgLSBtMTApICogbnVtO1xuICAgICAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0wMCA+PSBtMTEgJiYgbTAwID49IG0yMikge1xuICAgICAgICAgICAgY29uc3QgbnVtNyA9IE1hdGguc3FydCgxICsgbTAwIC0gbTExIC0gbTIyKTtcbiAgICAgICAgICAgIGNvbnN0IG51bTQgPSAwLjUgLyBudW03O1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gMC41ICogbnVtNztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IChtMDEgKyBtMTApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDIgKyBtMjApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24udyA9IChtMTIgLSBtMjEpICogbnVtNDtcbiAgICAgICAgICAgIHJldHVybiBxdWF0ZXJuaW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtMTEgPiBtMjIpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTYgPSBNYXRoLnNxcnQoMSArIG0xMSAtIG0wMCAtIG0yMik7XG4gICAgICAgICAgICBjb25zdCBudW0zID0gMC41IC8gbnVtNjtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueCA9IChtMTAgKyBtMDEpICogbnVtMztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IDAuNSAqIG51bTY7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnogPSAobTIxICsgbTEyKSAqIG51bTM7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLncgPSAobTIwIC0gbTAyKSAqIG51bTM7XG4gICAgICAgICAgICByZXR1cm4gcXVhdGVybmlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW01ID0gTWF0aC5zcXJ0KDEgKyBtMjIgLSBtMDAgLSBtMTEpO1xuICAgICAgICBjb25zdCBudW0yID0gMC41IC8gbnVtNTtcbiAgICAgICAgcXVhdGVybmlvbi54ID0gKG0yMCArIG0wMikgKiBudW0yO1xuICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIxICsgbTEyKSAqIG51bTI7XG4gICAgICAgIHF1YXRlcm5pb24ueiA9IDAuNSAqIG51bTU7XG4gICAgICAgIHF1YXRlcm5pb24udyA9IChtMDEgLSBtMTApICogbnVtMjtcbiAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgfVxuICAgIFF1YXRlcm5pb24ubG9va1JvdGF0aW9uID0gbG9va1JvdGF0aW9uO1xuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSBpbiBwbGFjZSB0aGUgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHEpIHtcbiAgICAgICAgY29uc3QgcUxlbmd0aCA9IDEuMCAvIGxlbmd0aChxKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZShxLnggKiBxTGVuZ3RoLCBxLnkgKiBxTGVuZ3RoLCBxLnogKiBxTGVuZ3RoLCBxLncgKiBxTGVuZ3RoKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdoaWNoIHJvdGF0ZXMgZnJvbSBmcm9tRGlyZWN0aW9uIHRvIHRvRGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgZGlyZWN0aW9uIFZlY3RvclxuICAgICAqIEBwYXJhbSB0byAtIGRlZmluZXMgdGhlIHRhcmdldCBkaXJlY3Rpb24gVmVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVRvUm90YXRpb24oZnJvbSwgdG8sIHVwID0gVmVjdG9yMy5VcCgpKSB7XG4gICAgICAgIC8vIFVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBpbXBsZW1lbnRlZCBmcm9tIGh0dHBzOi8vZm9ydW0udW5pdHkuY29tL3RocmVhZHMvcXVhdGVybmlvbi1sb29rcm90YXRpb24tYXJvdW5kLWFuLWF4aXMuNjA4NDcwLyNwb3N0LTQwNjk4ODhcbiAgICAgICAgY29uc3QgdjAgPSBWZWN0b3IzLm5vcm1hbGl6ZShmcm9tKTtcbiAgICAgICAgY29uc3QgdjEgPSBWZWN0b3IzLm5vcm1hbGl6ZSh0byk7XG4gICAgICAgIGNvbnN0IGEgPSBWZWN0b3IzLmNyb3NzKHYwLCB2MSk7XG4gICAgICAgIGNvbnN0IHcgPSBNYXRoLnNxcnQoVmVjdG9yMy5sZW5ndGhTcXVhcmVkKHYwKSAqIFZlY3RvcjMubGVuZ3RoU3F1YXJlZCh2MSkpICtcbiAgICAgICAgICAgIFZlY3RvcjMuZG90KHYwLCB2MSk7XG4gICAgICAgIGlmIChWZWN0b3IzLmxlbmd0aFNxdWFyZWQoYSkgPCAwLjAwMDEpIHtcbiAgICAgICAgICAgIC8vIHRoZSB2ZWN0b3JzIGFyZSBwYXJhbGxlbCwgY2hlY2sgdyB0byBmaW5kIGRpcmVjdGlvblxuICAgICAgICAgICAgLy8gaWYgdyBpcyAwIHRoZW4gdmFsdWVzIGFyZSBvcHBvc2l0ZSwgYW5kIHdlIHNvdWxkIHJvdGF0ZSAxODAgZGVncmVlcyBhcm91bmQgdGhlIHN1cHBsaWVkIGF4aXNcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB0aGUgdmVjdG9ycyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYW5kIG5vIHJvdGF0aW9uIHNob3VsZCBvY2N1clxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHcpIDwgMC4wMDAxXG4gICAgICAgICAgICAgICAgPyBub3JtYWxpemUoY3JlYXRlKHVwLngsIHVwLnksIHVwLnosIDApKVxuICAgICAgICAgICAgICAgIDogSWRlbnRpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUoY3JlYXRlKGEueCwgYS55LCBhLnosIHcpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBRdWF0ZXJuaW9uLmZyb21Ub1JvdGF0aW9uID0gZnJvbVRvUm90YXRpb247XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgLSB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIElkZW50aXR5KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uSWRlbnRpdHkgPSBJZGVudGl0eTtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGV1bGVyIGFuZ2xlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByb3RhdGlvbi5cbiAgICAgKiBJbXBsZW1lbnRlZCB1bml0eS1iYXNlZCBjYWxjdWxhdGlvbnMgZnJvbTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU2MDU1ODEzXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjMgd2l0aCBldWxlciBhbmdsZXMgZGVncmVlc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRXVsZXJBbmdsZXMocSkge1xuICAgICAgICBjb25zdCBvdXQgPSBWZWN0b3IzLmNyZWF0ZSgpO1xuICAgICAgICAvLyBpZiB0aGUgaW5wdXQgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGlzIGV4YWN0bHkgb25lLiBPdGhlcndpc2UsIHRoaXMgYWN0cyBhcyBhIGNvcnJlY3Rpb24gZmFjdG9yIGZvciB0aGUgcXVhdGVybmlvbidzIG5vdC1ub3JtYWxpemVkbmVzc1xuICAgICAgICBjb25zdCB1bml0ID0gcS54ICogcS54ICsgcS55ICogcS55ICsgcS56ICogcS56ICsgcS53ICogcS53O1xuICAgICAgICAvLyBxIHdpbGwgaGF2ZSBhIG1hZ25pdHVkZSBvZiAwLjUgb3IgZ3JlYXRlciBpZiBhbmQgb25seSBpZiBxIGlzIGEgc2luZ3VsYXJpdHkgY2FzZVxuICAgICAgICBjb25zdCB0ZXN0ID0gcS54ICogcS53IC0gcS55ICogcS56O1xuICAgICAgICBpZiAodGVzdCA+IDAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IG5vcnRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICBvdXQueSA9IDIgKiBNYXRoLmF0YW4yKHEueSwgcS54KTtcbiAgICAgICAgICAgIG91dC56ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ZXN0IDwgLTAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IHNvdXRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgICAgb3V0LnkgPSAtMiAqIE1hdGguYXRhbjIocS55LCBxLngpO1xuICAgICAgICAgICAgb3V0LnogPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gc2luZ3VsYXJpdHkgLSBxIGlzIHRoZSBtYWpvcml0eSBvZiBjYXNlc1xuICAgICAgICAgICAgb3V0LnggPSBNYXRoLmFzaW4oMiAqIChxLncgKiBxLnggLSBxLnkgKiBxLnopKTtcbiAgICAgICAgICAgIG91dC55ID0gTWF0aC5hdGFuMigyICogcS53ICogcS55ICsgMiAqIHEueiAqIHEueCwgMSAtIDIgKiAocS54ICogcS54ICsgcS55ICogcS55KSk7XG4gICAgICAgICAgICBvdXQueiA9IE1hdGguYXRhbjIoMiAqIHEudyAqIHEueiArIDIgKiBxLnggKiBxLnksIDEgLSAyICogKHEueiAqIHEueiArIHEueCAqIHEueCkpO1xuICAgICAgICB9XG4gICAgICAgIG91dC54ICo9IFJBRDJERUc7XG4gICAgICAgIG91dC55ICo9IFJBRDJERUc7XG4gICAgICAgIG91dC56ICo9IFJBRDJERUc7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgZGVncmVlIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAzNjBcbiAgICAgICAgb3V0LnggPSBTY2FsYXIucmVwZWF0KG91dC54LCAzNjApO1xuICAgICAgICBvdXQueSA9IFNjYWxhci5yZXBlYXQob3V0LnksIDM2MCk7XG4gICAgICAgIG91dC56ID0gU2NhbGFyLnJlcGVhdChvdXQueiwgMzYwKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgUXVhdGVybmlvbi50b0V1bGVyQW5nbGVzID0gdG9FdWxlckFuZ2xlcztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIGZyb20gdGhlIGdpdmVuIEV1bGVyIGZsb2F0IGFuZ2xlcyAoeSwgeCwgeikgYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0geWF3IC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFkgYXhpcyAocmFkaWFucylcbiAgICAgKiBAcGFyYW0gcGl0Y2ggLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgWCBheGlzIChyYWRpYW5zKVxuICAgICAqIEBwYXJhbSByb2xsIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFogYXhpcyAocmFkaWFucylcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUm90YXRpb25ZYXdQaXRjaFJvbGxUb1JlZih5YXcsIHBpdGNoLCByb2xsLCByZXN1bHQpIHtcbiAgICAgICAgLy8gSW1wbGVtZW50ZWQgdW5pdHktYmFzZWQgY2FsY3VsYXRpb25zIGZyb206IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NjA1NTgxM1xuICAgICAgICBjb25zdCBoYWxmUGl0Y2ggPSBwaXRjaCAqIDAuNTtcbiAgICAgICAgY29uc3QgaGFsZllhdyA9IHlhdyAqIDAuNTtcbiAgICAgICAgY29uc3QgaGFsZlJvbGwgPSByb2xsICogMC41O1xuICAgICAgICBjb25zdCBjMSA9IE1hdGguY29zKGhhbGZQaXRjaCk7XG4gICAgICAgIGNvbnN0IGMyID0gTWF0aC5jb3MoaGFsZllhdyk7XG4gICAgICAgIGNvbnN0IGMzID0gTWF0aC5jb3MoaGFsZlJvbGwpO1xuICAgICAgICBjb25zdCBzMSA9IE1hdGguc2luKGhhbGZQaXRjaCk7XG4gICAgICAgIGNvbnN0IHMyID0gTWF0aC5zaW4oaGFsZllhdyk7XG4gICAgICAgIGNvbnN0IHMzID0gTWF0aC5zaW4oaGFsZlJvbGwpO1xuICAgICAgICByZXN1bHQueCA9IGMyICogczEgKiBjMyArIHMyICogYzEgKiBzMztcbiAgICAgICAgcmVzdWx0LnkgPSBzMiAqIGMxICogYzMgLSBjMiAqIHMxICogczM7XG4gICAgICAgIHJlc3VsdC56ID0gYzIgKiBjMSAqIHMzIC0gczIgKiBzMSAqIGMzO1xuICAgICAgICByZXN1bHQudyA9IGMyICogYzEgKiBjMyArIHMyICogczEgKiBzMztcbiAgICB9XG4gICAgUXVhdGVybmlvbi5mcm9tUm90YXRpb25ZYXdQaXRjaFJvbGxUb1JlZiA9IGZyb21Sb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHF1YXRlcm5pb24gd2l0aCB0aGUgZ2l2ZW4gcm90YXRpb24gbWF0cml4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBtYXRyaXggLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVJvdGF0aW9uTWF0cml4VG9SZWYobWF0cml4LCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1hdHJpeC5fbTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICBjb25zdCBtMTEgPSBkYXRhWzBdLCBtMTIgPSBkYXRhWzRdLCBtMTMgPSBkYXRhWzhdO1xuICAgICAgICBjb25zdCBtMjEgPSBkYXRhWzFdLCBtMjIgPSBkYXRhWzVdLCBtMjMgPSBkYXRhWzldO1xuICAgICAgICBjb25zdCBtMzEgPSBkYXRhWzJdLCBtMzIgPSBkYXRhWzZdLCBtMzMgPSBkYXRhWzEwXTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xuICAgICAgICBsZXQgcztcbiAgICAgICAgaWYgKHRyYWNlID4gMCkge1xuICAgICAgICAgICAgcyA9IDAuNSAvIE1hdGguc3FydCh0cmFjZSArIDEuMCk7XG4gICAgICAgICAgICByZXN1bHQudyA9IDAuMjUgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAobTMyIC0gbTIzKSAqIHM7XG4gICAgICAgICAgICByZXN1bHQueSA9IChtMTMgLSBtMzEpICogcztcbiAgICAgICAgICAgIHJlc3VsdC56ID0gKG0yMSAtIG0xMikgKiBzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcbiAgICAgICAgICAgIHJlc3VsdC53ID0gKG0zMiAtIG0yMykgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAwLjI1ICogcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAobTEzICsgbTMxKSAvIHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobTIyID4gbTMzKSB7XG4gICAgICAgICAgICBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0yMiAtIG0xMSAtIG0zMyk7XG4gICAgICAgICAgICByZXN1bHQudyA9IChtMTMgLSBtMzEpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC54ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnkgPSAwLjI1ICogcztcbiAgICAgICAgICAgIHJlc3VsdC56ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMzMgLSBtMTEgLSBtMjIpO1xuICAgICAgICAgICAgcmVzdWx0LncgPSAobTIxIC0gbTEyKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueCA9IChtMTMgKyBtMzEpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjI1ICogcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBRdWF0ZXJuaW9uLmZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmID0gZnJvbVJvdGF0aW9uTWF0cml4VG9SZWY7XG4gICAgLyoqXG4gICAgICogSW50ZXJwb2xhdGVzIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgaW50ZXJwb2xhdGVkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGVycChsZWZ0LCByaWdodCwgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFF1YXRlcm5pb24uSWRlbnRpdHkoKTtcbiAgICAgICAgUXVhdGVybmlvbi5zbGVycFRvUmVmKGxlZnQsIHJpZ2h0LCBhbW91bnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uc2xlcnAgPSBzbGVycDtcbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZXMgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMgYW5kIHN0b3JlcyBpdCBpbnRvIGEgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgc2Vjb25kIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xlcnBUb1JlZihsZWZ0LCByaWdodCwgYW1vdW50LCByZXN1bHQpIHtcbiAgICAgICAgbGV0IG51bTI7XG4gICAgICAgIGxldCBudW0zO1xuICAgICAgICBsZXQgbnVtNCA9IGxlZnQueCAqIHJpZ2h0LnggKyBsZWZ0LnkgKiByaWdodC55ICsgbGVmdC56ICogcmlnaHQueiArIGxlZnQudyAqIHJpZ2h0Lnc7XG4gICAgICAgIGxldCBmbGFnID0gZmFsc2U7XG4gICAgICAgIGlmIChudW00IDwgMCkge1xuICAgICAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgICAgICBudW00ID0gLW51bTQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bTQgPiAwLjk5OTk5OSkge1xuICAgICAgICAgICAgbnVtMyA9IDEgLSBhbW91bnQ7XG4gICAgICAgICAgICBudW0yID0gZmxhZyA/IC1hbW91bnQgOiBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBudW01ID0gTWF0aC5hY29zKG51bTQpO1xuICAgICAgICAgICAgY29uc3QgbnVtNiA9IDEuMCAvIE1hdGguc2luKG51bTUpO1xuICAgICAgICAgICAgbnVtMyA9IE1hdGguc2luKCgxLjAgLSBhbW91bnQpICogbnVtNSkgKiBudW02O1xuICAgICAgICAgICAgbnVtMiA9IGZsYWdcbiAgICAgICAgICAgICAgICA/IC1NYXRoLnNpbihhbW91bnQgKiBudW01KSAqIG51bTZcbiAgICAgICAgICAgICAgICA6IE1hdGguc2luKGFtb3VudCAqIG51bTUpICogbnVtNjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQueCA9IG51bTMgKiBsZWZ0LnggKyBudW0yICogcmlnaHQueDtcbiAgICAgICAgcmVzdWx0LnkgPSBudW0zICogbGVmdC55ICsgbnVtMiAqIHJpZ2h0Lnk7XG4gICAgICAgIHJlc3VsdC56ID0gbnVtMyAqIGxlZnQueiArIG51bTIgKiByaWdodC56O1xuICAgICAgICByZXN1bHQudyA9IG51bTMgKiBsZWZ0LncgKyBudW0yICogcmlnaHQudztcbiAgICB9XG4gICAgUXVhdGVybmlvbi5zbGVycFRvUmVmID0gc2xlcnBUb1JlZjtcbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHR3byBxdWF0ZXJuaW9uc1xuICAgICAqIEBwYXJhbSBzZWxmIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSBxMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBzZXQgYXMgdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgc2VsZiBvbmUgd2l0aCB0aGUgZ2l2ZW4gb25lIFwicTFcIlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGx5KHNlbGYsIHExKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgwLCAwLCAwLCAxLjApO1xuICAgICAgICBtdWx0aXBseVRvUmVmKHNlbGYsIHExLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIiBhcyB0aGUgdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgc2VsZiBvbmUgd2l0aCB0aGUgZ2l2ZW4gb25lIFwicTFcIlxuICAgICAqIEBwYXJhbSBzZWxmIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSBxMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGx5VG9SZWYoc2VsZiwgcTEsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHNlbGYueCAqIHExLncgKyBzZWxmLnkgKiBxMS56IC0gc2VsZi56ICogcTEueSArIHNlbGYudyAqIHExLng7XG4gICAgICAgIHJlc3VsdC55ID0gLXNlbGYueCAqIHExLnogKyBzZWxmLnkgKiBxMS53ICsgc2VsZi56ICogcTEueCArIHNlbGYudyAqIHExLnk7XG4gICAgICAgIHJlc3VsdC56ID0gc2VsZi54ICogcTEueSAtIHNlbGYueSAqIHExLnggKyBzZWxmLnogKiBxMS53ICsgc2VsZi53ICogcTEuejtcbiAgICAgICAgcmVzdWx0LncgPSAtc2VsZi54ICogcTEueCAtIHNlbGYueSAqIHExLnkgLSBzZWxmLnogKiBxMS56ICsgc2VsZi53ICogcTEudztcbiAgICB9XG4gICAgUXVhdGVybmlvbi5tdWx0aXBseVRvUmVmID0gbXVsdGlwbHlUb1JlZjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWdyZWVzIC0gdGhlIGFuZ2xlIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0gYXhpcyAtIHZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBRdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUFuZ2xlQXhpcyhkZWdyZWVzLCBheGlzKSB7XG4gICAgICAgIGlmIChWZWN0b3IzLmxlbmd0aFNxdWFyZWQoYXhpcykgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLklkZW50aXR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gSWRlbnRpdHkoKTtcbiAgICAgICAgbGV0IHJhZGlhbnMgPSBkZWdyZWVzICogREVHMlJBRDtcbiAgICAgICAgcmFkaWFucyAqPSAwLjU7XG4gICAgICAgIGNvbnN0IGEyID0gVmVjdG9yMy5ub3JtYWxpemUoYXhpcyk7XG4gICAgICAgIFZlY3RvcjMuc2NhbGVUb1JlZihhMiwgTWF0aC5zaW4ocmFkaWFucyksIGEyKTtcbiAgICAgICAgcmVzdWx0LnggPSBhMi54O1xuICAgICAgICByZXN1bHQueSA9IGEyLnk7XG4gICAgICAgIHJlc3VsdC56ID0gYTIuejtcbiAgICAgICAgcmVzdWx0LncgPSBNYXRoLmNvcyhyYWRpYW5zKTtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShyZXN1bHQpO1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLmZyb21BbmdsZUF4aXMgPSBmcm9tQW5nbGVBeGlzO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBjb250YWluaW5nIHRoZSByb3RhdGlvbiB2YWx1ZSB0byByZWFjaCB0aGUgdGFyZ2V0IChheGlzMSwgYXhpczIsIGF4aXMzKSBvcmllbnRhdGlvbiBhcyBhIHJvdGF0ZWQgWFlaIHN5c3RlbSAoYXhpczEsIGF4aXMyIGFuZCBheGlzMyBhcmUgbm9ybWFsaXplZCBkdXJpbmcgdGhpcyBvcGVyYXRpb24pXG4gICAgICogQHBhcmFtIGF4aXMxIC0gZGVmaW5lcyB0aGUgZmlyc3QgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMiAtIGRlZmluZXMgdGhlIHNlY29uZCBheGlzXG4gICAgICogQHBhcmFtIGF4aXMzIC0gZGVmaW5lcyB0aGUgdGhpcmQgYXhpc1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21BeGlzVG9Sb3RhdGlvblF1YXRlcm5pb24oYXhpczEsIGF4aXMyLCBheGlzMykge1xuICAgICAgICBjb25zdCBxdWF0ID0gUXVhdGVybmlvbi5jcmVhdGUoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgZnJvbUF4aXNUb1JvdGF0aW9uUXVhdGVybmlvblRvUmVmKGF4aXMxLCBheGlzMiwgYXhpczMsIHF1YXQpO1xuICAgICAgICByZXR1cm4gcXVhdDtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5mcm9tQXhpc1RvUm90YXRpb25RdWF0ZXJuaW9uID0gZnJvbUF4aXNUb1JvdGF0aW9uUXVhdGVybmlvbjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcm90YXRpb24gdmFsdWUgdG8gcmVhY2ggdGhlIHRhcmdldCAoYXhpczEsIGF4aXMyLCBheGlzMykgb3JpZW50YXRpb24gYXMgYSByb3RhdGVkIFhZWiBzeXN0ZW0gKGF4aXMxLCBheGlzMiBhbmQgYXhpczMgYXJlIG5vcm1hbGl6ZWQgZHVyaW5nIHRoaXMgb3BlcmF0aW9uKSBhbmQgc3RvcmVzIGl0IGluIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVmIC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tQXhpc1RvUm90YXRpb25RdWF0ZXJuaW9uVG9SZWYoYXhpczEsIGF4aXMyLCBheGlzMywgcmVmKSB7XG4gICAgICAgIGNvbnN0IHJvdE1hdCA9IE1hdHJpeC5jcmVhdGUoKTtcbiAgICAgICAgTWF0cml4LmZyb21YWVpBeGVzVG9SZWYoVmVjdG9yMy5ub3JtYWxpemUoYXhpczEpLCBWZWN0b3IzLm5vcm1hbGl6ZShheGlzMiksIFZlY3RvcjMubm9ybWFsaXplKGF4aXMzKSwgcm90TWF0KTtcbiAgICAgICAgUXVhdGVybmlvbi5mcm9tUm90YXRpb25NYXRyaXhUb1JlZihyb3RNYXQsIHJlZik7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uZnJvbUF4aXNUb1JvdGF0aW9uUXVhdGVybmlvblRvUmVmID0gZnJvbUF4aXNUb1JvdGF0aW9uUXVhdGVybmlvblRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB6ZXJvIGZpbGxlZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gWmVybygpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLlplcm8gPSBaZXJvO1xuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBSb3RhdGVzIHRoZSB0cmFuc2Zvcm0gc28gdGhlIGZvcndhcmQgdmVjdG9yIHBvaW50cyBhdCB0YXJnZXQncyBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21Mb29rQXQocG9zaXRpb24sIHRhcmdldCwgd29ybGRVcCA9IFZlY3RvcjMuVXAoKSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBRdWF0ZXJuaW9uLklkZW50aXR5KCk7XG4gICAgICAgIGZyb21Mb29rQXRUb1JlZihwb3NpdGlvbiwgdGFyZ2V0LCB3b3JsZFVwLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLmZyb21Mb29rQXQgPSBmcm9tTG9va0F0O1xuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBSb3RhdGVzIHRoZSB0cmFuc2Zvcm0gc28gdGhlIGZvcndhcmQgdmVjdG9yIHBvaW50cyBhdCB0YXJnZXQncyBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21Mb29rQXRUb1JlZihwb3NpdGlvbiwgdGFyZ2V0LCB3b3JsZFVwID0gVmVjdG9yMy5VcCgpLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgbSA9IE1hdHJpeC5JZGVudGl0eSgpO1xuICAgICAgICBNYXRyaXgubG9va0F0TEhUb1JlZihwb3NpdGlvbiwgdGFyZ2V0LCB3b3JsZFVwLCBtKTtcbiAgICAgICAgTWF0cml4LmludmVydFRvUmVmKG0sIG0pO1xuICAgICAgICBRdWF0ZXJuaW9uLmZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKG0sIHJlc3VsdCk7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uZnJvbUxvb2tBdFRvUmVmID0gZnJvbUxvb2tBdFRvUmVmO1xufSkoUXVhdGVybmlvbiB8fCAoUXVhdGVybmlvbiA9IHt9KSk7XG4iLCAiLyoqXG4gKiBAcHVibGljXG4gKiBWZWN0b3IyIGlzIGEgdHlwZSBhbmQgYSBuYW1lc3BhY2UuXG4gKiBgYGBcbiAqIC8vIFRoZSBuYW1lc3BhY2UgY29udGFpbnMgYWxsIHR5cGVzIGFuZCBmdW5jdGlvbnMgdG8gb3BlcmF0ZXMgd2l0aCBWZWN0b3IyXG4gKiBjb25zdCBuZXh0ID0gVmVjdG9yMi5hZGQocG9pbnRBLCB2ZWxvY2l0eUEpIC8vIGFkZCBmdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQgeWV0XG4gKiAvLyBUaGUgdHlwZSBWZWN0b3IyIGlzIGFuIGFsaWFzIHRvIFZlY3RvcjIuUmVhZG9ubHlWZWN0b3IyXG4gKiBjb25zdCByZWFkb25seVBvc2l0aW9uOiBWZWN0b3IyID0gVmVjdG9yMi5aZXJvKClcbiAqIHJlYWRvbmx5UG9zaXRpb24ueCA9IDAuMSAvLyB0aGlzIEZBSUxTXG4gKlxuICogLy8gRm9yIG11dGFibGUgdXNhZ2UsIHVzZSBgVmVjdG9yMi5NdXRhYmxlYFxuICogY29uc3QgcG9zaXRpb246IFZlY3RvcjIuTXV0YWJsZSA9IFZlY3RvcjIuT25lKClcbiAqIHBvc2l0aW9uLnggPSAzLjAgLy8gdGhpcyBXT1JLU1xuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgVmVjdG9yMjtcbihmdW5jdGlvbiAoVmVjdG9yMikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yMiBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4geCwgeSAoZmxvYXRzKSBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVzIChvbiBYIGF4aXMpXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZXMgKG9uIFkgYXhpcylcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICAgKi9cbiAgICB4ID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgc2Vjb25kIGNvb3JkaW5hdGVzIChvbiBZIGF4aXMpXG4gICAgICovXG4gICAgeSA9IDApIHtcbiAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgIH1cbiAgICBWZWN0b3IyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2V0IHRvICgwLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBlbXB0eSBWZWN0b3IyXG4gICAgICovXG4gICAgZnVuY3Rpb24gWmVybygpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCk7XG4gICAgfVxuICAgIFZlY3RvcjIuWmVybyA9IFplcm87XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IyIHNldCB0byAoMS4wLCAxLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgdW5pdCBWZWN0b3IyXG4gICAgICovXG4gICAgZnVuY3Rpb24gT25lKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDEuMCwgMS4wKTtcbiAgICB9XG4gICAgVmVjdG9yMi5PbmUgPSBPbmU7XG59KShWZWN0b3IyIHx8IChWZWN0b3IyID0ge30pKTtcbiIsICJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuL1NjYWxhcic7XG5pbXBvcnQgeyBUb0xpbmVhclNwYWNlLCBUb0dhbW1hU3BhY2UgfSBmcm9tICcuL3R5cGVzJztcbi8qKlxuICogQHB1YmxpY1xuICogQ29sb3I0IGlzIGEgdHlwZSBhbmQgYSBuYW1lc3BhY2UuXG4gKiBgYGBcbiAqIC8vIFRoZSBuYW1lc3BhY2UgY29udGFpbnMgYWxsIHR5cGVzIGFuZCBmdW5jdGlvbnMgdG8gb3BlcmF0ZXMgd2l0aCBDb2xvcjRcbiAqIENvbG9yNC5hZGQoYmx1ZSwgcmVkKSAvLyBzdW0gY29tcG9uZW50IGJ5IGNvbXBvbmVudCByZXN1bHRpbmcgcGlua1xuICogLy8gVGhlIHR5cGUgQ29sb3I0IGlzIGFuIGFsaWFzIHRvIENvbG9yNC5SZWFkb25seUNvbG9yNFxuICogY29uc3QgcmVhZG9ubHlCbHVlOiBDb2xvcjQgPSBDb2xvcjQuQmx1ZSgpXG4gKiByZWFkb25seUJsdWUuYSA9IDAuMSAvLyB0aGlzIEZBSUxTXG4gKlxuICogLy8gRm9yIG11dGFibGUgdXNhZ2UsIHVzZSBgQ29sb3I0Lk11dGFibGVgXG4gKiBjb25zdCBibHVlOiBDb2xvcjQuTXV0YWJsZSA9IENvbG9yNC5CbHVlKClcbiAqIGJsdWUuYSA9IDAuMSAvLyB0aGlzIFdPUktTXG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBDb2xvcjQ7XG4oZnVuY3Rpb24gKENvbG9yNCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgY3JlYXRlIG11dGFibGUgQ29sb3I0IGZyb20gcmVkLCBncmVlbiwgYmx1ZSB2YWx1ZXMsIGFsbCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDEpXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIHIgPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGcgPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgYiA9IDAsIFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDEpXG4gICAgICovXG4gICAgYSA9IDEpIHtcbiAgICAgICAgcmV0dXJuIHsgciwgZywgYiwgYSB9O1xuICAgIH1cbiAgICBDb2xvcjQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8vIFN0YXRpY3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQ29sb3I0IGZyb20gdGhlIHN0cmluZyBjb250YWluaW5nIHZhbGlkIGhleGFkZWNpbWFsIHZhbHVlc1xuICAgICAqIEBwYXJhbSBoZXggLSBkZWZpbmVzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsaWQgaGV4YWRlY2ltYWwgdmFsdWVzXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUhleFN0cmluZyhoZXgpIHtcbiAgICAgICAgaWYgKGhleC5zdWJzdHJpbmcoMCwgMSkgIT09ICcjJyB8fCAoaGV4Lmxlbmd0aCAhPT0gNyAmJiBoZXgubGVuZ3RoICE9PSA5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDEsIDMpLCAxNik7XG4gICAgICAgIGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDMsIDUpLCAxNik7XG4gICAgICAgIGNvbnN0IGIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDUsIDcpLCAxNik7XG4gICAgICAgIGNvbnN0IGFTdHIgPSBoZXguc3Vic3RyaW5nKDcsIDkpO1xuICAgICAgICBjb25zdCBhID0gYVN0ciA/IHBhcnNlSW50KGFTdHIsIDE2KSA6IDI1NTtcbiAgICAgICAgcmV0dXJuIENvbG9yNC5mcm9tSW50cyhyLCBnLCBiLCBhKTtcbiAgICB9XG4gICAgQ29sb3I0LmZyb21IZXhTdHJpbmcgPSBmcm9tSGV4U3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgY3JlYXRlIG11dGFibGUgQ29sb3I0ICBzZXQgd2l0aCB0aGUgbGluZWFybHkgaW50ZXJwb2xhdGVkIHZhbHVlcyBvZiBcImFtb3VudFwiIGJldHdlZW4gdGhlIGxlZnQgQ29sb3I0IG9iamVjdCBhbmQgdGhlIHJpZ2h0IENvbG9yNCBvYmplY3RcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZhbHVlXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgZW5kIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGZhY3RvclxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlcnAobGVmdCwgcmlnaHQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgQ29sb3I0LmxlcnBUb1JlZihsZWZ0LCByaWdodCwgYW1vdW50LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDb2xvcjQubGVycCA9IGxlcnA7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBnaXZlbiBcInJlc3VsdFwiIHdpdGggdGhlIGxpbmVhcmx5IGludGVycG9sYXRlZCB2YWx1ZXMgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBsZWZ0IENvbG9yNCBvYmplY3QgYW5kIHRoZSByaWdodCBDb2xvcjQgb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSBkYXRhXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVycFRvUmVmKGxlZnQsIHJpZ2h0LCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IGxlZnQuciArIChyaWdodC5yIC0gbGVmdC5yKSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LmcgPSBsZWZ0LmcgKyAocmlnaHQuZyAtIGxlZnQuZykgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC5iID0gbGVmdC5iICsgKHJpZ2h0LmIgLSBsZWZ0LmIpICogYW1vdW50O1xuICAgICAgICByZXN1bHQuYSA9IGxlZnQuYSArIChyaWdodC5hIC0gbGVmdC5hKSAqIGFtb3VudDtcbiAgICB9XG4gICAgQ29sb3I0LmxlcnBUb1JlZiA9IGxlcnBUb1JlZjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSByZWQgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWQoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMS4wLCAwLCAwLCAxLjApO1xuICAgIH1cbiAgICBDb2xvcjQuUmVkID0gUmVkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGdyZWVuIGNvbG9yXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gR3JlZW4oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMCwgMS4wLCAwLCAxLjApO1xuICAgIH1cbiAgICBDb2xvcjQuR3JlZW4gPSBHcmVlbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSBibHVlIGNvbG9yXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gQmx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLCAwLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIENvbG9yNC5CbHVlID0gQmx1ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSBibGFjayBjb2xvclxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJsYWNrKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAsIDAsIDAsIDEpO1xuICAgIH1cbiAgICBDb2xvcjQuQmxhY2sgPSBCbGFjaztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSB3aGl0ZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFdoaXRlKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDEsIDEsIDEsIDEpO1xuICAgIH1cbiAgICBDb2xvcjQuV2hpdGUgPSBXaGl0ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSBwdXJwbGUgY29sb3JcbiAgICAgKiBAcmV0dXJucyBjcmVhdGUgbXV0YWJsZSBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQdXJwbGUoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMC41LCAwLCAwLjUsIDEpO1xuICAgIH1cbiAgICBDb2xvcjQuUHVycGxlID0gUHVycGxlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIG1hZ2VudGEgY29sb3JcbiAgICAgKiBAcmV0dXJucyBjcmVhdGUgbXV0YWJsZSBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYWdlbnRhKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDEsIDAsIDEsIDEpO1xuICAgIH1cbiAgICBDb2xvcjQuTWFnZW50YSA9IE1hZ2VudGE7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yNCB2YWx1ZSBjb250YWluaW5nIGEgeWVsbG93IGNvbG9yXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gWWVsbG93KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDEsIDEsIDAsIDEpO1xuICAgIH1cbiAgICBDb2xvcjQuWWVsbG93ID0gWWVsbG93O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGdyYXkgY29sb3JcbiAgICAgKiBAcmV0dXJucyBjcmVhdGUgbXV0YWJsZSBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBHcmF5KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAuNSwgMC41LCAwLjUsIDEuMCk7XG4gICAgfVxuICAgIENvbG9yNC5HcmF5ID0gR3JheTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSB0ZWFsIGNvbG9yXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gVGVhbCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLCAxLjAsIDEuMCwgMS4wKTtcbiAgICB9XG4gICAgQ29sb3I0LlRlYWwgPSBUZWFsO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHRyYW5zcGFyZW50IGNvbG9yXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gQ2xlYXIoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMCwgMCwgMCwgMCk7XG4gICAgfVxuICAgIENvbG9yNC5DbGVhciA9IENsZWFyO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBDb2xvcjQgZnJvbSBhIENvbG9yMyBhbmQgYW4gYWxwaGEgdmFsdWVcbiAgICAgKiBAcGFyYW0gY29sb3IzIC0gZGVmaW5lcyB0aGUgc291cmNlIENvbG9yMyB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYWxwaGEgLSBkZWZpbmVzIHRoZSBhbHBoYSBjb21wb25lbnQgKDEuMCBieSBkZWZhdWx0KVxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21Db2xvcjMoY29sb3IzLCBhbHBoYSA9IDEuMCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKGNvbG9yMy5yLCBjb2xvcjMuZywgY29sb3IzLmIsIGFscGhhKTtcbiAgICB9XG4gICAgQ29sb3I0LmZyb21Db2xvcjMgPSBmcm9tQ29sb3IzO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBDb2xvcjQgZnJvbSB0aGUgc3RhcnRpbmcgaW5kZXggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXkgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0sIGFycmF5W29mZnNldCArIDJdLCBhcnJheVtvZmZzZXQgKyAzXSk7XG4gICAgfVxuICAgIENvbG9yNC5mcm9tQXJyYXkgPSBmcm9tQXJyYXk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgZnJvbSBpbnRlZ2VyIHZhbHVlcyAobGVzcyB0aGFuIDI1NilcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21JbnRzKHIsIGcsIGIsIGEpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZShyIC8gMjU1LjAsIGcgLyAyNTUuMCwgYiAvIDI1NS4wLCBhIC8gMjU1LjApO1xuICAgIH1cbiAgICBDb2xvcjQuZnJvbUludHMgPSBmcm9tSW50cztcbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY29udGVudCBvZiBhIGdpdmVuIGFycmF5IGFuZCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgUkdCQSBkYXRhXG4gICAgICogSWYgdGhlIG9yaWdpbmFsIGFycmF5IHdhcyBhbHJlYWR5IGNvbnRhaW5pbmcgY291bnQgKiA0IHZhbHVlcyB0aGVuIGl0IGlzIHJldHVybmVkIGRpcmVjdGx5XG4gICAgICogQHBhcmFtIGNvbG9ycyAtIGRlZmluZXMgdGhlIGFycmF5IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIGNvdW50IC0gZGVmaW5lcyB0aGUgbnVtYmVyIG9mIFJHQkEgZGF0YSB0byBleHBlY3RcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGNvdW50ICogNCB2YWx1ZXMgKFJHQkEpXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hlY2tDb2xvcnM0KGNvbG9ycywgY291bnQpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgY29sb3IzIHdhcyB1c2VkXG4gICAgICAgIGlmIChjb2xvcnMubGVuZ3RoID09PSBjb3VudCAqIDMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yczQgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb2xvcnMubGVuZ3RoOyBpbmRleCArPSAzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSAoaW5kZXggLyAzKSAqIDQ7XG4gICAgICAgICAgICAgICAgY29sb3JzNFtuZXdJbmRleF0gPSBjb2xvcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbG9yczRbbmV3SW5kZXggKyAxXSA9IGNvbG9yc1tpbmRleCArIDFdO1xuICAgICAgICAgICAgICAgIGNvbG9yczRbbmV3SW5kZXggKyAyXSA9IGNvbG9yc1tpbmRleCArIDJdO1xuICAgICAgICAgICAgICAgIGNvbG9yczRbbmV3SW5kZXggKyAzXSA9IDEuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2xvcnM0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgfVxuICAgIENvbG9yNC5jaGVja0NvbG9yczQgPSBjaGVja0NvbG9yczQ7XG4gICAgLy8gT3BlcmF0b3JzXG4gICAgLyoqXG4gICAgICogQWRkcyAgdGhlIGdpdmVuIENvbG9yNCB2YWx1ZXMgdG8gdGhlIHJlZiBDb2xvcjQgb2JqZWN0XG4gICAgICogQHBhcmFtIGEgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZWYgLSBkZWZpbmVzIHRoZSByZXN1bHQgcmZlcmVuY2VcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFRvUmVmKGEsIGIsIHJlZikge1xuICAgICAgICByZWYuciA9IGEuciArIGIucjtcbiAgICAgICAgcmVmLmcgPSBhLmcgKyBiLmc7XG4gICAgICAgIHJlZi5iID0gYS5iICsgYi5iO1xuICAgICAgICByZWYuYSA9IGEuYSArIGIuYTtcbiAgICB9XG4gICAgQ29sb3I0LmFkZFRvUmVmID0gYWRkVG9SZWY7XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGZyb20gdGhlIHN0YXJ0aW5nIGluZGV4IGluIHRoZSBnaXZlbiBhcnJheSB0aGUgQ29sb3I0IHN1Y2Nlc3NpdmUgdmFsdWVzXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgYXJyYXkgd2hlcmUgdG8gc3RvcmUgdGhlIHIsZyxiIGNvbXBvbmVudHNcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIGFuIG9wdGlvbmFsIGluZGV4IGluIHRoZSB0YXJnZXQgYXJyYXkgdG8gZGVmaW5lIHdoZXJlIHRvIHN0YXJ0IHN0b3JpbmcgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWUucjtcbiAgICAgICAgYXJyYXlbaW5kZXggKyAxXSA9IHZhbHVlLmc7XG4gICAgICAgIGFycmF5W2luZGV4ICsgMl0gPSB2YWx1ZS5iO1xuICAgICAgICBhcnJheVtpbmRleCArIDNdID0gdmFsdWUuYTtcbiAgICB9XG4gICAgQ29sb3I0LnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBDb2xvcjQgc2V0IHdpdGggdGhlIGFkZGVkIHZhbHVlcyBvZiB0aGUgY3VycmVudCBDb2xvcjQgYW5kIG9mIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZCh2YWx1ZSwgcmlnaHQpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gQ2xlYXIoKTtcbiAgICAgICAgYWRkVG9SZWYodmFsdWUsIHJpZ2h0LCByZXQpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBDb2xvcjQuYWRkID0gYWRkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBDb2xvcjQgc2V0IHdpdGggdGhlIHN1YnRyYWN0ZWQgdmFsdWVzIG9mIHRoZSBnaXZlbiBvbmUgZnJvbSB0aGUgY3VycmVudCBDb2xvcjRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1YnRyYWN0KHZhbHVlLCByaWdodCkge1xuICAgICAgICBjb25zdCByZXQgPSBDbGVhcigpO1xuICAgICAgICBzdWJ0cmFjdFRvUmVmKHZhbHVlLCByaWdodCwgcmV0KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgQ29sb3I0LnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgLyoqXG4gICAgICogU3VidHJhY3RzIHRoZSBnaXZlbiBvbmVzIGZyb20gdGhlIGN1cnJlbnQgQ29sb3I0IHZhbHVlcyBhbmQgc3RvcmVzIHRoZSByZXN1bHRzIGluIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBDb2xvcjQgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VidHJhY3RUb1JlZihhLCBiLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSBhLnIgLSBiLnI7XG4gICAgICAgIHJlc3VsdC5nID0gYS5nIC0gYi5nO1xuICAgICAgICByZXN1bHQuYiA9IGEuYiAtIGIuYjtcbiAgICAgICAgcmVzdWx0LmEgPSBhLmEgLSBiLmE7XG4gICAgfVxuICAgIENvbG9yNC5zdWJ0cmFjdFRvUmVmID0gc3VidHJhY3RUb1JlZjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQ29sb3I0IHdpdGggdGhlIGN1cnJlbnQgQ29sb3I0IHZhbHVlcyBtdWx0aXBsaWVkIGJ5IHNjYWxlXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3IgdG8gYXBwbHlcbiAgICAgKiBAcmV0dXJucyBjcmVhdGUgbXV0YWJsZSBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZSh2YWx1ZSwgc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSh2YWx1ZS5yICogc2NhbGUsIHZhbHVlLmcgKiBzY2FsZSwgdmFsdWUuYiAqIHNjYWxlLCB2YWx1ZS5hICogc2NhbGUpO1xuICAgIH1cbiAgICBDb2xvcjQuc2NhbGUgPSBzY2FsZTtcbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgYnkgc2NhbGUgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsaW5nIGZhY3RvciB0byBhcHBseVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBDb2xvcjQgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZVRvUmVmKHZhbHVlLCBzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gdmFsdWUuciAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuZyA9IHZhbHVlLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgPSB2YWx1ZS5iICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5hID0gdmFsdWUuYSAqIHNjYWxlO1xuICAgIH1cbiAgICBDb2xvcjQuc2NhbGVUb1JlZiA9IHNjYWxlVG9SZWY7XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgQ29sb3I0IHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBDb2xvcjRcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2NhbGVBbmRBZGRUb1JlZih2YWx1ZSwgc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciArPSB2YWx1ZS5yICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5nICs9IHZhbHVlLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgKz0gdmFsdWUuYiAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuYSArPSB2YWx1ZS5hICogc2NhbGU7XG4gICAgfVxuICAgIENvbG9yNC5zY2FsZUFuZEFkZFRvUmVmID0gc2NhbGVBbmRBZGRUb1JlZjtcbiAgICAvKipcbiAgICAgKiBDbGFtcHMgdGhlIHJnYiB2YWx1ZXMgYnkgdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG1pbiAtIGRlZmluZXMgbWluaW11bSBjbGFtcGluZyB2YWx1ZSAoZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBtYXggLSBkZWZpbmVzIG1heGltdW0gY2xhbXBpbmcgdmFsdWUgKGRlZmF1bHQgaXMgMSlcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyBjb2xvciB0byBzdG9yZSB0aGUgcmVzdWx0IGludG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXBUb1JlZih2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gU2NhbGFyLmNsYW1wKHZhbHVlLnIsIG1pbiwgbWF4KTtcbiAgICAgICAgcmVzdWx0LmcgPSBTY2FsYXIuY2xhbXAodmFsdWUuZywgbWluLCBtYXgpO1xuICAgICAgICByZXN1bHQuYiA9IFNjYWxhci5jbGFtcCh2YWx1ZS5iLCBtaW4sIG1heCk7XG4gICAgICAgIHJlc3VsdC5hID0gU2NhbGFyLmNsYW1wKHZhbHVlLmEsIG1pbiwgbWF4KTtcbiAgICB9XG4gICAgQ29sb3I0LmNsYW1wVG9SZWYgPSBjbGFtcFRvUmVmO1xuICAgIC8qKlxuICAgICAqIE11bHRpcHkgYW4gQ29sb3I0IHZhbHVlIGJ5IGFub3RoZXIgYW5kIHJldHVybiBjcmVhdGUgbXV0YWJsZSBDb2xvcjRcbiAgICAgKiBAcGFyYW0gY29sb3IgLSBkZWZpbmVzIHRoZSBDb2xvcjQgdmFsdWUgdG8gbXVsdGlwbHkgYnlcbiAgICAgKiBAcmV0dXJucyBjcmVhdGUgbXV0YWJsZSBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseSh2YWx1ZSwgY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSh2YWx1ZS5yICogY29sb3IuciwgdmFsdWUuZyAqIGNvbG9yLmcsIHZhbHVlLmIgKiBjb2xvci5iLCB2YWx1ZS5hICogY29sb3IuYSk7XG4gICAgfVxuICAgIENvbG9yNC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIC8qKlxuICAgICAqIE11bHRpcHkgYSBDb2xvcjQgdmFsdWUgYnkgYW5vdGhlciBhbmQgcHVzaCB0aGUgcmVzdWx0IGluIGEgcmVmZXJlbmNlIHZhbHVlXG4gICAgICogQHBhcmFtIGNvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IHZhbHVlIHRvIG11bHRpcGx5IGJ5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yNCB0byBmaWxsIHRoZSByZXN1bHQgaW5cbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0IENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGx5VG9SZWYodmFsdWUsIGNvbG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB2YWx1ZS5yICogY29sb3IucjtcbiAgICAgICAgcmVzdWx0LmcgPSB2YWx1ZS5nICogY29sb3IuZztcbiAgICAgICAgcmVzdWx0LmIgPSB2YWx1ZS5iICogY29sb3IuYjtcbiAgICAgICAgcmVzdWx0LmEgPSB2YWx1ZS5hICogY29sb3IuYTtcbiAgICB9XG4gICAgQ29sb3I0Lm11bHRpcGx5VG9SZWYgPSBtdWx0aXBseVRvUmVmO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJpbmcgd2l0aCB0aGUgQ29sb3I0IGN1cnJlbnQgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoJ3tSOiAnICtcbiAgICAgICAgICAgIHZhbHVlLnIgK1xuICAgICAgICAgICAgJyBHOicgK1xuICAgICAgICAgICAgdmFsdWUuZyArXG4gICAgICAgICAgICAnIEI6JyArXG4gICAgICAgICAgICB2YWx1ZS5iICtcbiAgICAgICAgICAgICcgQTonICtcbiAgICAgICAgICAgIHZhbHVlLmEgK1xuICAgICAgICAgICAgJ30nKTtcbiAgICB9XG4gICAgQ29sb3I0LnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgQ29sb3I0IGhhc2ggY29kZVxuICAgICAqIEByZXR1cm5zIGFuIHVuaXF1ZSBudW1iZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBoYXNoIENvbG9yNCBvYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SGFzaENvZGUodmFsdWUpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB2YWx1ZS5yIHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodmFsdWUuZyB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh2YWx1ZS5iIHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHZhbHVlLmEgfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICBDb2xvcjQuZ2V0SGFzaENvZGUgPSBnZXRIYXNoQ29kZTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQ29sb3I0IGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUodmFsdWUuciwgdmFsdWUuZywgdmFsdWUuYiwgdmFsdWUuYSk7XG4gICAgfVxuICAgIENvbG9yNC5jbG9uZSA9IGNsb25lO1xuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgZ2l2ZW4gQ29sb3I0IHZhbHVlcyBpbnRvIHRoZSBkZXN0aW5hdGlvblxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBkZWZpbmVzIHRoZSBzb3VyY2UgQ29sb3I0IG9iamVjdFxuICAgICAqIEBwYXJhbSBkZXN0IC0gZGVmaW5lcyB0aGUgZGVzdGluYXRpb24gQ29sb3I0IG9iamVjdFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUZyb20oc291cmNlLCBkZXN0KSB7XG4gICAgICAgIGRlc3QuciA9IHNvdXJjZS5yO1xuICAgICAgICBkZXN0LmcgPSBzb3VyY2UuZztcbiAgICAgICAgZGVzdC5iID0gc291cmNlLmI7XG4gICAgICAgIGRlc3QuYSA9IHNvdXJjZS5hO1xuICAgIH1cbiAgICBDb2xvcjQuY29weUZyb20gPSBjb3B5RnJvbTtcbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHZhbHVlcyBpbnRvIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBhIC0gZGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlGcm9tRmxvYXRzKHIsIGcsIGIsIGEsIGRlc3QpIHtcbiAgICAgICAgZGVzdC5yID0gcjtcbiAgICAgICAgZGVzdC5nID0gZztcbiAgICAgICAgZGVzdC5iID0gYjtcbiAgICAgICAgZGVzdC5hID0gYTtcbiAgICB9XG4gICAgQ29sb3I0LmNvcHlGcm9tRmxvYXRzID0gY29weUZyb21GbG9hdHM7XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBmbG9hdCB2YWx1ZXMgaW50byB0aGUgY3VycmVudCBvbmVcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQociwgZywgYiwgYSwgZGVzdCkge1xuICAgICAgICBkZXN0LnIgPSByO1xuICAgICAgICBkZXN0LmcgPSBnO1xuICAgICAgICBkZXN0LmIgPSBiO1xuICAgICAgICBkZXN0LmEgPSBhO1xuICAgIH1cbiAgICBDb2xvcjQuc2V0ID0gc2V0O1xuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIENvbG9yNCBoZXhhZGVjaW1hbCBjb2RlIGFzIGEgc3RyaW5nXG4gICAgICogQHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgaGV4YWRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0hleFN0cmluZyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBpbnRSID0gKHZhbHVlLnIgKiAyNTUpIHwgMDtcbiAgICAgICAgY29uc3QgaW50RyA9ICh2YWx1ZS5nICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEIgPSAodmFsdWUuYiAqIDI1NSkgfCAwO1xuICAgICAgICBjb25zdCBpbnRBID0gKHZhbHVlLmEgKiAyNTUpIHwgMDtcbiAgICAgICAgcmV0dXJuICgnIycgK1xuICAgICAgICAgICAgU2NhbGFyLnRvSGV4KGludFIpICtcbiAgICAgICAgICAgIFNjYWxhci50b0hleChpbnRHKSArXG4gICAgICAgICAgICBTY2FsYXIudG9IZXgoaW50QikgK1xuICAgICAgICAgICAgU2NhbGFyLnRvSGV4KGludEEpKTtcbiAgICB9XG4gICAgQ29sb3I0LnRvSGV4U3RyaW5nID0gdG9IZXhTdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSBDb2xvcjQgY29udmVydGVkIGZyb20gdGhlIGN1cnJlbnQgb25lIHRvIGxpbmVhciBzcGFjZVxuICAgICAqIEByZXR1cm5zIGNyZWF0ZSBtdXRhYmxlIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGluZWFyU3BhY2UodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY29udmVydGVkQ29sb3IgPSBjcmVhdGUoKTtcbiAgICAgICAgdG9MaW5lYXJTcGFjZVRvUmVmKHZhbHVlLCBjb252ZXJ0ZWRDb2xvcik7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRDb2xvcjtcbiAgICB9XG4gICAgQ29sb3I0LnRvTGluZWFyU3BhY2UgPSB0b0xpbmVhclNwYWNlO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBDb2xvcjQgdmFsdWVzIHRvIGxpbmVhciBzcGFjZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gXCJjb252ZXJ0ZWRDb2xvclwiXG4gICAgICogQHBhcmFtIGNvbnZlcnRlZENvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgbGluZWFyIHNwYWNlIHZlcnNpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBDb2xvcjRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xpbmVhclNwYWNlVG9SZWYodmFsdWUsIHJlZikge1xuICAgICAgICByZWYuciA9IE1hdGgucG93KHZhbHVlLnIsIFRvTGluZWFyU3BhY2UpO1xuICAgICAgICByZWYuZyA9IE1hdGgucG93KHZhbHVlLmcsIFRvTGluZWFyU3BhY2UpO1xuICAgICAgICByZWYuYiA9IE1hdGgucG93KHZhbHVlLmIsIFRvTGluZWFyU3BhY2UpO1xuICAgICAgICByZWYuYSA9IHZhbHVlLmE7XG4gICAgfVxuICAgIENvbG9yNC50b0xpbmVhclNwYWNlVG9SZWYgPSB0b0xpbmVhclNwYWNlVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSBDb2xvcjQgY29udmVydGVkIGZyb20gdGhlIGN1cnJlbnQgb25lIHRvIGdhbW1hIHNwYWNlXG4gICAgICogQHJldHVybnMgY3JlYXRlIG11dGFibGUgQ29sb3I0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9HYW1tYVNwYWNlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZENvbG9yID0gY3JlYXRlKCk7XG4gICAgICAgIHRvR2FtbWFTcGFjZVRvUmVmKHZhbHVlLCBjb252ZXJ0ZWRDb2xvcik7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRDb2xvcjtcbiAgICB9XG4gICAgQ29sb3I0LnRvR2FtbWFTcGFjZSA9IHRvR2FtbWFTcGFjZTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgQ29sb3I0IHZhbHVlcyB0byBnYW1tYSBzcGFjZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gXCJjb252ZXJ0ZWRDb2xvclwiXG4gICAgICogQHBhcmFtIGNvbnZlcnRlZENvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgZ2FtbWEgc3BhY2UgdmVyc2lvblxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIENvbG9yNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvR2FtbWFTcGFjZVRvUmVmKHZhbHVlLCBjb252ZXJ0ZWRDb2xvcikge1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5yID0gTWF0aC5wb3codmFsdWUuciwgVG9HYW1tYVNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuZyA9IE1hdGgucG93KHZhbHVlLmcsIFRvR2FtbWFTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmIgPSBNYXRoLnBvdyh2YWx1ZS5iLCBUb0dhbW1hU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5hID0gdmFsdWUuYTtcbiAgICB9XG4gICAgQ29sb3I0LnRvR2FtbWFTcGFjZVRvUmVmID0gdG9HYW1tYVNwYWNlVG9SZWY7XG59KShDb2xvcjQgfHwgKENvbG9yNCA9IHt9KSk7XG4iLCAiaW1wb3J0IHsgVG9MaW5lYXJTcGFjZSwgVG9HYW1tYVNwYWNlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tICcuL0NvbG9yNCc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuL1NjYWxhcic7XG4vKipcbiAqIEBwdWJsaWNcbiAqIENvbG9yMyBpcyBhIHR5cGUgYW5kIGEgbmFtZXNwYWNlLlxuICogYGBgXG4gKiAvLyBUaGUgbmFtZXNwYWNlIGNvbnRhaW5zIGFsbCB0eXBlcyBhbmQgZnVuY3Rpb25zIHRvIG9wZXJhdGVzIHdpdGggQ29sb3IzXG4gKiBDb2xvcjMuYWRkKGJsdWUsIHJlZCkgLy8gc3VtIGNvbXBvbmVudCBieSBjb21wb25lbnQgcmVzdWx0aW5nIHBpbmtcbiAqIC8vIFRoZSB0eXBlIENvbG9yMyBpcyBhbiBhbGlhcyB0byBDb2xvcjMuUmVhZG9ubHlDb2xvcjNcbiAqIGNvbnN0IHJlYWRvbmx5Qmx1ZTogQ29sb3IzID0gQ29sb3IzLkJsdWUoKVxuICogcmVhZG9ubHlCbHVlLnIgPSAwLjEgLy8gdGhpcyBGQUlMU1xuICpcbiAqIC8vIEZvciBtdXRhYmxlIHVzYWdlLCB1c2UgYENvbG9yMy5NdXRhYmxlYFxuICogY29uc3QgYmx1ZTogQ29sb3IzLk11dGFibGUgPSBDb2xvcjMuQmx1ZSgpXG4gKiBibHVlLnIgPSAwLjEgLy8gdGhpcyBXT1JLU1xuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgQ29sb3IzO1xuKGZ1bmN0aW9uIChDb2xvcjMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIENvbG9yMyBvYmplY3QgZnJvbSByZWQsIGdyZWVuLCBibHVlIHZhbHVlcywgYWxsIGJldHdlZW4gMCBhbmQgMVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSByZWQgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKi9cbiAgICByID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKi9cbiAgICBnID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGIgPSAwKSB7XG4gICAgICAgIHJldHVybiB7IHIsIGcsIGIgfTtcbiAgICB9XG4gICAgQ29sb3IzLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgVmVjdG9yMyBmcm9tIHRoZSBzdHJpbmcgY29udGFpbmluZyB2YWxpZCBoZXhhZGVjaW1hbCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gaGV4IC0gZGVmaW5lcyBhIHN0cmluZyBjb250YWluaW5nIHZhbGlkIGhleGFkZWNpbWFsIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tSGV4U3RyaW5nKGhleCkge1xuICAgICAgICBpZiAoaGV4LnN1YnN0cmluZygwLCAxKSAhPT0gJyMnIHx8IGhleC5sZW5ndGggIT09IDcpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMSwgMyksIDE2KTtcbiAgICAgICAgY29uc3QgZyA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMywgNSksIDE2KTtcbiAgICAgICAgY29uc3QgYiA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoNSwgNyksIDE2KTtcbiAgICAgICAgcmV0dXJuIGZyb21JbnRzKHIsIGcsIGIpO1xuICAgIH1cbiAgICBDb2xvcjMuZnJvbUhleFN0cmluZyA9IGZyb21IZXhTdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IzIGZyb20gdGhlIHN0YXJ0aW5nIGluZGV4IG9mIHRoZSBnaXZlbiBhcnJheVxuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIGFuIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKGFycmF5W29mZnNldF0sIGFycmF5W29mZnNldCArIDFdLCBhcnJheVtvZmZzZXQgKyAyXSk7XG4gICAgfVxuICAgIENvbG9yMy5mcm9tQXJyYXkgPSBmcm9tQXJyYXk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFZlY3RvcjMgZnJvbSBpbnRlZ2VyIHZhbHVlcyAobGVzcyB0aGFuIDI1NilcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbUludHMociwgZywgYikge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHIgLyAyNTUuMCwgZyAvIDI1NS4wLCBiIC8gMjU1LjApO1xuICAgIH1cbiAgICBDb2xvcjMuZnJvbUludHMgPSBmcm9tSW50cztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgVmVjdG9yMyB3aXRoIHZhbHVlcyBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBzdGFydCBDb2xvcjMgYW5kIHRoZSBlbmQgQ29sb3IzXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgQ29sb3IzIHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCBDb2xvcjMgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgdmFsdWUgYmV0d2VlbiBzdGFydCBhbmQgZW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlcnAoc3RhcnQsIGVuZCwgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSgwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgQ29sb3IzLmxlcnBUb1JlZihzdGFydCwgZW5kLCBhbW91bnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvbG9yMy5sZXJwID0gbGVycDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgVmVjdG9yMyB3aXRoIHZhbHVlcyBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBzdGFydCBDb2xvcjMgYW5kIHRoZSBlbmQgQ29sb3IzXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVycFRvUmVmKGxlZnQsIHJpZ2h0LCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IGxlZnQuciArIChyaWdodC5yIC0gbGVmdC5yKSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LmcgPSBsZWZ0LmcgKyAocmlnaHQuZyAtIGxlZnQuZykgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC5iID0gbGVmdC5iICsgKHJpZ2h0LmIgLSBsZWZ0LmIpICogYW1vdW50O1xuICAgIH1cbiAgICBDb2xvcjMubGVycFRvUmVmID0gbGVycFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHJlZCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWQoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMSwgMCwgMCk7XG4gICAgfVxuICAgIENvbG9yMy5SZWQgPSBSZWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgZ3JlZW4gY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gR3JlZW4oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMCwgMSwgMCk7XG4gICAgfVxuICAgIENvbG9yMy5HcmVlbiA9IEdyZWVuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIGJsdWUgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gQmx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLCAwLCAxKTtcbiAgICB9XG4gICAgQ29sb3IzLkJsdWUgPSBCbHVlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIGJsYWNrIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJsYWNrKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDAsIDAsIDApO1xuICAgIH1cbiAgICBDb2xvcjMuQmxhY2sgPSBCbGFjaztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSB3aGl0ZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBXaGl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgxLCAxLCAxKTtcbiAgICB9XG4gICAgQ29sb3IzLldoaXRlID0gV2hpdGU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgcHVycGxlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFB1cnBsZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjUsIDAsIDAuNSk7XG4gICAgfVxuICAgIENvbG9yMy5QdXJwbGUgPSBQdXJwbGU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgbWFnZW50YSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYWdlbnRhKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKDEsIDAsIDEpO1xuICAgIH1cbiAgICBDb2xvcjMuTWFnZW50YSA9IE1hZ2VudGE7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgeWVsbG93IGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFllbGxvdygpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgxLCAxLCAwKTtcbiAgICB9XG4gICAgQ29sb3IzLlllbGxvdyA9IFllbGxvdztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSBncmF5IGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEdyYXkoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMC41LCAwLjUsIDAuNSk7XG4gICAgfVxuICAgIENvbG9yMy5HcmF5ID0gR3JheTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSB0ZWFsIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRlYWwoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMCwgMS4wLCAxLjApO1xuICAgIH1cbiAgICBDb2xvcjMuVGVhbCA9IFRlYWw7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgcmFuZG9tIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFJhbmRvbSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZShNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgICB9XG4gICAgQ29sb3IzLlJhbmRvbSA9IFJhbmRvbTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RyaW5nIHdpdGggdGhlIENvbG9yMyBjdXJyZW50IHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gJ3tSOiAnICsgdmFsdWUuciArICcgRzonICsgdmFsdWUuZyArICcgQjonICsgdmFsdWUuYiArICd9JztcbiAgICB9XG4gICAgQ29sb3IzLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgQ29sb3IzIGhhc2ggY29kZVxuICAgICAqIEByZXR1cm5zIGFuIHVuaXF1ZSBudW1iZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBoYXNoIENvbG9yMyBvYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SGFzaENvZGUodmFsdWUpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB2YWx1ZS5yIHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodmFsdWUuZyB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh2YWx1ZS5iIHx8IDApO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgQ29sb3IzLmdldEhhc2hDb2RlID0gZ2V0SGFzaENvZGU7XG4gICAgLy8gT3BlcmF0b3JzXG4gICAgLyoqXG4gICAgICogU3RvcmVzIGluIHRoZSBnaXZlbiBhcnJheSBmcm9tIHRoZSBnaXZlbiBzdGFydGluZyBpbmRleCB0aGUgcmVkLCBncmVlbiwgYmx1ZSB2YWx1ZXMgYXMgc3VjY2Vzc2l2ZSBlbGVtZW50c1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGFycmF5IHdoZXJlIHRvIHN0b3JlIHRoZSByLGcsYiBjb21wb25lbnRzXG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyBhbiBvcHRpb25hbCBpbmRleCBpbiB0aGUgdGFyZ2V0IGFycmF5IHRvIGRlZmluZSB3aGVyZSB0byBzdGFydCBzdG9yaW5nIHZhbHVlc1xuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgYXJyYXksIGluZGV4ID0gMCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZS5yO1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdmFsdWUuZztcbiAgICAgICAgYXJyYXlbaW5kZXggKyAyXSA9IHZhbHVlLmI7XG4gICAgfVxuICAgIENvbG9yMy50b0FycmF5ID0gdG9BcnJheTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3QgZnJvbSB0aGUgY3VycmVudCBDb2xvcjMgYW5kIHRoZSBnaXZlbiBhbHBoYVxuICAgICAqIEBwYXJhbSBhbHBoYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCBvbiB0aGUgbmV3IENvbG9yNCBvYmplY3QgKGRlZmF1bHQgaXMgMSlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Db2xvcjQodmFsdWUsIGFscGhhID0gMSkge1xuICAgICAgICByZXR1cm4gQ29sb3I0LmNyZWF0ZSh2YWx1ZS5yLCB2YWx1ZS5nLCB2YWx1ZS5iLCBhbHBoYSk7XG4gICAgfVxuICAgIENvbG9yMy50b0NvbG9yNCA9IHRvQ29sb3I0O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgYXJyYXkgcG9wdWxhdGVkIHdpdGggMyBudW1lcmljIGVsZW1lbnRzIDogcmVkLCBncmVlbiBhbmQgYmx1ZSB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IGFycmF5XG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNBcnJheSh2YWx1ZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdG9BcnJheSh2YWx1ZSwgcmVzdWx0LCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ29sb3IzLmFzQXJyYXkgPSBhc0FycmF5O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGx1bWluYW5jZSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIGEgZmxvYXQgdmFsdWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0x1bWluYW5jZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUuciAqIDAuMyArIHZhbHVlLmcgKiAwLjU5ICsgdmFsdWUuYiAqIDAuMTE7XG4gICAgfVxuICAgIENvbG9yMy50b0x1bWluYW5jZSA9IHRvTHVtaW5hbmNlO1xuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IGVhY2ggQ29sb3IzIHJnYiB2YWx1ZXMgYnkgdGhlIGdpdmVuIENvbG9yMyByZ2IgdmFsdWVzIGluIENvbG9yMyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGNyZWF0ZSBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtdWx0aXBseSh2YWx1ZSwgb3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHZhbHVlLnIgKiBvdGhlckNvbG9yLnIsIHZhbHVlLmcgKiBvdGhlckNvbG9yLmcsIHZhbHVlLmIgKiBvdGhlckNvbG9yLmIpO1xuICAgIH1cbiAgICBDb2xvcjMubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGUgcmdiIHZhbHVlcyBvZiB0aGUgQ29sb3IzIGFuZCB0aGUgZ2l2ZW4gQ29sb3IzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGUgb2JqZWN0IFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IENvbG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGx5VG9SZWYodmFsdWUsIG90aGVyQ29sb3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHZhbHVlLnIgKiBvdGhlckNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdmFsdWUuZyAqIG90aGVyQ29sb3IuZztcbiAgICAgICAgcmVzdWx0LmIgPSB2YWx1ZS5iICogb3RoZXJDb2xvci5iO1xuICAgIH1cbiAgICBDb2xvcjMubXVsdGlwbHlUb1JlZiA9IG11bHRpcGx5VG9SZWY7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBlcXVhbGl0eSBiZXR3ZWVuIENvbG9yMyBvYmplY3RzXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJnYiB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxzKHZhbHVlLCBvdGhlckNvbG9yKSB7XG4gICAgICAgIHJldHVybiAob3RoZXJDb2xvciAmJlxuICAgICAgICAgICAgdmFsdWUuciA9PT0gb3RoZXJDb2xvci5yICYmXG4gICAgICAgICAgICB2YWx1ZS5nID09PSBvdGhlckNvbG9yLmcgJiZcbiAgICAgICAgICAgIHZhbHVlLmIgPT09IG90aGVyQ29sb3IuYik7XG4gICAgfVxuICAgIENvbG9yMy5lcXVhbHMgPSBlcXVhbHM7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBlcXVhbGl0eSBiZXR3ZWVuIHRoZSBjdXJyZW50IENvbG9yMyBvYmplY3QgYW5kIGEgc2V0IG9mIHIsYixnIHZhbHVlc1xuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byBjaGVja1xuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJnYiB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxzRmxvYXRzKHZhbHVlLCByLCBnLCBiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yID09PSByICYmIHZhbHVlLmcgPT09IGcgJiYgdmFsdWUuYiA9PT0gYjtcbiAgICB9XG4gICAgQ29sb3IzLmVxdWFsc0Zsb2F0cyA9IGVxdWFsc0Zsb2F0cztcbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIGluIHBsYWNlIGVhY2ggcmdiIHZhbHVlIGJ5IHNjYWxlXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBDb2xvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZSh2YWx1ZSwgc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSh2YWx1ZS5yICogc2NhbGUsIHZhbHVlLmcgKiBzY2FsZSwgdmFsdWUuYiAqIHNjYWxlKTtcbiAgICB9XG4gICAgQ29sb3IzLnNjYWxlID0gc2NhbGU7XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgcmdiIHZhbHVlcyBieSBzY2FsZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY2FsZVRvUmVmKHZhbHVlLCBzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gdmFsdWUuciAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuZyA9IHZhbHVlLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgPSB2YWx1ZS5iICogc2NhbGU7XG4gICAgfVxuICAgIENvbG9yMy5zY2FsZVRvUmVmID0gc2NhbGVUb1JlZjtcbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBDb2xvcjMgdmFsdWVzIGJ5IGEgZmFjdG9yIGFuZCBhZGQgdGhlIHJlc3VsdCB0byBhIGdpdmVuIENvbG9yM1xuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIGNvbG9yIHRvIHN0b3JlIHRoZSByZXN1bHQgaW50b1xuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgQ29sb3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2NhbGVBbmRBZGRUb1JlZih2YWx1ZSwgc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciArPSB2YWx1ZS5yICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5nICs9IHZhbHVlLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgKz0gdmFsdWUuYiAqIHNjYWxlO1xuICAgIH1cbiAgICBDb2xvcjMuc2NhbGVBbmRBZGRUb1JlZiA9IHNjYWxlQW5kQWRkVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ2xhbXBzIHRoZSByZ2IgdmFsdWVzIGJ5IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGludG8gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBtaW4gLSBkZWZpbmVzIG1pbmltdW0gY2xhbXBpbmcgdmFsdWUgKGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyBtYXhpbXVtIGNsYW1waW5nIHZhbHVlIChkZWZhdWx0IGlzIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgY29sb3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIG9yaWdpbmFsIENvbG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wVG9SZWYodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IFNjYWxhci5jbGFtcCh2YWx1ZS5yLCBtaW4sIG1heCk7XG4gICAgICAgIHJlc3VsdC5nID0gU2NhbGFyLmNsYW1wKHZhbHVlLmcsIG1pbiwgbWF4KTtcbiAgICAgICAgcmVzdWx0LmIgPSBTY2FsYXIuY2xhbXAodmFsdWUuYiwgbWluLCBtYXgpO1xuICAgIH1cbiAgICBDb2xvcjMuY2xhbXBUb1JlZiA9IGNsYW1wVG9SZWY7XG4gICAgLyoqXG4gICAgICogQ2xhbXBzIHRoZSByZ2IgdmFsdWVzIGJ5IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgYW5kIHJldHVybnMgdGhlIHJlc3VsdFxuICAgICAqIEBwYXJhbSBtaW4gLSBkZWZpbmVzIG1pbmltdW0gY2xhbXBpbmcgdmFsdWUgKGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyBtYXhpbXVtIGNsYW1waW5nIHZhbHVlIChkZWZhdWx0IGlzIDEpXG4gICAgICogQHJldHVybnMgcmVzdWx0XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gQ29sb3IzLkJsYWNrKCk7XG4gICAgICAgIGNsYW1wVG9SZWYodmFsdWUsIG1pbiwgbWF4LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDb2xvcjMuY2xhbXAgPSBjbGFtcDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIENvbG9yMyBzZXQgd2l0aCB0aGUgYWRkZWQgdmFsdWVzIG9mIHRoZSBjdXJyZW50IENvbG9yMyBhbmQgb2YgdGhlIGdpdmVuIG9uZVxuICAgICAqIEBwYXJhbSBvdGhlckNvbG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKHZhbHVlLCBvdGhlckNvbG9yKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUodmFsdWUuciArIG90aGVyQ29sb3IuciwgdmFsdWUuZyArIG90aGVyQ29sb3IuZywgdmFsdWUuYiArIG90aGVyQ29sb3IuYik7XG4gICAgfVxuICAgIENvbG9yMy5hZGQgPSBhZGQ7XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSByZXN1bHQgb2YgdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IENvbG9yMyBhbmQgZ2l2ZW4gb25lIHJnYiB2YWx1ZXMgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIENvbG9yMyBvYmplY3QgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRUb1JlZih2YWx1ZSwgb3RoZXJDb2xvciwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gdmFsdWUuciArIG90aGVyQ29sb3IucjtcbiAgICAgICAgcmVzdWx0LmcgPSB2YWx1ZS5nICsgb3RoZXJDb2xvci5nO1xuICAgICAgICByZXN1bHQuYiA9IHZhbHVlLmIgKyBvdGhlckNvbG9yLmI7XG4gICAgfVxuICAgIENvbG9yMy5hZGRUb1JlZiA9IGFkZFRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgQ29sb3IzIHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgQ29sb3IzXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjcmVhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCh2YWx1ZSwgb3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHZhbHVlLnIgLSBvdGhlckNvbG9yLnIsIHZhbHVlLmcgLSBvdGhlckNvbG9yLmcsIHZhbHVlLmIgLSBvdGhlckNvbG9yLmIpO1xuICAgIH1cbiAgICBDb2xvcjMuc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIHJlc3VsdCBvZiB0aGUgc3VidHJhY3Rpb24gb2YgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgQ29sb3IzIHJnYiB2YWx1ZXMgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIENvbG9yMyBvYmplY3QgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdWJ0cmFjdFRvUmVmKHZhbHVlLCBvdGhlckNvbG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB2YWx1ZS5yIC0gb3RoZXJDb2xvci5yO1xuICAgICAgICByZXN1bHQuZyA9IHZhbHVlLmcgLSBvdGhlckNvbG9yLmc7XG4gICAgICAgIHJlc3VsdC5iID0gdmFsdWUuYiAtIG90aGVyQ29sb3IuYjtcbiAgICB9XG4gICAgQ29sb3IzLnN1YnRyYWN0VG9SZWYgPSBzdWJ0cmFjdFRvUmVmO1xuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAgICogQHJldHVybnMgQ29sb3IzIGNvcGllZCB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHZhbHVlLnIsIHZhbHVlLmcsIHZhbHVlLmIpO1xuICAgIH1cbiAgICBDb2xvcjMuY2xvbmUgPSBjbG9uZTtcbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHJnYiB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIGluIHRoZSBjdXJyZW50IENvbG9yM1xuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBkZWZpbmVzIHRoZSBzb3VyY2UgQ29sb3IzIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5RnJvbShzb3VyY2UsIGRlc3QpIHtcbiAgICAgICAgZGVzdC5yID0gc291cmNlLnI7XG4gICAgICAgIGRlc3QuZyA9IHNvdXJjZS5nO1xuICAgICAgICBkZXN0LmIgPSBzb3VyY2UuYjtcbiAgICB9XG4gICAgQ29sb3IzLmNvcHlGcm9tID0gY29weUZyb207XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgQ29sb3IzIHJnYiB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIGRlc3QgLVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KGRlc3QsIHIsIGcsIGIpIHtcbiAgICAgICAgZGVzdC5yID0gcjtcbiAgICAgICAgZGVzdC5nID0gZztcbiAgICAgICAgZGVzdC5iID0gYjtcbiAgICB9XG4gICAgQ29sb3IzLnNldCA9IHNldDtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBDb2xvcjMgaGV4YWRlY2ltYWwgY29kZSBhcyBhIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9IZXhTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgY29uc3QgaW50UiA9ICh2YWx1ZS5yICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEcgPSAodmFsdWUuZyAqIDI1NSkgfCAwO1xuICAgICAgICBjb25zdCBpbnRCID0gKHZhbHVlLmIgKiAyNTUpIHwgMDtcbiAgICAgICAgcmV0dXJuICcjJyArIFNjYWxhci50b0hleChpbnRSKSArIFNjYWxhci50b0hleChpbnRHKSArIFNjYWxhci50b0hleChpbnRCKTtcbiAgICB9XG4gICAgQ29sb3IzLnRvSGV4U3RyaW5nID0gdG9IZXhTdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgQ29sb3IzIGNvbnZlcnRlZCBmcm9tIHRoZSBjdXJyZW50IG9uZSB0byBsaW5lYXIgc3BhY2VcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MaW5lYXJTcGFjZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb2xvciA9IGNyZWF0ZSgpO1xuICAgICAgICB0b0xpbmVhclNwYWNlVG9SZWYodmFsdWUsIGNvbnZlcnRlZENvbG9yKTtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRlZENvbG9yO1xuICAgIH1cbiAgICBDb2xvcjMudG9MaW5lYXJTcGFjZSA9IHRvTGluZWFyU3BhY2U7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIENvbG9yMyB2YWx1ZXMgdG8gbGluZWFyIHNwYWNlIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiBcImNvbnZlcnRlZENvbG9yXCJcbiAgICAgKiBAcGFyYW0gY29udmVydGVkQ29sb3IgLSBkZWZpbmVzIHRoZSBDb2xvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSBsaW5lYXIgc3BhY2UgdmVyc2lvblxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIENvbG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGluZWFyU3BhY2VUb1JlZih2YWx1ZSwgY29udmVydGVkQ29sb3IpIHtcbiAgICAgICAgY29udmVydGVkQ29sb3IuciA9IE1hdGgucG93KHZhbHVlLnIsIFRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5nID0gTWF0aC5wb3codmFsdWUuZywgVG9MaW5lYXJTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmIgPSBNYXRoLnBvdyh2YWx1ZS5iLCBUb0xpbmVhclNwYWNlKTtcbiAgICB9XG4gICAgQ29sb3IzLnRvTGluZWFyU3BhY2VUb1JlZiA9IHRvTGluZWFyU3BhY2VUb1JlZjtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBDb2xvcjMgY29udmVydGVkIGZyb20gdGhlIGN1cnJlbnQgb25lIHRvIGdhbW1hIHNwYWNlXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvR2FtbWFTcGFjZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb2xvciA9IGNyZWF0ZSgpO1xuICAgICAgICB0b0dhbW1hU3BhY2VUb1JlZih2YWx1ZSwgY29udmVydGVkQ29sb3IpO1xuICAgICAgICByZXR1cm4gY29udmVydGVkQ29sb3I7XG4gICAgfVxuICAgIENvbG9yMy50b0dhbW1hU3BhY2UgPSB0b0dhbW1hU3BhY2U7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIENvbG9yMyB2YWx1ZXMgdG8gZ2FtbWEgc3BhY2UgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIFwiY29udmVydGVkQ29sb3JcIlxuICAgICAqIEBwYXJhbSBjb252ZXJ0ZWRDb2xvciAtIGRlZmluZXMgdGhlIENvbG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIGdhbW1hIHNwYWNlIHZlcnNpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBDb2xvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0dhbW1hU3BhY2VUb1JlZih2YWx1ZSwgY29udmVydGVkQ29sb3IpIHtcbiAgICAgICAgY29udmVydGVkQ29sb3IuciA9IE1hdGgucG93KHZhbHVlLnIsIFRvR2FtbWFTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmcgPSBNYXRoLnBvdyh2YWx1ZS5nLCBUb0dhbW1hU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5iID0gTWF0aC5wb3codmFsdWUuYiwgVG9HYW1tYVNwYWNlKTtcbiAgICB9XG4gICAgQ29sb3IzLnRvR2FtbWFTcGFjZVRvUmVmID0gdG9HYW1tYVNwYWNlVG9SZWY7XG59KShDb2xvcjMgfHwgKENvbG9yMyA9IHt9KSk7XG4iLCAiLy8gRGVmaW5lIHRoZSB2b3hlbCBwb3NpdGlvbiBpbnRlcmZhY2Ugd2l0aCBibG9jayB0eXBlXG5leHBvcnQgaW50ZXJmYWNlIFZveGVsUG9zaXRpb24ge1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG4gIHo6IG51bWJlclxuICB0eXBlOiBCbG9ja1R5cGVcbn1cblxuLy8gRGVmaW5lIGJsb2NrIHR5cGVzXG5leHBvcnQgZW51bSBCbG9ja1R5cGUge1xuICBHUkFTUyA9ICdncmFzcycsXG4gIERJUlQgPSAnZGlydCcsXG4gIFNUT05FX0RBUksgPSAnc3RvbmVfZGFyaydcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGVycmFpbiBnZW5lcmF0b3IgZm9yIHRoZSBzY2VuZVxuICogQHBhcmFtIHNjZW5lU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgc2NlbmUgKHdpZHRoIGFuZCBkZXB0aClcbiAqIEBwYXJhbSBtYXhMYXllcnMgT3B0aW9uYWwgbWF4aW11bSBudW1iZXIgb2YgdmVydGljYWwgbGF5ZXJzIHRvIGdlbmVyYXRlIChmb3IgcGVyZm9ybWFuY2UgdGVzdGluZylcbiAqIEByZXR1cm5zIEEgdGVycmFpbiBnZW5lcmF0b3Igb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXJyYWluR2VuZXJhdG9yKHNjZW5lU2l6ZTogbnVtYmVyLCBtYXhMYXllcnM/OiBudW1iZXIpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBzaW5lLWJhc2VkIGhlaWdodG1hcCB0ZXJyYWluXG4gICAgICogVXNlcyB0aGUgZm9ybXVsYTogaGVpZ2h0ID0gOCArIDQgKiBNYXRoLnNpbih4IC8gNCkgKyA0ICogTWF0aC5zaW4oeiAvIDQpXG4gICAgICogQ3JlYXRlcyBhIHdhdnkgdGVycmFpbiB3aXRoIGhlaWdodHMgcmFuZ2luZyByb3VnaGx5IGZyb20gNCB0byAxMlxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHZveGVsIHBvc2l0aW9uc1xuICAgICAqL1xuICAgIGdlbmVyYXRlVGVycmFpbigpOiBWb3hlbFBvc2l0aW9uW10ge1xuICAgICAgY29uc3Qgdm94ZWxQb3NpdGlvbnM6IFZveGVsUG9zaXRpb25bXSA9IFtdXG4gICAgICBcbiAgICAgIC8vIFdoZW4gbWF4TGF5ZXJzIGlzIHNldCwgd2UnbGwgbGltaXQgdGhlIHRlcnJhaW4gaGVpZ2h0IGZvciBwZXJmb3JtYW5jZSB0ZXN0aW5nXG4gICAgICBjb25zdCB1c2VNYXhMYXllcnMgPSBtYXhMYXllcnMgIT09IHVuZGVmaW5lZCAmJiBtYXhMYXllcnMgPiAwXG4gICAgICBjb25zb2xlLmxvZyhgVGVycmFpbiBnZW5lcmF0b3I6ICR7dXNlTWF4TGF5ZXJzID8gJ1VzaW5nIG1heCBsYXllcnM6ICcgKyBtYXhMYXllcnMgOiAnTm8gaGVpZ2h0IGxpbWl0J31gKVxuICAgICAgXG4gICAgICAvLyBHZW5lcmF0ZSB0ZXJyYWluIGZvciB0aGUgMngyIHBhcmNlbCBncmlkICgzMngzMiB2b3hlbHMpXG4gICAgICAvLyBUaGUgMngyIHBhcmNlbCBncmlkIHN0YXJ0cyBhdCB4PTE2LCB6PTAgKGFjY291bnRpbmcgZm9yIHRoZSBiYXNlIHBhcmNlbCBhdCAtMSwwKVxuICAgICAgZm9yIChsZXQgbG9jYWxYID0gMDsgbG9jYWxYIDwgc2NlbmVTaXplOyBsb2NhbFgrKykge1xuICAgICAgICBmb3IgKGxldCBsb2NhbFogPSAwOyBsb2NhbFogPCBzY2VuZVNpemU7IGxvY2FsWisrKSB7XG4gICAgICAgICAgLy8gQ29udmVydCBsb2NhbCBjb29yZGluYXRlcyB0byB3b3JsZCBjb29yZGluYXRlcyBcbiAgICAgICAgICAvLyBTaW5jZSBiYXNlIHBhcmNlbCBpcyBhdCAoLTEsMCksIHdlIHN0YXJ0IGF0IHg9MTZcbiAgICAgICAgICBjb25zdCB3b3JsZFggPSBsb2NhbFggKyAxNjtcbiAgICAgICAgICBjb25zdCB3b3JsZFogPSBsb2NhbFo7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIGhlaWdodCB1c2luZyBzaW5lIHdhdmVzIGZvciBuYXR1cmFsLWxvb2tpbmcgdGVycmFpblxuICAgICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGguZmxvb3IoOCArIDQgKiBNYXRoLnNpbihsb2NhbFggLyA0KSArIDQgKiBNYXRoLnNpbihsb2NhbFogLyA0KSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQXBwbHkgbWF4IGxheWVycyBjb25zdHJhaW50IGlmIHNldFxuICAgICAgICAgIGNvbnN0IGVmZmVjdGl2ZUhlaWdodCA9IHVzZU1heExheWVycyA/IE1hdGgubWluKGhlaWdodCwgbWF4TGF5ZXJzISkgOiBoZWlnaHQ7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUGxhY2Ugdm94ZWxzIGZyb20geT0wIHVwIHRvIHRoZSBjYWxjdWxhdGVkIGhlaWdodFxuICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDw9IGVmZmVjdGl2ZUhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgYmxvY2sgdHlwZSBiYXNlZCBvbiBoZWlnaHQ6XG4gICAgICAgICAgICAvLyAtIFRvcCBsYXllciBpcyBncmFzc1xuICAgICAgICAgICAgLy8gLSBOZXh0IDMgbGF5ZXJzIGFyZSBkaXJ0XG4gICAgICAgICAgICAvLyAtIEV2ZXJ5dGhpbmcgYmVsb3cgaXMgc3RvbmVcbiAgICAgICAgICAgIGxldCB0eXBlOiBCbG9ja1R5cGVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHkgPT09IGVmZmVjdGl2ZUhlaWdodCkge1xuICAgICAgICAgICAgICB0eXBlID0gQmxvY2tUeXBlLkdSQVNTIC8vIFRvcCBsYXllciBpcyBncmFzc1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gZWZmZWN0aXZlSGVpZ2h0IC0gNCkge1xuICAgICAgICAgICAgICB0eXBlID0gQmxvY2tUeXBlLkRJUlQgLy8gTmV4dCAzIGxheWVycyBhcmUgZGlydFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHlwZSA9IEJsb2NrVHlwZS5TVE9ORV9EQVJLIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaXMgc3RvbmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdm94ZWxQb3NpdGlvbnMucHVzaCh7IHg6IHdvcmxkWCwgeSwgejogd29ybGRaLCB0eXBlIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh1c2VNYXhMYXllcnMpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEdlbmVyYXRlZCB0ZXJyYWluIHdpdGggJHttYXhMYXllcnN9IG1heCBsYXllcnMgKCR7dm94ZWxQb3NpdGlvbnMubGVuZ3RofSB2b3hlbHMgdG90YWwpYClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBHZW5lcmF0ZWQgdGVycmFpbiB3aXRoIG5hdHVyYWwgaGVpZ2h0ICgke3ZveGVsUG9zaXRpb25zLmxlbmd0aH0gdm94ZWxzIHRvdGFsKWApXG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB2b3hlbFBvc2l0aW9uc1xuICAgIH1cbiAgfVxufSAiLCAiaW1wb3J0IHsgZW5naW5lLCBFbnRpdHksIEdsdGZDb250YWluZXIsIFRyYW5zZm9ybSwgVmlzaWJpbGl0eUNvbXBvbmVudCB9IGZyb20gJ0BkY2wvc2RrL2VjcydcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICdAZGNsL3Nkay9tYXRoJ1xuaW1wb3J0IHsgVm94ZWxQb3NpdGlvbiwgQmxvY2tUeXBlIH0gZnJvbSAnLi4vdGVycmFpbi90ZXJyYWluLWdlbmVyYXRvcidcbmltcG9ydCB7IENodW5rIH0gZnJvbSAnLi9jaHVuay1tYW5hZ2VyJ1xuXG4vLyBEZWZpbmUgdGhlIGludGVyZmFjZSBmb3IgdGhlIGNodW5rIG1hbmFnZXJcbmludGVyZmFjZSBDaHVua01hbmFnZXIge1xuICBnZXRDaHVua3MoKTogUmVjb3JkPHN0cmluZywgQ2h1bms+XG4gIGFkZEVudGl0eVRvQ2h1bmsoZW50aXR5OiBFbnRpdHksIHBvc2l0aW9uOiBWb3hlbFBvc2l0aW9uKTogdm9pZFxufVxuXG4vLyBEZWJ1ZyBpbnRlcmZhY2VcbmludGVyZmFjZSBEZWJ1Z1NldHRpbmdzIHtcbiAgQUxXQVlTX1ZJU0lCTEU/OiBib29sZWFuXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgc2V0cyB1cCB0aGUgdm94ZWwgc3lzdGVtXG4gKiBAcGFyYW0gZW5naW5lIFRoZSBEZWNlbnRyYWxhbmQgZW5naW5lIGluc3RhbmNlXG4gKiBAcGFyYW0gdm94ZWxQb3NpdGlvbnMgQXJyYXkgb2Ygdm94ZWwgcG9zaXRpb25zIGZyb20gdGhlIHRlcnJhaW4gZ2VuZXJhdG9yXG4gKiBAcGFyYW0gY2h1bmtNYW5hZ2VyIFRoZSBjaHVuayBtYW5hZ2VyIGluc3RhbmNlXG4gKiBAcGFyYW0gdmlzaWJpbGl0eVRocmVzaG9sZCBNYXhpbXVtIGRpc3RhbmNlIGZvciB2b3hlbCB2aXNpYmlsaXR5IChpbiBtZXRlcnMpXG4gKiBAcGFyYW0gZGVidWcgT3B0aW9uYWwgZGVidWcgc2V0dGluZ3MgdG8gb3ZlcnJpZGUgZGVmYXVsdCBiZWhhdmlvclxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVm94ZWxTeXN0ZW0oXG4gIF9lbmdpbmU6IGFueSxcbiAgdm94ZWxQb3NpdGlvbnM6IFZveGVsUG9zaXRpb25bXSxcbiAgY2h1bmtNYW5hZ2VyOiBDaHVua01hbmFnZXIsXG4gIHZpc2liaWxpdHlUaHJlc2hvbGQ6IG51bWJlcixcbiAgZGVidWc/OiBEZWJ1Z1NldHRpbmdzXG4pIHtcbiAgLy8gRGVidWcgZmxhZ3NcbiAgY29uc3QgYWx3YXlzVmlzaWJsZSA9IGRlYnVnPy5BTFdBWVNfVklTSUJMRSB8fCBmYWxzZVxuICBcbiAgLy8gQmxvY2sgdHlwZSBtb2RlbCBtYXBwaW5nXG4gIGNvbnN0IG1vZGVsUGF0aHM6IFJlY29yZDxCbG9ja1R5cGUsIHN0cmluZz4gPSB7XG4gICAgW0Jsb2NrVHlwZS5HUkFTU106ICdtb2RlbHMvZ3Jhc3MuZ2xiJyxcbiAgICBbQmxvY2tUeXBlLkRJUlRdOiAnbW9kZWxzL2RpcnQuZ2xiJyxcbiAgICBbQmxvY2tUeXBlLlNUT05FX0RBUktdOiAnbW9kZWxzL3N0b25lX2RhcmsuZ2xiJ1xuICB9XG5cbiAgLy8gVHJhY2sgdGhlIGNvdW50IG9mIGVhY2ggYmxvY2sgdHlwZSBmb3IgbG9nZ2luZ1xuICBjb25zdCBibG9ja0NvdW50czogUmVjb3JkPEJsb2NrVHlwZSwgbnVtYmVyPiA9IHtcbiAgICBbQmxvY2tUeXBlLkdSQVNTXTogMCxcbiAgICBbQmxvY2tUeXBlLkRJUlRdOiAwLFxuICAgIFtCbG9ja1R5cGUuU1RPTkVfREFSS106IDBcbiAgfVxuICBcbiAgLy8gQ3JlYXRlIGFsbCB2b3hlbCBlbnRpdGllcyBhbmQgb3JnYW5pemUgdGhlbSBpbnRvIGNodW5rc1xuICB2b3hlbFBvc2l0aW9ucy5mb3JFYWNoKHBvcyA9PiB7XG4gICAgLy8gQ3JlYXRlIGVudGl0eVxuICAgIGNvbnN0IGVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICAgIFxuICAgIC8vIEluY3JlbWVudCBibG9jayBjb3VudGVyXG4gICAgYmxvY2tDb3VudHNbcG9zLnR5cGVdKytcbiAgICBcbiAgICAvLyBBZGQgR2x0ZkNvbnRhaW5lciBjb21wb25lbnQgKG1vZGVsKSBiYXNlZCBvbiBibG9jayB0eXBlXG4gICAgR2x0ZkNvbnRhaW5lci5jcmVhdGUoZW50aXR5LCB7XG4gICAgICBzcmM6IG1vZGVsUGF0aHNbcG9zLnR5cGVdXG4gICAgfSlcbiAgICBcbiAgICAvLyBBZGQgVHJhbnNmb3JtIGNvbXBvbmVudCAocG9zaXRpb24pXG4gICAgLy8gQXBwbHkgYSAwLjUgb2Zmc2V0IGluIGVhY2ggZGlyZWN0aW9uIHRvIGFjY291bnQgZm9yIHRoZSBjZW50ZXIgb3JpZ2luIG9mIHRoZSBHTEIgbW9kZWxcbiAgICBUcmFuc2Zvcm0uY3JlYXRlKGVudGl0eSwge1xuICAgICAgcG9zaXRpb246IFZlY3RvcjMuY3JlYXRlKFxuICAgICAgICBwb3MueCArIDAuNSwgXG4gICAgICAgIHBvcy55ICsgMC41LCBcbiAgICAgICAgcG9zLnogKyAwLjVcbiAgICAgIClcbiAgICB9KVxuICAgIFxuICAgIC8vIEFkZCBWaXNpYmlsaXR5Q29tcG9uZW50IChpbml0aWFsbHkgaW52aXNpYmxlIG9yIGJhc2VkIG9uIGRlYnVnIGZsYWcpXG4gICAgVmlzaWJpbGl0eUNvbXBvbmVudC5jcmVhdGUoZW50aXR5LCB7XG4gICAgICB2aXNpYmxlOiBhbHdheXNWaXNpYmxlXG4gICAgfSlcbiAgICBcbiAgICAvLyBBZGQgdG8gYXBwcm9wcmlhdGUgY2h1bmtcbiAgICBjaHVua01hbmFnZXIuYWRkRW50aXR5VG9DaHVuayhlbnRpdHksIHBvcylcbiAgfSlcbiAgXG4gIC8vIFByaW50IGhvdyBtYW55IGNodW5rcyB3ZXJlIGNyZWF0ZWRcbiAgY29uc3QgY2h1bmtzID0gY2h1bmtNYW5hZ2VyLmdldENodW5rcygpXG4gIGNvbnNvbGUubG9nKGBDcmVhdGVkICR7T2JqZWN0LmtleXMoY2h1bmtzKS5sZW5ndGh9IGNodW5rc2ApXG4gIGNvbnNvbGUubG9nKGBCbG9jayBjb3VudHM6IEdyYXNzOiAke2Jsb2NrQ291bnRzW0Jsb2NrVHlwZS5HUkFTU119LCBEaXJ0OiAke2Jsb2NrQ291bnRzW0Jsb2NrVHlwZS5ESVJUXX0sIFN0b25lOiAke2Jsb2NrQ291bnRzW0Jsb2NrVHlwZS5TVE9ORV9EQVJLXX1gKVxuICBcbiAgaWYgKGFsd2F5c1Zpc2libGUpIHtcbiAgICBjb25zb2xlLmxvZygnREVCVUc6IFZpc2liaWxpdHkgdG9nZ2xlIGRpc2FibGVkIC0gYWxsIHZveGVscyBhcmUgYWx3YXlzIHZpc2libGUnKVxuICB9IGVsc2Uge1xuICAgIC8vIENyZWF0ZSBhIHN5c3RlbSB0aGF0IHJ1bnMgZXZlcnkgZnJhbWUgdG8gdXBkYXRlIHZpc2liaWxpdHlcbiAgICBjb25zdCB2aXNpYmlsaXR5U3lzdGVtID0gKCkgPT4ge1xuICAgICAgLy8gR2V0IHBsYXllcidzIHBvc2l0aW9uXG4gICAgICBjb25zdCBwbGF5ZXJUcmFuc2Zvcm0gPSBUcmFuc2Zvcm0uZ2V0TXV0YWJsZU9yTnVsbChlbmdpbmUuUGxheWVyRW50aXR5KVxuICAgICAgaWYgKCFwbGF5ZXJUcmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBwbGF5ZXJQb3MgPSBwbGF5ZXJUcmFuc2Zvcm0ucG9zaXRpb25cbiAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgY2h1bmtzIHRvIGNoZWNrIHZpc2liaWxpdHkvLy8gXG4gICAgICBmb3IgKGNvbnN0IGNodW5rS2V5IGluIGNodW5rcykge1xuICAgICAgICBjb25zdCBjaHVuayA9IGNodW5rc1tjaHVua0tleV1cbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGF0ZSBkaXN0YW5jZSBmcm9tIHBsYXllciB0byBjaHVuayBjZW50ZXJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBWZWN0b3IzLmRpc3RhbmNlKHBsYXllclBvcywgY2h1bmsuY2VudGVyKVxuICAgICAgICBcbiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgY2h1bmsgc2hvdWxkIGJlIHZpc2libGVcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9IGRpc3RhbmNlIDwgdmlzaWJpbGl0eVRocmVzaG9sZFxuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHZpc2liaWxpdHkgZm9yIGFsbCBlbnRpdGllcyBpbiB0aGlzIGNodW5rXG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGNodW5rLmVudGl0aWVzKSB7XG4gICAgICAgICAgLy8gT25seSB1cGRhdGUgaWYgbmVlZGVkICh0byBhdm9pZCB1bm5lY2Vzc2FyeSB1cGRhdGVzKVxuICAgICAgICAgIGNvbnN0IHZpc2liaWxpdHlDb21wb25lbnQgPSBWaXNpYmlsaXR5Q29tcG9uZW50LmdldE11dGFibGUoZW50aXR5KVxuICAgICAgICAgIGlmICh2aXNpYmlsaXR5Q29tcG9uZW50LnZpc2libGUgIT09IHZpc2libGUpIHtcbiAgICAgICAgICAgIHZpc2liaWxpdHlDb21wb25lbnQudmlzaWJsZSA9IHZpc2libGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQWRkIHRoZSB2aXNpYmlsaXR5IHN5c3RlbSB0byB0aGUgZW5naW5lXG4gICAgZW5naW5lLmFkZFN5c3RlbSh2aXNpYmlsaXR5U3lzdGVtKVxuICB9XG4gIFxuICBjb25zb2xlLmxvZygnVm94ZWwgc3lzdGVtIGluaXRpYWxpemVkJylcbn0gIiwgImltcG9ydCB7IEVudGl0eSB9IGZyb20gJ0BkY2wvc2RrL2VjcydcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICdAZGNsL3Nkay9tYXRoJ1xuaW1wb3J0IHsgVm94ZWxQb3NpdGlvbiB9IGZyb20gJy4uL3RlcnJhaW4vdGVycmFpbi1nZW5lcmF0b3InXG5cbi8vIERlZmluZSB0aGUgY2h1bmsgaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIENodW5rIHtcbiAga2V5OiBzdHJpbmdcbiAgZW50aXRpZXM6IEVudGl0eVtdXG4gIGNlbnRlcjogVmVjdG9yM1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGEgY2h1bmsgbWFuYWdlciBmb3Igb3JnYW5pemluZyB2b3hlbHMgaW50byBjaHVua3NcbiAqIEBwYXJhbSBjaHVua1NpemUgVGhlIHNpemUgb2YgZWFjaCBjaHVuayAoZS5nLiwgNCBmb3IgNHg0eDQgY2h1bmtzKVxuICogQHJldHVybnMgQSBjaHVuayBtYW5hZ2VyIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdENodW5rTWFuYWdlcihjaHVua1NpemU6IG51bWJlcikge1xuICAvLyBUaGUgY2h1bmtzIG1hcCBzdG9yZXMgYWxsIGNodW5rcyBpbmRleGVkIGJ5IHRoZWlyIGtleVxuICBjb25zdCBjaHVua3M6IFJlY29yZDxzdHJpbmcsIENodW5rPiA9IHt9XG4gIFxuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGNyZWF0ZWQgY2h1bmtzXG4gICAgICogQHJldHVybnMgQSBtYXAgb2YgYWxsIGNodW5rc1xuICAgICAqL1xuICAgIGdldENodW5rcygpOiBSZWNvcmQ8c3RyaW5nLCBDaHVuaz4ge1xuICAgICAgcmV0dXJuIGNodW5rc1xuICAgIH0sXG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgY2h1bmsga2V5IGZvciBhIHZveGVsIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIFRoZSB2b3hlbCBwb3NpdGlvblxuICAgICAqIEByZXR1cm5zIFRoZSBjaHVuayBrZXkgKGUuZy4sIFwiMCwwLDBcIilcbiAgICAgKi9cbiAgICBnZXRDaHVua0tleShwb3NpdGlvbjogVm94ZWxQb3NpdGlvbik6IHN0cmluZyB7XG4gICAgICBjb25zdCBjaHVua1ggPSBNYXRoLmZsb29yKHBvc2l0aW9uLnggLyBjaHVua1NpemUpXG4gICAgICBjb25zdCBjaHVua1kgPSBNYXRoLmZsb29yKHBvc2l0aW9uLnkgLyBjaHVua1NpemUpXG4gICAgICBjb25zdCBjaHVua1ogPSBNYXRoLmZsb29yKHBvc2l0aW9uLnogLyBjaHVua1NpemUpXG4gICAgICByZXR1cm4gYCR7Y2h1bmtYfSwke2NodW5rWX0sJHtjaHVua1p9YFxuICAgIH0sXG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjaHVuayBvciByZXR1cm5zIGFuIGV4aXN0aW5nIG9uZVxuICAgICAqIEBwYXJhbSBrZXkgVGhlIGNodW5rIGtleVxuICAgICAqIEByZXR1cm5zIFRoZSBjaHVuayBvYmplY3RcbiAgICAgKi9cbiAgICBjcmVhdGVDaHVuayhrZXk6IHN0cmluZyk6IENodW5rIHtcbiAgICAgIGlmICghY2h1bmtzW2tleV0pIHtcbiAgICAgICAgLy8gUGFyc2UgdGhlIGNodW5rIGNvb3JkaW5hdGVzIGZyb20gdGhlIGtleVxuICAgICAgICBjb25zdCBbeCwgeSwgel0gPSBrZXkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKVxuICAgICAgICBcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGNodW5rIGNlbnRlciB3aXRoIHRoZSAwLjUgb2Zmc2V0IGFwcGxpZWRcbiAgICAgICAgLy8gRm9yIGEgY2h1bmsgb2Ygc2l6ZSA0LCB0aGUgY2VudGVyIHdvdWxkIGJlIGF0IHBvc2l0aW9uICh4KjQgKyAyLCB5KjQgKyAyLCB6KjQgKyAyKVxuICAgICAgICBjb25zdCBjZW50ZXJYID0geCAqIGNodW5rU2l6ZSArIGNodW5rU2l6ZSAvIDJcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKiBjaHVua1NpemUgKyBjaHVua1NpemUgLyAyXG4gICAgICAgIGNvbnN0IGNlbnRlclogPSB6ICogY2h1bmtTaXplICsgY2h1bmtTaXplIC8gMlxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBuZXcgY2h1bmtcbiAgICAgICAgY2h1bmtzW2tleV0gPSB7XG4gICAgICAgICAga2V5LFxuICAgICAgICAgIGVudGl0aWVzOiBbXSxcbiAgICAgICAgICBjZW50ZXI6IFZlY3RvcjMuY3JlYXRlKGNlbnRlclgsIGNlbnRlclksIGNlbnRlclopXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGNodW5rc1trZXldXG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGVudGl0eSB0byB0aGUgYXBwcm9wcmlhdGUgY2h1bmtcbiAgICAgKiBAcGFyYW0gZW50aXR5IFRoZSBlbnRpdHkgdG8gYWRkXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIFRoZSB2b3hlbCBwb3NpdGlvblxuICAgICAqL1xuICAgIGFkZEVudGl0eVRvQ2h1bmsoZW50aXR5OiBFbnRpdHksIHBvc2l0aW9uOiBWb3hlbFBvc2l0aW9uKTogdm9pZCB7XG4gICAgICBjb25zdCBjaHVua0tleSA9IHRoaXMuZ2V0Q2h1bmtLZXkocG9zaXRpb24pXG4gICAgICBjb25zdCBjaHVuayA9IHRoaXMuY3JlYXRlQ2h1bmsoY2h1bmtLZXkpXG4gICAgICBjaHVuay5lbnRpdGllcy5wdXNoKGVudGl0eSlcbiAgICB9XG4gIH1cbn0gIiwgImltcG9ydCB7IGVuZ2luZSwgVHJhbnNmb3JtLCBFbnRpdHksIE1lc2hSZW5kZXJlciwgTWF0ZXJpYWwsIE1lc2hDb2xsaWRlciwgVGV4dFNoYXBlIH0gZnJvbSAnQGRjbC9zZGsvZWNzJ1xuaW1wb3J0IHsgVmVjdG9yMywgUXVhdGVybmlvbiwgQ29sb3I0IH0gZnJvbSAnQGRjbC9zZGsvbWF0aCdcbmltcG9ydCB7IGNyZWF0ZVZveGVsU3lzdGVtIH0gZnJvbSAnLi9zeXN0ZW1zL3ZveGVsLXN5c3RlbSdcbmltcG9ydCB7IGNyZWF0ZVRlcnJhaW5HZW5lcmF0b3IgfSBmcm9tICcuL3RlcnJhaW4vdGVycmFpbi1nZW5lcmF0b3InXG5pbXBvcnQgeyBpbml0Q2h1bmtNYW5hZ2VyIH0gZnJvbSAnLi9zeXN0ZW1zL2NodW5rLW1hbmFnZXInXG5pbXBvcnQgeyBtb3ZlUGxheWVyVG8gfSBmcm9tICd+c3lzdGVtL1Jlc3RyaWN0ZWRBY3Rpb25zJ1xuaW1wb3J0IHsgQ0hVTktfU0laRSwgTUFJTl9TQ0VORV9TSVpFLCBERUJVRywgVEVSUkFJTl9HRU5FUkFUSU9OX0RFTEFZLCBQTEFZRVJfVEVMRVBPUlRfREVMQVksIFZJU0lCSUxJVFlfVEhSRVNIT0xELCBTUEFXTl9QT1NJVElPTiwgTUFJTl9TQ0VORV9QT1NJVElPTiB9IGZyb20gJy4vcmVzb3VyY2VzJ1xuXG4vLyBUcmFjayB0aW1pbmcgZm9yIGRlbGF5c1xubGV0IHRlcnJhaW5HZW5lcmF0aW9uVGltZXIgPSAwXG5sZXQgcGxheWVyVGVsZXBvcnRUaW1lciA9IDBcbmxldCBpc1RlcnJhaW5HZW5lcmF0aW9uUmVhZHkgPSBmYWxzZVxubGV0IGlzUGxheWVyVGVsZXBvcnRlZCA9IGZhbHNlXG5cbi8vIFRyYWNrIGluaXRpYWxpemF0aW9uIHN0YXRlXG5sZXQgaGFzU3RhcnRlZFRlcnJhaW5HZW5lcmF0aW9uID0gZmFsc2VcbmxldCBoYXNDb21wbGV0ZWRJbml0aWFsaXphdGlvbiA9IGZhbHNlXG5cbi8vIFN0b3JlIG1hbmFnZXJzIGF0IG1vZHVsZSBsZXZlbFxubGV0IHRlcnJhaW5HZW5lcmF0b3JJbnN0YW5jZTogYW55XG5sZXQgY2h1bmtNYW5hZ2VySW5zdGFuY2U6IGFueVxuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgY29uc29sZS5sb2coJ0luaXRpYWxpemluZyBNaW5lY3JhZnQgdm94ZWwgd29ybGQuLi4nKVxuICBcbiAgLy8gUGhhc2UgMTogSW5pdGlhbCBzZXR1cFxuICBzZXR1cFNjZW5lKClcbiAgXG4gIC8vIEFkZCBzeXN0ZW0gZm9yIGhhbmRsaW5nIHRpbWVkIGV2ZW50c1xuICBlbmdpbmUuYWRkU3lzdGVtKHRpbWVyU3lzdGVtKVxufVxuXG4vLyBTZXR1cCB0aGUgaW5pdGlhbCBzY2VuZSBlbGVtZW50c1xuZnVuY3Rpb24gc2V0dXBTY2VuZSgpIHtcbiAgY29uc29sZS5sb2coJ1N0ZXAgMTogU2V0dGluZyB1cCBzY2VuZScpXG4gIFxuICAvLyBJbml0aWFsaXplIG1hbmFnZXJzXG4gIHRlcnJhaW5HZW5lcmF0b3JJbnN0YW5jZSA9IGNyZWF0ZVRlcnJhaW5HZW5lcmF0b3IoTUFJTl9TQ0VORV9TSVpFLCBERUJVRy5NQVhfTEFZRVJTKVxuICBjaHVua01hbmFnZXJJbnN0YW5jZSA9IGluaXRDaHVua01hbmFnZXIoQ0hVTktfU0laRSlcbiAgXG4gIC8vIENyZWF0ZSBhIHNpbXBsZSBmbGF0IGdyb3VuZCBmb3IgdGhlIHNwYXduIGFyZWFcbiAgY3JlYXRlU3Bhd25BcmVhR3JvdW5kKClcbn1cblxuLy8gQ3JlYXRlIGEgc2ltcGxlIGZsYXQgZ3JvdW5kIGluIHRoZSBzcGF3biBwYXJjZWxcbmZ1bmN0aW9uIGNyZWF0ZVNwYXduQXJlYUdyb3VuZCgpIHtcbiAgY29uc29sZS5sb2coJ0NyZWF0aW5nIHNwYXduIGFyZWEgZ3JvdW5kJylcbiAgXG4gIC8vIENyZWF0ZSBhIGdyb3VuZCBwbGF0Zm9ybSBlbnRpdHlcbiAgY29uc3QgZ3JvdW5kRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gIFRyYW5zZm9ybS5jcmVhdGUoZ3JvdW5kRW50aXR5LCB7XG4gICAgcG9zaXRpb246IFZlY3RvcjMuY3JlYXRlKDgsMCw4KSwgLy8gQ2VudGVyIG9mIHNwYXduIHBhcmNlbFxuICAgIHNjYWxlOiBWZWN0b3IzLmNyZWF0ZSgxNiwgMTYsIDEpLCAgLy8gMTZ4MTYgbWV0ZXIgcGxhdGZvcm1cbiAgICByb3RhdGlvbjogUXVhdGVybmlvbi5mcm9tRXVsZXJEZWdyZWVzKDkwLCAwLCAwKVxuICB9KVxuICBcbiAgLy8gQWRkIG1lc2gsIG1hdGVyaWFsIGFuZCBjb2xsaWRlclxuICBNZXNoUmVuZGVyZXIuc2V0UGxhbmUoZ3JvdW5kRW50aXR5KVxuICBNYXRlcmlhbC5zZXRQYnJNYXRlcmlhbChncm91bmRFbnRpdHksIHtcbiAgICBhbGJlZG9Db2xvcjogeyByOiAwLjIsIGc6IDAuOCwgYjogMC4yLCBhOiAxLjAgfSwgLy8gR3JlZW4gY29sb3JcbiAgfSlcbiAgXG4gIC8vIEFkZCBhIHNpZ24gdG8gaW5mb3JtIHRoZSBwbGF5ZXJcbiAgY3JlYXRlSW5mb3JtYXRpb25TaWduKClcbn1cblxuLy8gQ3JlYXRlIGFuIGluZm9ybWF0aW9uIHNpZ24gdG8gZ3VpZGUgdGhlIHBsYXllclxuZnVuY3Rpb24gY3JlYXRlSW5mb3JtYXRpb25TaWduKCkge1xuICAvLyBDcmVhdGUgc2lnbiBlbnRpdHlcbiAgY29uc3Qgc2lnbkVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICBcbiAgLy8gUG9zaXRpb24gaXQgaW4gdGhlIHNwYXduIGFyZWEgKC0xLDAgcGFyY2VsKVxuICBUcmFuc2Zvcm0uY3JlYXRlKHNpZ25FbnRpdHksIHtcbiAgICBwb3NpdGlvbjogVmVjdG9yMy5jcmVhdGUoOCwgMS41LCA4KSwgLy8gQ2VudGVyIG9mIHNwYXduIHBhcmNlbFxuICAgIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLmZyb21FdWxlckRlZ3JlZXMoMCwgOTAsIDApIC8vIEZhY2UgdGhlIHBsYXllciB0b3dhcmQgK1hcbiAgfSlcbiAgXG4gIC8vIEFkZCB0ZXh0IHRvIHRoZSBzaWduXG4gIFRleHRTaGFwZS5jcmVhdGUoc2lnbkVudGl0eSwge1xuICAgIHRleHQ6ICdXZWxjb21lIHRvIE1pbmVjcmFmdCBXb3JsZCFcXG5Mb2FkaW5nIHRlcnJhaW4uLi5cXG5Zb3Ugd2lsbCBiZSB0ZWxlcG9ydGVkIHNob3J0bHkuJyxcbiAgICBmb250U2l6ZTogMixcbiAgICB0ZXh0Q29sb3I6IENvbG9yNC5jcmVhdGUoMSwgMSwgMSwgMSksIC8vIFdoaXRlIHRleHRcbiAgICBvdXRsaW5lQ29sb3I6IENvbG9yNC5jcmVhdGUoMCwgMCwgMCwgMSksIC8vIEJsYWNrIG91dGxpbmVcbiAgICBvdXRsaW5lV2lkdGg6IDAuMSxcbiAgICB3aWR0aDogMTAsXG4gICAgaGVpZ2h0OiA1LFxuICAgIHRleHRXcmFwcGluZzogdHJ1ZVxuICB9KVxufVxuXG4vLyBUaW1lciBzeXN0ZW0gdG8gaGFuZGxlIGRlbGF5ZWQgaW5pdGlhbGl6YXRpb25cbmZ1bmN0aW9uIHRpbWVyU3lzdGVtKGR0OiBudW1iZXIpOiB2b2lkIHtcbiAgLy8gU2tpcCBpZiBpbml0aWFsaXphdGlvbiBpcyBjb21wbGV0ZSBhbmQgcGxheWVyIGlzIHRlbGVwb3J0ZWRcbiAgaWYgKGhhc0NvbXBsZXRlZEluaXRpYWxpemF0aW9uICYmIGlzUGxheWVyVGVsZXBvcnRlZCkgcmV0dXJuXG4gIFxuICAvLyBTdGVwIDI6IFN0YXJ0IHRlcnJhaW4gZ2VuZXJhdGlvbiBhZnRlciBkZWxheVxuICBpZiAoIWhhc1N0YXJ0ZWRUZXJyYWluR2VuZXJhdGlvbikge1xuICAgIHRlcnJhaW5HZW5lcmF0aW9uVGltZXIgKz0gZHRcbiAgICBpZiAodGVycmFpbkdlbmVyYXRpb25UaW1lciA+PSBURVJSQUlOX0dFTkVSQVRJT05fREVMQVkpIHtcbiAgICAgIHN0YXJ0VGVycmFpbkdlbmVyYXRpb24oKVxuICAgICAgaGFzU3RhcnRlZFRlcnJhaW5HZW5lcmF0aW9uID0gdHJ1ZVxuICAgICAgLy8gU3RhcnQgY291bnRpbmcgZm9yIHBsYXllciB0ZWxlcG9ydCBpbW1lZGlhdGVseSBhZnRlciB0ZXJyYWluIGdlbmVyYXRpb24gc3RhcnRzXG4gICAgICBwbGF5ZXJUZWxlcG9ydFRpbWVyID0gMFxuICAgICAgaGFzQ29tcGxldGVkSW5pdGlhbGl6YXRpb24gPSB0cnVlXG4gICAgfVxuICB9XG4gIFxuICAvLyBTdGVwIDM6IFRlbGVwb3J0IHBsYXllciBhZnRlciBmaXhlZCBkZWxheSAobm8gbW9kZWwgbG9hZGluZyBjaGVjaylcbiAgaWYgKGhhc1N0YXJ0ZWRUZXJyYWluR2VuZXJhdGlvbiAmJiAhaXNQbGF5ZXJUZWxlcG9ydGVkKSB7XG4gICAgcGxheWVyVGVsZXBvcnRUaW1lciArPSBkdFxuICAgIGlmIChwbGF5ZXJUZWxlcG9ydFRpbWVyID49IFBMQVlFUl9URUxFUE9SVF9ERUxBWSkge1xuICAgICAgdGVsZXBvcnRQbGF5ZXJUb01haW5TY2VuZSgpXG4gICAgICBpc1BsYXllclRlbGVwb3J0ZWQgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFN0YXJ0IHRoZSB0ZXJyYWluIGdlbmVyYXRpb24gcHJvY2Vzc1xuZnVuY3Rpb24gc3RhcnRUZXJyYWluR2VuZXJhdGlvbigpIHtcbiAgY29uc29sZS5sb2coJ1N0ZXAgMjogU3RhcnRpbmcgdGVycmFpbiBnZW5lcmF0aW9uLi4uJylcbiAgXG4gIC8vIEdlbmVyYXRlIHRoZSB0ZXJyYWluXG4gIGNvbnN0IHZveGVsUG9zaXRpb25zID0gdGVycmFpbkdlbmVyYXRvckluc3RhbmNlLmdlbmVyYXRlVGVycmFpbigpXG4gIGNvbnNvbGUubG9nKGBHZW5lcmF0ZWQgJHt2b3hlbFBvc2l0aW9ucy5sZW5ndGh9IHZveGVsc2ApXG5cbiAgLy8gU2V0IHVwIHRoZSB2b3hlbCBzeXN0ZW0gKHdpdGhvdXQgbW9kZWwgbG9hZGluZyBzeXN0ZW0pXG4gIGNvbnNvbGUubG9nKCdTZXR0aW5nIHVwIHZveGVsIHJlbmRlcmluZyBzeXN0ZW0nKVxuICBjcmVhdGVWb3hlbFN5c3RlbShlbmdpbmUsIHZveGVsUG9zaXRpb25zLCBjaHVua01hbmFnZXJJbnN0YW5jZSwgVklTSUJJTElUWV9USFJFU0hPTEQsIERFQlVHKVxuXG4gIC8vIE1hcmsgdGVycmFpbiBnZW5lcmF0aW9uIGFzIHN0YXJ0ZWRcbiAgY29uc29sZS5sb2coJ01pbmVjcmFmdCB2b3hlbCB3b3JsZCB0ZXJyYWluIGdlbmVyYXRpb24gc3RhcnRlZCEnKVxufVxuXG4vLyBUZWxlcG9ydCB0aGUgcGxheWVyIHRvIHRoZSBtYWluIHNjZW5lIGFyZWFcbmZ1bmN0aW9uIHRlbGVwb3J0UGxheWVyVG9NYWluU2NlbmUoKSB7XG4gIGNvbnNvbGUubG9nKCdTdGVwIDM6IFRlbGVwb3J0aW5nIHBsYXllciB0byBtYWluIHNjZW5lJylcbiAgXG4gIC8vIFVzZSBEZWNlbnRyYWxhbmQncyBtb3ZlUGxheWVyVG8gZnVuY3Rpb24gdG8gdGVsZXBvcnQgdGhlIHBsYXllclxuICBtb3ZlUGxheWVyVG8oe1xuICAgIG5ld1JlbGF0aXZlUG9zaXRpb246IE1BSU5fU0NFTkVfUE9TSVRJT05cbiAgfSlcbiAgXG4gIGNvbnNvbGUubG9nKCdQbGF5ZXIgdGVsZXBvcnRlZCB0byBtYWluIHNjZW5lJylcbn1cblxuLy8gRGVjbGFyZSBnbG9iYWwgbmFtZXNwYWNlIGZvciB3aW5kb3cgdG8gc3RvcmUgb3VyIHZhcmlhYmxlc1xuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICB0ZXJyYWluR2VuZXJhdG9yOiBhbnlcbiAgICBjaHVua01hbmFnZXI6IGFueVxuICB9XG59IiwgIlxuLy8gRGVidWcgc2V0dGluZ3NcbmV4cG9ydCBjb25zdCBERUJVRyA9IHtcbiAgQUxXQVlTX1ZJU0lCTEU6IHRydWUsIC8vIFNldCB0byB0cnVlIHRvIG1ha2UgYWxsIHZveGVscyB2aXNpYmxlIHJlZ2FyZGxlc3Mgb2YgZGlzdGFuY2VcbiAgTUFYX0xBWUVSUzogMSAgICAgICAgLy8gTWF4aW11bSBudW1iZXIgb2YgdmVydGljYWwgbGF5ZXJzIHRvIGdlbmVyYXRlIChmb3IgcGVyZm9ybWFuY2UgdGVzdGluZylcbn1cblxuLy8gU2NlbmUgY29uZmlndXJhdGlvblxuZXhwb3J0IGNvbnN0IE1BSU5fU0NFTkVfU0laRSA9IDMyIC8vIDMyeDMyIHZveGVsIGdyaWQgZm9yIG1haW4gc2NlbmUgKDJ4MiBwYXJjZWxzKVxuZXhwb3J0IGNvbnN0IENIVU5LX1NJWkUgPSA0IC8vIDR4NHg0IGNodW5rc1xuZXhwb3J0IGNvbnN0IFZJU0lCSUxJVFlfVEhSRVNIT0xEID0gNSAvLyBJbmNyZWFzZWQgdmlzaWJpbGl0eSB0aHJlc2hvbGQgZm9yIGxhcmdlciBzY2VuZVxuXG4vLyBTY2VuZSBwb3NpdGlvbnNcbmV4cG9ydCBjb25zdCBTUEFXTl9QT1NJVElPTiA9IHt4OiA4LCB5OiAwLCB6OiA4fSAvLyBDZW50ZXIgb2Ygc3Bhd24gcGFyY2VsICgtMSwwKVxuZXhwb3J0IGNvbnN0IE1BSU5fU0NFTkVfUE9TSVRJT04gPSB7eDogMTYsIHk6IDMwLCB6OiAxNn1cblxuLy8gVGltaW5nIGNvbmZpZ3VyYXRpb24gKGluIHNlY29uZHMpXG5leHBvcnQgY29uc3QgVEVSUkFJTl9HRU5FUkFUSU9OX0RFTEFZID0gMSAvLyBXYWl0IDEgc2Vjb25kIGJlZm9yZSBnZW5lcmF0aW5nIHRlcnJhaW5cbmV4cG9ydCBjb25zdCBQTEFZRVJfVEVMRVBPUlRfREVMQVkgPSAxNSAvLyBXYWl0IDUgc2Vjb25kcyBiZWZvcmUgdGVsZXBvcnRpbmcgcGxheWVyXG5cblxuIiwgIi8qKiBAYWxwaGEgVEhJUyBGSUxFIElOSVRJQUxJWkVTIFRIRSBERUNFTlRSQUxBTkQgUlVOVElNRS4gV0lMTCBDSEFOR0UgU09PTiAqL1xuaW1wb3J0IHsgQ29tcG9zaXRlLCBlbmdpbmUgfSBmcm9tICdAZGNsL2VjcydcbmltcG9ydCB7IGNyZHRHZXRTdGF0ZSwgY3JkdFNlbmRUb1JlbmRlcmVyLCBzZW5kQmF0Y2ggfSBmcm9tICd+c3lzdGVtL0VuZ2luZUFwaSdcbmltcG9ydCB7IGNyZWF0ZVJlbmRlcmVyVHJhbnNwb3J0IH0gZnJvbSAnLi9pbnRlcm5hbC90cmFuc3BvcnRzL3JlbmRlcmVyVHJhbnNwb3J0J1xuaW1wb3J0IHsgcG9sbEV2ZW50cyB9IGZyb20gJy4vb2JzZXJ2YWJsZXMnXG5pbXBvcnQgeyBjb21wb3NpdGVQcm92aWRlciB9IGZyb20gJy4vY29tcG9zaXRlLXByb3ZpZGVyJ1xuXG4vLyBBdHRhY2ggQ1JEVCB0cmFuc3BvcnRcbi8vIEBpbnRlcm5hbFxuZXhwb3J0IGNvbnN0IHJlbmRlcmVyVHJhbnNwb3J0ID0gY3JlYXRlUmVuZGVyZXJUcmFuc3BvcnQoeyBjcmR0U2VuZFRvUmVuZGVyZXIgfSlcbmVuZ2luZS5hZGRUcmFuc3BvcnQocmVuZGVyZXJUcmFuc3BvcnQpXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvblVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xuICBlbmdpbmUuc2VhbCgpXG4gIGF3YWl0IGVuZ2luZS51cGRhdGUoZGVsdGFUaW1lKVxuICBhd2FpdCBwb2xsRXZlbnRzKHNlbmRCYXRjaClcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGJlZm9yZSB0aGUgZmlyc3QgdXBkYXRlIGFuZCBhZnRlciB0aGUgZXZhbHVhdGlvbiBvZiB0aGUgY29kZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY3JkdEdldFN0YXRlKHsgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKSB9KVxuXG4gIC8vIHdoZW4gdGhpcyBjb25kaXRpb24gaXMgdHJ1ZSBzb21ldGhpbmcgbGlrZSBgbWFpbi5jcmR0YCB3YXMgcHJlLWxvYWRlZCBmcm9tIHRoZSBydW50aW1lLCB3ZSBkb24ndCBuZWVkIHRvIGluc3RhbmNlIHRoZSBtYWluLmNvbXBvc2l0ZVxuICBpZiAoIXJlc3BvbnNlLmhhc0VudGl0aWVzKSB7XG4gICAgY29uc3QgbWFpbkNvbXBvc2l0ZSA9IGNvbXBvc2l0ZVByb3ZpZGVyLmdldENvbXBvc2l0ZU9yTnVsbCgnbWFpbi5jb21wb3NpdGUnKVxuICAgIGlmIChtYWluQ29tcG9zaXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBDb21wb3NpdGUuaW5zdGFuY2UoZW5naW5lLCBtYWluQ29tcG9zaXRlLCBjb21wb3NpdGVQcm92aWRlcilcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhgV2FybmluZzogbWFpbi5jb21wb3NpdGUgY291bGRuJ3QgYmUgaW5zdGFuY2VkLmApXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghIXJlbmRlcmVyVHJhbnNwb3J0Lm9ubWVzc2FnZSkge1xuICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IGJ5dGVBcnJheSBvZiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIHJlbmRlcmVyVHJhbnNwb3J0Lm9ubWVzc2FnZShieXRlQXJyYXkpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgVHJhbnNwb3J0LCBUcmFuc3BvcnRNZXNzYWdlIH0gZnJvbSAnQGRjbC9lY3MnXG5pbXBvcnQgeyBNQVhfU1RBVElDX0NPTVBPTkVOVCB9IGZyb20gJ0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cy9jb21wb25lbnQtbnVtYmVyJ1xuaW1wb3J0IHR5cGUgeyBDcmR0U2VuZFRvUmVuZGVyZXJSZXF1ZXN0LCBDcmR0U2VuZFRvUmVzcG9uc2UgfSBmcm9tICd+c3lzdGVtL0VuZ2luZUFwaSdcblxuZXhwb3J0IHR5cGUgRW5naW5lQXBpRm9yVHJhbnNwb3J0ID0ge1xuICBjcmR0U2VuZFRvUmVuZGVyZXIoYm9keTogQ3JkdFNlbmRUb1JlbmRlcmVyUmVxdWVzdCk6IFByb21pc2U8Q3JkdFNlbmRUb1Jlc3BvbnNlPlxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXJUcmFuc3BvcnQoZW5naW5lQXBpOiBFbmdpbmVBcGlGb3JUcmFuc3BvcnQpOiBUcmFuc3BvcnQge1xuICBhc3luYyBmdW5jdGlvbiBzZW5kVG9SZW5kZXJlcihtZXNzYWdlOiBVaW50OEFycmF5KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlbmdpbmVBcGkuY3JkdFNlbmRUb1JlbmRlcmVyKHtcbiAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KG1lc3NhZ2UpXG4gICAgfSlcbiAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhLmxlbmd0aCkge1xuICAgICAgaWYgKHJlbmRlcmVyVHJhbnNwb3J0Lm9ubWVzc2FnZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGJ5dGVBcnJheSBvZiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgcmVuZGVyZXJUcmFuc3BvcnQub25tZXNzYWdlKGJ5dGVBcnJheSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlbmRlcmVyVHJhbnNwb3J0OiBUcmFuc3BvcnQgPSB7XG4gICAgYXN5bmMgc2VuZChtZXNzYWdlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBzZW5kVG9SZW5kZXJlcihtZXNzYWdlIGFzIFVpbnQ4QXJyYXkpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBjb25zb2xlLmVycm9yIG9mIHRoZSBzY2VuZVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICBkZWJ1Z2dlclxuICAgICAgfVxuICAgIH0sXG4gICAgZmlsdGVyKG1lc3NhZ2U6IFRyYW5zcG9ydE1lc3NhZ2UpIHtcbiAgICAgIC8vIE9ubHkgc2VuZCByZW5kZXJlciBjb21wb25lbnRzIChQcm90byBHZW5lcmF0ZWQpXG4gICAgICBpZiAoXG4gICAgICAgIC8vIGZpbHRlciBvdXQgbWVzc2FnZXMgZm9yIG5vbi1jb3JlIGNvbXBvbmVudHNcbiAgICAgICAgKG1lc3NhZ2UgYXMgYW55KS5jb21wb25lbnRJZCA+IE1BWF9TVEFUSUNfQ09NUE9ORU5UXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICByZXR1cm4gISFtZXNzYWdlXG4gICAgfSxcbiAgICB0eXBlOiAncmVuZGVyZXInXG4gIH1cblxuICByZXR1cm4gcmVuZGVyZXJUcmFuc3BvcnRcbn1cbiIsICIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuLyoqXG4gKiBBIGNsYXNzIHNlcnZlcyBhcyBhIG1lZGl1bSBiZXR3ZWVuIHRoZSBvYnNlcnZhYmxlIGFuZCBpdHMgb2JzZXJ2ZXJzXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBPYnNlcnZlckV2ZW50U3RhdGUge1xuICAvKipcbiAgICogQW4gT2JzZXJ2ZXIgY2FuIHNldCB0aGlzIHByb3BlcnR5IHRvIHRydWUgdG8gcHJldmVudCBzdWJzZXF1ZW50IG9ic2VydmVycyBvZiBiZWluZyBub3RpZmllZFxuICAgKi9cbiAgcHVibGljIHNraXBOZXh0T2JzZXJ2ZXJzITogYm9vbGVhblxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1hc2sgdmFsdWUgdGhhdCB3ZXJlIHVzZWQgdG8gdHJpZ2dlciB0aGUgZXZlbnQgY29ycmVzcG9uZGluZyB0byB0aGlzIEV2ZW50U3RhdGUgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgbWFzayE6IG51bWJlclxuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHRoYXQgb3JpZ2luYWxseSBub3RpZmllZCB0aGUgZXZlbnRcbiAgICovXG4gIHB1YmxpYyB0YXJnZXQ/OiBhbnlcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgb2JqZWN0IGluIHRoZSBidWJibGluZyBwaGFzZVxuICAgKi9cbiAgcHVibGljIGN1cnJlbnRUYXJnZXQ/OiBhbnlcblxuICAvKipcbiAgICogVGhpcyB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGxhc3QgZnVuY3Rpb24gdGhhdCB3YXMgZXhlY3V0ZWQuXG4gICAqIElmIGl0IGlzIHRoZSBmaXJzdCBmdW5jdGlvbiBpbiB0aGUgY2FsbGJhY2sgY2hhaW4gaXQgd2lsbCBiZSB0aGUgZXZlbnQgZGF0YS5cbiAgICovXG4gIHB1YmxpYyBsYXN0UmV0dXJuVmFsdWU/OiBhbnlcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEV2ZW50U3RhdGVcbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHN0YXRlXG4gICAqIEBwYXJhbSBza2lwTmV4dE9ic2VydmVycyAtIGRlZmluZXMgYSBmbGFnIHdoaWNoIHdpbGwgaW5zdHJ1Y3QgdGhlIG9ic2VydmFibGUgdG8gc2tpcCBmb2xsb3dpbmcgb2JzZXJ2ZXJzIHdoZW4gc2V0IHRvIHRydWVcbiAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgdGhlIG9yaWdpbmFsIHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHBhcmFtIGN1cnJlbnRUYXJnZXQgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKG1hc2s6IG51bWJlciwgc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZSwgdGFyZ2V0PzogYW55LCBjdXJyZW50VGFyZ2V0PzogYW55KSB7XG4gICAgdGhpcy5pbml0YWxpemUobWFzaywgc2tpcE5leHRPYnNlcnZlcnMsIHRhcmdldCwgY3VycmVudFRhcmdldClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBjdXJyZW50IGV2ZW50IHN0YXRlXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayBhc3NvY2lhdGVkIHdpdGggdGhpcyBzdGF0ZVxuICAgKiBAcGFyYW0gc2tpcE5leHRPYnNlcnZlcnMgLSBkZWZpbmVzIGEgZmxhZyB3aGljaCB3aWxsIGluc3RydWN0IHRoZSBvYnNlcnZhYmxlIHRvIHNraXAgZm9sbG93aW5nIG9ic2VydmVycyB3aGVuIHNldCB0byB0cnVlXG4gICAqIEBwYXJhbSB0YXJnZXQgLSBkZWZpbmVzIHRoZSBvcmlnaW5hbCB0YXJnZXQgb2YgdGhlIHN0YXRlXG4gICAqIEBwYXJhbSBjdXJyZW50VGFyZ2V0IC0gZGVmaW5lcyB0aGUgY3VycmVudCB0YXJnZXQgb2YgdGhlIHN0YXRlXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGV2ZW50IHN0YXRlXG4gICAqL1xuICBwdWJsaWMgaW5pdGFsaXplKG1hc2s6IG51bWJlciwgc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZSwgdGFyZ2V0PzogYW55LCBjdXJyZW50VGFyZ2V0PzogYW55KTogT2JzZXJ2ZXJFdmVudFN0YXRlIHtcbiAgICB0aGlzLm1hc2sgPSBtYXNrXG4gICAgdGhpcy5za2lwTmV4dE9ic2VydmVycyA9IHNraXBOZXh0T2JzZXJ2ZXJzXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXRcbiAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhbiBPYnNlcnZlciByZWdpc3RlcmVkIHRvIGEgZ2l2ZW4gT2JzZXJ2YWJsZSBvYmplY3QuXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBPYnNlcnZlcjxUPiB7XG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgYSBwcm9wZXJ0eSBkZWZpbmluZyB0aGF0IHRoZSBvYnNlcnZlciBhcyB0byBiZSB1bnJlZ2lzdGVyZWQgYWZ0ZXIgdGhlIG5leHQgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgdW5yZWdpc3Rlck9uTmV4dENhbGwgPSBmYWxzZVxuXG4gIC8qKiBGb3IgaW50ZXJuYWwgdXNhZ2UgKi9cbiAgcHVibGljIF93aWxsQmVVbnJlZ2lzdGVyZWQgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG9ic2VydmVyXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGRlZmluZXMgdGhlIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiB0aGUgb2JzZXJ2ZXIgaXMgbm90aWZpZWRcbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIG9mIHRoZSBvYnNlcnZlciAodXNlZCB0byBmaWx0ZXIgbm90aWZpY2F0aW9ucylcbiAgICogQHBhcmFtIHNjb3BlIC0gZGVmaW5lcyB0aGUgY3VycmVudCBzY29wZSB1c2VkIHRvIHJlc3RvcmUgdGhlIEpTIGNvbnRleHRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiB0aGUgb2JzZXJ2ZXIgaXMgbm90aWZpZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCxcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBtYXNrIG9mIHRoZSBvYnNlcnZlciAodXNlZCB0byBmaWx0ZXIgbm90aWZpY2F0aW9ucylcbiAgICAgKi9cbiAgICBwdWJsaWMgbWFzazogbnVtYmVyLFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGN1cnJlbnQgc2NvcGUgdXNlZCB0byByZXN0b3JlIHRoZSBKUyBjb250ZXh0XG4gICAgICovXG4gICAgcHVibGljIHNjb3BlOiBhbnkgPSBudWxsXG4gICkge31cbn1cblxuLyoqXG4gKiBUaGUgT2JzZXJ2YWJsZSBjbGFzcyBpcyBhIHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgT2JzZXJ2YWJsZSBwYXR0ZXJuLlxuICpcbiAqIFRoZXJlJ3Mgb25lIHNsaWdodCBwYXJ0aWN1bGFyaXR5IHRob3VnaDogYSBnaXZlbiBPYnNlcnZhYmxlIGNhbiBub3RpZnkgaXRzIG9ic2VydmVyIHVzaW5nIGEgcGFydGljdWxhciBtYXNrIHZhbHVlLCBvbmx5IHRoZSBPYnNlcnZlcnMgcmVnaXN0ZXJlZCB3aXRoIHRoaXMgbWFzayB2YWx1ZSB3aWxsIGJlIG5vdGlmaWVkLlxuICogVGhpcyBlbmFibGUgYSBtb3JlIGZpbmUgZ3JhaW5lZCBleGVjdXRpb24gd2l0aG91dCBoYXZpbmcgdG8gcmVseSBvbiBtdWx0aXBsZSBkaWZmZXJlbnQgT2JzZXJ2YWJsZSBvYmplY3RzLlxuICogRm9yIGluc3RhbmNlIHlvdSBtYXkgaGF2ZSBhIGdpdmVuIE9ic2VydmFibGUgdGhhdCBoYXZlIGZvdXIgZGlmZmVyZW50IHR5cGVzIG9mIG5vdGlmaWNhdGlvbnM6IE1vdmUgKG1hc2sgPSAweDAxKSwgU3RvcCAobWFzayA9IDB4MDIpLCBUdXJuIFJpZ2h0IChtYXNrID0gMFgwNCksIFR1cm4gTGVmdCAobWFzayA9IDBYMDgpLlxuICogQSBnaXZlbiBvYnNlcnZlciBjYW4gcmVnaXN0ZXIgaXRzZWxmIHdpdGggb25seSBNb3ZlIGFuZCBTdG9wIChtYXNrID0gMHgwMyksIHRoZW4gaXQgd2lsbCBvbmx5IGJlIG5vdGlmaWVkIHdoZW4gb25lIG9mIHRoZXNlIHR3byBvY2N1cnMgYW5kIHdpbGwgbmV2ZXIgYmUgZm9yIFR1cm4gTGVmdC9SaWdodC5cbiAqXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkXG4gKi9cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlPFQ+IHtcbiAgcHJpdmF0ZSBfb2JzZXJ2ZXJzID0gbmV3IEFycmF5PE9ic2VydmVyPFQ+PigpXG5cbiAgcHJpdmF0ZSBfZXZlbnRTdGF0ZTogT2JzZXJ2ZXJFdmVudFN0YXRlXG5cbiAgcHJpdmF0ZSBfb25PYnNlcnZlckFkZGVkOiBudWxsIHwgKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHZvaWQpID0gbnVsbFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG9ic2VydmFibGVcbiAgICogQHBhcmFtIG9uT2JzZXJ2ZXJBZGRlZCAtIGRlZmluZXMgYSBjYWxsYmFjayB0byBjYWxsIHdoZW4gYSBuZXcgb2JzZXJ2ZXIgaXMgYWRkZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9uT2JzZXJ2ZXJBZGRlZD86IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHZvaWQpIHtcbiAgICB0aGlzLl9ldmVudFN0YXRlID0gbmV3IE9ic2VydmVyRXZlbnRTdGF0ZSgwKVxuXG4gICAgaWYgKG9uT2JzZXJ2ZXJBZGRlZCkge1xuICAgICAgdGhpcy5fb25PYnNlcnZlckFkZGVkID0gb25PYnNlcnZlckFkZGVkXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBPYnNlcnZlciB3aXRoIHRoZSBzcGVjaWZpZWQgY2FsbGJhY2tcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gdGhlIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBmb3IgdGhhdCBPYnNlcnZlclxuICAgKiBAcGFyYW0gbWFzayAtIHRoZSBtYXNrIHVzZWQgdG8gZmlsdGVyIG9ic2VydmVyc1xuICAgKiBAcGFyYW0gaW5zZXJ0Rmlyc3QgLSBpZiB0cnVlIHRoZSBjYWxsYmFjayB3aWxsIGJlIGluc2VydGVkIGF0IHRoZSBmaXJzdCBwb3NpdGlvbiwgaGVuY2UgZXhlY3V0ZWQgYmVmb3JlIHRoZSBvdGhlcnMgb25lcy4gSWYgZmFsc2UgKGRlZmF1bHQgYmVoYXZpb3IpIHRoZSBjYWxsYmFjayB3aWxsIGJlIGluc2VydGVkIGF0IHRoZSBsYXN0IHBvc2l0aW9uLCBleGVjdXRlZCBhZnRlciBhbGwgdGhlIG90aGVycyBhbHJlYWR5IHByZXNlbnQuXG4gICAqIEBwYXJhbSBzY29wZSAtIG9wdGlvbmFsIHNjb3BlIGZvciB0aGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGZyb21cbiAgICogQHBhcmFtIHVucmVnaXN0ZXJPbkZpcnN0Q2FsbCAtIGRlZmluZXMgaWYgdGhlIG9ic2VydmVyIGFzIHRvIGJlIHVucmVnaXN0ZXJlZCBhZnRlciB0aGUgbmV4dCBub3RpZmljYXRpb25cbiAgICogQHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBjcmVhdGVkIGZvciB0aGUgY2FsbGJhY2tcbiAgICovXG4gIHB1YmxpYyBhZGQoXG4gICAgY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICBpbnNlcnRGaXJzdCA9IGZhbHNlLFxuICAgIHNjb3BlOiBhbnkgPSBudWxsLFxuICAgIHVucmVnaXN0ZXJPbkZpcnN0Q2FsbCA9IGZhbHNlXG4gICk6IG51bGwgfCBPYnNlcnZlcjxUPiB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlcihjYWxsYmFjaywgbWFzaywgc2NvcGUpXG4gICAgb2JzZXJ2ZXIudW5yZWdpc3Rlck9uTmV4dENhbGwgPSB1bnJlZ2lzdGVyT25GaXJzdENhbGxcblxuICAgIGlmIChpbnNlcnRGaXJzdCkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnVuc2hpZnQob2JzZXJ2ZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX29ic2VydmVycy5wdXNoKG9ic2VydmVyKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9vbk9ic2VydmVyQWRkZWQpIHtcbiAgICAgIHRoaXMuX29uT2JzZXJ2ZXJBZGRlZChvYnNlcnZlcilcbiAgICB9XG5cbiAgICByZXR1cm4gb2JzZXJ2ZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgT2JzZXJ2ZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGFuZCB1bnJlZ2lzdGVycyBhZnRlciB0aGUgbmV4dCBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gdGhlIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBmb3IgdGhhdCBPYnNlcnZlclxuICAgKiBAcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGNyZWF0ZWQgZm9yIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgcHVibGljIGFkZE9uY2UoY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCk6IG51bGwgfCBPYnNlcnZlcjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRkKGNhbGxiYWNrLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBPYnNlcnZlciBmcm9tIHRoZSBPYnNlcnZhYmxlIG9iamVjdFxuICAgKiBAcGFyYW0gb2JzZXJ2ZXIgLSB0aGUgaW5zdGFuY2Ugb2YgdGhlIE9ic2VydmVyIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyBmYWxzZSBpZiBpdCBkb2Vzbid0IGJlbG9uZyB0byB0aGlzIE9ic2VydmFibGVcbiAgICovXG4gIHB1YmxpYyByZW1vdmUob2JzZXJ2ZXI6IG51bGwgfCBPYnNlcnZlcjxUPik6IGJvb2xlYW4ge1xuICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fb2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpXG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9kZWZlclVucmVnaXN0ZXIob2JzZXJ2ZXIpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIE9ic2VydmFibGUgb2JqZWN0XG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIHRoZSBjYWxsYmFjayB0byByZW1vdmVcbiAgICogQHBhcmFtIHNjb3BlIC0gb3B0aW9uYWwgc2NvcGUuIElmIHVzZWQgb25seSB0aGUgY2FsbGJhY2tzIHdpdGggdGhpcyBzY29wZSB3aWxsIGJlIHJlbW92ZWRcbiAgICogQHJldHVybnMgZmFsc2UgaWYgaXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBPYnNlcnZhYmxlXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlQ2FsbGJhY2soY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCwgc2NvcGU/OiBhbnkpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKHRoaXMuX29ic2VydmVyc1tpbmRleF0uY2FsbGJhY2sgPT09IGNhbGxiYWNrICYmICghc2NvcGUgfHwgc2NvcGUgPT09IHRoaXMuX29ic2VydmVyc1tpbmRleF0uc2NvcGUpKSB7XG4gICAgICAgIHRoaXMuX2RlZmVyVW5yZWdpc3Rlcih0aGlzLl9vYnNlcnZlcnNbaW5kZXhdKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBhbGwgT2JzZXJ2ZXJzIGJ5IGNhbGxpbmcgdGhlaXIgcmVzcGVjdGl2ZSBjYWxsYmFjayB3aXRoIHRoZSBnaXZlbiBkYXRhXG4gICAqIFdpbGwgcmV0dXJuIHRydWUgaWYgYWxsIG9ic2VydmVycyB3ZXJlIGV4ZWN1dGVkLCBmYWxzZSBpZiBhbiBvYnNlcnZlciBzZXQgc2tpcE5leHRPYnNlcnZlcnMgdG8gdHJ1ZSwgdGhlbiBwcmV2ZW50IHRoZSBzdWJzZXF1ZW50IG9uZXMgdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0gZXZlbnREYXRhIC0gZGVmaW5lcyB0aGUgZGF0YSB0byBzZW5kIHRvIGFsbCBvYnNlcnZlcnNcbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIG9mIHRoZSBjdXJyZW50IG5vdGlmaWNhdGlvbiAob2JzZXJ2ZXJzIHdpdGggaW5jb21wYXRpYmxlIG1hc2sgKGllIG1hc2sgJiBvYnNlcnZlci5tYXNrID09PSAwKSB3aWxsIG5vdCBiZSBub3RpZmllZClcbiAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgdGhlIG9yaWdpbmFsIHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHBhcmFtIGN1cnJlbnRUYXJnZXQgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHJldHVybnMgZmFsc2UgaWYgdGhlIGNvbXBsZXRlIG9ic2VydmVyIGNoYWluIHdhcyBub3QgcHJvY2Vzc2VkIChiZWNhdXNlIG9uZSBvYnNlcnZlciBzZXQgdGhlIHNraXBOZXh0T2JzZXJ2ZXJzIHRvIHRydWUpXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5T2JzZXJ2ZXJzKGV2ZW50RGF0YTogVCwgbWFzazogbnVtYmVyID0gLTEsIHRhcmdldD86IGFueSwgY3VycmVudFRhcmdldD86IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2V2ZW50U3RhdGVcbiAgICBzdGF0ZS5tYXNrID0gbWFza1xuICAgIHN0YXRlLnRhcmdldCA9IHRhcmdldFxuICAgIHN0YXRlLmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0XG4gICAgc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZVxuICAgIHN0YXRlLmxhc3RSZXR1cm5WYWx1ZSA9IGV2ZW50RGF0YVxuXG4gICAgZm9yIChjb25zdCBvYnMgb2YgdGhpcy5fb2JzZXJ2ZXJzKSB7XG4gICAgICBpZiAob2JzLl93aWxsQmVVbnJlZ2lzdGVyZWQpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9icy5tYXNrICYgbWFzaykge1xuICAgICAgICBpZiAob2JzLnNjb3BlKSB7XG4gICAgICAgICAgc3RhdGUubGFzdFJldHVyblZhbHVlID0gb2JzLmNhbGxiYWNrLmFwcGx5KG9icy5zY29wZSwgW2V2ZW50RGF0YSwgc3RhdGVdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLmxhc3RSZXR1cm5WYWx1ZSA9IG9icy5jYWxsYmFjayhldmVudERhdGEsIHN0YXRlKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9icy51bnJlZ2lzdGVyT25OZXh0Q2FsbCkge1xuICAgICAgICAgIHRoaXMuX2RlZmVyVW5yZWdpc3RlcihvYnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5za2lwTmV4dE9ic2VydmVycykge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsaW5nIHRoaXMgd2lsbCBleGVjdXRlIGVhY2ggY2FsbGJhY2ssIGV4cGVjdGluZyBpdCB0byBiZSBhIHByb21pc2Ugb3IgcmV0dXJuIGEgdmFsdWUuXG4gICAqIElmIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4gb25lIGZ1bmN0aW9uIGZhaWxzLCB0aGUgcHJvbWlzZSB3aWxsIGZhaWwgYW5kIHRoZSBleGVjdXRpb24gd2lsbCBub3QgY29udGludWUuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBjaGFpbiBvZiBldmVudHMgKHNvbWV0aW1lcyBhc3luYyBldmVudHMpIGlzIG5lZWRlZCB0byBpbml0aWFsaXplIGEgY2VydGFpbiBvYmplY3RcbiAgICogYW5kIGl0IGlzIGNydWNpYWwgdGhhdCBhbGwgY2FsbGJhY2tzIHdpbGwgYmUgZXhlY3V0ZWQuXG4gICAqIFRoZSBvcmRlciBvZiB0aGUgY2FsbGJhY2tzIGlzIGtlcHQsIGNhbGxiYWNrcyBhcmUgbm90IGV4ZWN1dGVkIHBhcmFsbGVsLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnREYXRhIC0gVGhlIGRhdGEgdG8gYmUgc2VudCB0byBlYWNoIGNhbGxiYWNrXG4gICAqIEBwYXJhbSBtYXNrIC0gaXMgdXNlZCB0byBmaWx0ZXIgb2JzZXJ2ZXJzIGRlZmF1bHRzIHRvIC0xXG4gICAqIEBwYXJhbSB0YXJnZXQgLSBkZWZpbmVzIHRoZSBjYWxsYmFjayB0YXJnZXQgKHNlZSBFdmVudFN0YXRlKVxuICAgKiBAcGFyYW0gY3VycmVudFRhcmdldCAtIGRlZmluZXMgaGUgY3VycmVudCBvYmplY3QgaW4gdGhlIGJ1YmJsaW5nIHBoYXNlXG4gICAqIEByZXR1cm5zIHdpbGwgcmV0dXJuIGEgUHJvbWlzZSB0aGFuIHJlc29sdmVzIHdoZW4gYWxsIGNhbGxiYWNrcyBleGVjdXRlZCBzdWNjZXNzZnVsbHkuXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5T2JzZXJ2ZXJzV2l0aFByb21pc2UoZXZlbnREYXRhOiBULCBtYXNrOiBudW1iZXIgPSAtMSwgdGFyZ2V0PzogYW55LCBjdXJyZW50VGFyZ2V0PzogYW55KTogUHJvbWlzZTxUPiB7XG4gICAgLy8gY3JlYXRlIGFuIGVtcHR5IHByb21pc2VcbiAgICBsZXQgcDogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKGV2ZW50RGF0YSlcblxuICAgIC8vIG5vIG9ic2VydmVycz8gcmV0dXJuIHRoaXMgcHJvbWlzZS5cbiAgICBpZiAoIXRoaXMuX29ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9ldmVudFN0YXRlXG4gICAgc3RhdGUubWFzayA9IG1hc2tcbiAgICBzdGF0ZS50YXJnZXQgPSB0YXJnZXRcbiAgICBzdGF0ZS5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldFxuICAgIHN0YXRlLnNraXBOZXh0T2JzZXJ2ZXJzID0gZmFsc2VcblxuICAgIC8vIGV4ZWN1dGUgb25lIGNhbGxiYWNrIGFmdGVyIGFub3RoZXIgKG5vdCB1c2luZyBQcm9taXNlLmFsbCwgdGhlIG9yZGVyIGlzIGltcG9ydGFudClcbiAgICB0aGlzLl9vYnNlcnZlcnMuZm9yRWFjaCgob2JzKSA9PiB7XG4gICAgICBpZiAoc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAob2JzLl93aWxsQmVVbnJlZ2lzdGVyZWQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAob2JzLm1hc2sgJiBtYXNrKSB7XG4gICAgICAgIGlmIChvYnMuc2NvcGUpIHtcbiAgICAgICAgICBwID0gcC50aGVuKChsYXN0UmV0dXJuZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUubGFzdFJldHVyblZhbHVlID0gbGFzdFJldHVybmVkVmFsdWVcbiAgICAgICAgICAgIHJldHVybiBvYnMuY2FsbGJhY2suYXBwbHkob2JzLnNjb3BlLCBbZXZlbnREYXRhLCBzdGF0ZV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwID0gcC50aGVuKChsYXN0UmV0dXJuZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUubGFzdFJldHVyblZhbHVlID0gbGFzdFJldHVybmVkVmFsdWVcbiAgICAgICAgICAgIHJldHVybiBvYnMuY2FsbGJhY2soZXZlbnREYXRhLCBzdGF0ZSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChvYnMudW5yZWdpc3Rlck9uTmV4dENhbGwpIHtcbiAgICAgICAgICB0aGlzLl9kZWZlclVucmVnaXN0ZXIob2JzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIHJldHVybiB0aGUgZXZlbnREYXRhXG4gICAgcmV0dXJuIHAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gZXZlbnREYXRhXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RpZnkgYSBzcGVjaWZpYyBvYnNlcnZlclxuICAgKiBAcGFyYW0gb2JzZXJ2ZXIgLSBkZWZpbmVzIHRoZSBvYnNlcnZlciB0byBub3RpZnlcbiAgICogQHBhcmFtIGV2ZW50RGF0YSAtIGRlZmluZXMgdGhlIGRhdGEgdG8gYmUgc2VudCB0byBlYWNoIGNhbGxiYWNrXG4gICAqIEBwYXJhbSBtYXNrIC0gaXMgdXNlZCB0byBmaWx0ZXIgb2JzZXJ2ZXJzIGRlZmF1bHRzIHRvIC0xXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5T2JzZXJ2ZXIob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+LCBldmVudERhdGE6IFQsIG1hc2s6IG51bWJlciA9IC0xKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9ldmVudFN0YXRlXG4gICAgc3RhdGUubWFzayA9IG1hc2tcbiAgICBzdGF0ZS5za2lwTmV4dE9ic2VydmVycyA9IGZhbHNlXG5cbiAgICBvYnNlcnZlci5jYWxsYmFjayhldmVudERhdGEsIHN0YXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIG9ic2VydmFibGUgaGFzIGF0IGxlYXN0IG9uZSBvYnNlcnZlclxuICAgKiBAcmV0dXJucyB0cnVlIGlzIHRoZSBPYnNlcnZhYmxlIGhhcyBhdCBsZWFzdCBvbmUgT2JzZXJ2ZXIgcmVnaXN0ZXJlZFxuICAgKi9cbiAgcHVibGljIGhhc09ic2VydmVycygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aCA+IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgbGlzdCBvZiBvYnNlcnZlcnNcbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLl9vYnNlcnZlcnMgPSBuZXcgQXJyYXk8T2JzZXJ2ZXI8VD4+KClcbiAgICB0aGlzLl9vbk9ic2VydmVyQWRkZWQgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIGN1cnJlbnQgb2JzZXJ2YWJsZVxuICAgKiBAcmV0dXJucyBhIG5ldyBvYnNlcnZhYmxlXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IE9ic2VydmFibGU8VD4oKVxuXG4gICAgcmVzdWx0Ll9vYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnMuc2xpY2UoMClcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBEb2VzIHRoaXMgb2JzZXJ2YWJsZSBoYW5kbGVzIG9ic2VydmVyIHJlZ2lzdGVyZWQgd2l0aCBhIGdpdmVuIG1hc2tcbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIHRvIGJlIHRlc3RlZFxuICAgKiBAcmV0dXJucyB3aGV0aGVyIG9yIG5vdCBvbmUgb2JzZXJ2ZXIgcmVnaXN0ZXJlZCB3aXRoIHRoZSBnaXZlbiBtYXNrIGlzIGhhbmRlbGVkXG4gICAqL1xuICBwdWJsaWMgaGFzU3BlY2lmaWNNYXNrKG1hc2s6IG51bWJlciA9IC0xKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBvYnMgb2YgdGhpcy5fb2JzZXJ2ZXJzKSB7XG4gICAgICBpZiAob2JzLm1hc2sgJiBtYXNrIHx8IG9icy5tYXNrID09PSBtYXNrKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcHJpdmF0ZSBfZGVmZXJVbnJlZ2lzdGVyKG9ic2VydmVyOiBPYnNlcnZlcjxUPik6IHZvaWQge1xuICAgIG9ic2VydmVyLnVucmVnaXN0ZXJPbk5leHRDYWxsID0gZmFsc2VcbiAgICBvYnNlcnZlci5fd2lsbEJlVW5yZWdpc3RlcmVkID0gdHJ1ZVxuICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKShhc3luYyAoKSA9PiB0aGlzLl9yZW1vdmUob2JzZXJ2ZXIpKVxuICAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gIH1cblxuICAvLyBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuIG5vdCBpdGVyYXRpbmcgb3ZlciBfb2JzZXJ2ZXJzIHRvIGF2b2lkIGNhbGxiYWNrIHNraXBwaW5nLlxuICAvLyBSZW1vdmVzIGFuIG9ic2VydmVyIGZyb20gdGhlIF9vYnNlcnZlciBBcnJheS5cbiAgcHJpdmF0ZSBfcmVtb3ZlKG9ic2VydmVyOiBudWxsIHwgT2JzZXJ2ZXI8VD4pOiBib29sZWFuIHtcbiAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX29ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKVxuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsICJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZhYmxlJ1xuaW1wb3J0IHtcbiAgQXZhdGFyQmFzZSxcbiAgQXZhdGFyRW1vdGVDb21tYW5kLFxuICBBdmF0YXJFcXVpcHBlZERhdGEsXG4gIEVudGl0eSxcbiAgUGxheWVySWRlbnRpdHlEYXRhLFxuICBQb2ludGVyRXZlbnRzUmVzdWx0LFxuICBSZWFsbUluZm8sXG4gIFZlY3RvcjNUeXBlLFxuICBlbmdpbmVcbn0gZnJvbSAnQGRjbC9lY3MnXG5pbXBvcnQgeyBNYW55RW50aXR5QWN0aW9uLCBTZW5kQmF0Y2hSZXNwb25zZSwgc3Vic2NyaWJlIH0gZnJvbSAnfnN5c3RlbS9FbmdpbmVBcGknXG5pbXBvcnQgcGxheWVycyBmcm9tICcuL3BsYXllcnMnXG5cbi8vLyAtLS0gRVZFTlRTIC0tLVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSUV2ZW50TmFtZXMgPSBrZXlvZiBJRXZlbnRzXG5cbi8qKlxuICogQHB1YmxpY1xuICogTm90ZTogRG9uJ3QgdXNlIGBvbmAgcHJlZml4IGZvciBJRXZlbnRzIHRvIGF2b2lkIHJlZHVuZGFuY3kgd2l0aCBgZXZlbnQub24oXCJvbkV2ZW50TmFtZVwiKWAgc3ludGF4LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudHMge1xuICBwbGF5ZXJFeHByZXNzaW9uOiB7XG4gICAgZXhwcmVzc2lvbklkOiBzdHJpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGdldHMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgZW50ZXJzIHRoZSBzY2VuZVxuICAgKi9cbiAgb25FbnRlclNjZW5lOiB7XG4gICAgdXNlcklkOiBzdHJpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGdldHMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZSBzY2VuZVxuICAgKi9cbiAgb25MZWF2ZVNjZW5lOiB7XG4gICAgdXNlcklkOiBzdHJpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGdldHMgdHJpZ2dlcmVkIGFmdGVyIHJlY2VpdmluZyBhIGNvbW1zIG1lc3NhZ2UuXG4gICAqL1xuICBjb21tczoge1xuICAgIHNlbmRlcjogc3RyaW5nXG4gICAgbWVzc2FnZTogc3RyaW5nXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB0cmlnZ2VyZWQgb25jZSB0aGUgc2NlbmUgc2hvdWxkIHN0YXJ0LlxuICAgKi9cbiAgc2NlbmVTdGFydDogdW5rbm93blxuXG4gIC8qKiBUaGlzIGlzIHRyaWdnZXJlZCBhdCBsZWFzdCBmb3IgZWFjaCB2aWRlb1N0YXR1cyBjaGFuZ2UgKi9cbiAgdmlkZW9FdmVudDoge1xuICAgIGNvbXBvbmVudElkOiBzdHJpbmdcbiAgICB2aWRlb0NsaXBJZDogc3RyaW5nXG4gICAgLyoqIFN0YXR1cywgY2FuIGJlIE5PTkUgPSAwLCBFUlJPUiA9IDEsIExPQURJTkcgPSAyLCBSRUFEWSA9IDMsIFBMQVlJTkcgPSA0LEJVRkZFUklORyA9IDUgKi9cbiAgICB2aWRlb1N0YXR1czogbnVtYmVyXG4gICAgLyoqIEN1cnJlbnQgb2Zmc2V0IHBvc2l0aW9uIGluIHNlY29uZHMgKi9cbiAgICBjdXJyZW50T2Zmc2V0OiBudW1iZXJcbiAgICAvKiogVmlkZW8gbGVuZ3RoIGluIHNlY29uZHMuIENhbiBiZSAtMSAqL1xuICAgIHRvdGFsVmlkZW9MZW5ndGg6IG51bWJlclxuICB9XG5cbiAgLyoqIFRoaXMgaXMgdHJpZ2dlciBldmVyeXRpbWUgYSBwcm9maWxlIGlzIGNoYW5nZWQgKi9cbiAgcHJvZmlsZUNoYW5nZWQ6IHtcbiAgICBldGhBZGRyZXNzOiBzdHJpbmdcbiAgICB2ZXJzaW9uOiBudW1iZXJcbiAgfVxuXG4gIC8qKiBUcmlnZ2VyZWQgd2hlbiBwZWVyJ3MgYXZhdGFyIGlzIGNvbm5lY3RlZCBhbmQgdmlzaWJsZSAqL1xuICBwbGF5ZXJDb25uZWN0ZWQ6IHtcbiAgICB1c2VySWQ6IHN0cmluZ1xuICB9XG5cbiAgLyoqIFRyaWdnZXJlZCB3aGVuIHBlZXIgZGlzY29ubmVjdCBhbmQvb3IgaXQgYXZhdGFyIGlzIHNldCBpbnZpc2libGUgYnkgY29tbXMgKi9cbiAgcGxheWVyRGlzY29ubmVjdGVkOiB7XG4gICAgdXNlcklkOiBzdHJpbmdcbiAgfVxuXG4gIC8qKiBUcmlnZ2VyZWQgd2hlbiBjdXJyZW50IHJlYWxtIG9yIGlzbGFuZCBjaGFuZ2VzICovXG4gIG9uUmVhbG1DaGFuZ2VkOiB7XG4gICAgZG9tYWluOiBzdHJpbmdcbiAgICByb29tOiBzdHJpbmdcbiAgICBzZXJ2ZXJOYW1lOiBzdHJpbmdcbiAgICBkaXNwbGF5TmFtZTogc3RyaW5nXG4gIH1cblxuICAvKiogVHJpZ2dlcmVkIHdoZW4gb3RoZXIgcGxheWVyJ3MgYXZhdGFyIGlzIGNsaWNrZWQgKi9cbiAgcGxheWVyQ2xpY2tlZDoge1xuICAgIHVzZXJJZDogc3RyaW5nXG4gICAgcmF5OiB7XG4gICAgICBvcmlnaW46IFZlY3RvcjNUeXBlXG4gICAgICBkaXJlY3Rpb246IFZlY3RvcjNUeXBlXG4gICAgICBkaXN0YW5jZTogbnVtYmVyXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBhIGNhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBPYnNlcnZhYmxlXG4gKiBjb25zdHJ1Y3RvciB0byBzdWJzY3JpYmUgdG8gdGhlIGV2ZW50cyBvZiB0aGUgRGVjZW50cmFsYW5kSW50ZXJmYWNlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmliZXIoZXZlbnROYW1lOiBrZXlvZiBJRXZlbnRzKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2NvbW1zJykge1xuICAgICAgc3Vic2NyaWJlKHsgZXZlbnRJZDogZXZlbnROYW1lIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIFNESzdDb21wb25lbnRzT2JzZXJ2YWJsZT8uc3Vic2NyaWJlKGV2ZW50TmFtZSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGVzZSBldmVudHMgYXJlIHRyaWdnZXJlZCBhZnRlciB5b3VyIGNoYXJhY3RlciBlbnRlcnMgdGhlIHNjZW5lLlxuICogQHB1YmxpY1xuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBhbiBpbmhlcml0YW5jZSBvZiBFQ1M2LCBpdCdzIGhlcmUgdGVtcG9yYXJ5IGZvciB0aGUgZmVhdHVyZSBwYXJpdHksIHBsZWFzZSByZWFkIHRoZSBuZXdzIGFuZCBkb2NzIHRvIGtub3cgaG93IGhhbmRsZSB3aGVuIGl0J3MgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uRW50ZXJTY2VuZU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydvbkVudGVyU2NlbmUnXT4oY3JlYXRlU3Vic2NyaWJlcignb25FbnRlclNjZW5lJykpXG4vKiogQHB1YmxpY1xuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBhbiBpbmhlcml0YW5jZSBvZiBFQ1M2LCBpdCdzIGhlcmUgdGVtcG9yYXJ5IGZvciB0aGUgZmVhdHVyZSBwYXJpdHksIHBsZWFzZSByZWFkIHRoZSBuZXdzIGFuZCBkb2NzIHRvIGtub3cgaG93IGhhbmRsZSB3aGVuIGl0J3MgcmVtb3ZlZC5cbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgYW4gaW5oZXJpdGFuY2Ugb2YgRUNTNiwgaXQncyBoZXJlIHRlbXBvcmFyeSBmb3IgdGhlIGZlYXR1cmUgcGFyaXR5LCBwbGVhc2UgcmVhZCB0aGUgbmV3cyBhbmQgZG9jcyB0byBrbm93IGhvdyBoYW5kbGUgd2hlbiBpdCdzIHJlbW92ZWQuIFVzZSBvbkVudGVyU2NlbmVPYnNlcnZhYmxlIGluc3RlYWQuICovXG5leHBvcnQgY29uc3Qgb25FbnRlclNjZW5lID0gb25FbnRlclNjZW5lT2JzZXJ2YWJsZVxuXG4vKipcbiAqIFRoZXNlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGFmdGVyIHlvdXIgY2hhcmFjdGVyIGxlYXZlcyB0aGUgc2NlbmUuXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkLlxuICovXG5leHBvcnQgY29uc3Qgb25MZWF2ZVNjZW5lT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPElFdmVudHNbJ29uTGVhdmVTY2VuZSddPihjcmVhdGVTdWJzY3JpYmVyKCdvbkxlYXZlU2NlbmUnKSlcblxuLyoqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgYW4gaW5oZXJpdGFuY2Ugb2YgRUNTNiwgaXQncyBoZXJlIHRlbXBvcmFyeSBmb3IgdGhlIGZlYXR1cmUgcGFyaXR5LCBwbGVhc2UgcmVhZCB0aGUgbmV3cyBhbmQgZG9jcyB0byBrbm93IGhvdyBoYW5kbGUgd2hlbiBpdCdzIHJlbW92ZWQuXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkLiBVc2Ugb25MZWF2ZVNjZW5lT2JzZXJ2YWJsZSBpbnN0ZWFkLiAqL1xuZXhwb3J0IGNvbnN0IG9uTGVhdmVTY2VuZSA9IG9uTGVhdmVTY2VuZU9ic2VydmFibGVcblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciBhbGwgdGhlIHJlc291cmNlcyBvZiB0aGUgc2NlbmUgd2VyZSBsb2FkZWQgKG1vZGVscywgdGV4dHVyZXMsIGV0Yy4uLilcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgYW4gaW5oZXJpdGFuY2Ugb2YgRUNTNiwgaXQncyBoZXJlIHRlbXBvcmFyeSBmb3IgdGhlIGZlYXR1cmUgcGFyaXR5LCBwbGVhc2UgcmVhZCB0aGUgbmV3cyBhbmQgZG9jcyB0byBrbm93IGhvdyBoYW5kbGUgd2hlbiBpdCdzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBvblNjZW5lUmVhZHlPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1snc2NlbmVTdGFydCddPihjcmVhdGVTdWJzY3JpYmVyKCdzY2VuZVN0YXJ0JykpXG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBhbiBpbmhlcml0YW5jZSBvZiBFQ1M2LCBpdCdzIGhlcmUgdGVtcG9yYXJ5IGZvciB0aGUgZmVhdHVyZSBwYXJpdHksIHBsZWFzZSByZWFkIHRoZSBuZXdzIGFuZCBkb2NzIHRvIGtub3cgaG93IGhhbmRsZSB3aGVuIGl0J3MgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uUGxheWVyRXhwcmVzc2lvbk9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydwbGF5ZXJFeHByZXNzaW9uJ10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCdwbGF5ZXJFeHByZXNzaW9uJylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkLlxuICovXG5leHBvcnQgY29uc3Qgb25WaWRlb0V2ZW50ID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1sndmlkZW9FdmVudCddPihjcmVhdGVTdWJzY3JpYmVyKCd2aWRlb0V2ZW50JykpXG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBhbiBpbmhlcml0YW5jZSBvZiBFQ1M2LCBpdCdzIGhlcmUgdGVtcG9yYXJ5IGZvciB0aGUgZmVhdHVyZSBwYXJpdHksIHBsZWFzZSByZWFkIHRoZSBuZXdzIGFuZCBkb2NzIHRvIGtub3cgaG93IGhhbmRsZSB3aGVuIGl0J3MgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uUHJvZmlsZUNoYW5nZWQgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydwcm9maWxlQ2hhbmdlZCddPihjcmVhdGVTdWJzY3JpYmVyKCdwcm9maWxlQ2hhbmdlZCcpKVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgYW4gaW5oZXJpdGFuY2Ugb2YgRUNTNiwgaXQncyBoZXJlIHRlbXBvcmFyeSBmb3IgdGhlIGZlYXR1cmUgcGFyaXR5LCBwbGVhc2UgcmVhZCB0aGUgbmV3cyBhbmQgZG9jcyB0byBrbm93IGhvdyBoYW5kbGUgd2hlbiBpdCdzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBvblBsYXllckNvbm5lY3RlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydwbGF5ZXJDb25uZWN0ZWQnXT4oXG4gIGNyZWF0ZVN1YnNjcmliZXIoJ3BsYXllckNvbm5lY3RlZCcpXG4pXG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBhbiBpbmhlcml0YW5jZSBvZiBFQ1M2LCBpdCdzIGhlcmUgdGVtcG9yYXJ5IGZvciB0aGUgZmVhdHVyZSBwYXJpdHksIHBsZWFzZSByZWFkIHRoZSBuZXdzIGFuZCBkb2NzIHRvIGtub3cgaG93IGhhbmRsZSB3aGVuIGl0J3MgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uUGxheWVyRGlzY29ubmVjdGVkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPElFdmVudHNbJ3BsYXllckRpc2Nvbm5lY3RlZCddPihcbiAgY3JlYXRlU3Vic2NyaWJlcigncGxheWVyRGlzY29ubmVjdGVkJylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkLlxuICovXG5leHBvcnQgY29uc3Qgb25SZWFsbUNoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1snb25SZWFsbUNoYW5nZWQnXT4oY3JlYXRlU3Vic2NyaWJlcignb25SZWFsbUNoYW5nZWQnKSlcblxuLyoqXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGFuIGluaGVyaXRhbmNlIG9mIEVDUzYsIGl0J3MgaGVyZSB0ZW1wb3JhcnkgZm9yIHRoZSBmZWF0dXJlIHBhcml0eSwgcGxlYXNlIHJlYWQgdGhlIG5ld3MgYW5kIGRvY3MgdG8ga25vdyBob3cgaGFuZGxlIHdoZW4gaXQncyByZW1vdmVkLlxuICovXG5leHBvcnQgY29uc3Qgb25QbGF5ZXJDbGlja2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPElFdmVudHNbJ3BsYXllckNsaWNrZWQnXT4oY3JlYXRlU3Vic2NyaWJlcigncGxheWVyQ2xpY2tlZCcpKVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBhbiBpbmhlcml0YW5jZSBvZiBFQ1M2LCBpdCdzIGhlcmUgdGVtcG9yYXJ5IGZvciB0aGUgZmVhdHVyZSBwYXJpdHksIHBsZWFzZSByZWFkIHRoZSBuZXdzIGFuZCBkb2NzIHRvIGtub3cgaG93IGhhbmRsZSB3aGVuIGl0J3MgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uQ29tbXNNZXNzYWdlID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1snY29tbXMnXT4oY3JlYXRlU3Vic2NyaWJlcignY29tbXMnKSlcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBkZXByZWNhdGVkIHRoaXMgaXMgYW4gT0xEIEFQSS5cbiAqIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgU0RLNiBzZW5kQmF0Y2ggdG8gcG9sbCBldmVudHMgZnJvbSB0aGUgcmVuZGVyZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvbGxFdmVudHMoc2VuZEJhdGNoOiAoYm9keTogTWFueUVudGl0eUFjdGlvbikgPT4gUHJvbWlzZTxTZW5kQmF0Y2hSZXNwb25zZT4pIHtcbiAgY29uc3QgeyBldmVudHMgfSA9IGF3YWl0IHNlbmRCYXRjaCh7IGFjdGlvbnM6IFtdIH0pXG4gIGZvciAoY29uc3QgZSBvZiBldmVudHMpIHtcbiAgICBpZiAoZS5nZW5lcmljKSB7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShlLmdlbmVyaWMuZXZlbnREYXRhKVxuICAgICAgc3dpdGNoIChlLmdlbmVyaWMuZXZlbnRJZCkge1xuICAgICAgICBjYXNlICdjb21tcyc6IHtcbiAgICAgICAgICBvbkNvbW1zTWVzc2FnZS5ub3RpZnlPYnNlcnZlcnMoZGF0YSBhcyBJRXZlbnRzWydjb21tcyddKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgU0RLN0NvbXBvbmVudHNPYnNlcnZhYmxlID0gcHJvY2Vzc09ic2VydmFibGVzKClcbmZ1bmN0aW9uIHByb2Nlc3NPYnNlcnZhYmxlcygpIHtcbiAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IG5ldyBTZXQ8a2V5b2YgSUV2ZW50cz4oKVxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShldmVudE5hbWU6IGtleW9mIElFdmVudHMpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9ucy5oYXMoZXZlbnROYW1lKSkgcmV0dXJuXG4gICAgc3dpdGNoIChldmVudE5hbWUpIHtcbiAgICAgIGNhc2UgJ3BsYXllckNsaWNrZWQnOiB7XG4gICAgICAgIHN1YnNjcmliZVBsYXllckNsaWNrKClcbiAgICAgIH1cbiAgICAgIGNhc2UgJ29uRW50ZXJTY2VuZSc6XG4gICAgICBjYXNlICdwbGF5ZXJDb25uZWN0ZWQnOiB7XG4gICAgICAgIHN1YnNjcmliZUVudGVyU2NlbmUoKVxuICAgICAgfVxuICAgICAgY2FzZSAnb25MZWF2ZVNjZW5lJzpcbiAgICAgIGNhc2UgJ3BsYXllckRpc2Nvbm5lY3RlZCc6IHtcbiAgICAgICAgc3Vic2NyaWJlTGVhdmVTY2VuZSgpXG4gICAgICB9XG4gICAgICBjYXNlICdvblJlYWxtQ2hhbmdlZCc6IHtcbiAgICAgICAgc3Vic2NyaWJlUmVhbG1DaGFuZ2UoKVxuICAgICAgfVxuICAgICAgY2FzZSAncGxheWVyRXhwcmVzc2lvbic6IHtcbiAgICAgICAgc3Vic2NyaWJlUGxheWVyRXhwcmVzc2lvbigpXG4gICAgICB9XG4gICAgICBjYXNlICdwcm9maWxlQ2hhbmdlZCc6IHtcbiAgICAgICAgc3Vic2NyaWJlUHJvZmlsZUNoYW5nZSgpXG4gICAgICB9XG4gICAgfVxuICAgIHN1YnNjcmlwdGlvbnMuYWRkKGV2ZW50TmFtZSlcbiAgfVxuICAvKipcbiAgICogUExBWUVSIEVOVEVSL0NPTk5FQ1RFRCBvYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBzdWJzY3JpYmVFbnRlclNjZW5lKCkge1xuICAgIHBsYXllcnMub25FbnRlclNjZW5lKChwbGF5ZXIpID0+IHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb25zLmhhcygnb25FbnRlclNjZW5lJykpIHtcbiAgICAgICAgb25FbnRlclNjZW5lT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoeyB1c2VySWQ6IHBsYXllci51c2VySWQgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnNjcmlwdGlvbnMuaGFzKCdwbGF5ZXJDb25uZWN0ZWQnKSkge1xuICAgICAgICBvblBsYXllckNvbm5lY3RlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHsgdXNlcklkOiBwbGF5ZXIudXNlcklkIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICAvKipcbiAgICogUExBWUVSIExFQVZFL0RJU0NPTk5FQ1RFRCBvYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBzdWJzY3JpYmVMZWF2ZVNjZW5lKCkge1xuICAgIHBsYXllcnMub25MZWF2ZVNjZW5lKCh1c2VySWQpID0+IHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb25zLmhhcygnb25MZWF2ZVNjZW5lJykpIHtcbiAgICAgICAgb25MZWF2ZVNjZW5lT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoeyB1c2VySWQgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnNjcmlwdGlvbnMuaGFzKCdwbGF5ZXJEaXNjb25uZWN0ZWQnKSkge1xuICAgICAgICBvblBsYXllckRpc2Nvbm5lY3RlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHsgdXNlcklkIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICAvKipcbiAgICogUkVBTE0gQ0hBTkdFIG9ic2VydmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZVJlYWxtQ2hhbmdlKCkge1xuICAgIFJlYWxtSW5mby5vbkNoYW5nZShlbmdpbmUuUm9vdEVudGl0eSwgKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgb25SZWFsbUNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh7XG4gICAgICAgICAgZG9tYWluOiB2YWx1ZS5iYXNlVXJsLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiB2YWx1ZS5yZWFsbU5hbWUsXG4gICAgICAgICAgcm9vbTogdmFsdWUucm9vbSA/PyAnJyxcbiAgICAgICAgICBzZXJ2ZXJOYW1lOiB2YWx1ZS5yZWFsbU5hbWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIC8qKlxuICAgKiBQTEFZRVIvQVZBVEFSIENMSUNLRUQgb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlUGxheWVyQ2xpY2soKSB7XG4gICAgY29uc3QgcGxheWVyRW50aXRpZXMgPSBuZXcgU2V0PEVudGl0eT4oKVxuICAgIGVuZ2luZS5hZGRTeXN0ZW0oKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBbZW50aXR5XSBvZiBlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKFBsYXllcklkZW50aXR5RGF0YSkpIHtcbiAgICAgICAgaWYgKHBsYXllckVudGl0aWVzLmhhcyhlbnRpdHkpKSByZXR1cm5cbiAgICAgICAgcGxheWVyRW50aXRpZXMuYWRkKGVudGl0eSlcblxuICAgICAgICBQb2ludGVyRXZlbnRzUmVzdWx0Lm9uQ2hhbmdlKGVudGl0eSwgKGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoZGF0YT8uaGl0KSB7XG4gICAgICAgICAgICBvblBsYXllckNsaWNrZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh7XG4gICAgICAgICAgICAgIHVzZXJJZDogUGxheWVySWRlbnRpdHlEYXRhLmdldE9yTnVsbChlbnRpdHkpPy5hZGRyZXNzID8/ICcnLFxuICAgICAgICAgICAgICByYXk6IHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IGRhdGEuaGl0LmRpcmVjdGlvbiEsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2U6IGRhdGEuaGl0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBvcmlnaW46IGRhdGEuaGl0Lmdsb2JhbE9yaWdpbiFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGF5ZXIgZXhwcmVzc2lvbiBvYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBzdWJzY3JpYmVQbGF5ZXJFeHByZXNzaW9uKCkge1xuICAgIEF2YXRhckVtb3RlQ29tbWFuZC5vbkNoYW5nZShlbmdpbmUuUGxheWVyRW50aXR5LCAodmFsdWUpID0+IHtcbiAgICAgIG9uUGxheWVyRXhwcmVzc2lvbk9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHsgZXhwcmVzc2lvbklkOiB2YWx1ZT8uZW1vdGVVcm4gPz8gJycgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFBST0ZJTEUgQ0hBTkdFIG9ic2VydmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZVByb2ZpbGVDaGFuZ2UoKSB7XG4gICAgQXZhdGFyQmFzZS5vbkNoYW5nZShlbmdpbmUuUGxheWVyRW50aXR5LCAoKSA9PiB7XG4gICAgICBpZiAoIXByb2ZpbGVBZGRyZXNzKSByZXR1cm5cbiAgICAgIG9uUHJvZmlsZUNoYW5nZWQubm90aWZ5T2JzZXJ2ZXJzKHsgZXRoQWRkcmVzczogcHJvZmlsZUFkZHJlc3MsIHZlcnNpb246IDAgfSlcbiAgICB9KVxuXG4gICAgQXZhdGFyRXF1aXBwZWREYXRhLm9uQ2hhbmdlKGVuZ2luZS5QbGF5ZXJFbnRpdHksICgpID0+IHtcbiAgICAgIGlmICghcHJvZmlsZUFkZHJlc3MpIHJldHVyblxuICAgICAgb25Qcm9maWxlQ2hhbmdlZC5ub3RpZnlPYnNlcnZlcnMoeyBldGhBZGRyZXNzOiBwcm9maWxlQWRkcmVzcywgdmVyc2lvbjogMCB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBGbGFnIHRvIGNhbGwgb25jZSB0aGUgc2NlbmUgaXMgaW5pdGFsaXplZC5cbiAgbGV0IHNjZW5lUmVhZHkgPSBmYWxzZVxuICBsZXQgcHJvZmlsZUFkZHJlc3M6IHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGVTeXN0ZW0oKSB7XG4gICAgaWYgKHNjZW5lUmVhZHkgJiYgcHJvZmlsZUFkZHJlc3MpIHtcbiAgICAgIHJldHVybiBlbmdpbmUucmVtb3ZlU3lzdGVtKG9ic2VydmFibGVTeXN0ZW0pXG4gICAgfVxuICAgIGlmICghc2NlbmVSZWFkeSkge1xuICAgICAgc2NlbmVSZWFkeSA9IHRydWVcbiAgICAgIG9uU2NlbmVSZWFkeU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHt9KVxuICAgIH1cbiAgICBpZiAocHJvZmlsZUFkZHJlc3MpIHJldHVyblxuICAgIHByb2ZpbGVBZGRyZXNzID0gUGxheWVySWRlbnRpdHlEYXRhLmdldE9yTnVsbChlbmdpbmUuUGxheWVyRW50aXR5KT8uYWRkcmVzc1xuICB9XG5cbiAgZW5naW5lLmFkZFN5c3RlbShvYnNlcnZhYmxlU3lzdGVtKVxuXG4gIHJldHVybiB7IHN1YnNjcmliZSB9XG59XG4iLCAiaW1wb3J0IHsgRW50aXR5LCBJRW5naW5lLCBUcmFuc2Zvcm1UeXBlLCBlbmdpbmUgfSBmcm9tICdAZGNsL2VjcydcbmltcG9ydCB7XG4gIFBsYXllcklkZW50aXR5RGF0YSBhcyBkZWZpbmVQbGF5ZXJJZGVuaXR5RGF0YSxcbiAgQXZhdGFyQmFzZSBhcyBkZWZpbmVBdmF0YXJCYXNlLFxuICBBdmF0YXJFcXVpcHBlZERhdGEgYXMgZGVmaW5lQXZhdGFyRXF1aXBwZWREYXRhLFxuICBQQkF2YXRhckJhc2UsXG4gIFBCQXZhdGFyRXF1aXBwZWREYXRhLFxuICBUcmFuc2Zvcm0gYXMgZGVmaW5lVHJhbnNmb3JtXG59IGZyb20gJ0BkY2wvZWNzL2Rpc3QvY29tcG9uZW50cydcblxudHlwZSBHZXRQbGF5ZXJEYXRhUmVxID0ge1xuICB1c2VySWQ6IHN0cmluZ1xufVxudHlwZSBHZXRQbGF5ZXJEYXRhUmVzID0ge1xuICBlbnRpdHk6IEVudGl0eVxuICBuYW1lOiBzdHJpbmdcbiAgaXNHdWVzdDogYm9vbGVhblxuICB1c2VySWQ6IHN0cmluZ1xuICBhdmF0YXI/OiBQQkF2YXRhckJhc2VcbiAgd2VhcmFibGVzOiBQQkF2YXRhckVxdWlwcGVkRGF0YVsnd2VhcmFibGVVcm5zJ11cbiAgZW1vdGVzOiBQQkF2YXRhckVxdWlwcGVkRGF0YVsnZW1vdGVVcm5zJ11cbiAgcG9zaXRpb246IFRyYW5zZm9ybVR5cGVbJ3Bvc2l0aW9uJ10gfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVBsYXllckhlbHBlcihlbmdpbmU6IElFbmdpbmUpIHtcbiAgY29uc3QgVHJhbnNmb3JtID0gZGVmaW5lVHJhbnNmb3JtKGVuZ2luZSlcbiAgY29uc3QgUGxheWVySWRlbnRpdHlEYXRhID0gZGVmaW5lUGxheWVySWRlbml0eURhdGEoZW5naW5lKVxuICBjb25zdCBBdmF0YXJFcXVpcHBlZERhdGEgPSBkZWZpbmVBdmF0YXJFcXVpcHBlZERhdGEoZW5naW5lKVxuICBjb25zdCBBdmF0YXJCYXNlID0gZGVmaW5lQXZhdGFyQmFzZShlbmdpbmUpXG4gIGNvbnN0IHBsYXllckVudGl0aWVzID0gbmV3IE1hcDxFbnRpdHksIHN0cmluZz4oKVxuXG4gIGNvbnN0IG9uRW50ZXJTY2VuZUNiOiAoKHBsYXllcjogR2V0UGxheWVyRGF0YVJlcykgPT4gdm9pZClbXSA9IFtdXG4gIGNvbnN0IG9uTGVhdmVTY2VuZUNiOiAoKHVzZXJJZDogc3RyaW5nKSA9PiB2b2lkKVtdID0gW11cblxuICBlbmdpbmUuYWRkU3lzdGVtKCgpID0+IHtcbiAgICBjb25zdCBwbGF5ZXJzID0gQXJyYXkuZnJvbShlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKFBsYXllcklkZW50aXR5RGF0YSwgQXZhdGFyQmFzZSkpXG4gICAgaWYgKHBsYXllcnMubGVuZ3RoID09PSBwbGF5ZXJFbnRpdGllcy5zaXplKSByZXR1cm5cblxuICAgIGZvciAoY29uc3QgW2VudGl0eSwgaWRlbnRpdHldIG9mIHBsYXllcnMpIHtcbiAgICAgIGlmICghcGxheWVyRW50aXRpZXMuaGFzKGVudGl0eSkpIHtcbiAgICAgICAgcGxheWVyRW50aXRpZXMuc2V0KGVudGl0eSwgaWRlbnRpdHkuYWRkcmVzcylcblxuICAgICAgICAvLyBDYWxsIG9uRW50ZXIgY2FsbGJhY2tcbiAgICAgICAgaWYgKG9uRW50ZXJTY2VuZUNiLmxlbmd0aCkge1xuICAgICAgICAgIG9uRW50ZXJTY2VuZUNiLmZvckVhY2goKGNiKSA9PiBjYihnZXRQbGF5ZXIoeyB1c2VySWQ6IGlkZW50aXR5LmFkZHJlc3MgfSkhKSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzL3JlbW92ZSBjYWxsYmFja3NcbiAgICAgICAgQXZhdGFyQmFzZS5vbkNoYW5nZShlbnRpdHksICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIGlmICghdmFsdWUgJiYgb25MZWF2ZVNjZW5lQ2IubGVuZ3RoICYmIHBsYXllckVudGl0aWVzLmdldChlbnRpdHkpKSB7XG4gICAgICAgICAgICBvbkxlYXZlU2NlbmVDYi5mb3JFYWNoKChjYikgPT4gY2IocGxheWVyRW50aXRpZXMuZ2V0KGVudGl0eSkhKSlcbiAgICAgICAgICAgIHBsYXllckVudGl0aWVzLmRlbGV0ZShlbnRpdHkpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIG9uRW50ZXJTY2VuZShjYjogKHBsYXllcjogR2V0UGxheWVyRGF0YVJlcykgPT4gdm9pZCkge1xuICAgICAgb25FbnRlclNjZW5lQ2IucHVzaChjYilcbiAgICB9LFxuICAgIG9uTGVhdmVTY2VuZShjYjogKHVzZXJJZDogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICBvbkxlYXZlU2NlbmVDYi5wdXNoKGNiKVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5mbyBvZiB0aGUgcGxheWVyIGlmIGl0J3MgaW4gdGhlIHNjZW5lLlxuICAgICAqL1xuICAgIGdldFBsYXllcih1c2VyPzogR2V0UGxheWVyRGF0YVJlcSk6IEdldFBsYXllckRhdGFSZXMgfCBudWxsIHtcbiAgICAgIGZ1bmN0aW9uIGdldEVudGl0eSgpIHtcbiAgICAgICAgaWYgKCF1c2VyPy51c2VySWQpIHJldHVybiBlbmdpbmUuUGxheWVyRW50aXR5XG4gICAgICAgIGZvciAoY29uc3QgW2VudGl0eSwgZGF0YV0gb2YgZW5naW5lLmdldEVudGl0aWVzV2l0aChQbGF5ZXJJZGVudGl0eURhdGEpKSB7XG4gICAgICAgICAgaWYgKGRhdGEuYWRkcmVzcyA9PT0gdXNlci51c2VySWQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1c2VyRW50aXR5ID0gZ2V0RW50aXR5KClcbiAgICAgIGlmICghdXNlckVudGl0eSkgcmV0dXJuIG51bGxcblxuICAgICAgY29uc3QgcGxheWVyRGF0YSA9IFBsYXllcklkZW50aXR5RGF0YS5nZXRPck51bGwodXNlckVudGl0eSlcbiAgICAgIGNvbnN0IGF2YXRhckRhdGEgPSBBdmF0YXJCYXNlLmdldE9yTnVsbCh1c2VyRW50aXR5KVxuICAgICAgY29uc3Qgd2VhcmFibGVzRGF0YSA9IEF2YXRhckVxdWlwcGVkRGF0YS5nZXRPck51bGwodXNlckVudGl0eSlcblxuICAgICAgaWYgKCFwbGF5ZXJEYXRhICYmICFhdmF0YXJEYXRhICYmICF3ZWFyYWJsZXNEYXRhKSByZXR1cm4gbnVsbFxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRpdHk6IHVzZXJFbnRpdHksXG4gICAgICAgIG5hbWU6IGF2YXRhckRhdGE/Lm5hbWUgPz8gJycsXG4gICAgICAgIGlzR3Vlc3Q6ICEhcGxheWVyRGF0YT8uaXNHdWVzdCxcbiAgICAgICAgdXNlcklkOiBwbGF5ZXJEYXRhPy5hZGRyZXNzID8/ICcnLFxuICAgICAgICBhdmF0YXI6IGF2YXRhckRhdGEgPz8gdW5kZWZpbmVkLFxuICAgICAgICB3ZWFyYWJsZXM6IHdlYXJhYmxlc0RhdGE/LndlYXJhYmxlVXJucyA/PyBbXSxcbiAgICAgICAgZW1vdGVzOiB3ZWFyYWJsZXNEYXRhPy5lbW90ZVVybnMgPz8gW10sXG4gICAgICAgIHBvc2l0aW9uOiBUcmFuc2Zvcm0uZ2V0T3JOdWxsKHVzZXJFbnRpdHkpPy5wb3NpdGlvblxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBwbGF5ZXJzID0gZGVmaW5lUGxheWVySGVscGVyKGVuZ2luZSlcbmNvbnN0IHsgZ2V0UGxheWVyLCBvbkVudGVyU2NlbmUsIG9uTGVhdmVTY2VuZSB9ID0gcGxheWVyc1xuXG5leHBvcnQgeyBnZXRQbGF5ZXIsIG9uRW50ZXJTY2VuZSwgb25MZWF2ZVNjZW5lIH1cbmV4cG9ydCBkZWZhdWx0IHBsYXllcnNcbiIsICJleHBvcnQgY29uc3QgY29tcG9zaXRlRnJvbUxvYWRlciA9IHt9IiwgImltcG9ydCB7IGNvbXBvc2l0ZUZyb21Mb2FkZXIgfSBmcm9tICd+c2RrL2FsbC1jb21wb3NpdGVzJ1xuaW1wb3J0IHsgQ29tcG9zaXRlIH0gZnJvbSAnQGRjbC9lY3MnXG5cbmNvbnN0IGNvbXBvc2l0ZXM6IENvbXBvc2l0ZS5SZXNvdXJjZVtdID0gW11cblxuLy8gQHB1YmxpY1xuZXhwb3J0IGNvbnN0IGNvbXBvc2l0ZVByb3ZpZGVyOiBDb21wb3NpdGUuUHJvdmlkZXIgPSB7XG4gIGdldENvbXBvc2l0ZU9yTnVsbChzcmM6IHN0cmluZywgX2N1cnJlbnRQYXRoPzogc3RyaW5nKSB7XG4gICAgLy8gVE9ETzogcmVzb2x2ZSBwYXRoIGZyb20gc3JjIGFuZCBjdXJyZW50UGF0aFxuXG4gICAgY29uc3QgZnJvbUxvYWRlciA9IGNvbXBvc2l0ZUZyb21Mb2FkZXJbc3JjXVxuICAgIGlmIChmcm9tTG9hZGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZnJvbUxvYWRlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICBjb25zdCBjb21wb3NpdGUgPSBDb21wb3NpdGUuZnJvbUJpbmFyeShmcm9tTG9hZGVyKVxuICAgICAgICAgIGNvbXBvc2l0ZXMucHVzaCh7IHNyYywgY29tcG9zaXRlIH0pXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZyb21Mb2FkZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgY29tcG9zaXRlID0gQ29tcG9zaXRlLmZyb21Kc29uKEpTT04ucGFyc2UoZnJvbUxvYWRlcikpXG4gICAgICAgICAgY29tcG9zaXRlcy5wdXNoKHsgc3JjLCBjb21wb3NpdGUgfSlcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZnJvbUxvYWRlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjb25zdCBjb21wb3NpdGUgPSBDb21wb3NpdGUuZnJvbUpzb24oZnJvbUxvYWRlcilcbiAgICAgICAgICBjb21wb3NpdGVzLnB1c2goeyBzcmMsIGNvbXBvc2l0ZSB9KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBjb21wb3NpdGVGcm9tTG9hZGVyW3NyY11cbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9zaXRlcy5maW5kKChpdGVtKSA9PiBpdGVtLnNyYyA9PT0gc3JjKSB8fCBudWxsXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUEsZ0RBQUFBLFVBQUFDLFNBQUE7QUFBQTtBQUNBLElBQUFBLFFBQU8sVUFBVTtBQW1CakIsYUFBUyxVQUFVLElBQUksS0FBbUI7QUFDdEMsVUFBSSxTQUFVLElBQUksTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUN4QyxTQUFVLEdBQ1YsUUFBVSxHQUNWLFVBQVU7QUFDZCxhQUFPLFFBQVEsVUFBVTtBQUNyQixlQUFPLFFBQVEsSUFBSSxVQUFVLE9BQU87QUFDeEMsYUFBTyxJQUFJLFFBQVEsU0FBUyxTQUFTQyxVQUFTLFFBQVE7QUFDbEQsZUFBTyxNQUFNLElBQUksU0FBUyxTQUFTLEtBQW1CO0FBQ2xELGNBQUksU0FBUztBQUNULHNCQUFVO0FBQ1YsZ0JBQUk7QUFDQSxxQkFBTyxHQUFHO0FBQUEsaUJBQ1Q7QUFDRCxrQkFBSUMsVUFBUyxJQUFJLE1BQU0sVUFBVSxTQUFTLENBQUMsR0FDdkNDLFVBQVM7QUFDYixxQkFBT0EsVUFBU0QsUUFBTztBQUNuQixnQkFBQUEsUUFBT0MsU0FBUSxJQUFJLFVBQVVBLE9BQU07QUFDdkMsY0FBQUYsU0FBUSxNQUFNLE1BQU1DLE9BQU07QUFBQSxZQUM5QjtBQUFBLFVBQ0o7QUFBQSxRQUNKO0FBQ0EsWUFBSTtBQUNBLGFBQUcsTUFBTSxPQUFPLE1BQU0sTUFBTTtBQUFBLFFBQ2hDLFNBQVMsS0FBSztB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O0FBQUEsUUFHQTtBQUFBLFFBQUc7QUFBQSxRQUFHO0FBQUE7QUFBQSxRQUVOO0FBQUEsUUFBSztBQUFBLFFBQUc7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBO0FBQUEsUUFHZjtBQUFBLFFBQUc7QUFBQSxRQUFJO0FBQUE7QUFBQSxRQUVQO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUc7QUFBQTtBQUFBLFFBRXJCO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBRztBQUFBO0FBQUEsUUFFOUI7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFHO0FBQUE7QUFBQSxRQUU5QjtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBSztBQUFBLFFBQUc7QUFBQTtBQUFBLFFBRTlCO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBRztBQUFBO0FBQUEsUUFFOUI7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFHO0FBQUE7QUFBQSxRQUc3QztBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBRztBQUFBO0FBQUEsUUFFWjtBQUFBLFFBQUc7QUFBQSxRQUFHO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQTtBQUFBLFFBRWI7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQ3JFO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSTtBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSTtBQUFBLFFBQ25FO0FBQUEsUUFBSztBQUFBO0FBQUEsUUFFTDtBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFDckU7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFJO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFJO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFJO0FBQUEsUUFDbkU7QUFBQSxRQUFLO0FBQUE7QUFBQSxRQUVMO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFJO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUNyRTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUk7QUFBQSxRQUFJO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUk7QUFBQSxRQUNuRTtBQUFBLFFBQUs7QUFBQTtBQUFBLFFBRUw7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQ3JFO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSTtBQUFBLFFBQUk7QUFBQSxRQUFLO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBSTtBQUFBLFFBQ25FO0FBQUEsUUFBSztBQUFBO0FBQUEsUUFFTDtBQUFBLFFBQUk7QUFBQSxRQUFHO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBRztBQUFBLFFBQUs7QUFBQSxRQUFJO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFLO0FBQUEsUUFDckU7QUFBQSxRQUFHO0FBQUEsUUFBSztBQUFBLFFBQUk7QUFBQSxRQUFJO0FBQUEsUUFBSztBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFJO0FBQUEsUUFBSTtBQUFBLFFBQUs7QUFBQSxRQUFLO0FBQUEsUUFBSTtBQUFBLFFBQUc7QUFBQSxRQUFJO0FBQUEsUUFDbkU7QUFBQSxRQUFLO0FBQUEsTUFDUCxDQUFDO0FBQUEsSUFDSDtBQUFBLElBQ0EsQ0FBQztBQUFBLEVBQ0gsRUFBRTtBQUNKLFFBQVE7QUFF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WTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFDaEc7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFDaEc7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFDaEc7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFDaEc7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFDaEc7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFDaEc7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQ2hHO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUNoRztBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFBWTtBQUFBLEVBQVk7QUFBQSxFQUFZO0FBQUEsRUFB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QUFZLEVBQUUsTUFBTSxZQUFZLE1BQU0sWUFBWSxNQUFNO0FBQzlELFVBQU0sWUFBWSxFQUFFLE1BQU0sWUFBWSxNQUFNLFlBQVksTUFBTTtBQUM5RCxVQUFNLFlBQVksRUFBRSxNQUFNLFlBQVksTUFBTSxZQUFZLE1BQU07QUFDOUQsVUFBTSxNQUFNLE1BQU0sWUFBWSxNQUFNLFlBQVksTUFBTSxZQUFZLE1BQU07QUFDeEUsUUFBSSxRQUFRLEdBQUc7QUFDWCxXQUFLLFFBQVEsTUFBTTtBQUNuQjtBQUFBLElBQ0o7QUFDQSxVQUFNLFNBQVMsSUFBSTtBQUNuQixVQUFNLFlBQVksTUFBTSxNQUFNLE1BQU07QUFDcEMsVUFBTSxZQUFZLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLFVBQU0sWUFBWSxNQUFNLE1BQU0sTUFBTTtBQUNwQyxVQUFNLFlBQVksTUFBTSxNQUFNLE1BQU07QUFDcEMsVUFBTSxZQUFZLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLFVBQU0sWUFBWSxNQUFNLE1BQU0sTUFBTTtBQUNwQyxVQUFNLFlBQVksTUFBTSxNQUFNLE1BQU07QUFDcEMsVUFBTSxZQUFZLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLFVBQU0sWUFBWSxNQUFNLE1BQU0sTUFBTTtBQUNwQyxVQUFNLFlBQVksTUFBTSxNQUFNLE1BQU07QUFDcEMsVUFBTSxZQUFZLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLFVBQU0sWUFBWSxNQUFNLE1BQU0sTUFBTTtBQUNwQyxVQUFNLFlBQVksRUFBRSxNQUFNLFlBQVksTUFBTSxZQUFZLE1BQU07QUFDOUQsVUFBTSxZQUFZLEVBQUUsTUFBTSxZQUFZLE1BQU0sWUFBWSxNQUFNO0FBQzlELFVBQU0sWUFBWSxFQUFFLE1BQU0sWUFBWSxNQUFNLFlBQVksTUFBTTtBQUM5RCxVQUFNLFlBQVksRUFBRSxNQUFNLFlBQVksTUFBTSxZQUFZLE1BQU07QUFDOUQsVUFBTSxZQUFZLEVBQUUsTUFBTSxZQUFZLE1BQU0sWUFBWSxNQUFNO0FBQzlELFVBQU0sWUFBWSxFQUFFLE1BQU0sWUFBWSxNQUFNLFlBQVksTUFB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RjtBQUNBLFNBQU8sVUFBVSwwQkFBMEIsUUFBUTtBQUNyRDsiLAogICJuYW1lcyI6IFsiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVzb2x2ZSIsICJwYXJhbXMiLCAib2Zmc2V0IiwgImV4cG9ydHMiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAidXRmOCIsICJidWZmZXIiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAic2l6ZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmcm9tTnVtYmVyIiwgInRvTnVtYmVyIiwgImxlbmd0aCIsICJleHBvcnRzIiwgImlzT2JqZWN0IiwgImlzU2V0IiwgIkJ1ZmZlciIsICJpIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0ZjgiLCAiY3JlYXRlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0ZjgiLCAiYnVmZmVyIiwgImNyZWF0ZV9hcnJheSIsICJjcmVhdGUiLCAibGVuZ3RoIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImJ1ZmZlciIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzZWxmIiwgImVyciIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAicmVxdWlyZV9taW5pbWFsIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlBCQW5pbWF0b3IiLCAiX20wIiwgImxlbmd0aCIsICJQQkFuaW1hdGlvblN0YXRlIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQkF1ZGlvRXZlbnQiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJBdWRpb1NvdXJjZSIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQkF1ZGlvU3RyZWFtIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIkF2YXRhckFuY2hvclBvaW50VHlwZSIsICJQQkF2YXRhckF0dGFjaCIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJpbXBvcnRfbWluaW1hbCIsICJDb2xvcjMiLCAiX20wIiwgImxlbmd0aCIsICJDb2xvcjQiLCAiUEJBdmF0YXJCYXNlIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCQXZhdGFyRW1vdGVDb21tYW5kIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCQXZhdGFyRXF1aXBwZWREYXRhIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgImltcG9ydF9taW5pbWFsIiwgIlBvc2l0aW9uIiwgIl9tMCIsICJsZW5ndGgiLCAiVmVjdG9yMyIsICJWZWN0b3IyIiwgIlF1YXRlcm5pb24iLCAiQXZhdGFyTW9kaWZpZXJUeXBlIiwgIlBCQXZhdGFyTW9kaWZpZXJBcmVhIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCQXZhdGFyU2hhcGUiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiQmlsbGJvYXJkTW9kZSIsICJQQkJpbGxib2FyZCIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQkNhbWVyYU1vZGUiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJDYW1lcmFNb2RlQXJlYSIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQkVuZ2luZUluZm8iLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJHbHRmQ29udGFpbmVyIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCR2x0ZkNvbnRhaW5lckxvYWRpbmdTdGF0ZSIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQklucHV0TW9kaWZpZXIiLCAiX20wIiwgImxlbmd0aCIsICJQQklucHV0TW9kaWZpZXJfU3RhbmRhcmRJbnB1dCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJNYWluQ2FtZXJhIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgImltcG9ydF9taW5pbWFsIiwgIlRleHR1cmVXcmFwTW9kZSIsICJUZXh0dXJlRmlsdGVyTW9kZSIsICJUZXh0dXJlIiwgIl9tMCIsICJsZW5ndGgiLCAiQXZhdGFyVGV4dHVyZSIsICJWaWRlb1RleHR1cmUiLCAiVGV4dHVyZVVuaW9uIiwgIk1hdGVyaWFsVHJhbnNwYXJlbmN5TW9kZSIsICJQQk1hdGVyaWFsIiwgIl9tMCIsICJsZW5ndGgiLCAiUEJNYXRlcmlhbF9VbmxpdE1hdGVyaWFsIiwgIlBCTWF0ZXJpYWxfUGJyTWF0ZXJpYWwiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIkNvbGxpZGVyTGF5ZXIiLCAiUEJNZXNoQ29sbGlkZXIiLCAiX20wIiwgImxlbmd0aCIsICJQQk1lc2hDb2xsaWRlcl9Cb3hNZXNoIiwgIlBCTWVzaENvbGxpZGVyX0N5bGluZGVyTWVzaCIsICJQQk1lc2hDb2xsaWRlcl9QbGFuZU1lc2giLCAiUEJNZXNoQ29sbGlkZXJfU3BoZXJlTWVzaCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJNZXNoUmVuZGVyZXIiLCAiX20wIiwgImxlbmd0aCIsICJQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoIiwgIlBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaCIsICJQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2giLCAiUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiTmZ0RnJhbWVUeXBlIiwgIlBCTmZ0U2hhcGUiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJQbGF5ZXJJZGVudGl0eURhdGEiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJQb2ludGVyRXZlbnRzIiwgIl9tMCIsICJsZW5ndGgiLCAiUEJQb2ludGVyRXZlbnRzX0luZm8iLCAiUEJQb2ludGVyRXZlbnRzX0VudHJ5IiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJpbXBvcnRfbWluaW1hbCIsICJSYXljYXN0SGl0IiwgIl9tMCIsICJsZW5ndGgiLCAiUEJQb2ludGVyRXZlbnRzUmVzdWx0IiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCUG9pbnRlckxvY2siLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUmF5Y2FzdFF1ZXJ5VHlwZSIsICJQQlJheWNhc3QiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJSYXljYXN0UmVzdWx0IiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCUmVhbG1JbmZvIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCVGV4dFNoYXBlIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlRleHR1cmVNb3ZlbWVudFR5cGUiLCAiRWFzaW5nRnVuY3Rpb24iLCAiUEJUd2VlbiIsICJfbTAiLCAibGVuZ3RoIiwgIk1vdmUiLCAiUm90YXRlIiwgIlNjYWxlIiwgIlRleHR1cmVNb3ZlIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJUd2Vlbkxvb3AiLCAiUEJUd2VlblNlcXVlbmNlIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlR3ZWVuU3RhdGVTdGF0dXMiLCAiUEJUd2VlblN0YXRlIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgImltcG9ydF9taW5pbWFsIiwgIkJvcmRlclJlY3QiLCAiX20wIiwgImxlbmd0aCIsICJSZWN0IiwgIkJhY2tncm91bmRUZXh0dXJlTW9kZSIsICJQQlVpQmFja2dyb3VuZCIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQlVpQ2FudmFzSW5mb3JtYXRpb24iLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJVaURyb3Bkb3duIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCVWlEcm9wZG93blJlc3VsdCIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQlVpSW5wdXQiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiUEJVaUlucHV0UmVzdWx0IiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlRleHRXcmFwIiwgIlBCVWlUZXh0IiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIllHUG9zaXRpb25UeXBlIiwgIllHQWxpZ24iLCAiWUdVbml0IiwgIllHRmxleERpcmVjdGlvbiIsICJZR1dyYXAiLCAiWUdKdXN0aWZ5IiwgIllHT3ZlcmZsb3ciLCAiWUdEaXNwbGF5IiwgIllHRWRnZSIsICJQb2ludGVyRmlsdGVyTW9kZSIsICJQQlVpVHJhbnNmb3JtIiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlZpZGVvU3RhdGUiLCAiUEJWaWRlb0V2ZW50IiwgIl9tMCIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImltcG9ydF9taW5pbWFsIiwgIlBCVmlkZW9QbGF5ZXIiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiaW1wb3J0X21pbmltYWwiLCAiQ2FtZXJhVHJhbnNpdGlvbiIsICJfbTAiLCAibGVuZ3RoIiwgIlBCVmlydHVhbENhbWVyYSIsICJfbTAiLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJpbXBvcnRfbWluaW1hbCIsICJQQlZpc2liaWxpdHlDb21wb25lbnQiLCAiX20wIiwgImxlbmd0aCIsICJidWZmZXIiLCAiZW5naW5lIiwgImVuZ2luZSIsICJlbmdpbmUiLCAiZW5naW5lIiwgImVuZ2luZSIsICJsZW5ndGgiLCAiTUlOX1ZBTFVFIiwgIk1BWF9WQUxVRSIsICJzcGVjUmVmbGVjdGlvbiIsICJzcGVjUmVmbGVjdGlvbiIsICJ2YWx1ZSIsICJTY2hlbWFzIiwgImVuZ2luZSIsICJOYW1lIiwgImVuZ2luZSIsICJlbmdpbmUiLCAiZW5naW5lIiwgIk1lZGlhU3RhdGUiLCAiZW5naW5lIiwgIk1hdGVyaWFsIiwgIk1lc2hSZW5kZXJlciIsICJlbmdpbmUiLCAiTWVzaENvbGxpZGVyIiwgIlR3ZWVuIiwgImVuZ2luZSIsICJlbmdpbmUiLCAiRW50aXR5VXRpbHMiLCAiRW50aXR5U3RhdGUiLCAidXRmOCIsICJidWZmZXIiLCAibGVuZ3RoIiwgIl9SZWFkV3JpdGVCeXRlQnVmZmVyX3dvQWRkIiwgIl9SZWFkV3JpdGVCeXRlQnVmZmVyX3JvQWRkIiwgIkNyZHRNZXNzYWdlVHlwZSIsICJQcm9jZXNzTWVzc2FnZVJlc3VsdFR5cGUiLCAiQ3JkdE1lc3NhZ2VQcm90b2NvbCIsICJEZWxldGVDb21wb25lbnQiLCAid3JpdGUiLCAicmVhZCIsICJBcHBlbmRWYWx1ZU9wZXJhdGlvbiIsICJ3cml0ZSIsICJyZWFkIiwgIkRlbGV0ZUVudGl0eSIsICJ3cml0ZSIsICJyZWFkIiwgIlB1dENvbXBvbmVudE9wZXJhdGlvbiIsICJ3cml0ZSIsICJyZWFkIiwgIlB1dE5ldHdvcmtDb21wb25lbnRPcGVyYXRpb24iLCAid3JpdGUiLCAicmVhZCIsICJEZWxldGVDb21wb25lbnROZXR3b3JrIiwgIndyaXRlIiwgInJlYWQiLCAiRGVsZXRlRW50aXR5TmV0d29yayIsICJ3cml0ZSIsICJyZWFkIiwgImJ1ZmZlciIsICJlbmdpbmUiLCAiTmV0d29ya0VudGl0eSIsICJOZXR3b3JrUGFyZW50IiwgIlRyYW5zZm9ybSIsICJwYXJzZUNodW5rTWVzc2FnZSIsICJidWZmZXIiLCAibWVzc2FnZSIsICJDcmR0VXRpbHMiLCAiU3luY2hyb25pemVkRW50aXR5VHlwZSIsICJidWZmZXIiLCAiYWRkIiwgImJ1ZmZlciIsICJlbmdpbmUiLCAiTmV0d29ya1BhcmVudCIsICJOZXR3b3JrRW50aXR5IiwgInBhcmVudCIsICJUcmFuc2Zvcm0iLCAiQ29tcG9uZW50VHlwZSIsICJyZW1vdmVFbnRpdHlXaXRoQ2hpbGRyZW4iLCAib3B0aW9ucyIsICJjb21wb25lbnQiLCAiZW5naW5lIiwgIlR3ZWVuIiwgIlR3ZWVuU3RhdGUiLCAiVHdlZW5TZXF1ZW5jZSIsICJidWZmZXIiLCAidHdlZW5TeXN0ZW0iLCAiZW5naW5lIiwgIlBvaW50ZXJFdmVudHMiLCAiTWVzaENvbGxpZGVyIiwgIkdsdGZDb250YWluZXIiLCAiVWlUcmFuc2Zvcm0iLCAiQXZhdGFyQmFzZSIsICJBdmF0YXJFbW90ZUNvbW1hbmQiLCAiQXZhdGFyRXF1aXBwZWREYXRhIiwgIkdsdGZDb250YWluZXIiLCAiUGxheWVySWRlbnRpdHlEYXRhIiwgIlBvaW50ZXJFdmVudHNSZXN1bHQiLCAiUmVhbG1JbmZvIiwgIlRleHRTaGFwZSIsICJWaXNpYmlsaXR5Q29tcG9uZW50IiwgIkNhbWVyYVR5cGUiLCAiSW5wdXRBY3Rpb24iLCAiUG9pbnRlckV2ZW50VHlwZSIsICJMb2FkaW5nU3RhdGUiLCAiVGV4dEFsaWduTW9kZSIsICJGb250IiwgImVuZ2luZSIsICJFbnRpdHlNYXBwaW5nTW9kZSIsICJlbmdpbmUiLCAiY29tcG9zaXRlUHJvdmlkZXIiLCAiaW1wb3J0X21pbmltYWwiLCAiaW1wb3J0X21pbmltYWwiLCAiTnVsbFZhbHVlIiwgInRzUHJvdG9HbG9iYWxUaGlzIiwgIlN0cnVjdCIsICJfbTAiLCAibGVuZ3RoIiwgIlN0cnVjdF9GaWVsZHNFbnRyeSIsICJWYWx1ZSIsICJMaXN0VmFsdWUiLCAiQ29tcG9uZW50RGF0YSIsICJfbTAiLCAibGVuZ3RoIiwgImlzU2V0IiwgIkNvbXBvc2l0ZUNvbXBvbmVudCIsICJpc09iamVjdCIsICJDb21wb3NpdGVDb21wb25lbnRfRGF0YUVudHJ5IiwgIkNvbXBvc2l0ZURlZmluaXRpb24iLCAidHNQcm90b0dsb2JhbFRoaXMiLCAiQ29tcG9zaXRlIiwgImJ1ZmZlciIsICJlbmdpbmUiLCAiY29tcG9zaXRlUHJvdmlkZXIiLCAiVHJhbnNmb3JtIiwgIk1hdGVyaWFsIiwgIk1lc2hSZW5kZXJlciIsICJOYW1lIiwgIlNjYWxhciIsICJsZW5ndGgiLCAiVmVjdG9yMyIsICJhZGQiLCAic3VidHJhY3QiLCAibmVnYXRlIiwgImxlbmd0aCIsICJzY2FsZSIsICJjZW50ZXIiLCAiUXVhdGVybmlvbiIsICJ0b1N0cmluZyIsICJlcXVhbHMiLCAibXVsdGlwbHkiLCAiZGl2aWRlIiwgIlBsYW5lIiwgIlZlY3RvcjMiLCAiTWF0cml4IiwgInNlbGYiLCAic2NhbGUiLCAibSIsICJ0cmFuc2xhdGlvbiIsICJWZWN0b3IzIiwgIlF1YXRlcm5pb24iLCAiYWRkIiwgIm11bHRpcGx5IiwgImVxdWFscyIsICJRdWF0ZXJuaW9uIiwgImFkZCIsICJsZW5ndGgiLCAiVmVjdG9yMyIsICJtdWx0aXBseSIsICJzZWxmIiwgIlZlY3RvcjIiLCAiQ29sb3I0IiwgImFkZCIsICJzdWJ0cmFjdCIsICJzY2FsZSIsICJtdWx0aXBseSIsICJ0b1N0cmluZyIsICJDb2xvcjMiLCAidG9TdHJpbmciLCAiQ29sb3I0IiwgIm11bHRpcGx5IiwgImVxdWFscyIsICJzY2FsZSIsICJhZGQiLCAic3VidHJhY3QiLCAiR2x0ZkNvbnRhaW5lciIsICJUcmFuc2Zvcm0iLCAiVmVjdG9yMyIsICJWaXNpYmlsaXR5Q29tcG9uZW50IiwgIlZlY3RvcjMiLCAiREVCVUciLCAiREVCVUciLCAiVHJhbnNmb3JtIiwgIlZlY3RvcjMiLCAiUXVhdGVybmlvbiIsICJNZXNoUmVuZGVyZXIiLCAiTWF0ZXJpYWwiLCAiVGV4dFNoYXBlIiwgIkNvbG9yNCIsICJpbXBvcnRfRW5naW5lQXBpIiwgInJlbmRlcmVyVHJhbnNwb3J0IiwgImVuZ2luZSIsICJUcmFuc2Zvcm0iLCAiUGxheWVySWRlbnRpdHlEYXRhIiwgIkF2YXRhckVxdWlwcGVkRGF0YSIsICJBdmF0YXJCYXNlIiwgInBsYXllcnMiLCAic2VuZEJhdGNoIiwgInN1YnNjcmliZSIsICJSZWFsbUluZm8iLCAiUGxheWVySWRlbnRpdHlEYXRhIiwgIlBvaW50ZXJFdmVudHNSZXN1bHQiLCAiQXZhdGFyRW1vdGVDb21tYW5kIiwgIkF2YXRhckJhc2UiLCAiQXZhdGFyRXF1aXBwZWREYXRhIl0KfQo=
